#pragma once

#include "invoker.hpp"

namespace NETSHOPPING
{
	FORCEINLINE auto NET_GAMESERVER_USE_SERVER_TRANSACTIONS()
	{
		return invoker::invoke<BOOL, 0xC18CB5D7A27A2E00, 0xCD72E4>();
	}

	FORCEINLINE auto NET_GAMESERVER_CATALOG_ITEM_IS_VALID(const char* name)
	{
		return invoker::invoke<BOOL, 0xABE86AEC64720F91, 0xCD6EEC>(name);
	}

	FORCEINLINE auto NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(Hash hash)
	{
		return invoker::invoke<BOOL, 0x206AC354EB77B7FD, 0xCD6F10>(hash);
	}

	FORCEINLINE auto NET_GAMESERVER_GET_PRICE(Hash itemHash, Hash categoryHash, BOOL p2)
	{
		return invoker::invoke<int, 0xD2ACF01ED6E6D7C6, 0xCD7014>(itemHash, categoryHash, p2);
	}

	FORCEINLINE auto NET_GAMESERVER_CATALOG_IS_VALID()
	{
		return invoker::invoke<BOOL, 0xD79BEF4E08ED2183, 0xCD6EC8>();
	}

	FORCEINLINE auto NET_GAMESERVER_IS_CATALOG_CURRENT()
	{
		return invoker::invoke<BOOL, 0xB879CA89F967F26F, 0xCD7080>();
	}

	FORCEINLINE auto NET_GAMESERVER_GET_CATALOG_CLOUD_CRC()
	{
		return invoker::invoke<Hash, 0xAEC584629042017A, 0xCD7008>();
	}

	FORCEINLINE auto NET_GAMESERVER_REFRESH_SERVER_CATALOG()
	{
		return invoker::invoke<BOOL, 0xE9D0D38A52D47D12, 0xCD70DC>();
	}

	FORCEINLINE auto NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(int* state)
	{
		return invoker::invoke<BOOL, 0x851E914CBFC1A1DF, 0xCD70F8>(state);
	}

	FORCEINLINE auto NET_GAMESERVER_INIT_SESSION()
	{
		return invoker::invoke<BOOL, 0x8D45EE985CFA01DD, 0xCD7064>();
	}

	FORCEINLINE auto NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(int* p0)
	{
		return invoker::invoke<BOOL, 0x3727730B65065BB9, 0xCD711C>(p0);
	}

	FORCEINLINE auto NET_GAMESERVER_START_SESSION(int charSlot)
	{
		return invoker::invoke<BOOL, 0x837A06CA50CB0287, 0xCD71D0>(charSlot);
	}

	FORCEINLINE auto NET_GAMESERVER_START_SESSION_PENDING()
	{
		return invoker::invoke<BOOL, 0x53011E611CBE5D47, 0xCD71F4>();
	}

	FORCEINLINE auto NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(int* p0)
	{
		return invoker::invoke<BOOL, 0xA7237EFE46BDEC7B, 0xCD7164>(p0);
	}

	FORCEINLINE auto NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(int* p0)
	{
		return invoker::invoke<BOOL, 0x38C09A49FBCCE839, 0xCD7140>(p0);
	}

	FORCEINLINE auto NET_GAMESERVER_IS_SESSION_VALID(int charSlot)
	{
		return invoker::invoke<BOOL, 0x134EF45B578F4CCF, 0xCD70B8>(charSlot);
	}

	FORCEINLINE auto NET_GAMESERVER_CLEAR_SESSION(int p0)
	{
		return invoker::invoke<BOOL, 0x8C09D01F9FCC2827, 0xCD6F58>(p0);
	}

	FORCEINLINE auto NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(int charSlot)
	{
		return invoker::invoke<BOOL, 0x70ABB0748BDFB6BA, 0xCD7188>(charSlot);
	}

	FORCEINLINE auto NET_GAMESERVER_IS_SESSION_REFRESH_PENDING()
	{
		return invoker::invoke<BOOL, 0x34F31012FED51A0F, 0xCD709C>();
	}

	FORCEINLINE auto NET_GAMESERVER_START_SESSION_RESTART(BOOL inventory, BOOL playerbalance)
	{
		return invoker::invoke<BOOL, 0x31DC11BF434AF20B, 0xCD7210>(inventory, playerbalance);
	}

	FORCEINLINE auto NET_GAMESERVER_TRANSACTION_IN_PROGRESS()
	{
		return invoker::invoke<BOOL, 0xEBCF66C686AEBDCA, 0xCD7240>();
	}

	FORCEINLINE auto NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(int* p0, BOOL* p1)
	{
		return invoker::invoke<BOOL, 0x8A77EAFEB55D476D, 0xCD703C>(p0, p1);
	}

	FORCEINLINE auto NET_GAMESERVER_BASKET_START(int* transactionId, Hash categoryHash, Hash actionHash, int flags)
	{
		return invoker::invoke<BOOL, 0x5156B6B1D1CD58FE, 0xCD6E58>(transactionId, categoryHash, actionHash, flags);
	}

	FORCEINLINE auto NET_GAMESERVER_BASKET_END()
	{
		return invoker::invoke<BOOL, 0xD8EB47E09DFC393C, 0xCD6E04>();
	}

	FORCEINLINE auto NET_GAMESERVER_BASKET_IS_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x79EEE2067838CC59, 0xCD6E20>();
	}

	FORCEINLINE auto NET_GAMESERVER_BASKET_ADD_ITEM(Any* itemData, int quantity)
	{
		return invoker::invoke<BOOL, 0x5E8BF7E974BEA7D7, 0xCD6DB4>(itemData, quantity);
	}

	FORCEINLINE auto NET_GAMESERVER_BASKET_IS_FULL()
	{
		return invoker::invoke<BOOL, 0x8B61FD3426EC705D, 0xCD6E3C>();
	}

	FORCEINLINE auto NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(Any p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0x11FD21BA1B765FE2, 0xCD6DDC>(p0, p1);
	}

	FORCEINLINE auto NET_GAMESERVER_CHECKOUT_START(int transactionId)
	{
		return invoker::invoke<BOOL, 0x5F7C6361179DFFC4, 0xCD6F34>(transactionId);
	}

	FORCEINLINE auto NET_GAMESERVER_BEGIN_SERVICE(int* transactionId, Hash categoryHash, Hash itemHash, Hash actionTypeHash, int value, int flags)
	{
		return invoker::invoke<BOOL, 0x54BC5E0B6A29AE8A, 0xCD6E88>(transactionId, categoryHash, itemHash, actionTypeHash, value, flags);
	}

	FORCEINLINE auto NET_GAMESERVER_END_SERVICE(int transactionId)
	{
		return invoker::invoke<BOOL, 0x1FDE21A286357401, 0xCD6FE4>(transactionId);
	}

	FORCEINLINE auto NET_GAMESERVER_DELETE_CHARACTER(int slot, BOOL transfer, Hash reason)
	{
		return invoker::invoke<BOOL, 0xD1BAD83E70275AEB, 0xCD6F7C>(slot, transfer, reason);
	}

	FORCEINLINE auto NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS()
	{
		return invoker::invoke<int, 0x93693D93BD53ACB1, 0xCD6FAC>();
	}

	FORCEINLINE auto NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED()
	{
		return invoker::invoke<BOOL, 0x203607236413B185, 0xCD6FC8>();
	}

	FORCEINLINE auto NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(int charSlot, int amount)
	{
		return invoker::invoke<BOOL, 0x4F3198DEED415E95, 0xCD725C>(charSlot, amount);
	}

	FORCEINLINE auto NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(int charSlot, int amount)
	{
		return invoker::invoke<BOOL, 0xCFE92984BF3486D5, 0xCD72A0>(charSlot, amount);
	}

	FORCEINLINE auto NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS()
	{
		return invoker::invoke<int, 0x2B3725FC402B94A8, 0xCD72C8>();
	}

	FORCEINLINE auto NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS()
	{
		return invoker::invoke<int, 0x606408352C7741AD, 0xCD72C8>();
	}

	FORCEINLINE auto NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED()
	{
		return invoker::invoke<BOOL, 0x59E8FA762FB527C5, 0xCD7284>();
	}

	FORCEINLINE auto NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(int p0)
	{
		return invoker::invoke<BOOL, 0x1F4C0FAC35E805F4, 0xCD71AC>(p0);
	}

}
namespace PED
{
	FORCEINLINE auto CREATE_PED(int pedType, Hash modelHash, float x, float y, float z, float heading, BOOL isNetwork, BOOL bScriptHostPed)
	{
		return invoker::invoke<Ped, 0xB1DBFEB95C0EFB88, 0xCCD7BC>(pedType, modelHash, x, y, z, heading, isNetwork, bScriptHostPed);
	}

	FORCEINLINE auto DELETE_PED(Ped* ped)
	{
		return invoker::invoke<void, 0x734A9F4537A31459, 0xCCD9FC>(ped);
	}

	FORCEINLINE auto CLONE_PED(Ped ped, BOOL isNetwork, BOOL bScriptHostPed, BOOL copyHeadBlendFlag)
	{
		return invoker::invoke<Ped, 0xEA797D2F13BCD0AA, 0xCCD3E0>(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag);
	}

	FORCEINLINE auto CLONE_PED_ALT(Ped ped, BOOL isNetwork, BOOL bScriptHostPed, BOOL copyHeadBlendFlag, BOOL p4)
	{
		return invoker::invoke<Ped, 0x7486FF8F1B2245EA, 0xCCD41C>(ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, p4);
	}

	FORCEINLINE auto CLONE_PED_TO_TARGET(Ped ped, Ped targetPed)
	{
		return invoker::invoke<void, 0x4E719C7F4406EC93, 0xCCD460>(ped, targetPed);
	}

	FORCEINLINE auto CLONE_PED_TO_TARGET_ALT(Ped ped, Ped targetPed, BOOL p2)
	{
		return invoker::invoke<void, 0xCA1E369E8B71BF45, 0xCCD474>(ped, targetPed, p2);
	}

	FORCEINLINE auto IS_PED_IN_VEHICLE(Ped ped, Vehicle vehicle, BOOL atGetIn)
	{
		return invoker::invoke<BOOL, 0xCECDBB848D53DEB2, 0xCD1514>(ped, vehicle, atGetIn);
	}

	FORCEINLINE auto IS_PED_IN_MODEL(Ped ped, Hash modelHash)
	{
		return invoker::invoke<BOOL, 0x595DAC15F5513F9, 0xCD14C8>(ped, modelHash);
	}

	FORCEINLINE auto IS_PED_IN_ANY_VEHICLE(Ped ped, BOOL atGetIn)
	{
		return invoker::invoke<BOOL, 0x7F420695E3F776FB, 0xCD1394>(ped, atGetIn);
	}

	FORCEINLINE auto IS_COP_PED_IN_AREA_3D(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<BOOL, 0x59A8C2AB2084CAF7, 0xCD0904>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto IS_PED_INJURED(Ped ped)
	{
		return invoker::invoke<BOOL, 0x4FAFF4BCB7633475, 0xCD1274>(ped);
	}

	FORCEINLINE auto IS_PED_HURT(Ped ped)
	{
		return invoker::invoke<BOOL, 0xC00DCFE53DCBBABA, 0xCD1250>(ped);
	}

	FORCEINLINE auto IS_PED_FATALLY_INJURED(Ped ped)
	{
		return invoker::invoke<BOOL, 0xBFD01C2045360289, 0xCD1044>(ped);
	}

	FORCEINLINE auto IS_PED_DEAD_OR_DYING(Ped ped, BOOL p1)
	{
		return invoker::invoke<BOOL, 0x89568FA9A6BC0B4A, 0xCD0ED4>(ped, p1);
	}

	FORCEINLINE auto IS_CONVERSATION_PED_DEAD(Ped ped)
	{
		return invoker::invoke<BOOL, 0xBE65C2DD27AEFD7B, 0xCD08E0>(ped);
	}

	FORCEINLINE auto IS_PED_AIMING_FROM_COVER(Ped ped)
	{
		return invoker::invoke<BOOL, 0xF5327658CA9AF463, 0xCD0D5C>(ped);
	}

	FORCEINLINE auto IS_PED_RELOADING(Ped ped)
	{
		return invoker::invoke<BOOL, 0xC722DDBD6C3E86D7, 0xCD1828>(ped);
	}

	FORCEINLINE auto IS_PED_A_PLAYER(Ped ped)
	{
		return invoker::invoke<BOOL, 0x501EBB0523078750, 0xCD0D80>(ped);
	}

	FORCEINLINE auto CREATE_PED_INSIDE_VEHICLE(Vehicle vehicle, int pedType, Hash modelHash, int seat, BOOL isNetwork, BOOL bScriptHostPed)
	{
		return invoker::invoke<Ped, 0x8728A378EF2B46B2, 0xCCD804>(vehicle, pedType, modelHash, seat, isNetwork, bScriptHostPed);
	}

	FORCEINLINE auto SET_PED_DESIRED_HEADING(Ped ped, float heading)
	{
		return invoker::invoke<void, 0xFBF90D96AEB26BCF, 0xCD8FBC>(ped, heading);
	}

	FORCEINLINE auto FORCE_ALL_HEADING_VALUES_TO_ALIGN(Ped ped)
	{
		return invoker::invoke<void, 0xF62B077162F79BAA, 0xCCE00C>(ped);
	}

	FORCEINLINE auto IS_PED_FACING_PED(Ped ped, Ped otherPed, float angle)
	{
		return invoker::invoke<BOOL, 0x3644984C9D7B57EF, 0xCD0FF4>(ped, otherPed, angle);
	}

	FORCEINLINE auto IS_PED_IN_MELEE_COMBAT(Ped ped)
	{
		return invoker::invoke<BOOL, 0xFFAC548682B3D56E, 0xCD14A4>(ped);
	}

	FORCEINLINE auto IS_PED_STOPPED(Ped ped)
	{
		return invoker::invoke<BOOL, 0xD9CCFCDF70474932, 0xCD1A08>(ped);
	}

	FORCEINLINE auto IS_PED_SHOOTING_IN_AREA(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, BOOL p7, BOOL p8)
	{
		return invoker::invoke<BOOL, 0x6051CE9D47B0B904, 0xCD197C>(ped, x1, y1, z1, x2, y2, z2, p7, p8);
	}

	FORCEINLINE auto IS_ANY_PED_SHOOTING_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL p6, BOOL p7)
	{
		return invoker::invoke<BOOL, 0x68C0C5563ECBBAB6, 0xCD0794>(x1, y1, z1, x2, y2, z2, p6, p7);
	}

	FORCEINLINE auto IS_PED_SHOOTING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x65F146FF416F109F, 0xCD1958>(ped);
	}

	FORCEINLINE auto SET_PED_ACCURACY(Ped ped, int accuracy)
	{
		return invoker::invoke<void, 0xC652B7E19CE29859, 0xCD88C8>(ped, accuracy);
	}

	FORCEINLINE auto GET_PED_ACCURACY(Ped ped)
	{
		return invoker::invoke<int, 0xF558A1138519E6F6, 0xCCEF14>(ped);
	}

	FORCEINLINE auto SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(float multiplier)
	{
		return invoker::invoke<void, 0xEDC191D9E24A6A2D, 0xCD7D58>(multiplier);
	}

	FORCEINLINE auto IS_PED_MODEL(Ped ped, Hash modelHash)
	{
		return invoker::invoke<BOOL, 0x700C28A639389477, 0xCD1640>(ped, modelHash);
	}

	FORCEINLINE auto EXPLODE_PED_HEAD(Ped ped, Hash weaponHash)
	{
		return invoker::invoke<void, 0xB958FAC3AA36D900, 0xCCDF40>(ped, weaponHash);
	}

	FORCEINLINE auto REMOVE_PED_ELEGANTLY(Ped* ped)
	{
		return invoker::invoke<void, 0x77870665080C9E81, 0xCD76C0>(ped);
	}

	FORCEINLINE auto ADD_ARMOUR_TO_PED(Ped ped, int amount)
	{
		return invoker::invoke<void, 0x2E20E7B6C4BBA61D, 0xCCC7CC>(ped, amount);
	}

	FORCEINLINE auto SET_PED_ARMOUR(Ped ped, int amount)
	{
		return invoker::invoke<void, 0x10A676E622A468AA, 0xCD8A0C>(ped, amount);
	}

	FORCEINLINE auto SET_PED_INTO_VEHICLE(Ped ped, Vehicle vehicle, int seatIndex)
	{
		return invoker::invoke<void, 0x73CAFD2038E812B3, 0xCD92D8>(ped, vehicle, seatIndex);
	}

	FORCEINLINE auto SET_PED_ALLOW_VEHICLES_OVERRIDE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x9A74653FD0288BAB, 0xCD893C>(ped, toggle);
	}

	FORCEINLINE auto CAN_CREATE_RANDOM_PED(BOOL p0)
	{
		return invoker::invoke<BOOL, 0x5E0FF86EB887D780, 0xCCCDA8>(p0);
	}

	FORCEINLINE auto CREATE_RANDOM_PED(float posX, float posY, float posZ)
	{
		return invoker::invoke<Ped, 0x7F179394883885FA, 0xCCD918>(posX, posY, posZ);
	}

	FORCEINLINE auto CREATE_RANDOM_PED_AS_DRIVER(Vehicle vehicle, BOOL returnHandle)
	{
		return invoker::invoke<Ped, 0x3CD322135CF08E09, 0xCCD938>(vehicle, returnHandle);
	}

	FORCEINLINE auto CAN_CREATE_RANDOM_DRIVER()
	{
		return invoker::invoke<BOOL, 0x70BB2517035D5D12, 0xCCCD8C>();
	}

	FORCEINLINE auto CAN_CREATE_RANDOM_BIKE_RIDER()
	{
		return invoker::invoke<BOOL, 0x60E0AE8EF70F606A, 0xCCCD54>();
	}

	FORCEINLINE auto SET_PED_MOVE_ANIMS_BLEND_OUT(Ped ped)
	{
		return invoker::invoke<void, 0x6EC1B5B2C6C31862, 0xCD9460>(ped);
	}

	FORCEINLINE auto SET_PED_CAN_BE_DRAGGED_OUT(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x1537AF7B62B52EB1, 0xCD8AD4>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(BOOL toggle)
	{
		return invoker::invoke<void, 0x75B4FDDCE5B4C969, 0xCD8918>(toggle);
	}

	FORCEINLINE auto IS_PED_MALE(Ped ped)
	{
		return invoker::invoke<BOOL, 0xB98B1A5B59BC5065, 0xCD161C>(ped);
	}

	FORCEINLINE auto IS_PED_HUMAN(Ped ped)
	{
		return invoker::invoke<BOOL, 0x26A004F4BA50E71C, 0xCD122C>(ped);
	}

	FORCEINLINE auto GET_VEHICLE_PED_IS_IN(Ped ped, BOOL includeEntering)
	{
		return invoker::invoke<Vehicle, 0x6EF03BE64E058E2F, 0xCD01B8>(ped, includeEntering);
	}

	FORCEINLINE auto RESET_PED_LAST_VEHICLE(Ped ped)
	{
		return invoker::invoke<void, 0x61BB4B7411E1DF82, 0xCD79A8>(ped);
	}

	FORCEINLINE auto SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
	{
		return invoker::invoke<void, 0xF9A2335AB37CF17E, 0xCD8FAC>(multiplier);
	}

	FORCEINLINE auto SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(float p0, float p1)
	{
		return invoker::invoke<void, 0x397A00D015A11D4, 0xCDA404>(p0, p1);
	}

	FORCEINLINE auto SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME()
	{
		return invoker::invoke<void, 0x94D0F337C46797FB, 0xCDAA80>();
	}

	FORCEINLINE auto SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(float x, float y, float z)
	{
		return invoker::invoke<void, 0x2A5514EA88DA4DC4, 0xCDA448>(x, y, z);
	}

	FORCEINLINE auto SET_PED_NON_CREATION_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<void, 0x89C4F1335B4A6633, 0xCD94A0>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto CLEAR_PED_NON_CREATION_AREA()
	{
		return invoker::invoke<void, 0x93586F94C370857F, 0xCCD2B8>();
	}

	FORCEINLINE auto INSTANTLY_FILL_PED_POPULATION()
	{
		return invoker::invoke<void, 0x337117D37E592B05, 0xCD06C4>();
	}

	FORCEINLINE auto IS_PED_ON_MOUNT(Ped ped)
	{
		return invoker::invoke<BOOL, 0x1BAABBB7277FCD90, 0xCD16B0>(ped);
	}

	FORCEINLINE auto GET_MOUNT(Ped ped)
	{
		return invoker::invoke<Ped, 0x92875FEB15AFF7C7, 0xCD16B0>(ped);
	}

	FORCEINLINE auto IS_PED_ON_VEHICLE(Ped ped)
	{
		return invoker::invoke<BOOL, 0x92D9D3367234ABE7, 0xCD16F8>(ped);
	}

	FORCEINLINE auto IS_PED_ON_SPECIFIC_VEHICLE(Ped ped, Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x6A89FD77560DE959, 0xCD16D0>(ped, vehicle);
	}

	FORCEINLINE auto SET_PED_MONEY(Ped ped, int amount)
	{
		return invoker::invoke<void, 0x886FA295C1257AAA, 0xCD9418>(ped, amount);
	}

	FORCEINLINE auto GET_PED_MONEY(Ped ped)
	{
		return invoker::invoke<int, 0x6E01C40ECE96D208, 0xCCF438>(ped);
	}

	FORCEINLINE auto SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(float p0, Any p1)
	{
		return invoker::invoke<void, 0x4AD0013B427A98CA, 0xCD832C>(p0, p1);
	}

	FORCEINLINE auto SET_AMBIENT_PEDS_DROP_MONEY(BOOL p0)
	{
		return invoker::invoke<void, 0xB715358D51663C7A, 0xCD7D7C>(p0);
	}

	FORCEINLINE auto _SET_BLOCK_AMBIENT_PEDS_FROM_DROPPING_WEAPONS_THIS_FRAME()
	{
		return invoker::invoke<void, 0xC73EFFC5E043A8BA, 0xCD7DD4>();
	}

	FORCEINLINE auto SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(BOOL p0)
	{
		return invoker::invoke<void, 0x9288ABAC1FCB4745, 0xCD7DF0>(p0);
	}

	FORCEINLINE auto SET_PED_SUFFERS_CRITICAL_HITS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xE915224DCA36212A, 0xCD98E4>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_UPPER_BODY_DAMAGE_ONLY(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xEFD4518EFFDFB602, 0xCD9A40>(ped, toggle);
	}

	FORCEINLINE auto IS_PED_SITTING_IN_VEHICLE(Ped ped, Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xF4244288C3EF3306, 0xCD19E0>(ped, vehicle);
	}

	FORCEINLINE auto IS_PED_SITTING_IN_ANY_VEHICLE(Ped ped)
	{
		return invoker::invoke<BOOL, 0x27E68848F0E5D7D9, 0xCD19BC>(ped);
	}

	FORCEINLINE auto IS_PED_ON_FOOT(Ped ped)
	{
		return invoker::invoke<BOOL, 0x5B3431FA66D59A4C, 0xCD168C>(ped);
	}

	FORCEINLINE auto IS_PED_ON_ANY_BIKE(Ped ped)
	{
		return invoker::invoke<BOOL, 0xFFEFA49356BD7CA2, 0xCD1668>(ped);
	}

	FORCEINLINE auto IS_PED_PLANTING_BOMB(Ped ped)
	{
		return invoker::invoke<BOOL, 0x74CD4FE549433E92, 0xCD17AC>(ped);
	}

	FORCEINLINE auto GET_DEAD_PED_PICKUP_COORDS(Ped ped, float p1, float p2)
	{
		return invoker::invoke<Vector3, 0x240E88FB0B8CC932, 0xCCE5FC>(ped, p1, p2);
	}

	FORCEINLINE auto IS_PED_IN_ANY_BOAT(Ped ped)
	{
		return invoker::invoke<BOOL, 0xE70AAE8EBF7D65BD, 0xCD1298>(ped);
	}

	FORCEINLINE auto IS_PED_IN_ANY_SUB(Ped ped)
	{
		return invoker::invoke<BOOL, 0x483232F244CDBFC6, 0xCD1328>(ped);
	}

	FORCEINLINE auto IS_PED_IN_ANY_HELI(Ped ped)
	{
		return invoker::invoke<BOOL, 0xFE90F09EC43D7D44, 0xCD12BC>(ped);
	}

	FORCEINLINE auto IS_PED_IN_ANY_PLANE(Ped ped)
	{
		return invoker::invoke<BOOL, 0xC5F2281709805477, 0xCD12E0>(ped);
	}

	FORCEINLINE auto IS_PED_IN_FLYING_VEHICLE(Ped ped)
	{
		return invoker::invoke<BOOL, 0x1F7A48429F9F64CE, 0xCD1438>(ped);
	}

	FORCEINLINE auto SET_PED_DIES_IN_WATER(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x34A9A872D3C510BF, 0xCD9008>(ped, toggle);
	}

	FORCEINLINE auto GET_PED_DIES_IN_WATER(Ped ped)
	{
		return invoker::invoke<BOOL, 0x9EA69973FD5ABBBD, 0xCCF1B4>(ped);
	}

	FORCEINLINE auto SET_PED_DIES_IN_SINKING_VEHICLE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xA39E0AA2C6BBD52E, 0xCD8FE0>(ped, toggle);
	}

	FORCEINLINE auto GET_PED_ARMOUR(Ped ped)
	{
		return invoker::invoke<int, 0xE5E6F6EFCE07789A, 0xCCEF54>(ped);
	}

	FORCEINLINE auto SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x3CDDF07147FB8B6F, 0xCD9828>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_BE_SHOT_IN_VEHICLE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x9C18DF7FC19D843C, 0xCD8AF8>(ped, toggle);
	}

	FORCEINLINE auto GET_PED_LAST_DAMAGE_BONE(Ped ped, int* outBone)
	{
		return invoker::invoke<BOOL, 0xB76C3F86B744BBA5, 0xCCF3C8>(ped, outBone);
	}

	FORCEINLINE auto CLEAR_PED_LAST_DAMAGE_BONE(Ped ped)
	{
		return invoker::invoke<void, 0xCBCBAEEB5BBCA58A, 0xCCD2A0>(ped);
	}

	FORCEINLINE auto SET_AI_WEAPON_DAMAGE_MODIFIER(float value)
	{
		return invoker::invoke<void, 0x36978A351E9CB5D8, 0xCD7CA0>(value);
	}

	FORCEINLINE auto RESET_AI_WEAPON_DAMAGE_MODIFIER()
	{
		return invoker::invoke<void, 0xDD84F9C956E69AC8, 0xCD7948>();
	}

	FORCEINLINE auto SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(float modifier)
	{
		return invoker::invoke<void, 0x767EC66D239AED1D, 0xCD7C8C>(modifier);
	}

	FORCEINLINE auto RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER()
	{
		return invoker::invoke<void, 0x1B722A2B2026558, 0xCD7934>();
	}

	FORCEINLINE auto SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0x941975834A0817, 0xCDA59C>(ped, p1);
	}

	FORCEINLINE auto SET_PED_CAN_BE_TARGETTED(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x3F58BFCF656F0DF1, 0xCD8B34>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_BE_TARGETTED_BY_TEAM(Ped ped, int team, BOOL toggle)
	{
		return invoker::invoke<void, 0x6A17FC9B41F35458, 0xCD8B60>(ped, team, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_BE_TARGETTED_BY_PLAYER(Ped ped, Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xF861636AF1D2D3D2, 0xCD8B48>(ped, player, toggle);
	}

	FORCEINLINE auto SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x7D2CC3BDBE189210, 0xCD7CB4>(ped, toggle);
	}

	FORCEINLINE auto SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x476AD3ABB8EA8A58, 0xCDA5C0>(ped, toggle);
	}

	FORCEINLINE auto IS_PED_IN_ANY_POLICE_VEHICLE(Ped ped)
	{
		return invoker::invoke<BOOL, 0x84F50401806477CE, 0xCD1304>(ped);
	}

	FORCEINLINE auto FORCE_PED_TO_OPEN_PARACHUTE(Ped ped)
	{
		return invoker::invoke<void, 0x5A816292AD6929DF, 0xCCE0AC>(ped);
	}

	FORCEINLINE auto IS_PED_IN_PARACHUTE_FREE_FALL(Ped ped)
	{
		return invoker::invoke<BOOL, 0x333554781C7582D7, 0xCD14F0>(ped);
	}

	FORCEINLINE auto IS_PED_FALLING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x9857C978BD3CBEDA, 0xCD1020>(ped);
	}

	FORCEINLINE auto IS_PED_JUMPING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x2C807E70DCB4BB36, 0xCD1568>(ped);
	}

	FORCEINLINE auto IS_PED_LANDING(Any p0)
	{
		return invoker::invoke<BOOL, 0x285B49B5EF71E8ED, 0xCD15B0>(p0);
	}

	FORCEINLINE auto IS_PED_DOING_A_BEAST_JUMP(Any p0)
	{
		return invoker::invoke<BOOL, 0xC77607B4F69D0DFD, 0xCD0F50>(p0);
	}

	FORCEINLINE auto IS_PED_CLIMBING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x7CB06BFD42FB0E24, 0xCD0E80>(ped);
	}

	FORCEINLINE auto IS_PED_VAULTING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x75B105C651D87D0E, 0xCD1BB4>(ped);
	}

	FORCEINLINE auto IS_PED_DIVING(Ped ped)
	{
		return invoker::invoke<BOOL, 0xCD80FA7E842E5CA9, 0xCD0F2C>(ped);
	}

	FORCEINLINE auto IS_PED_JUMPING_OUT_OF_VEHICLE(Ped ped)
	{
		return invoker::invoke<BOOL, 0xE7895DBF72C7F282, 0xCD158C>(ped);
	}

	FORCEINLINE auto IS_PED_OPENING_DOOR(Ped ped)
	{
		return invoker::invoke<BOOL, 0xB16071F8F0F2A561, 0xCD171C>(ped);
	}

	FORCEINLINE auto GET_PED_PARACHUTE_STATE(Ped ped)
	{
		return invoker::invoke<int, 0x57E7FD3BD6BB28C0, 0xCCF514>(ped);
	}

	FORCEINLINE auto GET_PED_PARACHUTE_LANDING_TYPE(Ped ped)
	{
		return invoker::invoke<int, 0x2621F11E556C9703, 0xCCF4F4>(ped);
	}

	FORCEINLINE auto SET_PED_PARACHUTE_TINT_INDEX(Ped ped, int tintIndex)
	{
		return invoker::invoke<void, 0xD23AAC1FA1C1571E, 0xCD94E4>(ped, tintIndex);
	}

	FORCEINLINE auto GET_PED_PARACHUTE_TINT_INDEX(Ped ped, int* outTintIndex)
	{
		return invoker::invoke<void, 0x651A46CD4EAC23F3, 0xCCF534>(ped, outTintIndex);
	}

	FORCEINLINE auto SET_PED_RESERVE_PARACHUTE_TINT_INDEX(Ped ped, Any p1)
	{
		return invoker::invoke<void, 0x68D0A76A580AC47D, 0xCD96B0>(ped, p1);
	}

	FORCEINLINE auto CREATE_PARACHUTE_BAG_OBJECT(Ped ped, BOOL p1, BOOL p2)
	{
		return invoker::invoke<Object, 0xF3DC3DD7A741C1D5, 0xCCD78C>(ped, p1, p2);
	}

	FORCEINLINE auto SET_PED_DUCKING(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xD0B00571D4BDDC97, 0xCD9040>(ped, toggle);
	}

	FORCEINLINE auto IS_PED_DUCKING(Ped ped)
	{
		return invoker::invoke<BOOL, 0xDC91B9320E14F119, 0xCD0F98>(ped);
	}

	FORCEINLINE auto IS_PED_IN_ANY_TAXI(Ped ped)
	{
		return invoker::invoke<BOOL, 0xF00017BC718D851, 0xCD134C>(ped);
	}

	FORCEINLINE auto SET_PED_ID_RANGE(Ped ped, float value)
	{
		return invoker::invoke<void, 0xC45887CFF81A1950, 0xCD92AC>(ped, value);
	}

	FORCEINLINE auto SET_PED_HIGHLY_PERCEPTIVE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xCAF62AAD9CA7C260, 0xCD927C>(ped, toggle);
	}

	FORCEINLINE auto SET_COP_PERCEPTION_OVERRIDES(float seeingRange, float seeingRangePeripheral, float hearingRange, float visualFieldMinAzimuthAngle, float visualFieldMaxAzimuthAngle, float fieldOfGazeMaxAngle, float p6)
	{
		return invoker::invoke<void, 0xF4B325151D7AC09F, 0xCD7EB4>(seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, p6);
	}

	FORCEINLINE auto SET_PED_INJURED_ON_GROUND_BEHAVIOUR(Ped ped, float p1)
	{
		return invoker::invoke<void, 0x7D6A73BC9D136D34, 0xCD92C8>(ped, p1);
	}

	FORCEINLINE auto DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(Ped ped)
	{
		return invoker::invoke<void, 0x75DACB7D11C3CEF4, 0xCCDAEC>(ped);
	}

	FORCEINLINE auto SET_PED_SEEING_RANGE(Ped ped, float value)
	{
		return invoker::invoke<void, 0x25DBF9F9C6BDFFEA, 0xCD9718>(ped, value);
	}

	FORCEINLINE auto SET_PED_HEARING_RANGE(Ped ped, float value)
	{
		return invoker::invoke<void, 0x35365D1E3ADB7109, 0xCD91F4>(ped, value);
	}

	FORCEINLINE auto SET_PED_VISUAL_FIELD_MIN_ANGLE(Ped ped, float value)
	{
		return invoker::invoke<void, 0x3C7306C2CE967C57, 0xCD9ACC>(ped, value);
	}

	FORCEINLINE auto SET_PED_VISUAL_FIELD_MAX_ANGLE(Ped ped, float value)
	{
		return invoker::invoke<void, 0xC8DEC2468E748263, 0xCD9AAC>(ped, value);
	}

	FORCEINLINE auto SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(Ped ped, float angle)
	{
		return invoker::invoke<void, 0xA5D7DCF7BE7B181D, 0xCD9ADC>(ped, angle);
	}

	FORCEINLINE auto SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(Ped ped, float angle)
	{
		return invoker::invoke<void, 0xD1DDDDB8B108DF01, 0xCD9ABC>(ped, angle);
	}

	FORCEINLINE auto SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(Ped ped, float range)
	{
		return invoker::invoke<void, 0xAF30637CFE0F3A89, 0xCD9AEC>(ped, range);
	}

	FORCEINLINE auto SET_PED_VISUAL_FIELD_CENTER_ANGLE(Ped ped, float angle)
	{
		return invoker::invoke<void, 0xA6102F762BBA9BC9, 0xCD9A9C>(ped, angle);
	}

	FORCEINLINE auto GET_PED_VISUAL_FIELD_CENTER_ANGLE(Ped ped)
	{
		return invoker::invoke<float, 0x70101B2986BB6AB2, 0xCCF72C>(ped);
	}

	FORCEINLINE auto SET_PED_STEALTH_MOVEMENT(Ped ped, BOOL p1, const char* action)
	{
		return invoker::invoke<void, 0xF9358C41CC69C616, 0xCD983C>(ped, p1, action);
	}

	FORCEINLINE auto GET_PED_STEALTH_MOVEMENT(Ped ped)
	{
		return invoker::invoke<BOOL, 0xC2BF1F6F84E31EB2, 0xCCF64C>(ped);
	}

	FORCEINLINE auto CREATE_GROUP(int unused)
	{
		return invoker::invoke<int, 0xAE734C5C560DD787, 0xCCD620>(unused);
	}

	FORCEINLINE auto SET_PED_AS_GROUP_LEADER(Ped ped, int groupId)
	{
		return invoker::invoke<void, 0xFF7B703047EDEC8F, 0xCD8A44>(ped, groupId);
	}

	FORCEINLINE auto SET_PED_AS_GROUP_MEMBER(Ped ped, int groupId)
	{
		return invoker::invoke<void, 0x3AB73582A77DBD3, 0xCD8A54>(ped, groupId);
	}

	FORCEINLINE auto SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(Ped pedHandle, int groupHandle, BOOL toggle)
	{
		return invoker::invoke<void, 0x2D8E4004BC147E7E, 0xCD8CB4>(pedHandle, groupHandle, toggle);
	}

	FORCEINLINE auto REMOVE_GROUP(int groupId)
	{
		return invoker::invoke<void, 0x94CC4CA44256FDCB, 0xCD7658>(groupId);
	}

	FORCEINLINE auto REMOVE_PED_FROM_GROUP(Ped ped)
	{
		return invoker::invoke<void, 0x5C4B3034CCDA5270, 0xCD76CC>(ped);
	}

	FORCEINLINE auto IS_PED_GROUP_MEMBER(Ped ped, int groupId)
	{
		return invoker::invoke<BOOL, 0xD11A63E12F198FDB, 0xCD10F8>(ped, groupId);
	}

	FORCEINLINE auto IS_PED_HANGING_ON_TO_VEHICLE(Ped ped)
	{
		return invoker::invoke<BOOL, 0xC3174723CF144560, 0xCD1168>(ped);
	}

	FORCEINLINE auto SET_GROUP_SEPARATION_RANGE(int groupHandle, float separationRange)
	{
		return invoker::invoke<void, 0x316802E03D8923D8, 0xCD82C4>(groupHandle, separationRange);
	}

	FORCEINLINE auto SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(Ped ped, int ms)
	{
		return invoker::invoke<void, 0xFED960E0DE07E343, 0xCD93CC>(ped, ms);
	}

	FORCEINLINE auto IS_PED_PRONE(Ped ped)
	{
		return invoker::invoke<BOOL, 0x78174817EDF226B3, 0xCD17D0>(ped);
	}

	FORCEINLINE auto IS_PED_IN_COMBAT(Ped ped, Ped target)
	{
		return invoker::invoke<BOOL, 0x1B32E388988DD296, 0xCD13C0>(ped, target);
	}

	FORCEINLINE auto GET_PED_TARGET_FROM_COMBAT_PED(Ped ped, Any p1)
	{
		return invoker::invoke<Entity, 0x11330C43B3678209, 0xCCF680>(ped, p1);
	}

	FORCEINLINE auto CAN_PED_IN_COMBAT_SEE_TARGET(Ped ped, Ped target)
	{
		return invoker::invoke<BOOL, 0xB8CCCA6CFFCE7734, 0xCCCE18>(ped, target);
	}

	FORCEINLINE auto IS_PED_DOING_DRIVEBY(Ped ped)
	{
		return invoker::invoke<BOOL, 0xB29E06D8C7B733E6, 0xCD0F74>(ped);
	}

	FORCEINLINE auto IS_PED_JACKING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x49CB27F641DC1328, 0xCD1544>(ped);
	}

	FORCEINLINE auto IS_PED_BEING_JACKED(Ped ped)
	{
		return invoker::invoke<BOOL, 0xA6534E6C7AE314D6, 0xCD0DA4>(ped);
	}

	FORCEINLINE auto IS_PED_BEING_STUNNED(Ped ped, int p1)
	{
		return invoker::invoke<BOOL, 0x11BF418D1AFD7970, 0xCD0DEC>(ped, p1);
	}

	FORCEINLINE auto GET_PEDS_JACKER(Ped ped)
	{
		return invoker::invoke<Ped, 0xC1089D3918F03D33, 0xCCEEF4>(ped);
	}

	FORCEINLINE auto GET_JACK_TARGET(Ped ped)
	{
		return invoker::invoke<Ped, 0x3DEAB4931240C1E3, 0xCCE974>(ped);
	}

	FORCEINLINE auto IS_PED_FLEEING(Ped ped)
	{
		return invoker::invoke<BOOL, 0xCA038E64C65D1F9D, 0xCD1068>(ped);
	}

	FORCEINLINE auto IS_PED_IN_COVER(Ped ped, BOOL exceptUseWeapon)
	{
		return invoker::invoke<BOOL, 0xD6179D448A06A77F, 0xCD13E8>(ped, exceptUseWeapon);
	}

	FORCEINLINE auto IS_PED_IN_COVER_FACING_LEFT(Ped ped)
	{
		return invoker::invoke<BOOL, 0xC0BE0D29628A246A, 0xCD1414>(ped);
	}

	FORCEINLINE auto IS_PED_IN_HIGH_COVER(Ped ped)
	{
		return invoker::invoke<BOOL, 0xFAD234E6A6D853B1, 0xCD1480>(ped);
	}

	FORCEINLINE auto IS_PED_GOING_INTO_COVER(Ped ped)
	{
		return invoker::invoke<BOOL, 0x3F055D2CBA242A5D, 0xCD10D4>(ped);
	}

	FORCEINLINE auto SET_PED_PINNED_DOWN(Ped ped, BOOL pinned, int i)
	{
		return invoker::invoke<BOOL, 0x97FBC735CAFB56C8, 0xCD9570>(ped, pinned, i);
	}

	FORCEINLINE auto _HAS_PED_CLEAR_LOS_TO_ENTITY(Ped ped, Entity entity, float x, float y, float z, int p5, BOOL p6, BOOL p7)
	{
		return invoker::invoke<BOOL, 0xA32ABFEB2A03B306, 0xCD0458>(ped, entity, x, y, z, p5, p6, p7);
	}

	FORCEINLINE auto GET_SEAT_PED_IS_TRYING_TO_ENTER(Ped ped)
	{
		return invoker::invoke<int, 0x3603B0046EE6ACD, 0xCCFE64>(ped);
	}

	FORCEINLINE auto GET_VEHICLE_PED_IS_TRYING_TO_ENTER(Ped ped)
	{
		return invoker::invoke<Vehicle, 0xF9F8E3060F7CAEDB, 0xCD01E0>(ped);
	}

	FORCEINLINE auto GET_PED_SOURCE_OF_DEATH(Ped ped)
	{
		return invoker::invoke<Entity, 0x836392D80E4F106A, 0xCCF62C>(ped);
	}

	FORCEINLINE auto GET_PED_CAUSE_OF_DEATH(Ped ped)
	{
		return invoker::invoke<Hash, 0x6D7C109F77738F39, 0xCCF040>(ped);
	}

	FORCEINLINE auto GET_PED_TIME_OF_DEATH(Ped ped)
	{
		return invoker::invoke<int, 0x1F4CEA172C882694, 0xCCF6CC>(ped);
	}

	FORCEINLINE auto COUNT_PEDS_IN_COMBAT_WITH_TARGET(Ped ped)
	{
		return invoker::invoke<int, 0x8B5EECBB010D0C63, 0xCCD58C>(ped);
	}

	FORCEINLINE auto COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(Ped ped, float x, float y, float z, float radius)
	{
		return invoker::invoke<int, 0xF483865E4C02C371, 0xCCD5AC>(ped, x, y, z, radius);
	}

	FORCEINLINE auto SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(Ped ped, Hash hash)
	{
		return invoker::invoke<void, 0x17ABD7A8B101AF83, 0xCD9690>(ped, hash);
	}

	FORCEINLINE auto SET_PED_RELATIONSHIP_GROUP_HASH(Ped ped, Hash hash)
	{
		return invoker::invoke<void, 0x3CEA1FD137ACE2D9, 0xCD96A0>(ped, hash);
	}

	FORCEINLINE auto SET_RELATIONSHIP_BETWEEN_GROUPS(int relationship, Hash group1, Hash group2)
	{
		return invoker::invoke<void, 0xD414C47AFF81382A, 0xCDA2E0>(relationship, group1, group2);
	}

	FORCEINLINE auto CLEAR_RELATIONSHIP_BETWEEN_GROUPS(int relationship, Hash group1, Hash group2)
	{
		return invoker::invoke<void, 0x40D1AAC4EFD3C281, 0xCCD3CC>(relationship, group1, group2);
	}

	FORCEINLINE auto ADD_RELATIONSHIP_GROUP(const char* name, Hash* groupHash)
	{
		return invoker::invoke<BOOL, 0x6CD913C241C765E, 0xCCC8BC>(name, groupHash);
	}

	FORCEINLINE auto REMOVE_RELATIONSHIP_GROUP(Hash groupHash)
	{
		return invoker::invoke<void, 0x2B1BDC32466B40A9, 0xCD7728>(groupHash);
	}

	FORCEINLINE auto DOES_RELATIONSHIP_GROUP_EXIST(Hash groupHash)
	{
		return invoker::invoke<BOOL, 0xB2AE1A67479A5AF3, 0xCCDC80>(groupHash);
	}

	FORCEINLINE auto GET_RELATIONSHIP_BETWEEN_PEDS(Ped ped1, Ped ped2)
	{
		return invoker::invoke<int, 0x1E37AEC038A241A3, 0xCCFCB4>(ped1, ped2);
	}

	FORCEINLINE auto GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(Ped ped)
	{
		return invoker::invoke<Hash, 0x4001C3C533FE6925, 0xCCF5C4>(ped);
	}

	FORCEINLINE auto GET_PED_RELATIONSHIP_GROUP_HASH(Ped ped)
	{
		return invoker::invoke<Hash, 0x2A661A0285B74A27, 0xCCF5E4>(ped);
	}

	FORCEINLINE auto GET_RELATIONSHIP_BETWEEN_GROUPS(Hash group1, Hash group2)
	{
		return invoker::invoke<int, 0x48553DADAD2512F, 0xCCFC90>(group1, group2);
	}

	FORCEINLINE auto SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(Hash group, BOOL p1)
	{
		return invoker::invoke<void, 0x290573EE8D28208D, 0xCDA2F4>(group, p1);
	}

	FORCEINLINE auto TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(Ped ped, Any p1, float p2, Hash hash, Any p4, Any p5)
	{
		return invoker::invoke<void, 0xC0343109FF76497E, 0xCDAAEC>(ped, p1, p2, hash, p4, p5);
	}

	FORCEINLINE auto SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x89C101B2B73350C7, 0xCD8B20>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_TO_INFORM_RESPECTED_FRIENDS(Ped ped, float radius, int maxFriends)
	{
		return invoker::invoke<void, 0xDC914F868C070C56, 0xCD9954>(ped, radius, maxFriends);
	}

	FORCEINLINE auto IS_PED_RESPONDING_TO_EVENT(Ped ped, Any event)
	{
		return invoker::invoke<BOOL, 0x81ECDD5A759C026D, 0xCD185C>(ped, event);
	}

	FORCEINLINE auto GET_POS_FROM_FIRED_EVENT(Ped ped, int eventType, Any* outData)
	{
		return invoker::invoke<BOOL, 0x6B7357A27B4D68F1, 0xCCFBFC>(ped, eventType, outData);
	}

	FORCEINLINE auto SET_PED_FIRING_PATTERN(Ped ped, Hash patternHash)
	{
		return invoker::invoke<void, 0x675B6F5098262382, 0xCD90E0>(ped, patternHash);
	}

	FORCEINLINE auto SET_PED_SHOOT_RATE(Ped ped, int shootRate)
	{
		return invoker::invoke<void, 0x39256A89E9D7464A, 0xCD9740>(ped, shootRate);
	}

	FORCEINLINE auto SET_COMBAT_FLOAT(Ped ped, int combatType, float p2)
	{
		return invoker::invoke<void, 0xC3AD0E1324FB3465, 0xCD7E38>(ped, combatType, p2);
	}

	FORCEINLINE auto GET_COMBAT_FLOAT(Ped ped, int p1)
	{
		return invoker::invoke<float, 0x34DE92FC6933B92B, 0xCCE420>(ped, p1);
	}

	FORCEINLINE auto GET_GROUP_SIZE(int groupID, Any* p1, int* sizeInMembers)
	{
		return invoker::invoke<void, 0xE6E9D3B5BEFF0EB3, 0xCCE7AC>(groupID, p1, sizeInMembers);
	}

	FORCEINLINE auto DOES_GROUP_EXIST(int groupId)
	{
		return invoker::invoke<BOOL, 0xDC469CE2BE7CE722, 0xCCDB58>(groupId);
	}

	FORCEINLINE auto GET_PED_GROUP_INDEX(Ped ped)
	{
		return invoker::invoke<int, 0x26B246D60FABB3E2, 0xCCF2A4>(ped);
	}

	FORCEINLINE auto IS_PED_IN_GROUP(Ped ped)
	{
		return invoker::invoke<BOOL, 0x133460AD0F183CC9, 0xCD145C>(ped);
	}

	FORCEINLINE auto GET_PLAYER_PED_IS_FOLLOWING(Ped ped)
	{
		return invoker::invoke<Player, 0x5F858847305B52A9, 0xCCF9C0>(ped);
	}

	FORCEINLINE auto SET_GROUP_FORMATION(int groupId, int formationType)
	{
		return invoker::invoke<void, 0xDC80C872B18711B5, 0xCD8298>(groupId, formationType);
	}

	FORCEINLINE auto SET_GROUP_FORMATION_SPACING(int groupId, float x, float y, float z)
	{
		return invoker::invoke<void, 0x47F8464BB13E408D, 0xCD82A8>(groupId, x, y, z);
	}

	FORCEINLINE auto RESET_GROUP_FORMATION_DEFAULT_SPACING(int groupHandle)
	{
		return invoker::invoke<void, 0xAD9D10D7F8C6F478, 0xCD797C>(groupHandle);
	}

	FORCEINLINE auto GET_VEHICLE_PED_IS_USING(Ped ped)
	{
		return invoker::invoke<Vehicle, 0xCDA725BC2F170795, 0xCD0200>(ped);
	}

	FORCEINLINE auto GET_VEHICLE_PED_IS_ENTERING(Ped ped)
	{
		return invoker::invoke<Vehicle, 0x31945A289F1359A1, 0xCD0198>(ped);
	}

	FORCEINLINE auto SET_PED_GRAVITY(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x7EF69980DE8B28B0, 0xCD9140>(ped, toggle);
	}

	FORCEINLINE auto APPLY_DAMAGE_TO_PED(Ped ped, int damageAmount, BOOL p2, Any p3, Hash weaponType)
	{
		return invoker::invoke<void, 0x39AB1812D20C2C99, 0xCCC9E0>(ped, damageAmount, p2, p3, weaponType);
	}

	FORCEINLINE auto GET_TIME_PED_DAMAGED_BY_WEAPON(Ped ped, Hash weaponHash)
	{
		return invoker::invoke<int, 0x81B96B8125212E06, 0xCCFF88>(ped, weaponHash);
	}

	FORCEINLINE auto SET_PED_ALLOWED_TO_DUCK(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x4CE80A0172B32F75, 0xCD8904>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_NEVER_LEAVES_GROUP(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xBC14FFDBE1C32C51, 0xCD948C>(ped, toggle);
	}

	FORCEINLINE auto GET_PED_TYPE(Ped ped)
	{
		return invoker::invoke<int, 0xDFE7358172FC006, 0xCCF6F8>(ped);
	}

	FORCEINLINE auto SET_PED_AS_COP(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x91B8DEBF573007DE, 0xCD8A1C>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(BOOL toggle)
	{
		return invoker::invoke<void, 0x12100CAEF6D8A8EF, 0xCD91CC>(toggle);
	}

	FORCEINLINE auto SET_PED_MAX_HEALTH(Ped ped, int value)
	{
		return invoker::invoke<void, 0x36A20106D0B42723, 0xCD9358>(ped, value);
	}

	FORCEINLINE auto GET_PED_MAX_HEALTH(Ped ped)
	{
		return invoker::invoke<int, 0x3C8EDE4003ABACA0, 0xCCF408>(ped);
	}

	FORCEINLINE auto SET_PED_MAX_TIME_IN_WATER(Ped ped, float value)
	{
		return invoker::invoke<void, 0xABA0B084615631D7, 0xCD9398>(ped, value);
	}

	FORCEINLINE auto SET_PED_MAX_TIME_UNDERWATER(Ped ped, float value)
	{
		return invoker::invoke<void, 0xACCC8916441860A, 0xCD93A8>(ped, value);
	}

	FORCEINLINE auto SET_CORPSE_RAGDOLL_FRICTION(Ped ped, float p1)
	{
		return invoker::invoke<void, 0xC082B2B13450E715, 0xCD7F2C>(ped, p1);
	}

	FORCEINLINE auto SET_PED_VEHICLE_FORCED_SEAT_USAGE(Ped ped, Vehicle vehicle, int seatIndex, int flags, Any p4)
	{
		return invoker::invoke<void, 0xFD763E094E35D34A, 0xCD9A70>(ped, vehicle, seatIndex, flags, p4);
	}

	FORCEINLINE auto CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(Ped ped)
	{
		return invoker::invoke<void, 0x3805B001642BC9B1, 0xCCD110>(ped);
	}

	FORCEINLINE auto SET_PED_CAN_BE_KNOCKED_OFF_BIKE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xE57B0AA791ADBC93, 0x81A1C0>(p0, p1);
	}

	FORCEINLINE auto SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(Ped ped, int state)
	{
		return invoker::invoke<void, 0x68F395D64BC35E68, 0xCD8AE8>(ped, state);
	}

	FORCEINLINE auto CAN_KNOCK_PED_OFF_VEHICLE(Ped ped)
	{
		return invoker::invoke<BOOL, 0x2F51D23580B7A15, 0xCCCDCC>(ped);
	}

	FORCEINLINE auto KNOCK_PED_OFF_VEHICLE(Ped ped)
	{
		return invoker::invoke<void, 0xC771CCC16BC7A60, 0xCD2480>(ped);
	}

	FORCEINLINE auto SET_PED_COORDS_NO_GANG(Ped ped, float posX, float posY, float posZ)
	{
		return invoker::invoke<void, 0xCE2DE9BE961A9AF1, 0xCD8EC4>(ped, posX, posY, posZ);
	}

	FORCEINLINE auto GET_PED_AS_GROUP_MEMBER(int groupID, int memberNumber)
	{
		return invoker::invoke<Ped, 0x619062CCF4C1D4D5, 0xCCEFA4>(groupID, memberNumber);
	}

	FORCEINLINE auto GET_PED_AS_GROUP_LEADER(int groupID)
	{
		return invoker::invoke<Ped, 0x6814C7F2C075A4F3, 0xCCEF84>(groupID);
	}

	FORCEINLINE auto SET_PED_KEEP_TASK(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x44FB298D6382876D, 0xCD9324>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x55A8A33A33B949EC, 0xCD8928>(ped, toggle);
	}

	FORCEINLINE auto IS_PED_SWIMMING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x2CFBD7757B4D922F, 0xCD1A2C>(ped);
	}

	FORCEINLINE auto IS_PED_SWIMMING_UNDER_WATER(Ped ped)
	{
		return invoker::invoke<BOOL, 0x9AC89B274C35B3FC, 0xCD1A50>(ped);
	}

	FORCEINLINE auto SET_PED_COORDS_KEEP_VEHICLE(Ped ped, float posX, float posY, float posZ)
	{
		return invoker::invoke<void, 0x2B083B6FDD0231F9, 0xCD8EB4>(ped, posX, posY, posZ);
	}

	FORCEINLINE auto SET_PED_DIES_IN_VEHICLE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xD394176EC453FD41, 0xCD8FF4>(ped, toggle);
	}

	FORCEINLINE auto SET_CREATE_RANDOM_COPS(BOOL toggle)
	{
		return invoker::invoke<void, 0xD682DD0578BF5392, 0xCD7F5C>(toggle);
	}

	FORCEINLINE auto SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(BOOL toggle)
	{
		return invoker::invoke<void, 0xD5E2F27BCC913BE9, 0xCD7F80>(toggle);
	}

	FORCEINLINE auto SET_CREATE_RANDOM_COPS_ON_SCENARIOS(BOOL toggle)
	{
		return invoker::invoke<void, 0x931C6A48678F5793, 0xCD7F90>(toggle);
	}

	FORCEINLINE auto CAN_CREATE_RANDOM_COPS()
	{
		return invoker::invoke<BOOL, 0x714C359ADAF7B58F, 0xCCCD70>();
	}

	FORCEINLINE auto SET_PED_AS_ENEMY(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x4BD214FCF7332FF6, 0xCD8A30>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_SMASH_GLASS(Ped ped, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xB2EDAEE9E5BA8E24, 0xCD8C84>(ped, p1, p2);
	}

	FORCEINLINE auto IS_PED_IN_ANY_TRAIN(Ped ped)
	{
		return invoker::invoke<BOOL, 0x17CB7D9FBEC4100F, 0xCD1370>(ped);
	}

	FORCEINLINE auto IS_PED_GETTING_INTO_A_VEHICLE(Ped ped)
	{
		return invoker::invoke<BOOL, 0x9D6DF8F3584AAC2B, 0xCD10B0>(ped);
	}

	FORCEINLINE auto IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(Ped ped)
	{
		return invoker::invoke<BOOL, 0x74408742BCE2802F, 0xCD1B10>(ped);
	}

	FORCEINLINE auto SET_ENABLE_HANDCUFFS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x590E598CA58BADDE, 0xCD80FC>(ped, toggle);
	}

	FORCEINLINE auto SET_ENABLE_BOUND_ANKLES(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xCF10C35FF25A86A7, 0xCD80E8>(ped, toggle);
	}

	FORCEINLINE auto SET_ENABLE_SCUBA(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x61BBBE1B9F8AC7D0, 0xCD8124>(ped, toggle);
	}

	FORCEINLINE auto SET_CAN_ATTACK_FRIENDLY(Ped ped, BOOL toggle, BOOL p2)
	{
		return invoker::invoke<void, 0x19621C4DDF8636D4, 0xCD7E00>(ped, toggle, p2);
	}

	FORCEINLINE auto GET_PED_ALERTNESS(Ped ped)
	{
		return invoker::invoke<int, 0xD8746B5875BA4019, 0xCCEF34>(ped);
	}

	FORCEINLINE auto SET_PED_ALERTNESS(Ped ped, int value)
	{
		return invoker::invoke<void, 0x85B81BB17715A70, 0xCD88D8>(ped, value);
	}

	FORCEINLINE auto SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x379E96D5D36B27DC, 0xCD912C>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_MOVEMENT_CLIPSET(Ped ped, const char* clipSet, float transitionSpeed)
	{
		return invoker::invoke<void, 0x4669032A1DFBB449, 0xCD944C>(ped, clipSet, transitionSpeed);
	}

	FORCEINLINE auto RESET_PED_MOVEMENT_CLIPSET(Ped ped, float p1)
	{
		return invoker::invoke<void, 0x4A46A67DB6AC487D, 0xCD79B4>(ped, p1);
	}

	FORCEINLINE auto SET_PED_STRAFE_CLIPSET(Ped ped, const char* clipSet)
	{
		return invoker::invoke<void, 0x696095B298957860, 0xCD98D4>(ped, clipSet);
	}

	FORCEINLINE auto RESET_PED_STRAFE_CLIPSET(Ped ped)
	{
		return invoker::invoke<void, 0x529EC998DD2C51F8, 0xCD79D0>(ped);
	}

	FORCEINLINE auto SET_PED_WEAPON_MOVEMENT_CLIPSET(Ped ped, const char* clipSet)
	{
		return invoker::invoke<void, 0xC806A20F4C5AC6AF, 0xCD9AFC>(ped, clipSet);
	}

	FORCEINLINE auto RESET_PED_WEAPON_MOVEMENT_CLIPSET(Ped ped)
	{
		return invoker::invoke<void, 0xC935F6A2D1890729, 0xCD79DC>(ped);
	}

	FORCEINLINE auto SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(Ped ped, const char* clipset)
	{
		return invoker::invoke<void, 0x1E4D3966543704DD, 0xCD9030>(ped, clipset);
	}

	FORCEINLINE auto CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(Ped ped)
	{
		return invoker::invoke<void, 0x728A2C1D61F55E08, 0xCCD27C>(ped);
	}

	FORCEINLINE auto SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(Ped ped, const char* p1)
	{
		return invoker::invoke<void, 0x6D80A3E2F71A926F, 0xCD943C>(ped, p1);
	}

	FORCEINLINE auto CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(Ped ped)
	{
		return invoker::invoke<void, 0x8ED4FEE426B22F3D, 0xCCD2AC>(ped);
	}

	FORCEINLINE auto CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(Ped ped)
	{
		return invoker::invoke<void, 0xBFCE94361188CEB2, 0xCCD294>(ped);
	}

	FORCEINLINE auto SET_PED_IN_VEHICLE_CONTEXT(Ped ped, Hash context)
	{
		return invoker::invoke<void, 0x9E02F7BF34671713, 0xCD92EC>(ped, context);
	}

	FORCEINLINE auto RESET_PED_IN_VEHICLE_CONTEXT(Ped ped)
	{
		return invoker::invoke<void, 0x26E9393912EA6F6A, 0xCD799C>(ped);
	}

	FORCEINLINE auto IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(Ped ped, const char* animDict, const char* anim)
	{
		return invoker::invoke<BOOL, 0xA23312A0DE89348E, 0xCD20D4>(ped, animDict, anim);
	}

	FORCEINLINE auto SET_PED_ALTERNATE_WALK_ANIM(Ped ped, const char* animDict, const char* animName, float p3, BOOL p4)
	{
		return invoker::invoke<void, 0x3AE0EEB34FAAC92B, 0xCD8988>(ped, animDict, animName, p3, p4);
	}

	FORCEINLINE auto CLEAR_PED_ALTERNATE_WALK_ANIM(Ped ped, float p1)
	{
		return invoker::invoke<void, 0x8B224316C228BF51, 0xCCD1D8>(ped, p1);
	}

	FORCEINLINE auto SET_PED_ALTERNATE_MOVEMENT_ANIM(Ped ped, int stance, const char* animDictionary, const char* animationName, float p4, BOOL p5)
	{
		return invoker::invoke<void, 0xCC2D0738666FD62D, 0xCD8950>(ped, stance, animDictionary, animationName, p4, p5);
	}

	FORCEINLINE auto CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(Ped ped, int stance, float p2)
	{
		return invoker::invoke<void, 0x384E72D362B96929, 0xCCD1C4>(ped, stance, p2);
	}

	FORCEINLINE auto SET_PED_GESTURE_GROUP(Ped ped, const char* animGroupGesture)
	{
		return invoker::invoke<void, 0xA962F06E648B8941, 0xCD911C>(ped, animGroupGesture);
	}

	FORCEINLINE auto GET_ANIM_INITIAL_OFFSET_POSITION(const char* animDict, const char* animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9)
	{
		return invoker::invoke<Vector3, 0xBE8776D2466E9EA6, 0xCCE198>(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
	}

	FORCEINLINE auto GET_ANIM_INITIAL_OFFSET_ROTATION(const char* animDict, const char* animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9)
	{
		return invoker::invoke<Vector3, 0x7A6103DCF5EE8CC3, 0xCCE1A8>(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
	}

	FORCEINLINE auto GET_PED_DRAWABLE_VARIATION(Ped ped, int componentId)
	{
		return invoker::invoke<int, 0xC0120BBCC298EA2F, 0xCCF1E8>(ped, componentId);
	}

	FORCEINLINE auto GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(Ped ped, int componentId)
	{
		return invoker::invoke<int, 0x1A4EFE92822E3123, 0xCCEC04>(ped, componentId);
	}

	FORCEINLINE auto GET_PED_TEXTURE_VARIATION(Ped ped, int componentId)
	{
		return invoker::invoke<int, 0xD6AED6BFCC58AF7F, 0xCCF6A8>(ped, componentId);
	}

	FORCEINLINE auto GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(Ped ped, int componentId, int drawableId)
	{
		return invoker::invoke<int, 0x8401C77F508D70FD, 0xCCEC74>(ped, componentId, drawableId);
	}

	FORCEINLINE auto GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(Ped ped, int propId)
	{
		return invoker::invoke<int, 0x4D0F04723A52D0E9, 0xCCEC28>(ped, propId);
	}

	FORCEINLINE auto GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(Ped ped, int propId, int drawableId)
	{
		return invoker::invoke<int, 0x1D77F90D87ACD2BA, 0xCCEC4C>(ped, propId, drawableId);
	}

	FORCEINLINE auto GET_PED_PALETTE_VARIATION(Ped ped, int componentId)
	{
		return invoker::invoke<int, 0xDAF263B0E792EAEC, 0xCCF4B0>(ped, componentId);
	}

	FORCEINLINE auto GET_MP_OUTFIT_DATA_FROM_METADATA(Any* p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0x386E4537DAFC3779, 0xCCEAD8>(p0, p1);
	}

	FORCEINLINE auto GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(int p0)
	{
		return invoker::invoke<int, 0x82ADFEA98A0C26DC, 0xCCE740>(p0);
	}

	FORCEINLINE auto GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(int p0)
	{
		return invoker::invoke<int, 0x6F4B2AB7CFB2F472, 0xCCE720>(p0);
	}

	FORCEINLINE auto IS_PED_COMPONENT_VARIATION_VALID(Ped ped, int componentId, int drawableId, int textureId)
	{
		return invoker::invoke<BOOL, 0xE91CD2B3CF8A106C, 0xCD0EA4>(ped, componentId, drawableId, textureId);
	}

	FORCEINLINE auto SET_PED_COMPONENT_VARIATION(Ped ped, int componentId, int drawableId, int textureId, int paletteId)
	{
		return invoker::invoke<void, 0xD1C578C204015E1F, 0xCD8E70>(ped, componentId, drawableId, textureId, paletteId);
	}

	FORCEINLINE auto SET_PED_RANDOM_COMPONENT_VARIATION(Ped ped, int p1)
	{
		return invoker::invoke<void, 0xC6E8E1D693021E9E, 0xCD9674>(ped, p1);
	}

	FORCEINLINE auto SET_PED_RANDOM_PROPS(Ped ped)
	{
		return invoker::invoke<void, 0xB6FA664D27C123AC, 0xCD9684>(ped);
	}

	FORCEINLINE auto SET_PED_DEFAULT_COMPONENT_VARIATION(Ped ped)
	{
		return invoker::invoke<void, 0x77EFA99E6A8FFC43, 0xCD8EE4>(ped);
	}

	FORCEINLINE auto SET_PED_BLEND_FROM_PARENTS(Ped ped, Any p1, Any p2, float p3, float p4)
	{
		return invoker::invoke<void, 0x335B397DCC88FD74, 0xCD8A64>(ped, p1, p2, p3, p4);
	}

	FORCEINLINE auto SET_PED_HEAD_BLEND_DATA(Ped ped, int shapeFirstID, int shapeSecondID, int shapeThirdID, int skinFirstID, int skinSecondID, int skinThirdID, float shapeMix, float skinMix, float thirdMix, BOOL isParent)
	{
		return invoker::invoke<void, 0xA5987DCA39E8BE5, 0xCD9178>(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent);
	}

	FORCEINLINE auto GET_PED_HEAD_BLEND_DATA(Ped ped, Any* headBlendData)
	{
		return invoker::invoke<BOOL, 0x5CB7287FD7611BC7, 0xCCF2DC>(ped, headBlendData);
	}

	FORCEINLINE auto UPDATE_PED_HEAD_BLEND_DATA(Ped ped, float shapeMix, float skinMix, float thirdMix)
	{
		return invoker::invoke<void, 0xB320F619D5CC2D27, 0xCDB95C>(ped, shapeMix, skinMix, thirdMix);
	}

	FORCEINLINE auto SET_HEAD_BLEND_EYE_COLOR(Ped ped, int index)
	{
		return invoker::invoke<void, 0x348FF3E632DCB635, 0xCD82D4>(ped, index);
	}

	FORCEINLINE auto GET_HEAD_BLEND_EYE_COLOR(Ped ped)
	{
		return invoker::invoke<int, 0x795C9AE513FFEF5F, 0xCCE7E4>(ped);
	}

	FORCEINLINE auto SET_PED_HEAD_OVERLAY(Ped ped, int overlayID, int index, float opacity)
	{
		return invoker::invoke<void, 0xE5B6C9B29510B84E, 0xCD9188>(ped, overlayID, index, opacity);
	}

	FORCEINLINE auto GET_PED_HEAD_OVERLAY(Ped ped, int overlayID)
	{
		return invoker::invoke<int, 0x8E73BECF421D257E, 0xCCF344>(ped, overlayID);
	}

	FORCEINLINE auto GET_PED_HEAD_OVERLAY_NUM(int overlayID)
	{
		return invoker::invoke<int, 0x6D19BF3A83702C49, 0xCCF368>(overlayID);
	}

	FORCEINLINE auto SET_PED_HEAD_OVERLAY_TINT(Ped ped, int overlayID, int colorType, int colorID, int secondColorID)
	{
		return invoker::invoke<void, 0x94965BB62753D4D6, 0xCD91A0>(ped, overlayID, colorType, colorID, secondColorID);
	}

	FORCEINLINE auto SET_PED_HAIR_TINT(Ped ped, int colorID, int highlightColorID)
	{
		return invoker::invoke<void, 0x894EE2587C8D8D1E, 0xCD9164>(ped, colorID, highlightColorID);
	}

	FORCEINLINE auto GET_NUM_PED_HAIR_TINTS()
	{
		return invoker::invoke<int, 0x37A0D41DCFB52CC8, 0xCCED80>();
	}

	FORCEINLINE auto GET_NUM_PED_MAKEUP_TINTS()
	{
		return invoker::invoke<int, 0xA4209F7407B86F6, 0xCCED8C>();
	}

	FORCEINLINE auto GET_PED_HAIR_TINT_COLOR(int hairColorIndex, int* outR, int* outG, int* outB)
	{
		return invoker::invoke<void, 0xB062D1D08D9CC751, 0xCCF2C4>(hairColorIndex, outR, outG, outB);
	}

	FORCEINLINE auto GET_PED_MAKEUP_TINT_COLOR(int makeupColorIndex, int* outR, int* outG, int* outB)
	{
		return invoker::invoke<void, 0x91AAB4C71ADE4CD, 0xCCF3F0>(makeupColorIndex, outR, outG, outB);
	}

	FORCEINLINE auto IS_PED_HAIR_TINT_FOR_CREATOR(int colorId)
	{
		return invoker::invoke<BOOL, 0xCBC4C0F54C8BFFD1, 0xCD1144>(colorId);
	}

	FORCEINLINE auto GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(int colorId)
	{
		return invoker::invoke<int, 0xBED8C136A36DA2C4, 0xCCE690>(colorId);
	}

	FORCEINLINE auto IS_PED_LIPSTICK_TINT_FOR_CREATOR(int colorId)
	{
		return invoker::invoke<BOOL, 0xC4DF7897A59B7B8F, 0xCD15F8>(colorId);
	}

	FORCEINLINE auto IS_PED_BLUSH_TINT_FOR_CREATOR(int colorId)
	{
		return invoker::invoke<BOOL, 0x86F83CBBA37677B2, 0xCD0E5C>(colorId);
	}

	FORCEINLINE auto IS_PED_HAIR_TINT_FOR_BARBER(int colorID)
	{
		return invoker::invoke<BOOL, 0xBB9FAE42E3101CD8, 0xCD1120>(colorID);
	}

	FORCEINLINE auto GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(int colorID)
	{
		return invoker::invoke<int, 0xBC34ECDC4790796, 0xCCE670>(colorID);
	}

	FORCEINLINE auto IS_PED_LIPSTICK_TINT_FOR_BARBER(int colorID)
	{
		return invoker::invoke<BOOL, 0x52611559311E2B64, 0xCD15D4>(colorID);
	}

	FORCEINLINE auto IS_PED_BLUSH_TINT_FOR_BARBER(int colorID)
	{
		return invoker::invoke<BOOL, 0xE3FAB626C2DBDF88, 0xCD0E38>(colorID);
	}

	FORCEINLINE auto IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(int colorId)
	{
		return invoker::invoke<BOOL, 0xA3089FB5A559E0D5, 0xCD0E14>(colorId);
	}

	FORCEINLINE auto GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(Hash modelHash, int drawableId, int textureId)
	{
		return invoker::invoke<int, 0xD839A970B98A1E9C, 0xCD006C>(modelHash, drawableId, textureId);
	}

	FORCEINLINE auto SET_PED_MICRO_MORPH(Ped ped, int index, float scale)
	{
		return invoker::invoke<void, 0xAAF9B08B469F707F, 0xCD93B8>(ped, index, scale);
	}

	FORCEINLINE auto HAS_PED_HEAD_BLEND_FINISHED(Ped ped)
	{
		return invoker::invoke<BOOL, 0x4CEC77F224BCD884, 0xCD04A0>(ped);
	}

	FORCEINLINE auto FINALIZE_HEAD_BLEND(Ped ped)
	{
		return invoker::invoke<void, 0xAF8337BF5A296283, 0xCCDFC8>(ped);
	}

	FORCEINLINE auto SET_HEAD_BLEND_PALETTE_COLOR(Ped ped, int r, int g, int b, int id)
	{
		return invoker::invoke<void, 0xA3C0950202881572, 0xCD8300>(ped, r, g, b, id);
	}

	FORCEINLINE auto DISABLE_HEAD_BLEND_PALETTE_COLOR(Ped ped)
	{
		return invoker::invoke<void, 0xC3579BA21459B45, 0xCCDA90>(ped);
	}

	FORCEINLINE auto GET_PED_HEAD_BLEND_FIRST_INDEX(int type)
	{
		return invoker::invoke<int, 0x6C88944114345A04, 0xCCF304>(type);
	}

	FORCEINLINE auto GET_PED_HEAD_BLEND_NUM_HEADS(int type)
	{
		return invoker::invoke<int, 0x69618F2236615539, 0xCCF324>(type);
	}

	FORCEINLINE auto SET_PED_PRELOAD_VARIATION_DATA(Ped ped, int slot, int drawableId, int textureId)
	{
		return invoker::invoke<int, 0xBE291C733F237949, 0xCD95E0>(ped, slot, drawableId, textureId);
	}

	FORCEINLINE auto HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(Ped ped)
	{
		return invoker::invoke<BOOL, 0xB76612E72B637A6B, 0xCD04E8>(ped);
	}

	FORCEINLINE auto RELEASE_PED_PRELOAD_VARIATION_DATA(Ped ped)
	{
		return invoker::invoke<void, 0x30325AB568E2F2EF, 0xCD75B8>(ped);
	}

	FORCEINLINE auto SET_PED_PRELOAD_PROP_DATA(Ped ped, int componentId, int drawableId, int TextureId)
	{
		return invoker::invoke<int, 0xEC129CEFDDA0A303, 0xCD95B4>(ped, componentId, drawableId, TextureId);
	}

	FORCEINLINE auto HAS_PED_PRELOAD_PROP_DATA_FINISHED(Ped ped)
	{
		return invoker::invoke<BOOL, 0x14491B5694114619, 0xCD04C4>(ped);
	}

	FORCEINLINE auto RELEASE_PED_PRELOAD_PROP_DATA(Ped ped)
	{
		return invoker::invoke<void, 0xB736C2C734C35F54, 0xCD7594>(ped);
	}

	FORCEINLINE auto GET_PED_PROP_INDEX(Ped ped, int componentId, Any p2)
	{
		return invoker::invoke<int, 0xB204F40D393426B6, 0xCCF564>(ped, componentId, p2);
	}

	FORCEINLINE auto SET_PED_PROP_INDEX(Ped ped, int componentId, int drawableId, int TextureId, BOOL attach, Any p5)
	{
		return invoker::invoke<void, 0x7F08C4791E6D6969, 0xCD961C>(ped, componentId, drawableId, TextureId, attach, p5);
	}

	FORCEINLINE auto KNOCK_OFF_PED_PROP(Ped ped, BOOL p1, BOOL p2, BOOL p3, BOOL p4)
	{
		return invoker::invoke<void, 0xE19C037272259115, 0xCD2444>(ped, p1, p2, p3, p4);
	}

	FORCEINLINE auto CLEAR_PED_PROP(Ped ped, int propId, Any p2)
	{
		return invoker::invoke<void, 0x9397806857F5DFB, 0xCCD2E4>(ped, propId, p2);
	}

	FORCEINLINE auto CLEAR_ALL_PED_PROPS(Ped ped, Any p1)
	{
		return invoker::invoke<void, 0x445E7F949766A0C7, 0xCCD0FC>(ped, p1);
	}

	FORCEINLINE auto DROP_AMBIENT_PROP(Ped ped)
	{
		return invoker::invoke<void, 0x5A5573FECDE27C3C, 0xCCDED0>(ped);
	}

	FORCEINLINE auto GET_PED_PROP_TEXTURE_INDEX(Ped ped, int componentId)
	{
		return invoker::invoke<int, 0xDC23FA727759F9F, 0xCCF590>(ped, componentId);
	}

	FORCEINLINE auto CLEAR_PED_PARACHUTE_PACK_VARIATION(Ped ped)
	{
		return invoker::invoke<void, 0xCDF42A1B8D2576E8, 0xCCD2C0>(ped);
	}

	FORCEINLINE auto SET_PED_SCUBA_GEAR_VARIATION(Ped ped)
	{
		return invoker::invoke<void, 0x7E6931DA4A9ACB6, 0xCD96F4>(ped);
	}

	FORCEINLINE auto CLEAR_PED_SCUBA_GEAR_VARIATION(Ped ped)
	{
		return invoker::invoke<void, 0xB0EFB4958498E2D0, 0xCCD2FC>(ped);
	}

	FORCEINLINE auto IS_USING_PED_SCUBA_GEAR_VARIATION(Any p0)
	{
		return invoker::invoke<BOOL, 0x1D5385246A3434D3, 0xCD23AC>(p0);
	}

	FORCEINLINE auto SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xAAA71DD7E9059338, 0xCD7DDC>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_BOUNDS_ORIENTATION(Ped ped, float p1, float p2, float x, float y, float z)
	{
		return invoker::invoke<void, 0xEABB1C18FA028606, 0xCD8AA4>(ped, p1, p2, x, y, z);
	}

	FORCEINLINE auto REGISTER_TARGET(Ped ped, Ped target)
	{
		return invoker::invoke<void, 0xC225BC409BD24794, 0xCD7564>(ped, target);
	}

	FORCEINLINE auto REGISTER_HATED_TARGETS_AROUND_PED(Ped ped, float radius)
	{
		return invoker::invoke<void, 0xA2759157C7F12D3C, 0xCD74F4>(ped, radius);
	}

	FORCEINLINE auto GET_RANDOM_PED_AT_COORD(float x, float y, float z, float xRadius, float yRadius, float zRadius, int pedType)
	{
		return invoker::invoke<Ped, 0xFA4D35AD36BDA1FE, 0xCCFC0C>(x, y, z, xRadius, yRadius, zRadius, pedType);
	}

	FORCEINLINE auto GET_CLOSEST_PED(float x, float y, float z, float radius, BOOL p4, BOOL p5, Ped* outPed, BOOL p7, BOOL p8, int pedType)
	{
		return invoker::invoke<BOOL, 0x2E029D1D9614563, 0xCCE35C>(x, y, z, radius, p4, p5, outPed, p7, p8, pedType);
	}

	FORCEINLINE auto SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(BOOL value)
	{
		return invoker::invoke<void, 0x9C9B7988CF45CAF0, 0xCDA3F4>(value);
	}

	FORCEINLINE auto GET_CAN_PED_BE_GRABBED_BY_SCRIPT(Ped ped, BOOL p1, BOOL p2, BOOL p3, BOOL p4, BOOL p5, BOOL p6, BOOL p7, Any p8)
	{
		return invoker::invoke<BOOL, 0x51150F0B2D9D1CF3, 0xCCE28C>(ped, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto SET_DRIVER_RACING_MODIFIER(Ped driver, float modifier)
	{
		return invoker::invoke<void, 0xF823BACD940DEAF1, 0xCD80A4>(driver, modifier);
	}

	FORCEINLINE auto SET_DRIVER_ABILITY(Ped driver, float ability)
	{
		return invoker::invoke<void, 0x6D618646705A0465, 0xCD8084>(driver, ability);
	}

	FORCEINLINE auto SET_DRIVER_AGGRESSIVENESS(Ped driver, float aggressiveness)
	{
		return invoker::invoke<void, 0x8C863F5EB14919DB, 0xCD8094>(driver, aggressiveness);
	}

	FORCEINLINE auto CAN_PED_RAGDOLL(Ped ped)
	{
		return invoker::invoke<BOOL, 0xC24FAA5E8D69F7F8, 0xCCCE40>(ped);
	}

	FORCEINLINE auto SET_PED_TO_RAGDOLL(Ped ped, int time1, int time2, int ragdollType, BOOL p4, BOOL p5, BOOL p6)
	{
		return invoker::invoke<BOOL, 0xB1C2DC5C115FA50D, 0xCD997C>(ped, time1, time2, ragdollType, p4, p5, p6);
	}

	FORCEINLINE auto SET_PED_TO_RAGDOLL_WITH_FALL(Ped ped, int time, int p2, int ragdollType, float x, float y, float z, float velocity, float p8, float p9, float p10, float p11, float p12, float p13)
	{
		return invoker::invoke<BOOL, 0x52B67D4C57E4BF4B, 0xCD99D0>(ped, time, p2, ragdollType, x, y, z, velocity, p8, p9, p10, p11, p12, p13);
	}

	FORCEINLINE auto SET_PED_RAGDOLL_ON_COLLISION(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xF9E1F44FD9B4934B, 0xCD9660>(ped, toggle);
	}

	FORCEINLINE auto IS_PED_RAGDOLL(Ped ped)
	{
		return invoker::invoke<BOOL, 0x8BF5256C439DF778, 0xCD1804>(ped);
	}

	FORCEINLINE auto IS_PED_RUNNING_RAGDOLL_TASK(Ped ped)
	{
		return invoker::invoke<BOOL, 0x86521C678E8AA3FF, 0xCD18DC>(ped);
	}

	FORCEINLINE auto SET_PED_RAGDOLL_FORCE_FALL(Ped ped)
	{
		return invoker::invoke<void, 0x661428616F87F180, 0xCD9654>(ped);
	}

	FORCEINLINE auto RESET_PED_RAGDOLL_TIMER(Ped ped)
	{
		return invoker::invoke<void, 0xBD1B952A9BBB567F, 0xCD79C4>(ped);
	}

	FORCEINLINE auto SET_PED_CAN_RAGDOLL(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x9FF00EA9A61211D2, 0xCD8C5C>(ped, toggle);
	}

	FORCEINLINE auto IS_PED_RUNNING_MELEE_TASK(Ped ped)
	{
		return invoker::invoke<BOOL, 0x942229677774817C, 0xCD1884>(ped);
	}

	FORCEINLINE auto IS_PED_RUNNING_MOBILE_PHONE_TASK(Ped ped)
	{
		return invoker::invoke<BOOL, 0x65815C3D3CB39062, 0xCD18B8>(ped);
	}

	FORCEINLINE auto IS_MOBILE_PHONE_TO_PED_EAR(Ped ped)
	{
		return invoker::invoke<BOOL, 0xD9FC29710C12DA3A, 0xCD0B1C>(ped);
	}

	FORCEINLINE auto SET_RAGDOLL_BLOCKING_FLAGS(Ped ped, int blockingFlag)
	{
		return invoker::invoke<void, 0x72B18C9612CF3DA0, 0xCDA2D0>(ped, blockingFlag);
	}

	FORCEINLINE auto CLEAR_RAGDOLL_BLOCKING_FLAGS(Ped ped, int blockingFlag)
	{
		return invoker::invoke<void, 0xBCB78CFBB026B0DF, 0xCCD39C>(ped, blockingFlag);
	}

	FORCEINLINE auto SET_PED_ANGLED_DEFENSIVE_AREA(Ped ped, float p1, float p2, float p3, float p4, float p5, float p6, float p7, BOOL p8, BOOL p9)
	{
		return invoker::invoke<void, 0xDF2B856299BCDF13, 0xCD89B8>(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	FORCEINLINE auto SET_PED_SPHERE_DEFENSIVE_AREA(Ped ped, float x, float y, float z, float radius, BOOL p5, BOOL p6)
	{
		return invoker::invoke<void, 0xBB4D4E549F8E6E8C, 0xCD97F4>(ped, x, y, z, radius, p5, p6);
	}

	FORCEINLINE auto SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(Ped ped, Ped target, float xOffset, float yOffset, float zOffset, float radius, BOOL p6)
	{
		return invoker::invoke<void, 0x98EEF9ADA73BD5B2, 0xCD8F4C>(ped, target, xOffset, yOffset, zOffset, radius, p6);
	}

	FORCEINLINE auto SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(Ped ped, Vehicle target, float xOffset, float yOffset, float zOffset, float radius, BOOL p6)
	{
		return invoker::invoke<void, 0x6AA75009161058B, 0xCD8F7C>(ped, target, xOffset, yOffset, zOffset, radius, p6);
	}

	FORCEINLINE auto SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(Ped ped, Ped attachPed, float p2, float p3, float p4, float p5, float p6, float p7, float p8, BOOL p9, BOOL p10)
	{
		return invoker::invoke<void, 0xE0C92005A30D227B, 0xCD8EF0>(ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10);
	}

	FORCEINLINE auto SET_PED_DEFENSIVE_AREA_DIRECTION(Ped ped, float p1, float p2, float p3, BOOL p4)
	{
		return invoker::invoke<void, 0x1738EA03946B4D2A, 0xCD8F34>(ped, p1, p2, p3, p4);
	}

	FORCEINLINE auto REMOVE_PED_DEFENSIVE_AREA(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x805B057FA4E28531, 0xCD76AC>(ped, toggle);
	}

	FORCEINLINE auto GET_PED_DEFENSIVE_AREA_POSITION(Ped ped, BOOL p1)
	{
		return invoker::invoke<Vector3, 0x93B95A59CB61088B, 0xCCF164>(ped, p1);
	}

	FORCEINLINE auto IS_PED_DEFENSIVE_AREA_ACTIVE(Ped ped, BOOL p1)
	{
		return invoker::invoke<BOOL, 0x4B3F6436660DC25C, 0xCD0F00>(ped, p1);
	}

	FORCEINLINE auto SET_PED_PREFERRED_COVER_SET(Ped ped, Any itemSet)
	{
		return invoker::invoke<void, 0x392230C626567F51, 0xCD9588>(ped, itemSet);
	}

	FORCEINLINE auto REMOVE_PED_PREFERRED_COVER_SET(Ped ped)
	{
		return invoker::invoke<void, 0x97FD4A8DDB09A043, 0xCD76EC>(ped);
	}

	FORCEINLINE auto REVIVE_INJURED_PED(Ped ped)
	{
		return invoker::invoke<void, 0xB713CAFC12DED3BE, 0xCD7A6C>(ped);
	}

	FORCEINLINE auto RESURRECT_PED(Ped ped)
	{
		return invoker::invoke<void, 0x6ED737C2A74E181D, 0xCD7A60>(ped);
	}

	FORCEINLINE auto SET_PED_NAME_DEBUG(Ped ped, const char* name)
	{
		return invoker::invoke<void, 0xEB418CA245FFE897, 0x81A1C0>(ped, name);
	}

	FORCEINLINE auto GET_PED_EXTRACTED_DISPLACEMENT(Ped ped, BOOL worldSpace)
	{
		return invoker::invoke<Vector3, 0x8C4993D059F4DAEB, 0xCCF254>(ped, worldSpace);
	}

	FORCEINLINE auto SET_PED_DIES_WHEN_INJURED(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x9E6CC93E007219AC, 0xCD901C>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_ENABLE_WEAPON_BLOCKING(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x9590C8D34FFFCE10, 0xCD9094>(ped, toggle);
	}

	FORCEINLINE auto SPECIAL_FUNCTION_DO_NOT_USE(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0x4EBA48817E0C608D, 0xCDA9AC>(ped, p1);
	}

	FORCEINLINE auto RESET_PED_VISIBLE_DAMAGE(Ped ped)
	{
		return invoker::invoke<void, 0x69AE13B08EFD8497, 0xCCD1E8>(ped);
	}

	FORCEINLINE auto APPLY_PED_BLOOD_DAMAGE_BY_ZONE(Ped ped, Any p1, float p2, float p3, Any p4)
	{
		return invoker::invoke<void, 0x83707FFC4BC486A1, 0xCCCA6C>(ped, p1, p2, p3, p4);
	}

	FORCEINLINE auto APPLY_PED_BLOOD(Ped ped, int boneIndex, float xRot, float yRot, float zRot, const char* woundType)
	{
		return invoker::invoke<void, 0xFFD554A221AA80F0, 0xCCCA24>(ped, boneIndex, xRot, yRot, zRot, woundType);
	}

	FORCEINLINE auto APPLY_PED_BLOOD_BY_ZONE(Ped ped, int p1, float p2, float p3, const char* p4)
	{
		return invoker::invoke<void, 0x7D31B8F40A98A75, 0xCCCA3C>(ped, p1, p2, p3, p4);
	}

	FORCEINLINE auto APPLY_PED_BLOOD_SPECIFIC(Ped ped, int p1, float p2, float p3, float p4, float p5, int p6, float p7, const char* p8)
	{
		return invoker::invoke<void, 0xD1D8E1BF0769890C, 0xCCCA9C>(ped, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto APPLY_PED_DAMAGE_DECAL(Ped ped, int damageZone, float xOffset, float yOffset, float heading, float scale, float alpha, int variation, BOOL fadeIn, const char* decalName)
	{
		return invoker::invoke<void, 0xC9FB3D0735F8ECD9, 0xCCCAF8>(ped, damageZone, xOffset, yOffset, heading, scale, alpha, variation, fadeIn, decalName);
	}

	FORCEINLINE auto APPLY_PED_DAMAGE_PACK(Ped ped, const char* damagePack, float damage, float mult)
	{
		return invoker::invoke<void, 0x5909C9E03CEF097D, 0xCCCB08>(ped, damagePack, damage, mult);
	}

	FORCEINLINE auto CLEAR_PED_BLOOD_DAMAGE(Ped ped)
	{
		return invoker::invoke<void, 0x8EA9C5E0178372E1, 0xCCD1E8>(ped);
	}

	FORCEINLINE auto CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(Ped ped, int p1)
	{
		return invoker::invoke<void, 0x1926B687CF984FCC, 0xCCD20C>(ped, p1);
	}

	FORCEINLINE auto HIDE_PED_BLOOD_DAMAGE_BY_ZONE(Ped ped, Any p1, BOOL p2)
	{
		return invoker::invoke<void, 0x81C558E9A03D2F2B, 0xCD0668>(ped, p1, p2);
	}

	FORCEINLINE auto CLEAR_PED_DAMAGE_DECAL_BY_ZONE(Ped ped, int p1, const char* p2)
	{
		return invoker::invoke<void, 0xC6DFC06670D0589A, 0xCCD238>(ped, p1, p2);
	}

	FORCEINLINE auto GET_PED_DECORATIONS_STATE(Ped ped)
	{
		return invoker::invoke<int, 0x1ACEEA8FD72F77BC, 0xCCF108>(ped);
	}

	FORCEINLINE auto MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0x67A5951D0BFF01FA, 0xCD24C4>(ped, p1);
	}

	FORCEINLINE auto CLEAR_PED_WETNESS(Ped ped)
	{
		return invoker::invoke<void, 0x5EF96FB2D3902DC7, 0xCCD32C>(ped);
	}

	FORCEINLINE auto SET_PED_WETNESS_HEIGHT(Ped ped, float height)
	{
		return invoker::invoke<void, 0x545222B91BFCB344, 0xCD9B40>(ped, height);
	}

	FORCEINLINE auto SET_PED_WETNESS_ENABLED_THIS_FRAME(Ped ped)
	{
		return invoker::invoke<void, 0xDFA7D3DCFE10E65, 0xCD9B1C>(ped);
	}

	FORCEINLINE auto SET_PED_WETNESS(Ped ped, float wetLevel)
	{
		return invoker::invoke<void, 0xA60928A188EC78EF, 0xCD9B0C>(ped, wetLevel);
	}

	FORCEINLINE auto CLEAR_PED_ENV_DIRT(Ped ped)
	{
		return invoker::invoke<void, 0xD81F5EA29FD2682E, 0xCCD288>(ped);
	}

	FORCEINLINE auto SET_PED_SWEAT(Ped ped, float sweat)
	{
		return invoker::invoke<void, 0xB44335AF5013DA2A, 0xCD98F8>(ped, sweat);
	}

	FORCEINLINE auto ADD_PED_DECORATION_FROM_HASHES(Ped ped, Hash collection, Hash overlay)
	{
		return invoker::invoke<void, 0x49A5A17556C31561, 0xCCC884>(ped, collection, overlay);
	}

	FORCEINLINE auto ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(Ped ped, Hash collection, Hash overlay)
	{
		return invoker::invoke<void, 0x166CDAB8FE42C210, 0xCCC898>(ped, collection, overlay);
	}

	FORCEINLINE auto GET_PED_DECORATION_ZONE_FROM_HASHES(Hash collection, Hash overlay)
	{
		return invoker::invoke<int, 0x50CA4ACB66148FF0, 0xCCF128>(collection, overlay);
	}

	FORCEINLINE auto CLEAR_PED_DECORATIONS(Ped ped)
	{
		return invoker::invoke<void, 0xA781062E77B54775, 0xCCD24C>(ped);
	}

	FORCEINLINE auto CLEAR_PED_DECORATIONS_LEAVE_SCARS(Ped ped)
	{
		return invoker::invoke<void, 0x98E00E3ED7D61628, 0xCCD270>(ped);
	}

	FORCEINLINE auto WAS_PED_SKELETON_UPDATED(Ped ped)
	{
		return invoker::invoke<BOOL, 0x3268785AA66D674C, 0xCDBA34>(ped);
	}

	FORCEINLINE auto GET_PED_BONE_COORDS(Ped ped, int boneId, float offsetX, float offsetY, float offsetZ)
	{
		return invoker::invoke<Vector3, 0x83FDC027F0BEA202, 0xCCEFC8>(ped, boneId, offsetX, offsetY, offsetZ);
	}

	FORCEINLINE auto CREATE_NM_MESSAGE(BOOL startImmediately, int messageId)
	{
		return invoker::invoke<void, 0x83DCA877143E0B26, 0xCCD660>(startImmediately, messageId);
	}

	FORCEINLINE auto GIVE_PED_NM_MESSAGE(Ped ped)
	{
		return invoker::invoke<void, 0xAFFF2379B0BAC81C, 0xCD02D8>(ped);
	}

	FORCEINLINE auto ADD_SCENARIO_BLOCKING_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL p6, BOOL p7, BOOL p8, BOOL p9, Any p10)
	{
		return invoker::invoke<int, 0xA7B0B03284E7503C, 0xCCC8DC>(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9, p10);
	}

	FORCEINLINE auto REMOVE_SCENARIO_BLOCKING_AREAS()
	{
		return invoker::invoke<void, 0x830C51B62E7CD5B2, 0xCD7748>();
	}

	FORCEINLINE auto REMOVE_SCENARIO_BLOCKING_AREA(Any p0, BOOL p1)
	{
		return invoker::invoke<void, 0xD7B6A43ACC36D868, 0xCD7734>(p0, p1);
	}

	FORCEINLINE auto SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(float x, float y, float z, float range, int p4)
	{
		return invoker::invoke<void, 0x2485C562F3C50736, 0xCDA3E0>(x, y, z, range, p4);
	}

	FORCEINLINE auto DOES_SCENARIO_BLOCKING_AREA_EXISTS(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<BOOL, 0xCFE9A25C2271CFBF, 0xCCDCCC>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto IS_PED_USING_SCENARIO(Ped ped, const char* scenario)
	{
		return invoker::invoke<BOOL, 0x282B0289FBD3C119, 0xCD1B8C>(ped, scenario);
	}

	FORCEINLINE auto IS_PED_USING_ANY_SCENARIO(Ped ped)
	{
		return invoker::invoke<BOOL, 0x5110BDFA9CB51F2B, 0xCD1B68>(ped);
	}

	FORCEINLINE auto SET_PED_PANIC_EXIT_SCENARIO(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<BOOL, 0x51468F9DE2FB70E4, 0xCD94BC>(p0, p1, p2, p3);
	}

	FORCEINLINE auto TOGGLE_SCENARIO_PED_COWER_IN_PLACE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x2A3951555E558728, 0xCDABC8>(ped, toggle);
	}

	FORCEINLINE auto TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<BOOL, 0xD4DE27DF3E2EBFF4, 0xCDAC0C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<BOOL, 0xFFB6CB69ACC75D8D, 0xCD9778>(p0, p1, p2, p3);
	}

	FORCEINLINE auto SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(Ped ped)
	{
		return invoker::invoke<void, 0xAB51C8960A87DF53, 0xCD97D4>(ped);
	}

	FORCEINLINE auto SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(Ped ped)
	{
		return invoker::invoke<void, 0x895CE77855F9AFD2, 0xCD97C8>(ped);
	}

	FORCEINLINE auto SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(Ped ped, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<BOOL, 0x36B2377A209962E5, 0xCD97A0>(ped, p1, p2, p3);
	}

	FORCEINLINE auto SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0x77837D91524AF89C, 0xCD9750>(ped, p1);
	}

	FORCEINLINE auto SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(Any p0, BOOL p1)
	{
		return invoker::invoke<void, 0x92298AA9DE8C4A55, 0xCD9764>(p0, p1);
	}

	FORCEINLINE auto SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(Any p0, BOOL p1)
	{
		return invoker::invoke<void, 0xE54C4227DC826E1C, 0xCD97E0>(p0, p1);
	}

	FORCEINLINE auto IS_PED_GESTURING(Any p0)
	{
		return invoker::invoke<BOOL, 0xB3BE3390D375B97E, 0xCD108C>(p0);
	}

	FORCEINLINE auto RESET_FACIAL_IDLE_ANIM(Ped ped)
	{
		return invoker::invoke<void, 0xCE0A933AAD7CE47D, 0xCD7968>(ped);
	}

	FORCEINLINE auto PLAY_FACIAL_ANIM(Ped ped, const char* animName, const char* animDict)
	{
		return invoker::invoke<void, 0x7ACB6964CC7261E4, 0xCD747C>(ped, animName, animDict);
	}

	FORCEINLINE auto SET_FACIAL_CLIPSET(Ped ped, const char* animDict)
	{
		return invoker::invoke<void, 0xA86012225D130D96, 0xCD81DC>(ped, animDict);
	}

	FORCEINLINE auto SET_FACIAL_IDLE_ANIM_OVERRIDE(Ped ped, const char* animName, const char* animDict)
	{
		return invoker::invoke<void, 0x2C09C6B54CFCFAF1, 0xCD81EC>(ped, animName, animDict);
	}

	FORCEINLINE auto CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(Ped ped)
	{
		return invoker::invoke<void, 0x490EA3A0CF334F58, 0xCCD150>(ped);
	}

	FORCEINLINE auto SET_PED_CAN_PLAY_GESTURE_ANIMS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x47B4C8905694BBE1, 0xCD8C1C>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_PLAY_VISEME_ANIMS(Ped ped, BOOL toggle, BOOL p2)
	{
		return invoker::invoke<void, 0x5260CB9F2F8EA05A, 0xCD8C44>(ped, toggle, p2);
	}

	FORCEINLINE auto SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0x39259B19C39CA05F, 0xCD9310>(ped, p1);
	}

	FORCEINLINE auto SET_PED_CAN_PLAY_AMBIENT_ANIMS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xC1BC1B8A5AA67C6B, 0xCD8BF4>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xD9757FAB956617BA, 0xCD8C08>(ped, toggle);
	}

	FORCEINLINE auto TRIGGER_IDLE_ANIMATION_ON_PED(Ped ped)
	{
		return invoker::invoke<void, 0xC4BFA8F80937118D, 0xCDAC00>(ped);
	}

	FORCEINLINE auto SET_PED_CAN_ARM_IK(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x59481BA67136FCF1, 0xCD8AC0>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_HEAD_IK(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x7B9040E912A4EA1, 0xCD8BA0>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_LEG_IK(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x2270A1F43A18098E, 0xCD8BB4>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_TORSO_IK(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xEAF677B65FA8A40, 0xCD8CCC>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_TORSO_REACT_IK(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0xCCA22A4A1FC7433F, 0xCD8CE0>(ped, p1);
	}

	FORCEINLINE auto SET_PED_CAN_TORSO_VEHICLE_IK(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0xD6AD3D0B48A10776, 0xCD8CF4>(ped, p1);
	}

	FORCEINLINE auto SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x26C12212366CBF6E, 0xCD8D08>(ped, toggle);
	}

	FORCEINLINE auto IS_PED_HEADTRACKING_PED(Ped ped1, Ped ped2)
	{
		return invoker::invoke<BOOL, 0x9E437CA2E2CAD79D, 0xCD11E0>(ped1, ped2);
	}

	FORCEINLINE auto IS_PED_HEADTRACKING_ENTITY(Ped ped, Entity entity)
	{
		return invoker::invoke<BOOL, 0x2E0309EF5F2EBDB1, 0xCD11B8>(ped, entity);
	}

	FORCEINLINE auto SET_PED_PRIMARY_LOOKAT(Ped ped, Ped lookAt)
	{
		return invoker::invoke<void, 0x183A28D5B0D656FF, 0xCD960C>(ped, lookAt);
	}

	FORCEINLINE auto SET_PED_CLOTH_PIN_FRAMES(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x5B0311DB2CD63603, 0xCD8D78>(p0, p1);
	}

	FORCEINLINE auto SET_PED_CLOTH_PACKAGE_INDEX(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x71AA6A2F0208FC46, 0xCD8D4C>(p0, p1);
	}

	FORCEINLINE auto SET_PED_CLOTH_PRONE(Any p0, BOOL p1)
	{
		return invoker::invoke<void, 0x8AADE09D284D2B86, 0xCD8DA4>(p0, p1);
	}

	FORCEINLINE auto SET_PED_CONFIG_FLAG(Ped ped, int flagId, BOOL value)
	{
		return invoker::invoke<void, 0x428AFDCAA63B06E, 0xCD8E9C>(ped, flagId, value);
	}

	FORCEINLINE auto SET_PED_RESET_FLAG(Ped ped, int flagId, BOOL doReset)
	{
		return invoker::invoke<void, 0xFB8E752BCC547A9, 0xCD96DC>(ped, flagId, doReset);
	}

	FORCEINLINE auto GET_PED_CONFIG_FLAG(Ped ped, int flagId, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x49F8918E2DC5FFBC, 0xCCF0AC>(ped, flagId, p2);
	}

	FORCEINLINE auto GET_PED_RESET_FLAG(Ped ped, int flagId)
	{
		return invoker::invoke<BOOL, 0x25281901DECB32C, 0xCCF604>(ped, flagId);
	}

	FORCEINLINE auto SET_PED_GROUP_MEMBER_PASSENGER_INDEX(Ped ped, int index)
	{
		return invoker::invoke<void, 0x412B9F2CF0E60079, 0xCD9154>(ped, index);
	}

	FORCEINLINE auto SET_PED_CAN_EVASIVE_DIVE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x84D421ACEBF9E529, 0xCD8B8C>(ped, toggle);
	}

	FORCEINLINE auto IS_PED_EVASIVE_DIVING(Ped ped, Entity* evadingEntity)
	{
		return invoker::invoke<BOOL, 0x60C848F2DC20EC23, 0xCD0FCC>(ped, evadingEntity);
	}

	FORCEINLINE auto SET_PED_SHOOTS_AT_COORD(Ped ped, float x, float y, float z, BOOL toggle)
	{
		return invoker::invoke<void, 0xC7AF90C5FC07B06B, 0xCD9728>(ped, x, y, z, toggle);
	}

	FORCEINLINE auto SET_PED_MODEL_IS_SUPPRESSED(Hash modelHash, BOOL toggle)
	{
		return invoker::invoke<void, 0xA1F44380A2D59F2B, 0xCD9404>(modelHash, toggle);
	}

	FORCEINLINE auto STOP_ANY_PED_MODEL_BEING_SUPPRESSED()
	{
		return invoker::invoke<void, 0xE5D8756E0C3EFFB7, 0xCDAA34>();
	}

	FORCEINLINE auto SET_PED_CAN_BE_TARGETED_WHEN_INJURED(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x11FB2E1F7BAAB75A, 0xCD8B0C>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_GENERATES_DEAD_BODY_EVENTS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x338FB3F98A204FD0, 0xCD9108>(ped, toggle);
	}

	FORCEINLINE auto BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x26F0AA3C95EE2A6B, 0xCCCCA8>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xA8F01F16717271B9, 0xCD9B50>(p0, p1);
	}

	FORCEINLINE auto SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x81E9E7612B0E4BCE, 0xCD8C70>(ped, toggle);
	}

	FORCEINLINE auto GIVE_PED_HELMET(Ped ped, BOOL cannotRemove, int helmetFlag, int textureIndex)
	{
		return invoker::invoke<void, 0x165FAFDA0B5E4A40, 0xCD02BC>(ped, cannotRemove, helmetFlag, textureIndex);
	}

	FORCEINLINE auto REMOVE_PED_HELMET(Ped ped, BOOL instantly)
	{
		return invoker::invoke<void, 0xE4E1DBF4388028C0, 0xCD76D8>(ped, instantly);
	}

	FORCEINLINE auto IS_PED_TAKING_OFF_HELMET(Ped ped)
	{
		return invoker::invoke<BOOL, 0x1073851035816B77, 0xCD1AA8>(ped);
	}

	FORCEINLINE auto SET_PED_HELMET(Ped ped, BOOL canWearHelmet)
	{
		return invoker::invoke<void, 0xECF7FE1783A38672, 0xCD9214>(ped, canWearHelmet);
	}

	FORCEINLINE auto SET_PED_HELMET_FLAG(Ped ped, int helmetFlag)
	{
		return invoker::invoke<void, 0x2D581D395A36F669, 0xCD9228>(ped, helmetFlag);
	}

	FORCEINLINE auto SET_PED_HELMET_PROP_INDEX(Ped ped, int propIndex, BOOL p2)
	{
		return invoker::invoke<void, 0x8112F193D4649FEA, 0xCD9238>(ped, propIndex, p2);
	}

	FORCEINLINE auto SET_PED_HELMET_VISOR_PROP_INDICES(Ped ped, BOOL p1, int p2, int p3)
	{
		return invoker::invoke<void, 0xE354CDA241A4A73E, 0xCD9260>(ped, p1, p2, p3);
	}

	FORCEINLINE auto IS_PED_HELMET_VISOR_UP(Ped ped)
	{
		return invoker::invoke<BOOL, 0x99D9C76822DA4A29, 0xCD1208>(ped);
	}

	FORCEINLINE auto SET_PED_HELMET_TEXTURE_INDEX(Ped ped, int textureIndex)
	{
		return invoker::invoke<void, 0x297DBAD88EF053F9, 0xCD9250>(ped, textureIndex);
	}

	FORCEINLINE auto IS_PED_WEARING_HELMET(Ped ped)
	{
		return invoker::invoke<BOOL, 0x6DBAC05AFA907A23, 0xCD1BD8>(ped);
	}

	FORCEINLINE auto CLEAR_PED_STORED_HAT_PROP(Ped ped)
	{
		return invoker::invoke<void, 0x8452AC966C087132, 0xCCD320>(ped);
	}

	FORCEINLINE auto GET_PED_HELMET_STORED_HAT_PROP_INDEX(Ped ped)
	{
		return invoker::invoke<int, 0xB34A70D5AC13FB8C, 0xCCF388>(ped);
	}

	FORCEINLINE auto GET_PED_HELMET_STORED_HAT_TEX_INDEX(Ped ped)
	{
		return invoker::invoke<int, 0xAA6E5BB6733B4BB0, 0xCCF3A8>(ped);
	}

	FORCEINLINE auto IS_CURRENT_HEAD_PROP_A_HELMET(Any p0)
	{
		return invoker::invoke<BOOL, 0xBA172498AF5A8211, 0xCD0928>(p0);
	}

	FORCEINLINE auto SET_PED_TO_LOAD_COVER(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x70FF391C9D345B04, 0xCD9968>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_COWER_IN_COVER(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x32089D2C6AD6199B, 0xCD8B78>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_PEEK_IN_COVER(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x2D3F2F7AD2E2AB65, 0xCD8BE0>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xD78BC33933604161, 0x81A1C0>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_LEG_IK_MODE(Ped ped, int mode)
	{
		return invoker::invoke<void, 0xFC85193CBD98FD69, 0xCD9338>(ped, mode);
	}

	FORCEINLINE auto SET_PED_MOTION_BLUR(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xD4109F723B3DF74F, 0xCD9428>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CAN_SWITCH_WEAPON(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xD724351CCF90F653, 0xCD8CA0>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_DIES_INSTANTLY_IN_WATER(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x3FF406EF0BE27DA3, 0xCD8FCC>(ped, toggle);
	}

	FORCEINLINE auto SET_LADDER_CLIMB_INPUT_STATE(Ped ped, int p1)
	{
		return invoker::invoke<void, 0x52E59AF01BE23E89, 0xCD8468>(ped, p1);
	}

	FORCEINLINE auto STOP_PED_WEAPON_FIRING_WHEN_DROPPED(Ped ped)
	{
		return invoker::invoke<void, 0x9EDCA2C3E5F3B330, 0xCDAA4C>(ped);
	}

	FORCEINLINE auto SET_SCRIPTED_ANIM_SEAT_OFFSET(Ped ped, float p1)
	{
		return invoker::invoke<void, 0x3DE9177F07328831, 0xCDA418>(ped, p1);
	}

	FORCEINLINE auto SET_PED_COMBAT_MOVEMENT(Ped ped, int combatMovement)
	{
		return invoker::invoke<void, 0xD0764B65C2DFEDCA, 0xCD8E18>(ped, combatMovement);
	}

	FORCEINLINE auto GET_PED_COMBAT_MOVEMENT(Ped ped)
	{
		return invoker::invoke<int, 0x3EFB664623EEAD3F, 0xCCF06C>(ped);
	}

	FORCEINLINE auto SET_PED_COMBAT_ABILITY(Ped ped, int abilityLevel)
	{
		return invoker::invoke<void, 0x139711196A42A037, 0xCD8DD4>(ped, abilityLevel);
	}

	FORCEINLINE auto SET_PED_COMBAT_RANGE(Ped ped, int combatRange)
	{
		return invoker::invoke<void, 0x1090EAA386FB31A8, 0xCD8E44>(ped, combatRange);
	}

	FORCEINLINE auto GET_PED_COMBAT_RANGE(Ped ped)
	{
		return invoker::invoke<int, 0x883842C6E1BC2105, 0xCCF08C>(ped);
	}

	FORCEINLINE auto SET_PED_COMBAT_ATTRIBUTES(Ped ped, int attributeId, BOOL enabled)
	{
		return invoker::invoke<void, 0xBE8796DB2B90A437, 0xCD8E00>(ped, attributeId, enabled);
	}

	FORCEINLINE auto SET_PED_TARGET_LOSS_RESPONSE(Ped ped, int responseType)
	{
		return invoker::invoke<void, 0x570AAA413775DFFB, 0xCD9928>(ped, responseType);
	}

	FORCEINLINE auto IS_PED_PERFORMING_MELEE_ACTION(Ped ped)
	{
		return invoker::invoke<BOOL, 0xB73833BDAAE31047, 0xCD1764>(ped);
	}

	FORCEINLINE auto IS_PED_PERFORMING_STEALTH_KILL(Ped ped)
	{
		return invoker::invoke<BOOL, 0x729CB628AF931FC1, 0xCD1788>(ped);
	}

	FORCEINLINE auto IS_PED_PERFORMING_A_COUNTER_ATTACK(Ped ped)
	{
		return invoker::invoke<BOOL, 0xB915B7889D38C06A, 0xCD1740>(ped);
	}

	FORCEINLINE auto IS_PED_BEING_STEALTH_KILLED(Ped ped)
	{
		return invoker::invoke<BOOL, 0x145143011E40A843, 0xCD0DC8>(ped);
	}

	FORCEINLINE auto GET_MELEE_TARGET_FOR_PED(Ped ped)
	{
		return invoker::invoke<Ped, 0xC148F260F73A1A6B, 0xCCE9EC>(ped);
	}

	FORCEINLINE auto WAS_PED_KILLED_BY_STEALTH(Ped ped)
	{
		return invoker::invoke<BOOL, 0x5BDFCAB88CC62A9B, 0xCDB9C8>(ped);
	}

	FORCEINLINE auto WAS_PED_KILLED_BY_TAKEDOWN(Ped ped)
	{
		return invoker::invoke<BOOL, 0xD9F6166CE6292D26, 0xCDB9EC>(ped);
	}

	FORCEINLINE auto WAS_PED_KNOCKED_OUT(Ped ped)
	{
		return invoker::invoke<BOOL, 0x969DAA52492D900B, 0xCDBA10>(ped);
	}

	FORCEINLINE auto SET_PED_FLEE_ATTRIBUTES(Ped ped, int attributeFlags, BOOL enable)
	{
		return invoker::invoke<void, 0x1CA08719184AFC6F, 0xCD90F0>(ped, attributeFlags, enable);
	}

	FORCEINLINE auto SET_PED_COWER_HASH(Ped ped, const char* p1)
	{
		return invoker::invoke<void, 0xE591C62C2F46B4D7, 0xCD8ED4>(ped, p1);
	}

	FORCEINLINE auto SET_PED_STEERS_AROUND_DEAD_BODIES(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xB18666D28D4F44C5, 0xCD9854>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_STEERS_AROUND_PEDS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x639E8A4EA31DD813, 0xCD987C>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_STEERS_AROUND_OBJECTS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xD6218A048A54AAB5, 0xCD9868>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_STEERS_AROUND_VEHICLES(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x98692EF468EC3185, 0xCD9890>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_IS_AVOIDED_BY_OTHERS(Any p0, BOOL p1)
	{
		return invoker::invoke<void, 0xC55B2DE435555EC3, 0xCD92FC>(p0, p1);
	}

	FORCEINLINE auto SET_PED_INCREASED_AVOIDANCE_RADIUS(Ped ped)
	{
		return invoker::invoke<void, 0xB739D4CB4D58B663, 0xCD92BC>(ped);
	}

	FORCEINLINE auto SET_PED_BLOCKS_PATHING_WHEN_DEAD(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x67CBB32D0502A940, 0xCD8A90>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_NO_TIME_DELAY_BEFORE_SHOT(Any p0)
	{
		return invoker::invoke<void, 0x80DCC55011762DB5, 0xCD94B0>(p0);
	}

	FORCEINLINE auto IS_ANY_PED_NEAR_POINT(float x, float y, float z, float radius)
	{
		return invoker::invoke<BOOL, 0x2DBCF31839B069B4, 0xCD076C>(x, y, z, radius);
	}

	FORCEINLINE auto FORCE_PED_AI_AND_ANIMATION_UPDATE(Ped ped, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xD8ED11B32DF72E0B, 0xCCE050>(ped, p1, p2);
	}

	FORCEINLINE auto IS_PED_HEADING_TOWARDS_POSITION(Ped ped, float x, float y, float z, float p4)
	{
		return invoker::invoke<BOOL, 0xA702E444F81F0A83, 0xCD118C>(ped, x, y, z, p4);
	}

	FORCEINLINE auto REQUEST_PED_VISIBILITY_TRACKING(Ped ped)
	{
		return invoker::invoke<void, 0x7A8C6BB4DA2434F1, 0xCD78B4>(ped);
	}

	FORCEINLINE auto REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0x7AA365BA6A18440B, 0xCD78A0>(ped, p1);
	}

	FORCEINLINE auto REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0x2437F0D5BB0A2298, 0xCD7878>(ped, p1);
	}

	FORCEINLINE auto REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0xB861E76BA27B15F1, 0xCD788C>(ped, p1);
	}

	FORCEINLINE auto IS_TRACKED_PED_VISIBLE(Ped ped)
	{
		return invoker::invoke<BOOL, 0x731EE2A006FD5120, 0xCD2324>(ped);
	}

	FORCEINLINE auto GET_TRACKED_PED_PIXELCOUNT(Ped ped)
	{
		return invoker::invoke<int, 0x9AD0C5A6374B4A86, 0xCD0094>(ped);
	}

	FORCEINLINE auto IS_PED_TRACKED(Ped ped)
	{
		return invoker::invoke<BOOL, 0xDEA601233F857293, 0xCD1ADC>(ped);
	}

	FORCEINLINE auto HAS_PED_RECEIVED_EVENT(Ped ped, int eventId)
	{
		return invoker::invoke<BOOL, 0x613F3705BEA060B4, 0xCD050C>(ped, eventId);
	}

	FORCEINLINE auto CAN_PED_SEE_HATED_PED(Ped ped1, Ped ped2)
	{
		return invoker::invoke<BOOL, 0x7E54CB377175F94E, 0xCCCE64>(ped1, ped2);
	}

	FORCEINLINE auto CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(Ped ped, int* p1)
	{
		return invoker::invoke<BOOL, 0xB4C8F59204E526EA, 0xCCCEB4>(ped, p1);
	}

	FORCEINLINE auto CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(Ped ped, int* p1)
	{
		return invoker::invoke<BOOL, 0xFB91087FE596EC02, 0xCCCE8C>(ped, p1);
	}

	FORCEINLINE auto GET_PED_BONE_INDEX(Ped ped, int boneId)
	{
		return invoker::invoke<int, 0x72F7E39FB49FC0BA, 0xCCF01C>(ped, boneId);
	}

	FORCEINLINE auto GET_PED_RAGDOLL_BONE_INDEX(Ped ped, int bone)
	{
		return invoker::invoke<int, 0xA2EFF78CEBC29932, 0xCCF5B4>(ped, bone);
	}

	FORCEINLINE auto SET_PED_ENVEFF_SCALE(Ped ped, float value)
	{
		return invoker::invoke<void, 0xDD7B1A7458742205, 0xCD90D0>(ped, value);
	}

	FORCEINLINE auto GET_PED_ENVEFF_SCALE(Ped ped)
	{
		return invoker::invoke<float, 0x5D023856BF4C9AB2, 0xCCF230>(ped);
	}

	FORCEINLINE auto SET_ENABLE_PED_ENVEFF_SCALE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xC91E7DFEE6F07739, 0xCD8110>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_ENVEFF_CPV_ADD(Ped ped, float p1)
	{
		return invoker::invoke<void, 0xD9101AFF302E59F6, 0xCD90C0>(ped, p1);
	}

	FORCEINLINE auto SET_PED_ENVEFF_COLOR_MODULATOR(Ped ped, int p1, int p2, int p3)
	{
		return invoker::invoke<void, 0xA681A230BE3E4A24, 0xCD90A8>(ped, p1, p2, p3);
	}

	FORCEINLINE auto SET_PED_EMISSIVE_SCALE(Ped ped, float intensity)
	{
		return invoker::invoke<void, 0xB0FB407889558D1A, 0xCD9054>(ped, intensity);
	}

	FORCEINLINE auto GET_PED_EMISSIVE_SCALE(Ped ped)
	{
		return invoker::invoke<float, 0x6D7810EB34D1A1E3, 0xCCF20C>(ped);
	}

	FORCEINLINE auto IS_PED_SHADER_READY(Ped ped)
	{
		return invoker::invoke<BOOL, 0xE87274DCAEC35329, 0xCD1900>(ped);
	}

	FORCEINLINE auto SET_PED_ENABLE_CREW_EMBLEM(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xE8CE8BAA294AD605, 0xCD9064>(ped, toggle);
	}

	FORCEINLINE auto REQUEST_RAGDOLL_BOUNDS_UPDATE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xA56B5C6A4349684D, 0x81A1C0>(p0, p1);
	}

	FORCEINLINE auto SET_PED_AO_BLOB_RENDERING(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x949A46B6409BF541, 0xCD89F8>(ped, toggle);
	}

	FORCEINLINE auto IS_PED_SHELTERED(Ped ped)
	{
		return invoker::invoke<BOOL, 0x21754B7D780A311, 0xCD1924>(ped);
	}

	FORCEINLINE auto CREATE_SYNCHRONIZED_SCENE(float x, float y, float z, float roll, float pitch, float yaw, int p6)
	{
		return invoker::invoke<int, 0x2EC137C692A52458, 0xCCD960>(x, y, z, roll, pitch, yaw, p6);
	}

	FORCEINLINE auto CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(float x, float y, float z, float radius, Hash object)
	{
		return invoker::invoke<int, 0xEC6D10B2D602CDDF, 0xCCD988>(x, y, z, radius, object);
	}

	FORCEINLINE auto IS_SYNCHRONIZED_SCENE_RUNNING(int sceneId)
	{
		return invoker::invoke<BOOL, 0x5266F1D2AEF6F73A, 0xCD2254>(sceneId);
	}

	FORCEINLINE auto SET_SYNCHRONIZED_SCENE_ORIGIN(int sceneID, float x, float y, float z, float roll, float pitch, float yaw, BOOL p7)
	{
		return invoker::invoke<void, 0x8E654C1A28DAD371, 0xCDA51C>(sceneID, x, y, z, roll, pitch, yaw, p7);
	}

	FORCEINLINE auto SET_SYNCHRONIZED_SCENE_PHASE(int sceneID, float phase)
	{
		return invoker::invoke<void, 0x7BB893EF8F683419, 0xCDA534>(sceneID, phase);
	}

	FORCEINLINE auto GET_SYNCHRONIZED_SCENE_PHASE(int sceneID)
	{
		return invoker::invoke<float, 0xBD3B265153D3BA2D, 0xCCFF00>(sceneID);
	}

	FORCEINLINE auto SET_SYNCHRONIZED_SCENE_RATE(int sceneID, float rate)
	{
		return invoker::invoke<void, 0x16B754A9C2FD8E74, 0xCDA544>(sceneID, rate);
	}

	FORCEINLINE auto GET_SYNCHRONIZED_SCENE_RATE(int sceneID)
	{
		return invoker::invoke<float, 0x81A27DBBC2296EB2, 0xCCFF24>(sceneID);
	}

	FORCEINLINE auto SET_SYNCHRONIZED_SCENE_LOOPED(int sceneID, BOOL toggle)
	{
		return invoker::invoke<void, 0xBF3497E24DEAD835, 0xCDA508>(sceneID, toggle);
	}

	FORCEINLINE auto IS_SYNCHRONIZED_SCENE_LOOPED(int sceneID)
	{
		return invoker::invoke<BOOL, 0x7E2BC58952835E3B, 0xCD2230>(sceneID);
	}

	FORCEINLINE auto SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(int sceneID, BOOL toggle)
	{
		return invoker::invoke<void, 0xA7C372501A8A3B23, 0xCDA4F4>(sceneID, toggle);
	}

	FORCEINLINE auto IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(int sceneID)
	{
		return invoker::invoke<BOOL, 0x5BD19E1149597B09, 0xCD220C>(sceneID);
	}

	FORCEINLINE auto ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(int sceneID, Entity entity, int boneIndex)
	{
		return invoker::invoke<void, 0x2DCB8CA1FE6895AB, 0xCCCC68>(sceneID, entity, boneIndex);
	}

	FORCEINLINE auto DETACH_SYNCHRONIZED_SCENE(int sceneID)
	{
		return invoker::invoke<void, 0x83E8210E2B5723F2, 0xCCDA38>(sceneID);
	}

	FORCEINLINE auto TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(int scene)
	{
		return invoker::invoke<void, 0x7DF2AFED58568A, 0xCDAAE0>(scene);
	}

	FORCEINLINE auto FORCE_PED_MOTION_STATE(Ped ped, Hash motionStateHash, BOOL p2, int p3, BOOL p4)
	{
		return invoker::invoke<BOOL, 0x717804C8C8DA67BF, 0xCCE06C>(ped, motionStateHash, p2, p3, p4);
	}

	FORCEINLINE auto GET_PED_CURRENT_MOVE_BLEND_RATIO(Ped ped, float* speedX, float* speedY)
	{
		return invoker::invoke<BOOL, 0x5437DF794F3A1FAA, 0xCCF0DC>(ped, speedX, speedY);
	}

	FORCEINLINE auto SET_PED_MAX_MOVE_BLEND_RATIO(Ped ped, float value)
	{
		return invoker::invoke<void, 0x4190C67D524CD0DC, 0xCD9368>(ped, value);
	}

	FORCEINLINE auto SET_PED_MIN_MOVE_BLEND_RATIO(Ped ped, float value)
	{
		return invoker::invoke<void, 0x7992D566A90CD49C, 0xCD93F4>(ped, value);
	}

	FORCEINLINE auto SET_PED_MOVE_RATE_OVERRIDE(Ped ped, float value)
	{
		return invoker::invoke<void, 0xB27B08E34AC92345, 0xCD947C>(ped, value);
	}

	FORCEINLINE auto SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(Ped ped, float p1)
	{
		return invoker::invoke<void, 0xFF02104E431CCA25, 0xCD946C>(ped, p1);
	}

	FORCEINLINE auto PED_HAS_SEXINESS_FLAG_SET(Ped ped, int sexinessFlag)
	{
		return invoker::invoke<BOOL, 0x840F81C8B23F1122, 0xCD7370>(ped, sexinessFlag);
	}

	FORCEINLINE auto GET_PED_NEARBY_VEHICLES(Ped ped, Any* sizeAndVehs)
	{
		return invoker::invoke<int, 0xD65B4E942A960E26, 0xCCF48C>(ped, sizeAndVehs);
	}

	FORCEINLINE auto GET_PED_NEARBY_PEDS(Ped ped, Any* sizeAndPeds, int ignore)
	{
		return invoker::invoke<int, 0xAA3F0A9E20917995, 0xCCF464>(ped, sizeAndPeds, ignore);
	}

	FORCEINLINE auto HAVE_ALL_STREAMING_REQUESTS_COMPLETED(Ped ped)
	{
		return invoker::invoke<BOOL, 0x69CD279BFCFE278E, 0xCD0610>(ped);
	}

	FORCEINLINE auto IS_PED_USING_ACTION_MODE(Ped ped)
	{
		return invoker::invoke<BOOL, 0x1072B16512C86D96, 0xCD1B34>(ped);
	}

	FORCEINLINE auto SET_PED_USING_ACTION_MODE(Ped ped, BOOL p1, int p2, const char* action)
	{
		return invoker::invoke<void, 0x96A0632EBDD87FA3, 0xCD9A54>(ped, p1, p2, action);
	}

	FORCEINLINE auto SET_MOVEMENT_MODE_OVERRIDE(Ped ped, const char* name)
	{
		return invoker::invoke<void, 0x5C61336874E84777, 0xCD8624>(ped, name);
	}

	FORCEINLINE auto SET_PED_CAPSULE(Ped ped, float value)
	{
		return invoker::invoke<void, 0x4FC75A7251431C6, 0xCD8D1C>(ped, value);
	}

	FORCEINLINE auto REGISTER_PEDHEADSHOT(Ped ped)
	{
		return invoker::invoke<int, 0x5CF63381522A9972, 0xCD7504>(ped);
	}

	FORCEINLINE auto REGISTER_PEDHEADSHOT_HIRES(Ped ped)
	{
		return invoker::invoke<int, 0xA4C84E0CB47D2F16, 0xCD7524>(ped);
	}

	FORCEINLINE auto REGISTER_PEDHEADSHOT_TRANSPARENT(Ped ped)
	{
		return invoker::invoke<int, 0xD993C02BC3A99162, 0xCD7544>(ped);
	}

	FORCEINLINE auto UNREGISTER_PEDHEADSHOT(int id)
	{
		return invoker::invoke<void, 0x697995B2B26B6CD4, 0xCDB91C>(id);
	}

	FORCEINLINE auto IS_PEDHEADSHOT_VALID(int id)
	{
		return invoker::invoke<BOOL, 0xCF3FA9D6B87D2277, 0xCD0D38>(id);
	}

	FORCEINLINE auto IS_PEDHEADSHOT_READY(int id)
	{
		return invoker::invoke<BOOL, 0x445B6F53EA9E6A6F, 0xCD0D0C>(id);
	}

	FORCEINLINE auto GET_PEDHEADSHOT_TXD_STRING(int id)
	{
		return invoker::invoke<const char*, 0x8C0EB38E4459EE, 0xCCEECC>(id);
	}

	FORCEINLINE auto REQUEST_PEDHEADSHOT_IMG_UPLOAD(int id)
	{
		return invoker::invoke<BOOL, 0x63F7CF92622A91BF, 0xCD7848>(id);
	}

	FORCEINLINE auto RELEASE_PEDHEADSHOT_IMG_UPLOAD(int id)
	{
		return invoker::invoke<void, 0x60EF2F9A22C75C6D, 0xCD7580>(id);
	}

	FORCEINLINE auto IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE()
	{
		return invoker::invoke<BOOL, 0x8F38E50ADC31E1C2, 0xCD0CF4>();
	}

	FORCEINLINE auto HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED()
	{
		return invoker::invoke<BOOL, 0xFE3891B19F28B05F, 0xCD0420>();
	}

	FORCEINLINE auto HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED()
	{
		return invoker::invoke<BOOL, 0x39B1D02A82A412D3, 0xCD043C>();
	}

	FORCEINLINE auto SET_PED_HEATSCALE_OVERRIDE(Ped ped, float heatScale)
	{
		return invoker::invoke<void, 0x3A99D838C9A7E1A7, 0xCD9204>(ped, heatScale);
	}

	FORCEINLINE auto DISABLE_PED_HEATSCALE_OVERRIDE(Ped ped)
	{
		return invoker::invoke<void, 0xCE75744CB55A9B5, 0xCCDACC>(ped);
	}

	FORCEINLINE auto SPAWNPOINTS_START_SEARCH(float p0, float p1, float p2, float p3, float p4, int interiorFlags, float scale, int duration)
	{
		return invoker::invoke<void, 0x965EA50BC3B24F5B, 0xCDA7D4>(p0, p1, p2, p3, p4, interiorFlags, scale, duration);
	}

	FORCEINLINE auto SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, int interiorFlags, float scale, int duration)
	{
		return invoker::invoke<void, 0xC9666089A105E4BD, 0xCDA808>(x1, y1, z1, x2, y2, z2, width, interiorFlags, scale, duration);
	}

	FORCEINLINE auto SPAWNPOINTS_CANCEL_SEARCH()
	{
		return invoker::invoke<void, 0xE07943643E972CC4, 0xCDA6F4>();
	}

	FORCEINLINE auto SPAWNPOINTS_IS_SEARCH_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xBC88293FA9783DEB, 0xCDA768>();
	}

	FORCEINLINE auto SPAWNPOINTS_IS_SEARCH_COMPLETE()
	{
		return invoker::invoke<BOOL, 0x35705F8A1AB3E367, 0xCDA78C>();
	}

	FORCEINLINE auto SPAWNPOINTS_IS_SEARCH_FAILED()
	{
		return invoker::invoke<BOOL, 0x54CEFF81D65925A1, 0xCDA7B0>();
	}

	FORCEINLINE auto SPAWNPOINTS_GET_NUM_SEARCH_RESULTS()
	{
		return invoker::invoke<int, 0x53367B4589EB191D, 0xCDA700>();
	}

	FORCEINLINE auto SPAWNPOINTS_GET_SEARCH_RESULT(int randomInt, float* x, float* y, float* z)
	{
		return invoker::invoke<void, 0x47B485915DC62445, 0xCDA720>(randomInt, x, y, z);
	}

	FORCEINLINE auto SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(int p0, int* p1)
	{
		return invoker::invoke<void, 0xD0905E590E711B1A, 0xCDA738>(p0, p1);
	}

	FORCEINLINE auto SET_IK_TARGET(Ped ped, int ikIndex, Entity entityLookAt, int boneLookAt, float offsetX, float offsetY, float offsetZ, Any p7, int blendInDuration, int blendOutDuration)
	{
		return invoker::invoke<void, 0xF9F66C74E3167674, 0xCD838C>(ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration);
	}

	FORCEINLINE auto FORCE_INSTANT_LEG_IK_SETUP(Ped ped)
	{
		return invoker::invoke<void, 0x854D2E21A9863405, 0xCCE044>(ped);
	}

	FORCEINLINE auto REQUEST_ACTION_MODE_ASSET(const char* asset)
	{
		return invoker::invoke<void, 0xEC6AB0F95905E8F0, 0xCD77E0>(asset);
	}

	FORCEINLINE auto HAS_ACTION_MODE_ASSET_LOADED(const char* asset)
	{
		return invoker::invoke<BOOL, 0x2B3F2546A5C7ED4F, 0xCD0324>(asset);
	}

	FORCEINLINE auto REMOVE_ACTION_MODE_ASSET(const char* asset)
	{
		return invoker::invoke<void, 0xDBE717677A78CC44, 0xCD7608>(asset);
	}

	FORCEINLINE auto REQUEST_STEALTH_MODE_ASSET(const char* asset)
	{
		return invoker::invoke<void, 0x56943E0C3826FD0D, 0xCD78D8>(asset);
	}

	FORCEINLINE auto HAS_STEALTH_MODE_ASSET_LOADED(const char* asset)
	{
		return invoker::invoke<BOOL, 0xD3FF790CDA1D2927, 0xCD05E8>(asset);
	}

	FORCEINLINE auto REMOVE_STEALTH_MODE_ASSET(const char* asset)
	{
		return invoker::invoke<void, 0xC2B66CA01C228D6C, 0xCD7770>(asset);
	}

	FORCEINLINE auto SET_PED_LOD_MULTIPLIER(Ped ped, float multiplier)
	{
		return invoker::invoke<void, 0x93956DF263A4A0DC, 0xCD9348>(ped, multiplier);
	}

	FORCEINLINE auto SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(Ped ped, BOOL toggle, int p2)
	{
		return invoker::invoke<void, 0x6E544F5DBF10461B, 0xCD8BC8>(ped, toggle, p2);
	}

	FORCEINLINE auto SET_FORCE_FOOTSTEP_UPDATE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x711F9BE10FCB4E6B, 0xCD8200>(ped, toggle);
	}

	FORCEINLINE auto SET_FORCE_STEP_TYPE(Ped ped, BOOL p1, int type, int p3)
	{
		return invoker::invoke<void, 0xBA5E2010650D3EE0, 0xCD823C>(ped, p1, type, p3);
	}

	FORCEINLINE auto IS_ANY_HOSTILE_PED_NEAR_POINT(Ped ped, float x, float y, float z, float radius)
	{
		return invoker::invoke<BOOL, 0x830B1CF1020074B8, 0xCD0710>(ped, x, y, z, radius);
	}

	FORCEINLINE auto SET_PED_CAN_PLAY_IN_CAR_IDLES(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xDBD50CFC0081C308, 0xCD8C30>(ped, toggle);
	}

	FORCEINLINE auto IS_TARGET_PED_IN_PERCEPTION_AREA(Ped ped, Ped targetPed, float p2, float p3, float p4, float p5)
	{
		return invoker::invoke<BOOL, 0xB808915F3B0D8766, 0xCD2294>(ped, targetPed, p2, p3, p4, p5);
	}

	FORCEINLINE auto SET_POP_CONTROL_SPHERE_THIS_FRAME(float x, float y, float z, float min, float max)
	{
		return invoker::invoke<void, 0x1A3EA72E4830538F, 0xCDA228>(x, y, z, min, max);
	}

	FORCEINLINE auto FORCE_ZERO_MASS_IN_COLLISIONS(Ped ped)
	{
		return invoker::invoke<void, 0xF1EA3BEE2C40F823, 0xCCE0FC>(ped);
	}

	FORCEINLINE auto SET_DISABLE_HIGH_FALL_DEATH(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x94FC2CFCFFCE172C, 0xCD8050>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_PHONE_PALETTE_IDX(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x7CB81DD9FBD57E82, 0xCD9548>(p0, p1);
	}

	FORCEINLINE auto SET_PED_STEER_BIAS(Ped ped, float value)
	{
		return invoker::invoke<void, 0xD4D1973154415E9B, 0xCD98A4>(ped, value);
	}

	FORCEINLINE auto IS_PED_SWITCHING_WEAPON(Ped Ped)
	{
		return invoker::invoke<BOOL, 0xB8263BF236C755A5, 0xCD1A74>(Ped);
	}

	FORCEINLINE auto SET_PED_TREATED_AS_FRIENDLY(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x3B3AC5F69E21EAB7, 0xCD9A24>(p0, p1, p2);
	}

	FORCEINLINE auto SET_DISABLE_PED_MAP_COLLISION(Ped ped)
	{
		return invoker::invoke<void, 0x7EF0501CDC9F69F6, 0xCD8064>(ped);
	}

	FORCEINLINE auto ENABLE_MP_LIGHT(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x6164A393993354D7, 0xCCDF00>(ped, toggle);
	}

	FORCEINLINE auto GET_MP_LIGHT_ENABLED(Ped ped)
	{
		return invoker::invoke<BOOL, 0xAA5FEAAE62F40979, 0xCCEAA0>(ped);
	}

	FORCEINLINE auto CLEAR_COVER_POINT_FOR_PED(Ped ped)
	{
		return invoker::invoke<void, 0xE3AACA4B344A6492, 0xCCD13C>(ped);
	}

	FORCEINLINE auto SET_ALLOW_STUNT_JUMP_CAMERA(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x00, 0xCD7CE8>(ped, toggle);
	}

}
namespace OBJECT
{
	FORCEINLINE auto CREATE_OBJECT(Hash modelHash, float x, float y, float z, BOOL isNetwork, BOOL bScriptHostObj, BOOL dynamic)
	{
		return invoker::invoke<Object, 0x4E55EAB577C13329, 0xCCD6F8>(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic);
	}

	FORCEINLINE auto CREATE_OBJECT_NO_OFFSET(Hash modelHash, float x, float y, float z, BOOL isNetwork, BOOL bScriptHostObj, BOOL dynamic, Any p7)
	{
		return invoker::invoke<Object, 0x43AFC452F25F3A2F, 0xCCD73C>(modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic, p7);
	}

	FORCEINLINE auto DELETE_OBJECT(Object* object)
	{
		return invoker::invoke<void, 0x51C8BEA2005931AB, 0xCCD9F0>(object);
	}

	FORCEINLINE auto PLACE_OBJECT_ON_GROUND_PROPERLY(Object object)
	{
		return invoker::invoke<BOOL, 0x8225BA395C3FC89D, 0xCD7408>(object);
	}

	FORCEINLINE auto PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(Object object)
	{
		return invoker::invoke<BOOL, 0x711CB952E5BE087E, 0xCD73E4>(object);
	}

	FORCEINLINE auto ROTATE_OBJECT(Object object, float p1, float p2, BOOL p3)
	{
		return invoker::invoke<BOOL, 0x6ADCD027CA259B43, 0xCD7BD8>(object, p1, p2, p3);
	}

	FORCEINLINE auto SLIDE_OBJECT(Object object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, BOOL collision)
	{
		return invoker::invoke<BOOL, 0x51DACC000DE4DECC, 0xCDA6C0>(object, toX, toY, toZ, speedX, speedY, speedZ, collision);
	}

	FORCEINLINE auto SET_OBJECT_TARGETTABLE(Object object, BOOL targettable, Any p2)
	{
		return invoker::invoke<void, 0x918FE23DCE5B8322, 0xCD8870>(object, targettable, p2);
	}

	FORCEINLINE auto _SET_OBJECT_TARGETTABLE_BY_PLAYER(Object object, BOOL setFlag34, BOOL setFlag35)
	{
		return invoker::invoke<void, 0xB39F03368DB0CAA2, 0xCD888C>(object, setFlag34, setFlag35);
	}

	FORCEINLINE auto SET_OBJECT_FORCE_VEHICLES_TO_AVOID(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0x6FDDD37A4022A641, 0xCD8794>(object, toggle);
	}

	FORCEINLINE auto GET_CLOSEST_OBJECT_OF_TYPE(float x, float y, float z, float radius, Hash modelHash, BOOL isMission, BOOL p6, BOOL p7)
	{
		return invoker::invoke<Object, 0x8366ABB82B1ABC59, 0xCCE318>(x, y, z, radius, modelHash, isMission, p6, p7);
	}

	FORCEINLINE auto HAS_OBJECT_BEEN_BROKEN(Object object, Any p1)
	{
		return invoker::invoke<BOOL, 0x1C3788A51C49D6AD, 0xCD03F4>(object, p1);
	}

	FORCEINLINE auto HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(float p0, float p1, float p2, float p3, Hash modelHash, Any p5)
	{
		return invoker::invoke<BOOL, 0xF6774B3027B150AC, 0xCD034C>(p0, p1, p2, p3, modelHash, p5);
	}

	FORCEINLINE auto HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(float x, float y, float z, float radius, Hash modelHash, BOOL p5)
	{
		return invoker::invoke<BOOL, 0xF701B83DA32F7F87, 0xCD037C>(x, y, z, radius, modelHash, p5);
	}

	FORCEINLINE auto GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(Any p0)
	{
		return invoker::invoke<BOOL, 0xDD5D60B63FBBFC2, 0xCCE7C0>(p0);
	}

	FORCEINLINE auto GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(float xPos, float yPos, float zPos, float heading, float xOffset, float yOffset, float zOffset)
	{
		return invoker::invoke<Vector3, 0xF10F2A2453AF1DFB, 0xCCEE6C>(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset);
	}

	FORCEINLINE auto GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(float x, float y, float z, float radius, Hash modelHash, Vector3* outPosition, Vector3* outRotation, int rotationOrder)
	{
		return invoker::invoke<BOOL, 0x8679173785B8D495, 0xCCE5EC>(x, y, z, radius, modelHash, outPosition, outRotation, rotationOrder);
	}

	FORCEINLINE auto SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(Hash type, float x, float y, float z, BOOL locked, float heading, BOOL p6)
	{
		return invoker::invoke<void, 0x1F3E4227575DF103, 0xCDA490>(type, x, y, z, locked, heading, p6);
	}

	FORCEINLINE auto GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(Hash type, float x, float y, float z, BOOL* locked, float* heading)
	{
		return invoker::invoke<void, 0x696D2AC31CB5932A, 0xCCFE94>(type, x, y, z, locked, heading);
	}

	FORCEINLINE auto SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(Hash modelHash, float x, float y, float z, BOOL locked, float xRotMult, float yRotMult, float zRotMult)
	{
		return invoker::invoke<void, 0x6421C7C9616E4305, 0xCD8530>(modelHash, x, y, z, locked, xRotMult, yRotMult, zRotMult);
	}

	FORCEINLINE auto PLAY_OBJECT_AUTO_START_ANIM(Any p0)
	{
		return invoker::invoke<void, 0x8F07CC6637F60B7F, 0xCD7490>(p0);
	}

	FORCEINLINE auto ADD_DOOR_TO_SYSTEM(Hash doorHash, Hash modelHash, float x, float y, float z, BOOL p5, BOOL scriptDoor, BOOL isLocal, Any p8)
	{
		return invoker::invoke<void, 0xB80B2E08713B8BC6, 0xCCC7DC>(doorHash, modelHash, x, y, z, p5, scriptDoor, isLocal, p8);
	}

	FORCEINLINE auto REMOVE_DOOR_FROM_SYSTEM(Hash doorHash, Any p1)
	{
		return invoker::invoke<void, 0x19B3B7AC049E8354, 0xCD7644>(doorHash, p1);
	}

	FORCEINLINE auto DOOR_SYSTEM_SET_DOOR_STATE(Hash doorHash, int state, BOOL requestDoor, BOOL forceUpdate)
	{
		return invoker::invoke<void, 0xEBB2809684978887, 0xCCDE58>(doorHash, state, requestDoor, forceUpdate);
	}

	FORCEINLINE auto DOOR_SYSTEM_GET_DOOR_STATE(Hash doorHash)
	{
		return invoker::invoke<int, 0x117BCCA03F7A311A, 0xCCDD90>(doorHash);
	}

	FORCEINLINE auto DOOR_SYSTEM_GET_DOOR_PENDING_STATE(Hash doorHash)
	{
		return invoker::invoke<int, 0xE2A2194077783E19, 0xCCDD60>(doorHash);
	}

	FORCEINLINE auto DOOR_SYSTEM_SET_AUTOMATIC_RATE(Hash doorHash, float rate, BOOL requestDoor, BOOL forceUpdate)
	{
		return invoker::invoke<void, 0xDD0EDCD573B965E2, 0xCCDE24>(doorHash, rate, requestDoor, forceUpdate);
	}

	FORCEINLINE auto DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(Hash doorHash, float distance, BOOL requestDoor, BOOL forceUpdate)
	{
		return invoker::invoke<void, 0x57A602C0620BEFF2, 0xCCDE04>(doorHash, distance, requestDoor, forceUpdate);
	}

	FORCEINLINE auto DOOR_SYSTEM_SET_OPEN_RATIO(Hash doorHash, float ajar, BOOL requestDoor, BOOL forceUpdate)
	{
		return invoker::invoke<void, 0x3A15B21067339E98, 0xCCDE8C>(doorHash, ajar, requestDoor, forceUpdate);
	}

	FORCEINLINE auto DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(Hash doorHash)
	{
		return invoker::invoke<float, 0xE29951C625F69A92, 0xCCDD3C>(doorHash);
	}

	FORCEINLINE auto DOOR_SYSTEM_GET_OPEN_RATIO(Hash doorHash)
	{
		return invoker::invoke<float, 0x8CA2126DEA4C3796, 0xCCDDE0>(doorHash);
	}

	FORCEINLINE auto DOOR_SYSTEM_SET_SPRING_REMOVED(Hash doorHash, BOOL removed, BOOL requestDoor, BOOL forceUpdate)
	{
		return invoker::invoke<void, 0x2ED5915E42CF4212, 0xCCDEAC>(doorHash, removed, requestDoor, forceUpdate);
	}

	FORCEINLINE auto DOOR_SYSTEM_SET_HOLD_OPEN(Hash doorHash, BOOL toggle)
	{
		return invoker::invoke<void, 0xEBFE569715DB18F, 0xCCDE78>(doorHash, toggle);
	}

	FORCEINLINE auto DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(Hash doorHash, BOOL p1)
	{
		return invoker::invoke<void, 0xB80A7611D19E162B, 0xCCDE44>(doorHash, p1);
	}

	FORCEINLINE auto IS_DOOR_REGISTERED_WITH_SYSTEM(Hash doorHash)
	{
		return invoker::invoke<BOOL, 0x116053132936EA1F, 0xCD0A58>(doorHash);
	}

	FORCEINLINE auto IS_DOOR_CLOSED(Hash doorHash)
	{
		return invoker::invoke<BOOL, 0x497B2CD637A94E2A, 0xCD0A34>(doorHash);
	}

	FORCEINLINE auto OPEN_ALL_BARRIERS_FOR_RACE(BOOL p0)
	{
		return invoker::invoke<void, 0xEE7031BA6CBD6DBA, 0xCD7330>(p0);
	}

	FORCEINLINE auto CLOSE_ALL_BARRIERS_FOR_RACE()
	{
		return invoker::invoke<void, 0x3E4EE4ACF12D2A90, 0xCCD48C>();
	}

	FORCEINLINE auto DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(Any p0)
	{
		return invoker::invoke<BOOL, 0xC8E94211877921FE, 0xCCDDBC>(p0);
	}

	FORCEINLINE auto DOOR_SYSTEM_FIND_EXISTING_DOOR(float x, float y, float z, Hash modelHash, Hash* outDoorHash)
	{
		return invoker::invoke<BOOL, 0x5FE36AB1B2950A9, 0xCCDD14>(x, y, z, modelHash, outDoorHash);
	}

	FORCEINLINE auto IS_GARAGE_EMPTY(Hash garageHash, BOOL p1, int p2)
	{
		return invoker::invoke<BOOL, 0x988923E9EBDA2C20, 0xCD0AD8>(garageHash, p1, p2);
	}

	FORCEINLINE auto IS_PLAYER_ENTIRELY_INSIDE_GARAGE(Hash garageHash, Player player, float p2, int p3)
	{
		return invoker::invoke<BOOL, 0xA9BDD6C662512CA7, 0xCD1D00>(garageHash, player, p2, p3);
	}

	FORCEINLINE auto IS_PLAYER_PARTIALLY_INSIDE_GARAGE(Hash garageHash, Player player, int p2)
	{
		return invoker::invoke<BOOL, 0x3DF64ECB2401B9C1, 0xCD1DE4>(garageHash, player, p2);
	}

	FORCEINLINE auto ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(Hash garageHash, BOOL p1, BOOL p2, BOOL p3, Any p4)
	{
		return invoker::invoke<BOOL, 0xB7AFC7F5C75DCD56, 0xCCCB54>(garageHash, p1, p2, p3, p4);
	}

	FORCEINLINE auto IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(Hash garageHash, BOOL p1, BOOL p2, BOOL p3, Any p4)
	{
		return invoker::invoke<BOOL, 0x2ED8EB2145D177F8, 0xCD06CC>(garageHash, p1, p2, p3, p4);
	}

	FORCEINLINE auto IS_OBJECT_ENTIRELY_INSIDE_GARAGE(Hash garageHash, Entity entity, float p2, int p3)
	{
		return invoker::invoke<BOOL, 0x659143E4AE5A351B, 0xCD0C2C>(garageHash, entity, p2, p3);
	}

	FORCEINLINE auto IS_OBJECT_PARTIALLY_INSIDE_GARAGE(Hash garageHash, Entity entity, int p2)
	{
		return invoker::invoke<BOOL, 0x805A7BBF801B49D0, 0xCD0C88>(garageHash, entity, p2);
	}

	FORCEINLINE auto CLEAR_GARAGE(Hash garageHash, BOOL isNetwork)
	{
		return invoker::invoke<void, 0xC2A1BF59954282E5, 0xCCD15C>(garageHash, isNetwork);
	}

	FORCEINLINE auto CLEAR_OBJECTS_INSIDE_GARAGE(Hash garageHash, BOOL vehicles, BOOL peds, BOOL objects, BOOL isNetwork)
	{
		return invoker::invoke<void, 0xC175C00B24E2628F, 0xCCD188>(garageHash, vehicles, peds, objects, isNetwork);
	}

	FORCEINLINE auto DISABLE_TIDYING_UP_IN_GARAGE(int id, BOOL toggle)
	{
		return invoker::invoke<void, 0x1DC06048E0BEE337, 0xCCDB2C>(id, toggle);
	}

	FORCEINLINE auto ENABLE_SAVING_IN_GARAGE(Hash garageHash, BOOL toggle)
	{
		return invoker::invoke<void, 0xBA7A8F956317AC96, 0xCCDF14>(garageHash, toggle);
	}

	FORCEINLINE auto CLOSE_SAFEHOUSE_GARAGES()
	{
		return invoker::invoke<void, 0x3C0B3EA001613632, 0xCCD494>();
	}

	FORCEINLINE auto DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(float x, float y, float z, float radius, Hash hash, BOOL p5)
	{
		return invoker::invoke<BOOL, 0xE10356B235A70E70, 0xCCDBB4>(x, y, z, radius, hash, p5);
	}

	FORCEINLINE auto IS_POINT_IN_ANGLED_AREA(float xPos, float yPos, float zPos, float x1, float y1, float z1, float x2, float y2, float z2, float width, BOOL debug, BOOL includeZ)
	{
		return invoker::invoke<BOOL, 0x26715B0ED6702C87, 0xCD1F78>(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width, debug, includeZ);
	}

	FORCEINLINE auto SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0x1315213A9C4437FE, 0xCD8780>(object, toggle);
	}

	FORCEINLINE auto SET_OBJECT_PHYSICS_PARAMS(Object object, float weight, float p2, float p3, float p4, float p5, float gravity, float p7, float p8, float p9, float p10, float buoyancy)
	{
		return invoker::invoke<void, 0x2493F314750274C9, 0xCD87F0>(object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy);
	}

	FORCEINLINE auto GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(Any p0, BOOL p1)
	{
		return invoker::invoke<float, 0x79BDC52C38AAF639, 0xCCEE10>(p0, p1);
	}

	FORCEINLINE auto SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0x4B46E3AF872076CE, 0xCD7C68>(object, toggle);
	}

	FORCEINLINE auto IS_ANY_OBJECT_NEAR_POINT(float x, float y, float z, float range, BOOL p4)
	{
		return invoker::invoke<BOOL, 0x80F249EA6DFE8476, 0xCD073C>(x, y, z, range, p4);
	}

	FORCEINLINE auto IS_OBJECT_NEAR_POINT(Hash objectHash, float x, float y, float z, float range)
	{
		return invoker::invoke<BOOL, 0x3C38570F42680D56, 0xCD0C5C>(objectHash, x, y, z, range);
	}

	FORCEINLINE auto REMOVE_OBJECT_HIGH_DETAIL_MODEL(Object object)
	{
		return invoker::invoke<void, 0xCF9F92EF5A069BD4, 0xCD76A0>(object);
	}

	FORCEINLINE auto BREAK_OBJECT_FRAGMENT_CHILD(Object p0, Any p1, BOOL p2)
	{
		return invoker::invoke<void, 0x8C4D4D7E3B6BC910, 0xCCCD10>(p0, p1, p2);
	}

	FORCEINLINE auto DAMAGE_OBJECT_FRAGMENT_CHILD(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x3E27C7B2037D7E8B, 0xCCD9B0>(p0, p1, p2);
	}

	FORCEINLINE auto FIX_OBJECT_FRAGMENT(Object object)
	{
		return invoker::invoke<void, 0x30A5E8BBE5D07DE7, 0xCCDFEC>(object);
	}

	FORCEINLINE auto TRACK_OBJECT_VISIBILITY(Object object)
	{
		return invoker::invoke<void, 0x33D763C13554690A, 0xCDABDC>(object);
	}

	FORCEINLINE auto IS_OBJECT_VISIBLE(Object object)
	{
		return invoker::invoke<BOOL, 0xF31BAE02C52ADEFD, 0xCD0CD0>(object);
	}

	FORCEINLINE auto SET_OBJECT_IS_SPECIAL_GOLFBALL(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0x7D8D470E05A35981, 0xCD87C8>(object, toggle);
	}

	FORCEINLINE auto SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(Any p0, BOOL p1)
	{
		return invoker::invoke<void, 0xC0794F64BB12AAF8, 0xCD885C>(p0, p1);
	}

	FORCEINLINE auto ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(BOOL value)
	{
		return invoker::invoke<void, 0x137D2653DD6FE9A2, 0xCCC96C>(value);
	}

	FORCEINLINE auto SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0x7825AE6DE930430C, 0xCD7FDC>(object, toggle);
	}

	FORCEINLINE auto GET_RAYFIRE_MAP_OBJECT(float x, float y, float z, float radius, const char* name)
	{
		return invoker::invoke<Object, 0xC8C12645F5A0E13B, 0xCCFC44>(x, y, z, radius, name);
	}

	FORCEINLINE auto SET_STATE_OF_RAYFIRE_MAP_OBJECT(Object object, int state)
	{
		return invoker::invoke<void, 0xBF86159B8525B1AE, 0xCDA4C4>(object, state);
	}

	FORCEINLINE auto GET_STATE_OF_RAYFIRE_MAP_OBJECT(Object object)
	{
		return invoker::invoke<int, 0xEB4069FA281FFD9B, 0xCCFEAC>(object);
	}

	FORCEINLINE auto DOES_RAYFIRE_MAP_OBJECT_EXIST(Object object)
	{
		return invoker::invoke<BOOL, 0x502101046E18AD3F, 0xCCDC5C>(object);
	}

	FORCEINLINE auto GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(Object object)
	{
		return invoker::invoke<float, 0xEAD3338566510A40, 0xCCFC6C>(object);
	}

	FORCEINLINE auto CREATE_PICKUP(Hash pickupHash, float posX, float posY, float posZ, int p4, int value, BOOL p6, Hash modelHash)
	{
		return invoker::invoke<Pickup, 0x8D4CAF9A056EA9E4, 0xCCD848>(pickupHash, posX, posY, posZ, p4, value, p6, modelHash);
	}

	FORCEINLINE auto CREATE_PICKUP_ROTATE(Hash pickupHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, int flag, int amount, Any p9, BOOL p10, Hash modelHash)
	{
		return invoker::invoke<Pickup, 0x6FCBED6282FF5DA5, 0xCCD88C>(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash);
	}

	FORCEINLINE auto FORCE_PICKUP_ROTATE_FACE_UP()
	{
		return invoker::invoke<void, 0x82FFC7AC4E85D734, 0xCCE0C4>();
	}

	FORCEINLINE auto SET_CUSTOM_PICKUP_WEAPON_HASH(Hash pickupHash, Pickup pickup)
	{
		return invoker::invoke<void, 0xCFA4C40D5C68471B, 0xCD7FCC>(pickupHash, pickup);
	}

	FORCEINLINE auto CREATE_AMBIENT_PICKUP(Hash pickupHash, float posX, float posY, float posZ, int flags, int value, Hash modelHash, BOOL p7, BOOL p8)
	{
		return invoker::invoke<Object, 0xD0DDC0D0D8D33E57, 0xCCD5D4>(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8);
	}

	FORCEINLINE auto CREATE_NON_NETWORKED_AMBIENT_PICKUP(Hash pickupHash, float posX, float posY, float posZ, int flags, int value, Hash modelHash, BOOL p7, BOOL p8)
	{
		return invoker::invoke<Object, 0x192C5E68A3552FDC, 0xCCD670>(pickupHash, posX, posY, posZ, flags, value, modelHash, p7, p8);
	}

	FORCEINLINE auto BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x4CA2980073803EFF, 0xCCCCBC>(p0, p1);
	}

	FORCEINLINE auto CREATE_PORTABLE_PICKUP(Hash pickupHash, float x, float y, float z, BOOL placeOnGround, Hash modelHash)
	{
		return invoker::invoke<Object, 0x29F49A5884D2FD3C, 0xCCD8E4>(pickupHash, x, y, z, placeOnGround, modelHash);
	}

	FORCEINLINE auto CREATE_NON_NETWORKED_PORTABLE_PICKUP(Hash pickupHash, float x, float y, float z, BOOL placeOnGround, Hash modelHash)
	{
		return invoker::invoke<Object, 0x77573CD394E8C3B1, 0xCCD6C4>(pickupHash, x, y, z, placeOnGround, modelHash);
	}

	FORCEINLINE auto ATTACH_PORTABLE_PICKUP_TO_PED(Object pickupObject, Ped ped)
	{
		return invoker::invoke<void, 0xCD1BFD3115E1591A, 0xCCCC40>(pickupObject, ped);
	}

	FORCEINLINE auto DETACH_PORTABLE_PICKUP_FROM_PED(Object pickupObject)
	{
		return invoker::invoke<void, 0x31A69AB30F92CBD0, 0xCCDA1C>(pickupObject);
	}

	FORCEINLINE auto FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(Object object)
	{
		return invoker::invoke<void, 0x7AD61992EAE86A99, 0xCCE0CC>(object);
	}

	FORCEINLINE auto HIDE_PORTABLE_PICKUP_WHEN_DETACHED(Object pickupObject, BOOL toggle)
	{
		return invoker::invoke<void, 0x6F7F646DA603F6DF, 0xCD0680>(pickupObject, toggle);
	}

	FORCEINLINE auto SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(Hash modelHash, int number)
	{
		return invoker::invoke<void, 0x48DD7FCBAD86D46F, 0xCD856C>(modelHash, number);
	}

	FORCEINLINE auto SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(BOOL toggle)
	{
		return invoker::invoke<void, 0x2053D6988D24922A, 0xCD84D4>(toggle);
	}

	FORCEINLINE auto GET_SAFE_PICKUP_COORDS(float x, float y, float z, float p3, float p4)
	{
		return invoker::invoke<Vector3, 0x165E2DDD2BD0F07D, 0xCCFE14>(x, y, z, p3, p4);
	}

	FORCEINLINE auto ADD_EXTENDED_PICKUP_PROBE_AREA(float x, float y, float z, float radius)
	{
		return invoker::invoke<void, 0xB7E1B262DB074229, 0xCCC824>(x, y, z, radius);
	}

	FORCEINLINE auto CLEAR_EXTENDED_PICKUP_PROBE_AREAS()
	{
		return invoker::invoke<void, 0x2E42BC795274B8C1, 0xCCD148>();
	}

	FORCEINLINE auto GET_PICKUP_COORDS(Pickup pickup)
	{
		return invoker::invoke<Vector3, 0x80C8AA1625977488, 0xCCF750>(pickup);
	}

	FORCEINLINE auto SUPPRESS_PICKUP_SOUND_FOR_PICKUP(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x70351229319C8FCB, 0xCDAAC0>(p0, p1);
	}

	FORCEINLINE auto REMOVE_ALL_PICKUPS_OF_TYPE(Hash pickupHash)
	{
		return invoker::invoke<void, 0xF429153602FD9CAF, 0xCD7618>(pickupHash);
	}

	FORCEINLINE auto HAS_PICKUP_BEEN_COLLECTED(Pickup pickup)
	{
		return invoker::invoke<BOOL, 0x1D56B24774D5E23C, 0xCD0534>(pickup);
	}

	FORCEINLINE auto REMOVE_PICKUP(Pickup pickup)
	{
		return invoker::invoke<void, 0xDDFB0941A19702BE, 0xCD76F8>(pickup);
	}

	FORCEINLINE auto CREATE_MONEY_PICKUPS(float x, float y, float z, int value, int amount, Hash model)
	{
		return invoker::invoke<void, 0x24703703CFA1C70A, 0xCCD64C>(x, y, z, value, amount, model);
	}

	FORCEINLINE auto DOES_PICKUP_EXIST(Pickup pickup)
	{
		return invoker::invoke<BOOL, 0xB0E14182FAD64944, 0xCCDBE8>(pickup);
	}

	FORCEINLINE auto DOES_PICKUP_OBJECT_EXIST(Object pickupObject)
	{
		return invoker::invoke<BOOL, 0x313F30E8A7FB3625, 0xCCDC0C>(pickupObject);
	}

	FORCEINLINE auto GET_PICKUP_OBJECT(Pickup pickup)
	{
		return invoker::invoke<Object, 0xA9D6BD2486442887, 0xCCF7A8>(pickup);
	}

	FORCEINLINE auto IS_OBJECT_A_PICKUP(Object object)
	{
		return invoker::invoke<BOOL, 0xDC4C404BF0F7C610, 0xCD0BE4>(object);
	}

	FORCEINLINE auto IS_OBJECT_A_PORTABLE_PICKUP(Object object)
	{
		return invoker::invoke<BOOL, 0x51FB632E333967, 0xCD0C08>(object);
	}

	FORCEINLINE auto DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(Hash pickupHash, float x, float y, float z, float radius)
	{
		return invoker::invoke<BOOL, 0x6AA6E814FE2A18C2, 0xCCDC30>(pickupHash, x, y, z, radius);
	}

	FORCEINLINE auto SET_PICKUP_REGENERATION_TIME(Pickup pickup, int duration)
	{
		return invoker::invoke<void, 0xE611C8912D834299, 0xCD9C2C>(pickup, duration);
	}

	FORCEINLINE auto FORCE_PICKUP_REGENERATE(Any p0)
	{
		return invoker::invoke<void, 0x59955A005920818D, 0xCCE0B8>(p0);
	}

	FORCEINLINE auto SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(Player player, Hash pickupHash, BOOL toggle)
	{
		return invoker::invoke<void, 0xF3F15DACA12B4829, 0xCD9FE8>(player, pickupHash, toggle);
	}

	FORCEINLINE auto SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(Hash modelHash, BOOL toggle)
	{
		return invoker::invoke<void, 0xFE931774D31D4525, 0xCD84F4>(modelHash, toggle);
	}

	FORCEINLINE auto ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(Hash pickupHash)
	{
		return invoker::invoke<void, 0x88D79D666165710F, 0xCCC944>(pickupHash);
	}

	FORCEINLINE auto SET_TEAM_PICKUP_OBJECT(Object object, Any p1, BOOL p2)
	{
		return invoker::invoke<void, 0xBF998058B3DD9EEF, 0xCDA554>(object, p1, p2);
	}

	FORCEINLINE auto PREVENT_COLLECTION_OF_PORTABLE_PICKUP(Object object, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x26909BE8B0CCD35B, 0xCD74B4>(object, p1, p2);
	}

	FORCEINLINE auto SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0x15D82129216A84DC, 0xCD9C04>(pickup, toggle);
	}

	FORCEINLINE auto SET_PICKUP_GLOW_OFFSET(Pickup pickup, float p1)
	{
		return invoker::invoke<void, 0xED6967E98C0B750B, 0xCD9B74>(pickup, p1);
	}

	FORCEINLINE auto SET_PICKUP_OBJECT_GLOW_OFFSET(Pickup pickup, float p1, BOOL p2)
	{
		return invoker::invoke<void, 0x1EFD0C969D7EC8A5, 0xCD9BEC>(pickup, p1, p2);
	}

	FORCEINLINE auto SET_OBJECT_GLOW_IN_SAME_TEAM(Pickup pickup)
	{
		return invoker::invoke<void, 0x57619EEF13EEBFBE, 0xCD87A8>(pickup);
	}

	FORCEINLINE auto SET_PICKUP_OBJECT_ARROW_MARKER(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0x5730F7F898FC023D, 0xCD9BB4>(pickup, toggle);
	}

	FORCEINLINE auto ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0x965118645D618F6E, 0xCCC98C>(pickup, toggle);
	}

	FORCEINLINE auto GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(Hash pickupHash)
	{
		return invoker::invoke<int, 0xD44CA9207ABD071, 0xCCE650>(pickupHash);
	}

	FORCEINLINE auto SET_PICKUP_GENERATION_RANGE_MULTIPLIER(float multiplier)
	{
		return invoker::invoke<void, 0x234E9925E93F6A5A, 0xCD9B64>(multiplier);
	}

	FORCEINLINE auto GET_PICKUP_GENERATION_RANGE_MULTIPLIER()
	{
		return invoker::invoke<float, 0x2AD9C2DC3976B552, 0xCCF798>();
	}

	FORCEINLINE auto SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(BOOL p0)
	{
		return invoker::invoke<void, 0x8BD66D017AB5A655, 0xCD88B8>(p0);
	}

	FORCEINLINE auto SET_PICKUP_UNCOLLECTABLE(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0x9CA38BB13C29695F, 0xCD9C64>(pickup, toggle);
	}

	FORCEINLINE auto SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0x4C053DEF00842DC9, 0xCD9C50>(pickup, toggle);
	}

	FORCEINLINE auto SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0xCDBF6DCBFC52E781, 0xCD9B84>(pickup, toggle);
	}

	FORCEINLINE auto SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0x8EC1AE8FE5E74E2, 0xCD9C18>(pickup, toggle);
	}

	FORCEINLINE auto SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(int p0)
	{
		return invoker::invoke<void, 0x7E1C4CAEFA5571B2, 0xCD9B98>(p0);
	}

	FORCEINLINE auto SET_PORTABLE_PICKUP_PERSIST(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0x5612E9BDDC2940D7, 0xCDA23C>(pickup, toggle);
	}

	FORCEINLINE auto ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0xB192A63C891A0E89, 0xCCC9CC>(pickup, toggle);
	}

	FORCEINLINE auto FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0x95ED454235D93943, 0xCCDFF8>(pickup, toggle);
	}

	FORCEINLINE auto ALLOW_PICKUP_BY_NONE_PARTICIPANT(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0x3B4B7B1791F11CB8, 0xCCC9A0>(pickup, toggle);
	}

	FORCEINLINE auto SUPPRESS_PICKUP_REWARD_TYPE(int rewardType, BOOL suppress)
	{
		return invoker::invoke<void, 0xD346DC73B664C2EC, 0xCDAAA4>(rewardType, suppress);
	}

	FORCEINLINE auto CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION()
	{
		return invoker::invoke<void, 0x49498E53B3E184F7, 0xCCD11C>();
	}

	FORCEINLINE auto CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(int rewardType)
	{
		return invoker::invoke<void, 0xB1FED11AF36ECDD3, 0xCCD338>(rewardType);
	}

	FORCEINLINE auto RENDER_FAKE_PICKUP_GLOW(float x, float y, float z, int colorIndex)
	{
		return invoker::invoke<void, 0x60415964D3B19DC8, 0xCD7784>(x, y, z, colorIndex);
	}

	FORCEINLINE auto SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(Pickup pickup)
	{
		return invoker::invoke<void, 0xCF4D057C2C049142, 0xCD9BC8>(pickup);
	}

	FORCEINLINE auto SET_PICKUP_TRACK_DAMAGE_EVENTS(Pickup pickup, BOOL toggle)
	{
		return invoker::invoke<void, 0xD0AE52F8786F9DDC, 0xCD9C3C>(pickup, toggle);
	}

	FORCEINLINE auto SET_ENTITY_FLAG_SUPPRESS_SHADOW(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x1849D5FA4A78390C, 0xCD816C>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0xCE01C49286D13953, 0xCD8138>(object, toggle);
	}

	FORCEINLINE auto GET_WEAPON_TYPE_FROM_PICKUP_TYPE(Hash pickupHash)
	{
		return invoker::invoke<Hash, 0x5A0A30874C8AA5B2, 0xCD0270>(pickupHash);
	}

	FORCEINLINE auto GET_PICKUP_TYPE_FROM_WEAPON_HASH(Hash weaponHash)
	{
		return invoker::invoke<Hash, 0x9D3736A21578FCE2, 0xCCF7C8>(weaponHash);
	}

	FORCEINLINE auto IS_PICKUP_WEAPON_OBJECT_VALID(Object object)
	{
		return invoker::invoke<BOOL, 0x6B0D585D62AACB6F, 0xCD1BFC>(object);
	}

	FORCEINLINE auto GET_OBJECT_TINT_INDEX(Object object)
	{
		return invoker::invoke<int, 0xC557ED333E7A31E1, 0xCCEE38>(object);
	}

	FORCEINLINE auto SET_OBJECT_TINT_INDEX(Object object, int textureVariation)
	{
		return invoker::invoke<void, 0xDEFDEE8D4FA47138, 0xCD88A8>(object, textureVariation);
	}

	FORCEINLINE auto SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(float x, float y, float z, float radius, Hash modelHash, int textureVariation)
	{
		return invoker::invoke<BOOL, 0x44EFE8009F436110, 0xCDA56C>(x, y, z, radius, modelHash, textureVariation);
	}

	FORCEINLINE auto SET_PROP_TINT_INDEX(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xD3CBD77236B58852, 0xCDA2C0>(p0, p1);
	}

	FORCEINLINE auto SET_PROP_LIGHT_COLOR(Object object, BOOL p1, int r, int g, int b)
	{
		return invoker::invoke<BOOL, 0x53AEF1FECF5138CF, 0xCDA284>(object, p1, r, g, b);
	}

	FORCEINLINE auto IS_PROP_LIGHT_OVERRIDEN(Object object)
	{
		return invoker::invoke<BOOL, 0xCF84B0AC4DDC5E1C, 0xCD1FE4>(object);
	}

	FORCEINLINE auto SET_OBJECT_IS_VISIBLE_IN_MIRRORS(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0x5D56BEB3F5597195, 0xCD87DC>(object, toggle);
	}

	FORCEINLINE auto SET_OBJECT_SPEED_BOOST_AMOUNT(Object object, Any p1)
	{
		return invoker::invoke<void, 0xB853745FD2637D7F, 0xCD883C>(object, p1);
	}

	FORCEINLINE auto SET_OBJECT_SPEED_BOOST_DURATION(Object object, float duration)
	{
		return invoker::invoke<void, 0x824F169326B2BC67, 0xCD884C>(object, duration);
	}

	FORCEINLINE auto CONVERT_OLD_PICKUP_TYPE_TO_NEW(Hash pickupHash)
	{
		return invoker::invoke<Hash, 0xAC96042A1278D845, 0xCCD55C>(pickupHash);
	}

	FORCEINLINE auto SET_FORCE_OBJECT_THIS_FRAME(float x, float y, float z, float p3)
	{
		return invoker::invoke<void, 0x320BC441CADA2E79, 0xCD822C>(x, y, z, p3);
	}

	FORCEINLINE auto ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(Object object)
	{
		return invoker::invoke<void, 0xC942CD0D37369DC4, 0xCD730C>(object);
	}

	FORCEINLINE auto SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(Any p0)
	{
		return invoker::invoke<void, 0x7A2982A0B5AB7BEB, 0xCD802C>(p0);
	}

	FORCEINLINE auto SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(Entity entity, Any p1)
	{
		return invoker::invoke<void, 0x78CDDDB2C832ADEF, 0xCDA250>(entity, p1);
	}

	FORCEINLINE auto SET_DRIVE_ARTICULATED_JOINT(Object object, BOOL toggle, int p2)
	{
		return invoker::invoke<void, 0x95D654C0E9FE1D7E, 0xCD80B4>(object, toggle, p2);
	}

	FORCEINLINE auto SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(Object object, BOOL toggle, int p2, Ped ped)
	{
		return invoker::invoke<void, 0x3BC4D68025ED9B51, 0xCD80CC>(object, toggle, p2, ped);
	}

	FORCEINLINE auto SET_OBJECT_IS_A_PRESSURE_PLATE(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0x806B9D97E4C16543, 0xCD87B4>(object, toggle);
	}

	FORCEINLINE auto SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(Object object, BOOL p1)
	{
		return invoker::invoke<void, 0x6F3AF5B029E1AD6C, 0xCDA61C>(object, p1);
	}

	FORCEINLINE auto GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(Object object, Any p1)
	{
		return invoker::invoke<BOOL, 0xD935AEB5CFA7FA1B, 0xCCE844>(object, p1);
	}

	FORCEINLINE auto GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(Any p0, Any p1)
	{
		return invoker::invoke<BOOL, 0xA06DCC0EBCEFF7EA, 0xCCE804>(p0, p1);
	}

	FORCEINLINE auto SET_IS_OBJECT_ARTICULATED(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0x140444BB8ABDB066, 0xCD8424>(object, toggle);
	}

	FORCEINLINE auto SET_IS_OBJECT_BALL(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0x9D0318A9D395CB5, 0xCD8438>(object, toggle);
	}

}
namespace WEAPON
{
	FORCEINLINE auto ENABLE_LASER_SIGHT_RENDERING(BOOL toggle)
	{
		return invoker::invoke<void, 0xAB078CF87FA0D018, 0xD62208>(toggle);
	}

	FORCEINLINE auto GET_WEAPON_COMPONENT_TYPE_MODEL(Hash componentHash)
	{
		return invoker::invoke<Hash, 0xB39F6B1C186F538E, 0xD64A34>(componentHash);
	}

	FORCEINLINE auto GET_WEAPONTYPE_MODEL(Hash weaponHash)
	{
		return invoker::invoke<Hash, 0xA0A2925EDC6DDA6D, 0xD649AC>(weaponHash);
	}

	FORCEINLINE auto GET_WEAPONTYPE_SLOT(Hash weaponHash)
	{
		return invoker::invoke<Hash, 0xF06CB8927A8EE0DE, 0xD649CC>(weaponHash);
	}

	FORCEINLINE auto GET_WEAPONTYPE_GROUP(Hash weaponHash)
	{
		return invoker::invoke<Hash, 0x6CC7A2E68E8A565A, 0xD6498C>(weaponHash);
	}

	FORCEINLINE auto GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(Hash componentHash)
	{
		return invoker::invoke<int, 0x879FF7169943DE79, 0xD64A54>(componentHash);
	}

	FORCEINLINE auto GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(Hash componentHash, int extraComponentIndex)
	{
		return invoker::invoke<Hash, 0xB7B32238BFF7DD76, 0xD64A74>(componentHash, extraComponentIndex);
	}

	FORCEINLINE auto SET_CURRENT_PED_WEAPON(Ped ped, Hash weaponHash, BOOL bForceInHand)
	{
		return invoker::invoke<void, 0x3C0F448853B71C92, 0xD69208>(ped, weaponHash, bForceInHand);
	}

	FORCEINLINE auto GET_CURRENT_PED_WEAPON(Ped ped, Hash* weaponHash, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x23B29877D0BE9547, 0xD626C8>(ped, weaponHash, p2);
	}

	FORCEINLINE auto GET_CURRENT_PED_WEAPON_ENTITY_INDEX(Ped ped, Any p1)
	{
		return invoker::invoke<Entity, 0x484426882F80CACE, 0xD626F8>(ped, p1);
	}

	FORCEINLINE auto GET_BEST_PED_WEAPON(Ped ped, BOOL p1)
	{
		return invoker::invoke<Hash, 0xF3D409E30929BD33, 0xD62510>(ped, p1);
	}

	FORCEINLINE auto SET_CURRENT_PED_VEHICLE_WEAPON(Ped ped, Hash weaponHash)
	{
		return invoker::invoke<BOOL, 0xE26BDA5FFA4CA294, 0xD691E0>(ped, weaponHash);
	}

	FORCEINLINE auto GET_CURRENT_PED_VEHICLE_WEAPON(Ped ped, Hash* weaponHash)
	{
		return invoker::invoke<BOOL, 0x51B462E1DEB9F762, 0xD626A0>(ped, weaponHash);
	}

	FORCEINLINE auto SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(Ped ped)
	{
		return invoker::invoke<void, 0xAD33AEE7683375F4, 0xD69C38>(ped);
	}

	FORCEINLINE auto IS_PED_ARMED(Ped ped, int typeFlags)
	{
		return invoker::invoke<BOOL, 0x11552FA9DCB8E126, 0xD6561C>(ped, typeFlags);
	}

	FORCEINLINE auto IS_WEAPON_VALID(Hash weaponHash)
	{
		return invoker::invoke<BOOL, 0x2A9ED010C087BF2B, 0xD66314>(weaponHash);
	}

	FORCEINLINE auto HAS_PED_GOT_WEAPON(Ped ped, Hash weaponHash, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x66B90BA528CFEBCE, 0xD64E34>(ped, weaponHash, p2);
	}

	FORCEINLINE auto IS_PED_WEAPON_READY_TO_SHOOT(Ped ped)
	{
		return invoker::invoke<BOOL, 0x45F34E0DDD65A401, 0xD65858>(ped);
	}

	FORCEINLINE auto GET_PED_WEAPONTYPE_IN_SLOT(Ped ped, Hash weaponSlot)
	{
		return invoker::invoke<Hash, 0xBCEDAE6CA2B2046E, 0xD633BC>(ped, weaponSlot);
	}

	FORCEINLINE auto GET_AMMO_IN_PED_WEAPON(Ped ped, Hash weaponhash)
	{
		return invoker::invoke<int, 0x1149D67DB429787A, 0xD62480>(ped, weaponhash);
	}

	FORCEINLINE auto ADD_AMMO_TO_PED(Ped ped, Hash weaponHash, int ammo)
	{
		return invoker::invoke<void, 0x574074EDCCCBD5E, 0xD6145C>(ped, weaponHash, ammo);
	}

	FORCEINLINE auto SET_PED_AMMO(Ped ped, Hash weaponHash, int ammo, BOOL p3)
	{
		return invoker::invoke<void, 0x45FC566246B3511B, 0xD69B88>(ped, weaponHash, ammo, p3);
	}

	FORCEINLINE auto SET_PED_INFINITE_AMMO(Ped ped, BOOL toggle, Hash weaponHash)
	{
		return invoker::invoke<void, 0xA83DA0A0DF32920C, 0xD69CA4>(ped, toggle, weaponHash);
	}

	FORCEINLINE auto SET_PED_INFINITE_AMMO_CLIP(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x53A38286A3AC16C1, 0xD69CBC>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_STUN_GUN_FINITE_AMMO(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x9EFAE0A25C020F4B, 0xD69D9C>(p0, p1);
	}

	FORCEINLINE auto GIVE_WEAPON_TO_PED(Ped ped, Hash weaponHash, int ammoCount, BOOL isHidden, BOOL bForceInHand)
	{
		return invoker::invoke<void, 0xB41DEC3AAC1AA107, 0xD64CDC>(ped, weaponHash, ammoCount, isHidden, bForceInHand);
	}

	FORCEINLINE auto GIVE_DELAYED_WEAPON_TO_PED(Ped ped, Hash weaponHash, int ammoCount, BOOL bForceInHand)
	{
		return invoker::invoke<void, 0x4BD3F83B0D7E1417, 0xD64C40>(ped, weaponHash, ammoCount, bForceInHand);
	}

	FORCEINLINE auto REMOVE_ALL_PED_WEAPONS(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0x1834D30866818A23, 0xD67A9C>(ped, p1);
	}

	FORCEINLINE auto REMOVE_WEAPON_FROM_PED(Ped ped, Hash weaponHash)
	{
		return invoker::invoke<void, 0x4F07124B9C56ED6F, 0xD67C7C>(ped, weaponHash);
	}

	FORCEINLINE auto HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x4A46DAA87A4C235E, 0xD6507C>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CURRENT_WEAPON_VISIBLE(Ped ped, BOOL visible, BOOL deselectWeapon, BOOL p3, BOOL p4)
	{
		return invoker::invoke<void, 0x4D5D5614C2DF76F4, 0xD69BFC>(ped, visible, deselectWeapon, p3, p4);
	}

	FORCEINLINE auto SET_PED_DROPS_WEAPONS_WHEN_DEAD(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x8CF553A05B97089A, 0xD69C78>(ped, toggle);
	}

	FORCEINLINE auto HAS_PED_BEEN_DAMAGED_BY_WEAPON(Ped ped, Hash weaponHash, int weaponType)
	{
		return invoker::invoke<BOOL, 0x690AB6F5DB2A3A54, 0xD64E08>(ped, weaponHash, weaponType);
	}

	FORCEINLINE auto CLEAR_PED_LAST_WEAPON_DAMAGE(Ped ped)
	{
		return invoker::invoke<void, 0xD8AE5A845CE0131A, 0xD61B50>(ped);
	}

	FORCEINLINE auto HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(Entity entity, Hash weaponHash, int weaponType)
	{
		return invoker::invoke<BOOL, 0x1AC621DBDFE4ECA0, 0xD64D78>(entity, weaponHash, weaponType);
	}

	FORCEINLINE auto CLEAR_ENTITY_LAST_WEAPON_DAMAGE(Entity entity)
	{
		return invoker::invoke<void, 0x7468550652312059, 0xD61B10>(entity);
	}

	FORCEINLINE auto SET_PED_DROPS_WEAPON(Ped ped)
	{
		return invoker::invoke<void, 0x8AABCACF8F4828E, 0xD69C6C>(ped);
	}

	FORCEINLINE auto SET_PED_DROPS_INVENTORY_WEAPON(Ped ped, Hash weaponHash, float xOffset, float yOffset, float zOffset, int ammoCount)
	{
		return invoker::invoke<void, 0x6D796FB2594CA190, 0xD69C54>(ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
	}

	FORCEINLINE auto GET_MAX_AMMO_IN_CLIP(Ped ped, Hash weaponHash, BOOL p2)
	{
		return invoker::invoke<int, 0xF2C30F76A5BF797F, 0xD62E88>(ped, weaponHash, p2);
	}

	FORCEINLINE auto GET_AMMO_IN_CLIP(Ped ped, Hash weaponHash, int* ammo)
	{
		return invoker::invoke<BOOL, 0x227CB6AD5598268, 0xD62454>(ped, weaponHash, ammo);
	}

	FORCEINLINE auto SET_AMMO_IN_CLIP(Ped ped, Hash weaponHash, int ammo)
	{
		return invoker::invoke<BOOL, 0x73992DAFD09D607B, 0xD68DD4>(ped, weaponHash, ammo);
	}

	FORCEINLINE auto GET_MAX_AMMO(Ped ped, Hash weaponHash, int* ammo)
	{
		return invoker::invoke<BOOL, 0xACBE463290141D49, 0xD62E30>(ped, weaponHash, ammo);
	}

	FORCEINLINE auto GET_MAX_AMMO_BY_TYPE(Ped ped, Hash ammoTypeHash, int* ammo)
	{
		return invoker::invoke<BOOL, 0xC38311CAC7220555, 0xD62E5C>(ped, ammoTypeHash, ammo);
	}

	FORCEINLINE auto ADD_PED_AMMO_BY_TYPE(Ped ped, Hash ammoTypeHash, int ammo)
	{
		return invoker::invoke<void, 0x5D80B7A4B4BA4D49, 0xD6158C>(ped, ammoTypeHash, ammo);
	}

	FORCEINLINE auto SET_PED_AMMO_BY_TYPE(Ped ped, Hash ammoTypeHash, int ammo)
	{
		return invoker::invoke<void, 0x8DF178F67D660DC7, 0xD69BA4>(ped, ammoTypeHash, ammo);
	}

	FORCEINLINE auto GET_PED_AMMO_BY_TYPE(Ped ped, Hash ammoTypeHash)
	{
		return invoker::invoke<int, 0xFC4FF8B60E6C8641, 0xD63240>(ped, ammoTypeHash);
	}

	FORCEINLINE auto SET_PED_AMMO_TO_DROP(Ped ped, int p1)
	{
		return invoker::invoke<void, 0x5BD5570DF8DB6C39, 0xD69BB8>(ped, p1);
	}

	FORCEINLINE auto SET_PICKUP_AMMO_AMOUNT_SCALER(float p0)
	{
		return invoker::invoke<void, 0x5FD6A23EC3A0882D, 0xD69E04>(p0);
	}

	FORCEINLINE auto GET_PED_AMMO_TYPE_FROM_WEAPON(Ped ped, Hash weaponHash)
	{
		return invoker::invoke<Hash, 0xA239630C4686BC6E, 0xD63264>(ped, weaponHash);
	}

	FORCEINLINE auto GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(Ped ped, Hash weaponHash)
	{
		return invoker::invoke<Hash, 0x1820CC8352D1B6EE, 0xD63330>(ped, weaponHash);
	}

	FORCEINLINE auto GET_PED_LAST_WEAPON_IMPACT_COORD(Ped ped, Vector3* coords)
	{
		return invoker::invoke<BOOL, 0x4800F32F989BED65, 0xD632E8>(ped, coords);
	}

	FORCEINLINE auto SET_PED_GADGET(Ped ped, Hash gadgetHash, BOOL p2)
	{
		return invoker::invoke<void, 0xD483C8E87621AF64, 0xD69C8C>(ped, gadgetHash, p2);
	}

	FORCEINLINE auto GET_IS_PED_GADGET_EQUIPPED(Ped ped, Hash gadgetHash)
	{
		return invoker::invoke<BOOL, 0x8DAD6B08438A17C, 0xD62B84>(ped, gadgetHash);
	}

	FORCEINLINE auto GET_SELECTED_PED_WEAPON(Ped ped)
	{
		return invoker::invoke<Hash, 0xB0D77D90171EC35F, 0xD637C4>(ped);
	}

	FORCEINLINE auto EXPLODE_PROJECTILES(Ped ped, Hash weaponHash, BOOL p2)
	{
		return invoker::invoke<void, 0xAF3A361C94FBBFC6, 0xD62290>(ped, weaponHash, p2);
	}

	FORCEINLINE auto REMOVE_ALL_PROJECTILES_OF_TYPE(Hash weaponHash, BOOL explode)
	{
		return invoker::invoke<void, 0x650290A3A38E907E, 0xD67AB0>(weaponHash, explode);
	}

	FORCEINLINE auto GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(Ped ped)
	{
		return invoker::invoke<float, 0xD6F4FF37FC8730A1, 0xD62DDC>(ped);
	}

	FORCEINLINE auto GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(Ped ped)
	{
		return invoker::invoke<float, 0x33D6B8520C268EC8, 0xD62EB4>(ped);
	}

	FORCEINLINE auto HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(Ped driver, Vehicle vehicle, Hash weaponHash, Any p3)
	{
		return invoker::invoke<BOOL, 0x43F53DDC37E17FE9, 0xD64F38>(driver, vehicle, weaponHash, p3);
	}

	FORCEINLINE auto GIVE_WEAPON_COMPONENT_TO_PED(Ped ped, Hash weaponHash, Hash componentHash)
	{
		return invoker::invoke<void, 0x6D5FA72F8C43D132, 0xD64C88>(ped, weaponHash, componentHash);
	}

	FORCEINLINE auto REMOVE_WEAPON_COMPONENT_FROM_PED(Ped ped, Hash weaponHash, Hash componentHash)
	{
		return invoker::invoke<void, 0x80E6FC2ACEAF8AA3, 0xD67C58>(ped, weaponHash, componentHash);
	}

	FORCEINLINE auto HAS_PED_GOT_WEAPON_COMPONENT(Ped ped, Hash weaponHash, Hash componentHash)
	{
		return invoker::invoke<BOOL, 0x5EDED4B3E1A48E68, 0xD64E60>(ped, weaponHash, componentHash);
	}

	FORCEINLINE auto IS_PED_WEAPON_COMPONENT_ACTIVE(Ped ped, Hash weaponHash, Hash componentHash)
	{
		return invoker::invoke<BOOL, 0x85718B993F8FC553, 0xD6582C>(ped, weaponHash, componentHash);
	}

	FORCEINLINE auto REFILL_AMMO_INSTANTLY(Ped ped)
	{
		return invoker::invoke<BOOL, 0x3CB575F4FC5A6DCB, 0xD679C4>(ped);
	}

	FORCEINLINE auto MAKE_PED_RELOAD(Ped ped)
	{
		return invoker::invoke<BOOL, 0xEB5B16C858201429, 0xD66838>(ped);
	}

	FORCEINLINE auto REQUEST_WEAPON_ASSET(Hash weaponHash, int p1, int p2)
	{
		return invoker::invoke<void, 0xA10F939489C3BE61, 0xD67DBC>(weaponHash, p1, p2);
	}

	FORCEINLINE auto HAS_WEAPON_ASSET_LOADED(Hash weaponHash)
	{
		return invoker::invoke<BOOL, 0x92A65766A892EFC6, 0xD64FD4>(weaponHash);
	}

	FORCEINLINE auto REMOVE_WEAPON_ASSET(Hash weaponHash)
	{
		return invoker::invoke<void, 0xCF56BDC3BD787B97, 0xD67C4C>(weaponHash);
	}

	FORCEINLINE auto CREATE_WEAPON_OBJECT(Hash weaponHash, int ammoCount, float x, float y, float z, BOOL showWorldModel, float scale, Any p7, Any p8, Any p9)
	{
		return invoker::invoke<Object, 0x8A3572575D91006C, 0xD61D88>(weaponHash, ammoCount, x, y, z, showWorldModel, scale, p7, p8, p9);
	}

	FORCEINLINE auto GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(Object weaponObject, Hash componentHash)
	{
		return invoker::invoke<void, 0x93A0B91D4456D7E9, 0xD64C9C>(weaponObject, componentHash);
	}

	FORCEINLINE auto REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(Object object, Hash componentHash)
	{
		return invoker::invoke<void, 0xFA13077979C3DCB9, 0xD67C6C>(object, componentHash);
	}

	FORCEINLINE auto HAS_WEAPON_GOT_WEAPON_COMPONENT(Object weapon, Hash componentHash)
	{
		return invoker::invoke<BOOL, 0x7B5835DBE90FBDED, 0xD64FF8>(weapon, componentHash);
	}

	FORCEINLINE auto GIVE_WEAPON_OBJECT_TO_PED(Object weaponObject, Ped ped)
	{
		return invoker::invoke<void, 0x4693060C5049F4E3, 0xD64CCC>(weaponObject, ped);
	}

	FORCEINLINE auto DOES_WEAPON_TAKE_WEAPON_COMPONENT(Hash weaponHash, Hash componentHash)
	{
		return invoker::invoke<BOOL, 0xC985A2C6C77023D, 0xD621E0>(weaponHash, componentHash);
	}

	FORCEINLINE auto GET_WEAPON_OBJECT_FROM_PED(Ped ped, BOOL p1)
	{
		return invoker::invoke<Object, 0xEA7D61B52729ED38, 0xD64B28>(ped, p1);
	}

	FORCEINLINE auto GIVE_LOADOUT_TO_PED(Ped ped, Hash loadoutHash)
	{
		return invoker::invoke<void, 0x9C1B023459284932, 0xD64C5C>(ped, loadoutHash);
	}

	FORCEINLINE auto SET_PED_WEAPON_TINT_INDEX(Ped ped, Hash weaponHash, int tintIndex)
	{
		return invoker::invoke<void, 0xC37D2709B04BD397, 0xD69DF0>(ped, weaponHash, tintIndex);
	}

	FORCEINLINE auto GET_PED_WEAPON_TINT_INDEX(Ped ped, Hash weaponHash)
	{
		return invoker::invoke<int, 0x6C81F95CADD1E6D0, 0xD6342C>(ped, weaponHash);
	}

	FORCEINLINE auto SET_WEAPON_OBJECT_TINT_INDEX(Object weapon, int tintIndex)
	{
		return invoker::invoke<void, 0xFA3F484500EC0E85, 0xD6B878>(weapon, tintIndex);
	}

	FORCEINLINE auto GET_WEAPON_OBJECT_TINT_INDEX(Object weapon)
	{
		return invoker::invoke<int, 0x395F718BB649E570, 0xD64B50>(weapon);
	}

	FORCEINLINE auto GET_WEAPON_TINT_COUNT(Hash weaponHash)
	{
		return invoker::invoke<int, 0xB302C203285E8234, 0xD64B94>(weaponHash);
	}

	FORCEINLINE auto SET_PED_WEAPON_COMPONENT_TINT_INDEX(Ped ped, Hash weaponHash, Hash camoComponentHash, int colorIndex)
	{
		return invoker::invoke<void, 0x834F4286803834DE, 0xD69DD8>(ped, weaponHash, camoComponentHash, colorIndex);
	}

	FORCEINLINE auto GET_PED_WEAPON_COMPONENT_TINT_INDEX(Ped ped, Hash weaponHash, Hash camoComponentHash)
	{
		return invoker::invoke<int, 0xB6209D82C643428C, 0xD63404>(ped, weaponHash, camoComponentHash);
	}

	FORCEINLINE auto SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(Object weaponObject, Hash camoComponentHash, int colorIndex)
	{
		return invoker::invoke<void, 0xE0826380A9741A77, 0xD6B864>(weaponObject, camoComponentHash, colorIndex);
	}

	FORCEINLINE auto GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(Object weaponObject, Hash camoComponentHash)
	{
		return invoker::invoke<int, 0x7EC58BF54CD9DC57, 0xD64B04>(weaponObject, camoComponentHash);
	}

	FORCEINLINE auto GET_PED_WEAPON_CAMO_INDEX(Ped ped, Hash weaponHash)
	{
		return invoker::invoke<int, 0xB92D606AB30C334C, 0xD633E0>(ped, weaponHash);
	}

	FORCEINLINE auto SET_WEAPON_OBJECT_CAMO_INDEX(Object weaponObject, int p1)
	{
		return invoker::invoke<void, 0x2B73BEAD61E67B73, 0xD6B854>(weaponObject, p1);
	}

	FORCEINLINE auto GET_WEAPON_HUD_STATS(Hash weaponHash, Any* outData)
	{
		return invoker::invoke<BOOL, 0x78640AA034DC7BAF, 0xD64ADC>(weaponHash, outData);
	}

	FORCEINLINE auto GET_WEAPON_COMPONENT_HUD_STATS(Hash componentHash, Any* outData)
	{
		return invoker::invoke<BOOL, 0xF4CFBABEEF287C00, 0xD64A0C>(componentHash, outData);
	}

	FORCEINLINE auto GET_WEAPON_DAMAGE(Hash weaponHash, Hash componentHash)
	{
		return invoker::invoke<float, 0xFE2B29CE6AE93F62, 0xD64A98>(weaponHash, componentHash);
	}

	FORCEINLINE auto GET_WEAPON_CLIP_SIZE(Hash weaponHash)
	{
		return invoker::invoke<int, 0xF4E66F9577F22476, 0xD649EC>(weaponHash);
	}

	FORCEINLINE auto GET_WEAPON_TIME_BETWEEN_SHOTS(Hash weaponHash)
	{
		return invoker::invoke<float, 0x4CC44EFF756524DC, 0xD64B70>(weaponHash);
	}

	FORCEINLINE auto SET_PED_CHANCE_OF_FIRING_BLANKS(Ped ped, float xBias, float yBias)
	{
		return invoker::invoke<void, 0xDB5B122A29E007B, 0xD69BE4>(ped, xBias, yBias);
	}

	FORCEINLINE auto SET_PED_SHOOT_ORDNANCE_WEAPON(Ped ped, float p1)
	{
		return invoker::invoke<Object, 0x95BB431592C5642, 0xD69D78>(ped, p1);
	}

	FORCEINLINE auto REQUEST_WEAPON_HIGH_DETAIL_MODEL(Entity weaponObject)
	{
		return invoker::invoke<void, 0x8E453F6C5ABDD9DC, 0xD67DD0>(weaponObject);
	}

	FORCEINLINE auto _SET_WEAPON_PED_DAMAGE_MODIFIER(Hash weapon, float damageModifier)
	{
		return invoker::invoke<void, 0x1091922715B68DF0, 0xD6B888>(weapon, damageModifier);
	}

	FORCEINLINE auto SET_WEAPON_DAMAGE_MODIFIER(Hash weaponHash, float damageMultiplier)
	{
		return invoker::invoke<void, 0xD78F39BF33D61469, 0xD6B834>(weaponHash, damageMultiplier);
	}

	FORCEINLINE auto SET_WEAPON_AOE_MODIFIER(Hash weaponHash, float multiplier)
	{
		return invoker::invoke<void, 0xBB74EE81E0CA2E98, 0xD6B824>(weaponHash, multiplier);
	}

	FORCEINLINE auto SET_WEAPON_EFFECT_DURATION_MODIFIER(Hash p0, float p1)
	{
		return invoker::invoke<void, 0xD0E4082BC9A5DC1E, 0xD6B844>(p0, p1);
	}

	FORCEINLINE auto IS_PED_CURRENT_WEAPON_SILENCED(Ped ped)
	{
		return invoker::invoke<BOOL, 0x3C2402675D8FFADA, 0xD65678>(ped);
	}

	FORCEINLINE auto IS_FLASH_LIGHT_ON(Ped ped)
	{
		return invoker::invoke<BOOL, 0x9E333ABC0077FDAB, 0xD65354>(ped);
	}

	FORCEINLINE auto SET_FLASH_LIGHT_FADE_DISTANCE(float distance)
	{
		return invoker::invoke<BOOL, 0xDB47943DB2DB40C5, 0xD695E8>(distance);
	}

	FORCEINLINE auto SET_FLASH_LIGHT_ACTIVE_HISTORY(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x46DEC96BAC39908C, 0xD695D4>(ped, toggle);
	}

	FORCEINLINE auto SET_WEAPON_ANIMATION_OVERRIDE(Ped ped, Hash animStyle)
	{
		return invoker::invoke<void, 0x6119A351A3080C2, 0xD6B814>(ped, animStyle);
	}

	FORCEINLINE auto GET_WEAPON_DAMAGE_TYPE(Hash weaponHash)
	{
		return invoker::invoke<int, 0x12974BA350E32306, 0xD64ABC>(weaponHash);
	}

	FORCEINLINE auto SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(Ped ped)
	{
		return invoker::invoke<void, 0x2ED26DA87CD65433, 0xD69594>(ped);
	}

	FORCEINLINE auto CAN_USE_WEAPON_ON_PARACHUTE(Hash weaponHash)
	{
		return invoker::invoke<BOOL, 0xBE2AF59B33F9F92A, 0xD61AB0>(weaponHash);
	}

	FORCEINLINE auto CREATE_AIR_DEFENCE_SPHERE(float x, float y, float z, float radius, float p4, float p5, float p6, Hash weaponHash)
	{
		return invoker::invoke<int, 0x51817FD0EC0A289C, 0xD61CA0>(x, y, z, radius, p4, p5, p6, weaponHash);
	}

	FORCEINLINE auto CREATE_AIR_DEFENCE_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float radius, Hash weaponHash)
	{
		return invoker::invoke<int, 0xC0C6031DB5E2A28, 0xD61C6C>(p0, p1, p2, p3, p4, p5, p6, p7, p8, radius, weaponHash);
	}

	FORCEINLINE auto REMOVE_AIR_DEFENCE_SPHERE(int zoneId)
	{
		return invoker::invoke<BOOL, 0x54A9A0E1D30B92A5, 0xD67A64>(zoneId);
	}

	FORCEINLINE auto REMOVE_ALL_AIR_DEFENCE_SPHERES()
	{
		return invoker::invoke<void, 0x537B8CC8EB57DFB7, 0xD67A8C>();
	}

	FORCEINLINE auto SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(Player player, int zoneId, BOOL enable)
	{
		return invoker::invoke<void, 0xE3C69C184ADC05C0, 0xD69F6C>(player, zoneId, enable);
	}

	FORCEINLINE auto IS_AIR_DEFENCE_SPHERE_IN_AREA(float x, float y, float z, float radius, int* outZoneId)
	{
		return invoker::invoke<BOOL, 0x3EAF5419C2410C27, 0xD65144>(x, y, z, radius, outZoneId);
	}

	FORCEINLINE auto FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(int zoneId, float x, float y, float z)
	{
		return invoker::invoke<void, 0x71C760BC3D9BEDAC, 0xD62340>(zoneId, x, y, z);
	}

	FORCEINLINE auto DOES_AIR_DEFENCE_SPHERE_EXIST(int zoneId)
	{
		return invoker::invoke<BOOL, 0x8AED94D23435607C, 0xD61F2C>(zoneId);
	}

	FORCEINLINE auto SET_CAN_PED_SELECT_INVENTORY_WEAPON(Ped ped, Hash weaponHash, BOOL toggle)
	{
		return invoker::invoke<void, 0xC3A0D70539BCA8F9, 0xD68FD4>(ped, weaponHash, toggle);
	}

	FORCEINLINE auto SET_CAN_PED_SELECT_ALL_WEAPONS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xB21FD0EEB76F0296, 0xD68FC0>(ped, toggle);
	}

}
namespace SCRIPT
{
	FORCEINLINE auto REQUEST_SCRIPT(const char* scriptName)
	{
		return invoker::invoke<void, 0x97A5024CE91641F1, 0xD67D24>(scriptName);
	}

	FORCEINLINE auto SET_SCRIPT_AS_NO_LONGER_NEEDED(const char* scriptName)
	{
		return invoker::invoke<void, 0xFD49725F3FE7EE13, 0xD6A104>(scriptName);
	}

	FORCEINLINE auto HAS_SCRIPT_LOADED(const char* scriptName)
	{
		return invoker::invoke<BOOL, 0xA6E4F7A73ABC4A76, 0xD64ECC>(scriptName);
	}

	FORCEINLINE auto DOES_SCRIPT_EXIST(const char* scriptName)
	{
		return invoker::invoke<BOOL, 0x61AD5054653814F5, 0xD620A0>(scriptName);
	}

	FORCEINLINE auto REQUEST_SCRIPT_WITH_NAME_HASH(Hash scriptHash)
	{
		return invoker::invoke<void, 0x625263BFD08AE230, 0xD67D30>(scriptHash);
	}

	FORCEINLINE auto SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(Hash scriptHash)
	{
		return invoker::invoke<void, 0xD21650BDA0F10841, 0xD6A174>(scriptHash);
	}

	FORCEINLINE auto HAS_SCRIPT_WITH_NAME_HASH_LOADED(Hash scriptHash)
	{
		return invoker::invoke<BOOL, 0x65F606616F48186B, 0xD64EF0>(scriptHash);
	}

	FORCEINLINE auto DOES_SCRIPT_WITH_NAME_HASH_EXIST(Hash scriptHash)
	{
		return invoker::invoke<BOOL, 0x5ADE92AC7A2490B6, 0xD620E8>(scriptHash);
	}

	FORCEINLINE auto TERMINATE_THREAD(int threadId)
	{
		return invoker::invoke<void, 0xC3CF96F73FC43848, 0xD6DB94>(threadId);
	}

	FORCEINLINE auto IS_THREAD_ACTIVE(int threadId)
	{
		return invoker::invoke<BOOL, 0xF40767E41852FB72, 0xD65C90>(threadId);
	}

	FORCEINLINE auto GET_NAME_OF_SCRIPT_WITH_THIS_ID(int threadId)
	{
		return invoker::invoke<const char*, 0xACF74B377C634277, 0xD62F24>(threadId);
	}

	FORCEINLINE auto SCRIPT_THREAD_ITERATOR_RESET()
	{
		return invoker::invoke<void, 0x29AB4A18A37441C7, 0xD67F7C>();
	}

	FORCEINLINE auto SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID()
	{
		return invoker::invoke<int, 0x29637E6F2B8E5690, 0xD67F60>();
	}

	FORCEINLINE auto GET_ID_OF_THIS_THREAD()
	{
		return invoker::invoke<int, 0x8F76B2250AC806FA, 0xD62AD4>();
	}

	FORCEINLINE auto TERMINATE_THIS_THREAD()
	{
		return invoker::invoke<void, 0xBBC29EBE6E1A48FA, 0xD6DB7C>();
	}

	FORCEINLINE auto GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(Hash scriptHash)
	{
		return invoker::invoke<int, 0x486FF5D06E9659F1, 0xD62FE8>(scriptHash);
	}

	FORCEINLINE auto GET_THIS_SCRIPT_NAME()
	{
		return invoker::invoke<const char*, 0x1AF90EB93E0012D6, 0xD63948>();
	}

	FORCEINLINE auto GET_HASH_OF_THIS_SCRIPT_NAME()
	{
		return invoker::invoke<Hash, 0x931D15B1D60C81B0, 0xD62984>();
	}

	FORCEINLINE auto GET_NUMBER_OF_EVENTS(int eventGroup)
	{
		return invoker::invoke<int, 0x703C4F7316B7195D, 0xD62FBC>(eventGroup);
	}

	FORCEINLINE auto GET_EVENT_EXISTS(int eventGroup, int eventIndex)
	{
		return invoker::invoke<BOOL, 0x5E3ED023C0E7CC7C, 0xD628D8>(eventGroup, eventIndex);
	}

	FORCEINLINE auto GET_EVENT_AT_INDEX(int eventGroup, int eventIndex)
	{
		return invoker::invoke<int, 0x4BC3E5D2FB0A1665, 0xD62884>(eventGroup, eventIndex);
	}

	FORCEINLINE auto GET_EVENT_DATA(int eventGroup, int eventIndex, Any* eventData, int eventDataSize)
	{
		return invoker::invoke<BOOL, 0xFCEF367B86651ED3, 0xD628A8>(eventGroup, eventIndex, eventData, eventDataSize);
	}

	FORCEINLINE auto TRIGGER_SCRIPT_EVENT(int eventGroup, Any* eventData, int eventDataSize, int playerBits)
	{
		return invoker::invoke<void, 0x2C0E0814582947D3, 0xD6DD14>(eventGroup, eventData, eventDataSize, playerBits);
	}

	FORCEINLINE auto SHUTDOWN_LOADING_SCREEN()
	{
		return invoker::invoke<void, 0xCD17096A98584C2B, 0xD6B904>();
	}

	FORCEINLINE auto SET_NO_LOADING_SCREEN(BOOL toggle)
	{
		return invoker::invoke<void, 0x6FF322107B12B749, 0xD69A44>(toggle);
	}

	FORCEINLINE auto GET_NO_LOADING_SCREEN()
	{
		return invoker::invoke<BOOL, 0x828F3FAE99DA791A, 0xD62FAC>();
	}

	FORCEINLINE auto COMMIT_TO_LOADINGSCREEN_SELCTION()
	{
		return invoker::invoke<void, 0x48AA9CAAAB71C7B8, 0xD61C20>();
	}

	FORCEINLINE auto BG_IS_EXITFLAG_SET()
	{
		return invoker::invoke<BOOL, 0x8FCC41E6E43728AA, 0xD619A0>();
	}

	FORCEINLINE auto BG_SET_EXITFLAG_RESPONSE()
	{
		return invoker::invoke<void, 0xC68B0868CFA1B72F, 0xD619C4>();
	}

	FORCEINLINE auto BG_START_CONTEXT_HASH(Hash contextHash)
	{
		return invoker::invoke<void, 0x52DC717C5008D9DA, 0xD619E8>(contextHash);
	}

	FORCEINLINE auto BG_END_CONTEXT_HASH(Hash contextHash)
	{
		return invoker::invoke<void, 0xA4991DF2B554184E, 0xD61940>(contextHash);
	}

	FORCEINLINE auto BG_START_CONTEXT(const char* contextName)
	{
		return invoker::invoke<void, 0x34D5EB1E6F706A50, 0xD619DC>(contextName);
	}

	FORCEINLINE auto BG_END_CONTEXT(const char* contextName)
	{
		return invoker::invoke<void, 0x3611A662967FC11C, 0xD61934>(contextName);
	}

	FORCEINLINE auto BG_DOES_LAUNCH_PARAM_EXIST(int scriptIndex, const char* p1)
	{
		return invoker::invoke<BOOL, 0x9F05118582DBA146, 0xD6190C>(scriptIndex, p1);
	}

	FORCEINLINE auto BG_GET_LAUNCH_PARAM_VALUE(int scriptIndex, const char* p1)
	{
		return invoker::invoke<int, 0xF8F0D1290FE81BC5, 0xD61954>(scriptIndex, p1);
	}

	FORCEINLINE auto BG_GET_SCRIPT_ID_FROM_NAME_HASH(Hash p0)
	{
		return invoker::invoke<int, 0x616D6688F78D1729, 0xD61978>(p0);
	}

	FORCEINLINE auto _SEND_TU_SCRIPT_EVENT_NEW(int eventGroup, Any* eventData, int eventDataSize, int playerBits, Hash eventType)
	{
		return invoker::invoke<void, 0x00, 0xD68CD8>(eventGroup, eventData, eventDataSize, playerBits, eventType);
	}

}
namespace REPLAY
{
	FORCEINLINE auto REGISTER_EFFECT_FOR_REPLAY_EDITOR(const char* p0, BOOL p1)
	{
		return invoker::invoke<void, 0xF32B2D960EF3FA6E, 0x81A1C0>(p0, p1);
	}

	FORCEINLINE auto REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP()
	{
		return invoker::invoke<BOOL, 0xD5FD8DD00FB16F99, 0xCD77B0>();
	}

	FORCEINLINE auto SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM()
	{
		return invoker::invoke<void, 0x952F7C7A0CC86DA0, 0xCDA454>();
	}

	FORCEINLINE auto SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(BOOL p0)
	{
		return invoker::invoke<void, 0x41C6C46BCEFF9949, 0xCDA330>(p0);
	}

	FORCEINLINE auto REPLAY_CONTROL_SHUTDOWN()
	{
		return invoker::invoke<void, 0xCE9266D07017085A, 0xCD7790>();
	}

	FORCEINLINE auto ACTIVATE_ROCKSTAR_EDITOR(int p0)
	{
		return invoker::invoke<void, 0xA21271C08AEE8291, 0xCCC7C0>(p0);
	}

}
namespace FIRE
{
	FORCEINLINE auto START_SCRIPT_FIRE(float X, float Y, float Z, int maxChildren, BOOL isGasFire)
	{
		return invoker::invoke<FireId, 0xC86536B840EE3AB3, 0xA76EAC>(X, Y, Z, maxChildren, isGasFire);
	}

	FORCEINLINE auto REMOVE_SCRIPT_FIRE(FireId fireHandle)
	{
		return invoker::invoke<void, 0xCA60A45D232EEDDB, 0xA74860>(fireHandle);
	}

	FORCEINLINE auto START_ENTITY_FIRE(Entity entity)
	{
		return invoker::invoke<FireId, 0x604C09F6A880730D, 0xA76C24>(entity);
	}

	FORCEINLINE auto STOP_ENTITY_FIRE(Entity entity)
	{
		return invoker::invoke<void, 0xC9B695B7C0126DCC, 0xA77078>(entity);
	}

	FORCEINLINE auto IS_ENTITY_ON_FIRE(Entity entity)
	{
		return invoker::invoke<BOOL, 0x5B702A5D1F2635BE, 0xA733CC>(entity);
	}

	FORCEINLINE auto GET_NUMBER_OF_FIRES_IN_RANGE(float x, float y, float z, float radius)
	{
		return invoker::invoke<int, 0xE8D2BD34CCB74431, 0xA71AD8>(x, y, z, radius);
	}

	FORCEINLINE auto SET_FLAMMABILITY_MULTIPLIER(float p0)
	{
		return invoker::invoke<void, 0xBF956145ADC1339E, 0xA75BF8>(p0);
	}

	FORCEINLINE auto STOP_FIRE_IN_RANGE(float x, float y, float z, float radius)
	{
		return invoker::invoke<void, 0xD7ABE01242C5B8E3, 0xA77084>(x, y, z, radius);
	}

	FORCEINLINE auto GET_CLOSEST_FIRE_POS(Vector3* outPosition, float x, float y, float z)
	{
		return invoker::invoke<BOOL, 0xDDF99E38A910C346, 0xA708C8>(outPosition, x, y, z);
	}

	FORCEINLINE auto ADD_EXPLOSION(float x, float y, float z, int explosionType, float damageScale, BOOL isAudible, BOOL isInvisible, float cameraShake, BOOL noDamage)
	{
		return invoker::invoke<void, 0xD2FD15A3D9DEE4CC, 0xA6E110>(x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake, noDamage);
	}

	FORCEINLINE auto ADD_OWNED_EXPLOSION(Ped ped, float x, float y, float z, int explosionType, float damageScale, BOOL isAudible, BOOL isInvisible, float cameraShake)
	{
		return invoker::invoke<void, 0x8F03CD462437C002, 0xA6E1D4>(ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
	}

	FORCEINLINE auto ADD_EXPLOSION_WITH_USER_VFX(float x, float y, float z, int explosionType, Hash explosionFx, float damageScale, BOOL isAudible, BOOL isInvisible, float cameraShake)
	{
		return invoker::invoke<void, 0x4F2F5C4D814331B7, 0xA6E154>(x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
	}

	FORCEINLINE auto IS_EXPLOSION_IN_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<BOOL, 0x8AC0662A292C36F4, 0xA73604>(explosionType, x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto IS_EXPLOSION_ACTIVE_IN_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<BOOL, 0x9C5BA0994231CF92, 0xA73598>(explosionType, x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto IS_EXPLOSION_IN_SPHERE(int explosionType, float x, float y, float z, float radius)
	{
		return invoker::invoke<BOOL, 0x8764A5B95AE1F967, 0xA73640>(explosionType, x, y, z, radius);
	}

	FORCEINLINE auto GET_OWNER_OF_EXPLOSION_IN_SPHERE(int explosionType, float x, float y, float z, float radius)
	{
		return invoker::invoke<Entity, 0x4E890D800CBC4BD9, 0xA71C94>(explosionType, x, y, z, radius);
	}

	FORCEINLINE auto IS_EXPLOSION_IN_ANGLED_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float width)
	{
		return invoker::invoke<BOOL, 0x9D27D35452DED6B5, 0xA735D4>(explosionType, x1, y1, z1, x2, y2, z2, width);
	}

	FORCEINLINE auto GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float radius)
	{
		return invoker::invoke<Entity, 0xCBE5AFAE59C1BB3A, 0xA71C68>(explosionType, x1, y1, z1, x2, y2, z2, radius);
	}

}
namespace CLOCK
{
	FORCEINLINE auto SET_CLOCK_TIME(int hour, int minute, int second)
	{
		return invoker::invoke<void, 0xCBE10A13619B9FAA, 0xA75394>(hour, minute, second);
	}

	FORCEINLINE auto PAUSE_CLOCK(BOOL toggle)
	{
		return invoker::invoke<void, 0xB9C1EC5EDDAAA115, 0xA73F1C>(toggle);
	}

	FORCEINLINE auto ADVANCE_CLOCK_TIME_TO(int hour, int minute, int second)
	{
		return invoker::invoke<void, 0x77A5275126602303, 0xA6E328>(hour, minute, second);
	}

	FORCEINLINE auto ADD_TO_CLOCK_TIME(int hours, int minutes, int seconds)
	{
		return invoker::invoke<void, 0x2C9A2F8762B95F5C, 0xA6E2EC>(hours, minutes, seconds);
	}

	FORCEINLINE auto GET_CLOCK_HOURS()
	{
		return invoker::invoke<int, 0x5295501D0862870D, 0xA7088C>();
	}

	FORCEINLINE auto GET_CLOCK_MINUTES()
	{
		return invoker::invoke<int, 0x18E502A71E28968C, 0xA70898>();
	}

	FORCEINLINE auto GET_CLOCK_SECONDS()
	{
		return invoker::invoke<int, 0x4BA5A16068183C5E, 0xA708B0>();
	}

	FORCEINLINE auto SET_CLOCK_DATE(int day, int month, int year)
	{
		return invoker::invoke<void, 0xF13E285EDAB2D255, 0xA75380>(day, month, year);
	}

	FORCEINLINE auto GET_CLOCK_DAY_OF_WEEK()
	{
		return invoker::invoke<int, 0xDDA4278694CAA369, 0xA70880>();
	}

	FORCEINLINE auto GET_CLOCK_DAY_OF_MONTH()
	{
		return invoker::invoke<int, 0xB12880C92EA6EE15, 0xA70874>();
	}

	FORCEINLINE auto GET_CLOCK_MONTH()
	{
		return invoker::invoke<int, 0x8825A6E0A30BDCB8, 0xA708A4>();
	}

	FORCEINLINE auto GET_CLOCK_YEAR()
	{
		return invoker::invoke<int, 0x7598FE4545010A75, 0xA708BC>();
	}

	FORCEINLINE auto GET_MILLISECONDS_PER_GAME_MINUTE()
	{
		return invoker::invoke<int, 0x91C8345B22D52DEC, 0xA719AC>();
	}

	FORCEINLINE auto GET_POSIX_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second)
	{
		return invoker::invoke<void, 0x23CB97F04154A594, 0xA71D2C>(year, month, day, hour, minute, second);
	}

	FORCEINLINE auto GET_UTC_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second)
	{
		return invoker::invoke<void, 0x177E5760BD4F49BC, 0xA72364>(year, month, day, hour, minute, second);
	}

	FORCEINLINE auto GET_LOCAL_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second)
	{
		return invoker::invoke<void, 0x2B6A03197E4C7EEF, 0xA7196C>(year, month, day, hour, minute, second);
	}

}
namespace INTERIOR
{
	FORCEINLINE auto GET_INTERIOR_HEADING(Interior interior)
	{
		return invoker::invoke<float, 0xB70C73407E942734, 0xD191F8>(interior);
	}

	FORCEINLINE auto GET_INTERIOR_LOCATION_AND_NAMEHASH(Interior interior, Vector3* position, Hash* nameHash)
	{
		return invoker::invoke<void, 0x97A631B5F81A6197, 0xD1921C>(interior, position, nameHash);
	}

	FORCEINLINE auto GET_INTERIOR_GROUP_ID(Interior interior)
	{
		return invoker::invoke<int, 0x1F6CFCD52206CDB0, 0xD191D8>(interior);
	}

	FORCEINLINE auto GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(Interior interior, float x, float y, float z)
	{
		return invoker::invoke<Vector3, 0xB849529ACBFB3D85, 0xD19650>(interior, x, y, z);
	}

	FORCEINLINE auto IS_INTERIOR_SCENE()
	{
		return invoker::invoke<BOOL, 0x4B7DCB210992A9F7, 0xD1A25C>();
	}

	FORCEINLINE auto IS_VALID_INTERIOR(Interior interior)
	{
		return invoker::invoke<BOOL, 0xF8A8852F99E201DD, 0xD1A814>(interior);
	}

	FORCEINLINE auto CLEAR_ROOM_FOR_ENTITY(Entity entity)
	{
		return invoker::invoke<void, 0x1ACA339FBE1A59EA, 0xD17BF4>(entity);
	}

	FORCEINLINE auto FORCE_ROOM_FOR_ENTITY(Entity entity, Interior interior, Hash roomHashKey)
	{
		return invoker::invoke<void, 0x10D289FA72A25777, 0xD18848>(entity, interior, roomHashKey);
	}

	FORCEINLINE auto GET_ROOM_KEY_FROM_ENTITY(Entity entity)
	{
		return invoker::invoke<Hash, 0xAB74A6FE5E16479E, 0xD199D4>(entity);
	}

	FORCEINLINE auto GET_KEY_FOR_ENTITY_IN_ROOM(Entity entity)
	{
		return invoker::invoke<Hash, 0xC69E0125145BB58A, 0xD192B4>(entity);
	}

	FORCEINLINE auto GET_INTERIOR_FROM_ENTITY(Entity entity)
	{
		return invoker::invoke<Interior, 0xF8F35890F43ED2AE, 0xD1919C>(entity);
	}

	FORCEINLINE auto RETAIN_ENTITY_IN_INTERIOR(Entity entity, Interior interior)
	{
		return invoker::invoke<void, 0xD29996371F9BD0FD, 0xD1DAE0>(entity, interior);
	}

	FORCEINLINE auto CLEAR_INTERIOR_STATE_OF_ENTITY(Entity entity)
	{
		return invoker::invoke<void, 0xDE69E5D63A1F57E0, 0xD17BA0>(entity);
	}

	FORCEINLINE auto FORCE_ACTIVATING_TRACKING_ON_ENTITY(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x6E562EEC4008A0C5, 0xD187E0>(p0, p1);
	}

	FORCEINLINE auto FORCE_ROOM_FOR_GAME_VIEWPORT(int interiorID, Hash roomHashKey)
	{
		return invoker::invoke<void, 0xA88C91AADCB02A8A, 0xD1885C>(interiorID, roomHashKey);
	}

	FORCEINLINE auto SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(const char* roomName)
	{
		return invoker::invoke<void, 0xDC750660004ECB83, 0xD1EC28>(roomName);
	}

	FORCEINLINE auto SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(Hash roomHashKey)
	{
		return invoker::invoke<void, 0x2EFEB897BDD17B5B, 0xD1EC1C>(roomHashKey);
	}

	FORCEINLINE auto GET_ROOM_KEY_FOR_GAME_VIEWPORT()
	{
		return invoker::invoke<Hash, 0xA491B07310DC58BE, 0xD199B8>();
	}

	FORCEINLINE auto CLEAR_ROOM_FOR_GAME_VIEWPORT()
	{
		return invoker::invoke<void, 0xCC3ADBA41991FF4E, 0xD17C00>();
	}

	FORCEINLINE auto GET_INTERIOR_FROM_PRIMARY_VIEW()
	{
		return invoker::invoke<Interior, 0x92EA98681B1610F2, 0xD191BC>();
	}

	FORCEINLINE auto GET_INTERIOR_AT_COORDS(float x, float y, float z)
	{
		return invoker::invoke<Interior, 0xE171121A3A25363, 0xD19118>(x, y, z);
	}

	FORCEINLINE auto ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(Pickup pickup, const char* roomName)
	{
		return invoker::invoke<void, 0x57303BAC3E5DA035, 0xD174C4>(pickup, roomName);
	}

	FORCEINLINE auto PIN_INTERIOR_IN_MEMORY(Interior interior)
	{
		return invoker::invoke<void, 0x74C1590CC91B3930, 0xD1D5D8>(interior);
	}

	FORCEINLINE auto UNPIN_INTERIOR(Interior interior)
	{
		return invoker::invoke<void, 0xBBB6D0F765409642, 0xD1F7A4>(interior);
	}

	FORCEINLINE auto IS_INTERIOR_READY(Interior interior)
	{
		return invoker::invoke<BOOL, 0xD0B0D1BD29678350, 0xD1A238>(interior);
	}

	FORCEINLINE auto SET_INTERIOR_IN_USE(Interior interior)
	{
		return invoker::invoke<BOOL, 0x75E4D52830820775, 0xD1E634>(interior);
	}

	FORCEINLINE auto GET_INTERIOR_AT_COORDS_WITH_TYPE(float x, float y, float z, const char* interiorType)
	{
		return invoker::invoke<Interior, 0x556019E7EE8EC9A, 0xD19138>(x, y, z, interiorType);
	}

	FORCEINLINE auto GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(float x, float y, float z, Hash typeHash)
	{
		return invoker::invoke<Interior, 0x98915B4A834CE874, 0xD1915C>(x, y, z, typeHash);
	}

	FORCEINLINE auto ACTIVATE_INTERIOR_GROUPS_USING_CAMERA()
	{
		return invoker::invoke<void, 0x87B6357C65356CB1, 0xD1738C>();
	}

	FORCEINLINE auto IS_COLLISION_MARKED_OUTSIDE(float x, float y, float z)
	{
		return invoker::invoke<BOOL, 0x7830326EF9D54DBB, 0xD1A048>(x, y, z);
	}

	FORCEINLINE auto GET_INTERIOR_FROM_COLLISION(float x, float y, float z)
	{
		return invoker::invoke<Interior, 0x91398220755C14BF, 0xD1917C>(x, y, z);
	}

	FORCEINLINE auto ENABLE_STADIUM_PROBES_THIS_FRAME(BOOL toggle)
	{
		return invoker::invoke<void, 0xBC9CDE5AE8D32EF2, 0xD1821C>(toggle);
	}

	FORCEINLINE auto ACTIVATE_INTERIOR_ENTITY_SET(Interior interior, const char* entitySetName)
	{
		return invoker::invoke<void, 0x907994FF361E5295, 0xD1737C>(interior, entitySetName);
	}

	FORCEINLINE auto DEACTIVATE_INTERIOR_ENTITY_SET(Interior interior, const char* entitySetName)
	{
		return invoker::invoke<void, 0x62BCE536D41AC07D, 0xD17E80>(interior, entitySetName);
	}

	FORCEINLINE auto IS_INTERIOR_ENTITY_SET_ACTIVE(Interior interior, const char* entitySetName)
	{
		return invoker::invoke<BOOL, 0x9491D4E34E4389CD, 0xD1A210>(interior, entitySetName);
	}

	FORCEINLINE auto SET_INTERIOR_ENTITY_SET_TINT_INDEX(Interior interior, const char* entitySetName, int color)
	{
		return invoker::invoke<void, 0xA047107933868D4, 0xD1E620>(interior, entitySetName, color);
	}

	FORCEINLINE auto REFRESH_INTERIOR(Interior interior)
	{
		return invoker::invoke<void, 0xEEC112F70F9E6543, 0xD1D778>(interior);
	}

	FORCEINLINE auto ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(Hash mapObjectHash)
	{
		return invoker::invoke<void, 0xCBC55350FF75F537, 0xD18204>(mapObjectHash);
	}

	FORCEINLINE auto ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(Hash mapObjectHash)
	{
		return invoker::invoke<void, 0x8B8D24263DAB0736, 0xD18210>(mapObjectHash);
	}

	FORCEINLINE auto DISABLE_INTERIOR(Interior interior, BOOL toggle)
	{
		return invoker::invoke<void, 0xD3EBDA853981B983, 0xD17F28>(interior, toggle);
	}

	FORCEINLINE auto IS_INTERIOR_DISABLED(Interior interior)
	{
		return invoker::invoke<BOOL, 0xE849FB3A0C73A0D9, 0xD1A1EC>(interior);
	}

	FORCEINLINE auto CAP_INTERIOR(Interior interior, BOOL toggle)
	{
		return invoker::invoke<void, 0xA5C49FC956688050, 0xD17988>(interior, toggle);
	}

	FORCEINLINE auto IS_INTERIOR_CAPPED(Interior interior)
	{
		return invoker::invoke<BOOL, 0x79D5985D0CE1880C, 0xD1A1C8>(interior);
	}

	FORCEINLINE auto DISABLE_METRO_SYSTEM(BOOL toggle)
	{
		return invoker::invoke<void, 0x1C8E9BB989C1EEE, 0xD17F3C>(toggle);
	}

	FORCEINLINE auto SET_IS_EXTERIOR_ONLY(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x9AC70C40670AC02D, 0xD1E640>(entity, toggle);
	}

}
namespace STREAMING
{
	FORCEINLINE auto LOAD_ALL_OBJECTS_NOW()
	{
		return invoker::invoke<void, 0x12C01FC00B0CBB6B, 0xD667B8>();
	}

	FORCEINLINE auto LOAD_SCENE(float x, float y, float z)
	{
		return invoker::invoke<void, 0x6C39BDF5EA5D38FC, 0xD667E4>(x, y, z);
	}

	FORCEINLINE auto NETWORK_UPDATE_LOAD_SCENE()
	{
		return invoker::invoke<BOOL, 0xD87B2B089732DAFC, 0xD668A8>();
	}

	FORCEINLINE auto IS_NETWORK_LOADING_SCENE()
	{
		return invoker::invoke<BOOL, 0x9C71253F91C37F27, 0xD65590>();
	}

	FORCEINLINE auto SET_INTERIOR_ACTIVE(int interiorID, BOOL toggle)
	{
		return invoker::invoke<void, 0xE3D86F90541BD5EF, 0xD698E0>(interiorID, toggle);
	}

	FORCEINLINE auto REQUEST_MODEL(Hash model)
	{
		return invoker::invoke<void, 0xEC9DAA34BBB4658C, 0xD67CD4>(model);
	}

	FORCEINLINE auto REQUEST_MENU_PED_MODEL(Hash model)
	{
		return invoker::invoke<void, 0x99EE60555ADD76D0, 0xD67CEC>(model);
	}

	FORCEINLINE auto HAS_MODEL_LOADED(Hash model)
	{
		return invoker::invoke<BOOL, 0x6252BC0DD8A320DB, 0xD64DC0>(model);
	}

	FORCEINLINE auto REQUEST_MODELS_IN_ROOM(Interior interior, const char* roomName)
	{
		return invoker::invoke<void, 0x65694862DDC9E5D0, 0xD67D00>(interior, roomName);
	}

	FORCEINLINE auto SET_MODEL_AS_NO_LONGER_NEEDED(Hash model)
	{
		return invoker::invoke<void, 0x55098D9E9AD58806, 0xD699D8>(model);
	}

	FORCEINLINE auto IS_MODEL_IN_CDIMAGE(Hash model)
	{
		return invoker::invoke<BOOL, 0xE7D342E0F16AAA8F, 0xD6548C>(model);
	}

	FORCEINLINE auto IS_MODEL_VALID(Hash model)
	{
		return invoker::invoke<BOOL, 0x441B9C85D0FFA9ED, 0xD654B0>(model);
	}

	FORCEINLINE auto IS_MODEL_A_PED(Hash model)
	{
		return invoker::invoke<BOOL, 0xBA4223DE7F0708BA, 0xD65444>(model);
	}

	FORCEINLINE auto IS_MODEL_A_VEHICLE(Hash model)
	{
		return invoker::invoke<BOOL, 0xAD1840C2E6AF7D5E, 0xD65468>(model);
	}

	FORCEINLINE auto REQUEST_COLLISION_AT_COORD(float x, float y, float z)
	{
		return invoker::invoke<void, 0xEA2D52183C7EA9CF, 0xD67CA4>(x, y, z);
	}

	FORCEINLINE auto REQUEST_COLLISION_FOR_MODEL(Hash model)
	{
		return invoker::invoke<void, 0x91AA33D82EA60124, 0xD67CD4>(model);
	}

	FORCEINLINE auto HAS_COLLISION_FOR_MODEL_LOADED(Hash model)
	{
		return invoker::invoke<BOOL, 0xB1625FCB7B6A7982, 0xD64D54>(model);
	}

	FORCEINLINE auto REQUEST_ADDITIONAL_COLLISION_AT_COORD(float x, float y, float z)
	{
		return invoker::invoke<void, 0xCAB6FA8C9D44F90A, 0xD67CA4>(x, y, z);
	}

	FORCEINLINE auto DOES_ANIM_DICT_EXIST(const char* animDict)
	{
		return invoker::invoke<BOOL, 0xBBE75ED2B58BB1F7, 0xD61F54>(animDict);
	}

	FORCEINLINE auto REQUEST_ANIM_DICT(const char* animDict)
	{
		return invoker::invoke<void, 0x80813AC549A1E8AE, 0xD67C8C>(animDict);
	}

	FORCEINLINE auto HAS_ANIM_DICT_LOADED(const char* animDict)
	{
		return invoker::invoke<BOOL, 0xE100DD4F82A51BDE, 0xD64D0C>(animDict);
	}

	FORCEINLINE auto REMOVE_ANIM_DICT(const char* animDict)
	{
		return invoker::invoke<void, 0x268BE77F77533D03, 0xD67AC4>(animDict);
	}

	FORCEINLINE auto REQUEST_ANIM_SET(const char* animSet)
	{
		return invoker::invoke<void, 0xA336AFF285251641, 0xD67C98>(animSet);
	}

	FORCEINLINE auto HAS_ANIM_SET_LOADED(const char* animSet)
	{
		return invoker::invoke<BOOL, 0x60C643DC13B0C72B, 0xD64D30>(animSet);
	}

	FORCEINLINE auto REMOVE_ANIM_SET(const char* animSet)
	{
		return invoker::invoke<void, 0x13F0C01028B5EE7C, 0xD67AD0>(animSet);
	}

	FORCEINLINE auto REQUEST_CLIP_SET(const char* clipSet)
	{
		return invoker::invoke<void, 0x73DEEAB0747FB17C, 0xD67C98>(clipSet);
	}

	FORCEINLINE auto HAS_CLIP_SET_LOADED(const char* clipSet)
	{
		return invoker::invoke<BOOL, 0x8175BC6D49412468, 0xD64D30>(clipSet);
	}

	FORCEINLINE auto REMOVE_CLIP_SET(const char* clipSet)
	{
		return invoker::invoke<void, 0x9B64A44D0B8D7CF6, 0xD67AD0>(clipSet);
	}

	FORCEINLINE auto REQUEST_IPL(const char* iplName)
	{
		return invoker::invoke<void, 0xECFC57F5F11BCD83, 0xD67CE0>(iplName);
	}

	FORCEINLINE auto REMOVE_IPL(const char* iplName)
	{
		return invoker::invoke<void, 0x5373E9377066509E, 0xD67B00>(iplName);
	}

	FORCEINLINE auto IS_IPL_ACTIVE(const char* iplName)
	{
		return invoker::invoke<BOOL, 0x5AEB336317DC4151, 0xD653FC>(iplName);
	}

	FORCEINLINE auto SET_STREAMING(BOOL toggle)
	{
		return invoker::invoke<void, 0x461E44FC144D65C1, 0xD6A2A8>(toggle);
	}

	FORCEINLINE auto LOAD_GLOBAL_WATER_FILE(int waterType)
	{
		return invoker::invoke<void, 0x548BCB9EBC09A967, 0xD667D8>(waterType);
	}

	FORCEINLINE auto GET_GLOBAL_WATER_FILE()
	{
		return invoker::invoke<int, 0x5A9ACBB54EEA813F, 0xD62948>();
	}

	FORCEINLINE auto SET_GAME_PAUSES_FOR_STREAMING(BOOL toggle)
	{
		return invoker::invoke<void, 0xD82473EFEF7FC622, 0xD696C8>(toggle);
	}

	FORCEINLINE auto SET_REDUCE_PED_MODEL_BUDGET(BOOL toggle)
	{
		return invoker::invoke<void, 0x9E635675ADA39E95, 0xD6A044>(toggle);
	}

	FORCEINLINE auto SET_REDUCE_VEHICLE_MODEL_BUDGET(BOOL toggle)
	{
		return invoker::invoke<void, 0xD81FEE0302584F60, 0xD6A05C>(toggle);
	}

	FORCEINLINE auto SET_DITCH_POLICE_MODELS(BOOL toggle)
	{
		return invoker::invoke<void, 0x3A03D0433769C629, 0x81A1C0>(toggle);
	}

	FORCEINLINE auto GET_NUMBER_OF_STREAMING_REQUESTS()
	{
		return invoker::invoke<int, 0x684D65D3F0BFF960, 0xD62FDC>();
	}

	FORCEINLINE auto REQUEST_PTFX_ASSET()
	{
		return invoker::invoke<void, 0x8003D3C0115A1035, 0xD67D1C>();
	}

	FORCEINLINE auto HAS_PTFX_ASSET_LOADED()
	{
		return invoker::invoke<BOOL, 0x6F13318788EDDAD8, 0xD64EB0>();
	}

	FORCEINLINE auto REMOVE_PTFX_ASSET()
	{
		return invoker::invoke<void, 0xAE427DA16687F323, 0xD67B30>();
	}

	FORCEINLINE auto REQUEST_NAMED_PTFX_ASSET(const char* fxName)
	{
		return invoker::invoke<void, 0xEBEE7DC21AB44EC9, 0xD67D10>(fxName);
	}

	FORCEINLINE auto HAS_NAMED_PTFX_ASSET_LOADED(const char* fxName)
	{
		return invoker::invoke<BOOL, 0x939D49C9FAA8139A, 0xD64DE4>(fxName);
	}

	FORCEINLINE auto REMOVE_NAMED_PTFX_ASSET(const char* fxName)
	{
		return invoker::invoke<void, 0x90D778E278B533C0, 0xD67B18>(fxName);
	}

	FORCEINLINE auto SET_VEHICLE_POPULATION_BUDGET(int p0)
	{
		return invoker::invoke<void, 0x283C0970282AA5F3, 0xD6B328>(p0);
	}

	FORCEINLINE auto SET_PED_POPULATION_BUDGET(int p0)
	{
		return invoker::invoke<void, 0xAD9B1C8FED6B4D96, 0xD69D58>(p0);
	}

	FORCEINLINE auto CLEAR_FOCUS()
	{
		return invoker::invoke<void, 0xE3F88173F42C071B, 0x159C4>();
	}

	FORCEINLINE auto SET_FOCUS_POS_AND_VEL(float x, float y, float z, float offsetX, float offsetY, float offsetZ)
	{
		return invoker::invoke<void, 0x2D8D239B3F1D13F9, 0xD69618>(x, y, z, offsetX, offsetY, offsetZ);
	}

	FORCEINLINE auto SET_FOCUS_ENTITY(Entity entity)
	{
		return invoker::invoke<void, 0xD410E6FC0A0C97D2, 0xD6960C>(entity);
	}

	FORCEINLINE auto IS_ENTITY_FOCUS(Entity entity)
	{
		return invoker::invoke<BOOL, 0x4C052E5245B17920, 0xD652CC>(entity);
	}

	FORCEINLINE auto SET_RESTORE_FOCUS_ENTITY(Entity p0)
	{
		return invoker::invoke<void, 0x9E3DFB4BEB42BEDF, 0xD6A098>(p0);
	}

	FORCEINLINE auto SET_MAPDATACULLBOX_ENABLED(const char* name, BOOL toggle)
	{
		return invoker::invoke<void, 0x8BAB92052AD69AC5, 0xD6997C>(name, toggle);
	}

	FORCEINLINE auto SET_ALL_MAPDATA_CULLED(Any p0)
	{
		return invoker::invoke<void, 0x8F8802BEE0727FD5, 0x81A1C0>(p0);
	}

	FORCEINLINE auto STREAMVOL_CREATE_SPHERE(float x, float y, float z, float rad, Any p4, Any p5)
	{
		return invoker::invoke<int, 0xE9D3D741E2195673, 0xD6C598>(x, y, z, rad, p4, p5);
	}

	FORCEINLINE auto STREAMVOL_CREATE_FRUSTUM(float p0, float p1, float p2, float p3, float p4, float p5, float p6, Any p7, Any p8)
	{
		return invoker::invoke<int, 0x4F6F8824BE43F1F7, 0xD6C53C>(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto STREAMVOL_CREATE_LINE(float p0, float p1, float p2, float p3, float p4, float p5, Any p6)
	{
		return invoker::invoke<int, 0xDA771B84868AEA60, 0xD6C570>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto STREAMVOL_DELETE(Any unused)
	{
		return invoker::invoke<void, 0x6C730FCE8A68AF6F, 0xD6C5C4>(unused);
	}

	FORCEINLINE auto STREAMVOL_HAS_LOADED(Any unused)
	{
		return invoker::invoke<BOOL, 0xE945B67B28139DA2, 0xD6C5E0>(unused);
	}

	FORCEINLINE auto STREAMVOL_IS_VALID(Any unused)
	{
		return invoker::invoke<BOOL, 0x5561E31B168FA823, 0xD65A3C>(unused);
	}

	FORCEINLINE auto IS_STREAMVOL_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x8240737C161141A9, 0xD65A3C>();
	}

	FORCEINLINE auto NEW_LOAD_SCENE_START(float posX, float posY, float posZ, float offsetX, float offsetY, float offsetZ, float radius, int p7)
	{
		return invoker::invoke<BOOL, 0xAC48F8E2BF2BEBF7, 0xD668E0>(posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7);
	}

	FORCEINLINE auto NEW_LOAD_SCENE_START_SPHERE(float x, float y, float z, float radius, Any p4)
	{
		return invoker::invoke<BOOL, 0x4A3280817398D754, 0xD66910>(x, y, z, radius, p4);
	}

	FORCEINLINE auto NEW_LOAD_SCENE_STOP()
	{
		return invoker::invoke<void, 0x6981C3213B841071, 0xD6693C>();
	}

	FORCEINLINE auto IS_NEW_LOAD_SCENE_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x787F8EE1F6FBDC6D, 0xD655A0>();
	}

	FORCEINLINE auto IS_NEW_LOAD_SCENE_LOADED()
	{
		return invoker::invoke<BOOL, 0x9E2D35FA908F57B4, 0xD655B0>();
	}

	FORCEINLINE auto IS_SAFE_TO_START_PLAYER_SWITCH()
	{
		return invoker::invoke<BOOL, 0xB032847A7F7F0BFE, 0xD65964>();
	}

	FORCEINLINE auto START_PLAYER_SWITCH(Ped from, Ped to, int flags, int switchType)
	{
		return invoker::invoke<void, 0x8DD44A3F0D8EBD63, 0xD6BA3C>(from, to, flags, switchType);
	}

	FORCEINLINE auto STOP_PLAYER_SWITCH()
	{
		return invoker::invoke<void, 0xF4DB2666A609235A, 0xD6C534>();
	}

	FORCEINLINE auto IS_PLAYER_SWITCH_IN_PROGRESS()
	{
		return invoker::invoke<BOOL, 0x3555462DB47B7AB1, 0xD658F8>();
	}

	FORCEINLINE auto GET_PLAYER_SWITCH_TYPE()
	{
		return invoker::invoke<int, 0x1403FEB4554982F8, 0xD63518>();
	}

	FORCEINLINE auto GET_IDEAL_PLAYER_SWITCH_TYPE(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<int, 0xE4B27F02458924A3, 0xD62AB0>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto GET_PLAYER_SWITCH_STATE()
	{
		return invoker::invoke<int, 0x6D231A0D52134FC1, 0xD6350C>();
	}

	FORCEINLINE auto GET_PLAYER_SHORT_SWITCH_STATE()
	{
		return invoker::invoke<int, 0x1F32174C38BEB883, 0xD634C0>();
	}

	FORCEINLINE auto SET_PLAYER_SHORT_SWITCH_STYLE(int p0)
	{
		return invoker::invoke<void, 0xEDACB682D42B6786, 0xD69F28>(p0);
	}

	FORCEINLINE auto GET_PLAYER_SWITCH_JUMP_CUT_INDEX()
	{
		return invoker::invoke<int, 0x2291B8E26538A740, 0xD63500>();
	}

	FORCEINLINE auto SET_PLAYER_SWITCH_OUTRO(float cameraCoordX, float cameraCoordY, float cameraCoordZ, float camRotationX, float camRotationY, float camRotationZ, float camFov, float camFarClip, int rotationOrder)
	{
		return invoker::invoke<void, 0x6A668C52322FABB2, 0xD69F44>(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip, rotationOrder);
	}

	FORCEINLINE auto SET_PLAYER_SWITCH_ESTABLISHING_SHOT(const char* name)
	{
		return invoker::invoke<void, 0xC1DDC33C72C3B5A9, 0xD69F38>(name);
	}

	FORCEINLINE auto ALLOW_PLAYER_SWITCH_PAN()
	{
		return invoker::invoke<void, 0x546ACDD38D665C85, 0xD616A4>();
	}

	FORCEINLINE auto ALLOW_PLAYER_SWITCH_OUTRO()
	{
		return invoker::invoke<void, 0x50821CA6BB13D3E4, 0xD6169C>();
	}

	FORCEINLINE auto ALLOW_PLAYER_SWITCH_ASCENT()
	{
		return invoker::invoke<void, 0xBB3CF86DAAC9BAEB, 0xD6168C>();
	}

	FORCEINLINE auto ALLOW_PLAYER_SWITCH_DESCENT()
	{
		return invoker::invoke<void, 0x43FFAC3C360D589D, 0xD61694>();
	}

	FORCEINLINE auto IS_SWITCH_READY_FOR_DESCENT()
	{
		return invoker::invoke<BOOL, 0xB286852BCC387913, 0xD65A4C>();
	}

	FORCEINLINE auto ENABLE_SWITCH_PAUSE_BEFORE_DESCENT()
	{
		return invoker::invoke<void, 0x42CE839FFCC10E9, 0xD62218>();
	}

	FORCEINLINE auto DISABLE_SWITCH_OUTRO_FX()
	{
		return invoker::invoke<void, 0xE48295FCA7404802, 0xD61EE0>();
	}

	FORCEINLINE auto SWITCH_TO_MULTI_FIRSTPART(Ped ped, int flags, int switchType)
	{
		return invoker::invoke<void, 0x6DECE5EA21E009F8, 0xD6C65C>(ped, flags, switchType);
	}

	FORCEINLINE auto SWITCH_TO_MULTI_SECONDPART(Ped ped)
	{
		return invoker::invoke<void, 0xB4EDA6C252467FB1, 0xD6C670>(ped);
	}

	FORCEINLINE auto IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED()
	{
		return invoker::invoke<BOOL, 0x846BCB82A586E3AA, 0xD65A84>();
	}

	FORCEINLINE auto GET_PLAYER_SWITCH_INTERP_OUT_DURATION()
	{
		return invoker::invoke<int, 0x3F331BE6EB7BAC07, 0xD634E8>();
	}

	FORCEINLINE auto GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME()
	{
		return invoker::invoke<int, 0xED93D3690FF8AF5F, 0xD634CC>();
	}

	FORCEINLINE auto IS_SWITCH_SKIPPING_DESCENT()
	{
		return invoker::invoke<BOOL, 0xE386B6872B2E38EF, 0xD65A68>();
	}

	FORCEINLINE auto SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME()
	{
		return invoker::invoke<void, 0x3E09769A87E0D881, 0xD6A0FC>();
	}

	FORCEINLINE auto GET_LODSCALE()
	{
		return invoker::invoke<float, 0xD173C7695174C519, 0xD62E00>();
	}

	FORCEINLINE auto OVERRIDE_LODSCALE_THIS_FRAME(float scaling)
	{
		return invoker::invoke<void, 0xF8A2800C0B863DB1, 0xD66988>(scaling);
	}

	FORCEINLINE auto REMAP_LODSCALE_RANGE_THIS_FRAME(float p0, float p1, float p2, float p3)
	{
		return invoker::invoke<void, 0x9091BFD6A05E20ED, 0xD67A30>(p0, p1, p2, p3);
	}

	FORCEINLINE auto SUPPRESS_HD_MAP_STREAMING_THIS_FRAME()
	{
		return invoker::invoke<void, 0xCA2E379E3CAB622F, 0xD6C604>();
	}

	FORCEINLINE auto SET_RENDER_HD_ONLY(BOOL toggle)
	{
		return invoker::invoke<void, 0x30379A8083CE8F9, 0xD6A074>(toggle);
	}

	FORCEINLINE auto FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME()
	{
		return invoker::invoke<void, 0xC31FD6E2FE1930B9, 0xD62360>();
	}

	FORCEINLINE auto IPL_GROUP_SWAP_START(const char* iplName1, const char* iplName2)
	{
		return invoker::invoke<void, 0x9D8913BC7BA1265D, 0xD65134>(iplName1, iplName2);
	}

	FORCEINLINE auto IPL_GROUP_SWAP_CANCEL()
	{
		return invoker::invoke<void, 0xF9B380FD07A8B67E, 0xD650D8>();
	}

	FORCEINLINE auto IPL_GROUP_SWAP_IS_READY()
	{
		return invoker::invoke<BOOL, 0xE2B94989E87636A6, 0xD6510C>();
	}

	FORCEINLINE auto IPL_GROUP_SWAP_FINISH()
	{
		return invoker::invoke<void, 0x32BBBA949DBE76E8, 0xD650E8>();
	}

	FORCEINLINE auto IPL_GROUP_SWAP_IS_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x808A7B80951975C3, 0xD650FC>();
	}

	FORCEINLINE auto PREFETCH_SRL(const char* srl)
	{
		return invoker::invoke<void, 0xADF8AA2F22A19163, 0xD678CC>(srl);
	}

	FORCEINLINE auto IS_SRL_LOADED()
	{
		return invoker::invoke<BOOL, 0xEBCB9138B2CABF20, 0xD65A20>();
	}

	FORCEINLINE auto BEGIN_SRL()
	{
		return invoker::invoke<void, 0x89EAF23AE72CD8A8, 0xD61900>();
	}

	FORCEINLINE auto END_SRL()
	{
		return invoker::invoke<void, 0xE9DE8F39ED85311E, 0xD62284>();
	}

	FORCEINLINE auto SET_SRL_TIME(float p0)
	{
		return invoker::invoke<void, 0x4B1F30FB3C9A4B7F, 0xD6A294>(p0);
	}

	FORCEINLINE auto SET_SRL_POST_CUTSCENE_CAMERA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<void, 0xEB6D4B648B4DD588, 0xD6A258>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto SET_SRL_READAHEAD_TIMES(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x216049890A2D1EC6, 0xD6A268>(p0, p1, p2, p3);
	}

	FORCEINLINE auto SET_SRL_LONG_JUMP_MODE(BOOL p0)
	{
		return invoker::invoke<void, 0x6BD0E2C3AF4FF666, 0xD6A248>(p0);
	}

	FORCEINLINE auto SET_SRL_FORCE_PRESTREAM(Any p0)
	{
		return invoker::invoke<void, 0x78081733656ABA54, 0xD6A238>(p0);
	}

	FORCEINLINE auto SET_HD_AREA(float x, float y, float z, float radius)
	{
		return invoker::invoke<void, 0x34ABC7A6F0629903, 0xD69754>(x, y, z, radius);
	}

	FORCEINLINE auto CLEAR_HD_AREA()
	{
		return invoker::invoke<void, 0x6C086599D0704F9E, 0xD61B1C>();
	}

	FORCEINLINE auto INIT_CREATOR_BUDGET()
	{
		return invoker::invoke<void, 0x9FF2DDC6AA093A2E, 0xD650C8>();
	}

	FORCEINLINE auto SHUTDOWN_CREATOR_BUDGET()
	{
		return invoker::invoke<void, 0xA0511280CE71369E, 0xD6B8FC>();
	}

	FORCEINLINE auto ADD_MODEL_TO_CREATOR_BUDGET(Hash modelHash)
	{
		return invoker::invoke<BOOL, 0xFF795413579DFDC5, 0xD61528>(modelHash);
	}

	FORCEINLINE auto REMOVE_MODEL_FROM_CREATOR_BUDGET(Hash modelHash)
	{
		return invoker::invoke<void, 0x30B10A00315BA0C, 0xD67B0C>(modelHash);
	}

	FORCEINLINE auto GET_USED_CREATOR_BUDGET()
	{
		return invoker::invoke<float, 0x77B41E941C2D2D17, 0xD63A58>();
	}

	FORCEINLINE auto SET_ISLAND_ENABLED(const char* name, BOOL toggle)
	{
		return invoker::invoke<void, 0x00, 0xD69920>(name, toggle);
	}

}
namespace GRAPHICS
{
	FORCEINLINE auto SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(BOOL enabled)
	{
		return invoker::invoke<void, 0x9C091F2E9354854A, 0x81A1C0>(enabled);
	}

	FORCEINLINE auto DRAW_DEBUG_LINE(float x1, float y1, float z1, float x2, float y2, float z2, int r, int g, int b, int alpha)
	{
		return invoker::invoke<void, 0x9E36887F0AA9DF6D, 0x81A1C0>(x1, y1, z1, x2, y2, z2, r, g, b, alpha);
	}

	FORCEINLINE auto DRAW_DEBUG_LINE_WITH_TWO_COLOURS(float x1, float y1, float z1, float x2, float y2, float z2, int r1, int g1, int b1, int r2, int g2, int b2, int alpha1, int alpha2)
	{
		return invoker::invoke<void, 0x7B26600F66208BC6, 0x81A1C0>(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2);
	}

	FORCEINLINE auto DRAW_DEBUG_SPHERE(float x, float y, float z, float radius, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0x94DBB0363601E643, 0x81A1C0>(x, y, z, radius, red, green, blue, alpha);
	}

	FORCEINLINE auto DRAW_DEBUG_BOX(float x1, float y1, float z1, float x2, float y2, float z2, int r, int g, int b, int alpha)
	{
		return invoker::invoke<void, 0xF16E78BBC716DB17, 0x81A1C0>(x1, y1, z1, x2, y2, z2, r, g, b, alpha);
	}

	FORCEINLINE auto DRAW_DEBUG_CROSS(float x, float y, float z, float size, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0x5A0030BCCECA3297, 0x81A1C0>(x, y, z, size, red, green, blue, alpha);
	}

	FORCEINLINE auto DRAW_DEBUG_TEXT(const char* text, float x, float y, float z, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0x8B47D286AAC499D6, 0x81A1C0>(text, x, y, z, red, green, blue, alpha);
	}

	FORCEINLINE auto DRAW_DEBUG_TEXT_2D(const char* text, float x, float y, float z, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0xBBB7593C7244A846, 0x81A1C0>(text, x, y, z, red, green, blue, alpha);
	}

	FORCEINLINE auto DRAW_LINE(float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0xC9A38C22BE8013F2, 0xA6FE74>(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
	}

	FORCEINLINE auto DRAW_POLY(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0xCCE5AAE0F04B23CC, 0xA6FF08>(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha);
	}

	FORCEINLINE auto DRAW_TEXTURED_POLY(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, int red, int green, int blue, int alpha, const char* textureDict, const char* textureName, float u1, float v1, float w1, float u2, float v2, float w2, float u3, float v3, float w3)
	{
		return invoker::invoke<void, 0x7FB3FBAF75E52D57, 0xA701C4>(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
	}

	FORCEINLINE auto DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float red1, float green1, float blue1, int alpha1, float red2, float green2, float blue2, int alpha2, float red3, float green3, float blue3, int alpha3, const char* textureDict, const char* textureName, float u1, float v1, float w1, float u2, float v2, float w2, float u3, float v3, float w3)
	{
		return invoker::invoke<void, 0xCAB0D2338E17B2AB, 0xA701D4>(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1, alpha1, red2, green2, blue2, alpha2, red3, green3, blue3, alpha3, textureDict, textureName, u1, v1, w1, u2, v2, w2, u3, v3, w3);
	}

	FORCEINLINE auto DRAW_BOX(float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0x66ECCFB3761A11CA, 0xA6FDC4>(x1, y1, z1, x2, y2, z2, red, green, blue, alpha);
	}

	FORCEINLINE auto SET_BACKFACECULLING(BOOL toggle)
	{
		return invoker::invoke<void, 0x89150F21586978DF, 0xA74EAC>(toggle);
	}

	FORCEINLINE auto SET_DEPTHWRITING(BOOL toggle)
	{
		return invoker::invoke<void, 0x3547E68D04DBECAD, 0xA75598>(toggle);
	}

	FORCEINLINE auto BEGIN_TAKE_MISSION_CREATOR_PHOTO()
	{
		return invoker::invoke<BOOL, 0xB8D7546CD4CFAF85, 0xA6E8E8>();
	}

	FORCEINLINE auto GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO()
	{
		return invoker::invoke<int, 0x4E411746D4FFB0B1, 0xA7218C>();
	}

	FORCEINLINE auto FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO()
	{
		return invoker::invoke<void, 0x9B1F963686B6F6A3, 0xA70544>();
	}

	FORCEINLINE auto LOAD_MISSION_CREATOR_PHOTO(Any* p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<BOOL, 0x34BE4D7B1AB22F48, 0xA73CB8>(p0, p1, p2, p3);
	}

	FORCEINLINE auto GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(Any* p0)
	{
		return invoker::invoke<int, 0x86AAD2BE6D9F7463, 0xA72114>(p0);
	}

	FORCEINLINE auto BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()
	{
		return invoker::invoke<BOOL, 0x7AF299087F97C750, 0xA6E810>();
	}

	FORCEINLINE auto GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW()
	{
		return invoker::invoke<int, 0x530D6F0F54C3DDB7, 0xA720F4>();
	}

	FORCEINLINE auto FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW()
	{
		return invoker::invoke<void, 0x222C94B2B39C467, 0xA7054C>();
	}

	FORCEINLINE auto BEGIN_TAKE_HIGH_QUALITY_PHOTO()
	{
		return invoker::invoke<BOOL, 0x48B40FC81A85F44B, 0xA6E8CC>();
	}

	FORCEINLINE auto GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO()
	{
		return invoker::invoke<int, 0xB6C7ECEA9936790D, 0xA72170>();
	}

	FORCEINLINE auto FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO()
	{
		return invoker::invoke<void, 0xE379C4B49924485C, 0xA70534>();
	}

	FORCEINLINE auto SET_TAKEN_PHOTO_IS_MUGSHOT(BOOL toggle)
	{
		return invoker::invoke<void, 0x21DA82F574DDCFD2, 0xA767D4>(toggle);
	}

	FORCEINLINE auto SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(Any p0, int p1)
	{
		return invoker::invoke<void, 0xF7689113DC97142, 0xA74E18>(p0, p1);
	}

	FORCEINLINE auto SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(Any p0)
	{
		return invoker::invoke<void, 0xF4575C44910A9DF9, 0xA76160>(p0);
	}

	FORCEINLINE auto SAVE_HIGH_QUALITY_PHOTO(int unused)
	{
		return invoker::invoke<BOOL, 0xBA0D235D624BE8BD, 0xA74B24>(unused);
	}

	FORCEINLINE auto GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO()
	{
		return invoker::invoke<int, 0x9FE1211A2B698F5D, 0xA72134>();
	}

	FORCEINLINE auto BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(Any p0)
	{
		return invoker::invoke<BOOL, 0xF8E79D92A7C6EFE0, 0xA6E7EC>(p0);
	}

	FORCEINLINE auto GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(int p0)
	{
		return invoker::invoke<int, 0x39CD1674039F82E0, 0xA720D4>(p0);
	}

	FORCEINLINE auto FREE_MEMORY_FOR_LOW_QUALITY_PHOTO()
	{
		return invoker::invoke<void, 0x464C2B9EE565B093, 0xA7053C>();
	}

	FORCEINLINE auto DRAW_LOW_QUALITY_PHOTO_TO_PHONE(BOOL p0, BOOL p1)
	{
		return invoker::invoke<void, 0x4FA503A6757253A7, 0xA6FEA0>(p0, p1);
	}

	FORCEINLINE auto GET_MAXIMUM_NUMBER_OF_PHOTOS()
	{
		return invoker::invoke<int, 0x209F5DE8084C2803, 0xCCE8A8>();
	}

	FORCEINLINE auto GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS()
	{
		return invoker::invoke<int, 0xA0BFBD756D313CF2, 0xA719A0>();
	}

	FORCEINLINE auto GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS()
	{
		return invoker::invoke<int, 0x991C49208F09B7C0, 0xA70958>();
	}

	FORCEINLINE auto QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(Any p0)
	{
		return invoker::invoke<BOOL, 0xAE1965746C93F8D5, 0xA745F4>(p0);
	}

	FORCEINLINE auto GET_STATUS_OF_SORTED_LIST_OPERATION(Any p0)
	{
		return invoker::invoke<int, 0x62830FDE95255DE5, 0xA72150>(p0);
	}

	FORCEINLINE auto CLEAR_STATUS_OF_SORTED_LIST_OPERATION()
	{
		return invoker::invoke<void, 0x60B12E049FB8FF1C, 0xA6EDB4>();
	}

	FORCEINLINE auto DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(Any p0)
	{
		return invoker::invoke<BOOL, 0xA536EFAB049B26A3, 0xCCE8A8>(p0);
	}

	FORCEINLINE auto LOAD_HIGH_QUALITY_PHOTO(Any p0)
	{
		return invoker::invoke<BOOL, 0xE2935008625A1BE0, 0xCCE8A8>(p0);
	}

	FORCEINLINE auto GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(int p0)
	{
		return invoker::invoke<int, 0x7522B8298919A016, 0xD6C114>(p0);
	}

	FORCEINLINE auto DRAW_LIGHT_WITH_RANGEEX(float x, float y, float z, int r, int g, int b, float range, float intensity, float shadow)
	{
		return invoker::invoke<void, 0xAD7E30D4E0D1254, 0xA6FE34>(x, y, z, r, g, b, range, intensity, shadow);
	}

	FORCEINLINE auto DRAW_LIGHT_WITH_RANGE(float posX, float posY, float posZ, int colorR, int colorG, int colorB, float range, float intensity)
	{
		return invoker::invoke<void, 0x748651DF4DA0A890, 0xA6FDF0>(posX, posY, posZ, colorR, colorG, colorB, range, intensity);
	}

	FORCEINLINE auto DRAW_SPOT_LIGHT(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int colorR, int colorG, int colorB, float distance, float brightness, float hardness, float radius, float falloff)
	{
		return invoker::invoke<void, 0xE2E1B9096BCD8C5C, 0xA70128>(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, hardness, radius, falloff);
	}

	FORCEINLINE auto DRAW_SHADOWED_SPOT_LIGHT(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int colorR, int colorG, int colorB, float distance, float brightness, float roundness, float radius, float falloff, int shadowId)
	{
		return invoker::invoke<void, 0x2037C6627E628A1B, 0xA700C0>(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadowId);
	}

	FORCEINLINE auto FADE_UP_PED_LIGHT(float p0)
	{
		return invoker::invoke<void, 0xAE634DE5D86EE96A, 0xA70374>(p0);
	}

	FORCEINLINE auto UPDATE_LIGHTS_ON_ENTITY(Entity entity)
	{
		return invoker::invoke<void, 0xFF1E5DCD728C42E2, 0xA7765C>(entity);
	}

	FORCEINLINE auto SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(Any p0)
	{
		return invoker::invoke<void, 0xEC4B7DC773123827, 0xA76078>(p0);
	}

	FORCEINLINE auto GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE()
	{
		return invoker::invoke<float, 0xB891D572748D432C, 0xA71950>();
	}

	FORCEINLINE auto DRAW_MARKER(int type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, BOOL bobUpAndDown, BOOL faceCamera, int p19, BOOL rotate, const char* textureDict, const char* textureName, BOOL drawOnEnts)
	{
		return invoker::invoke<void, 0x7E763410A91A972B, 0xA6FEB4>(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts);
	}

	FORCEINLINE auto DRAW_MARKER_EX(int type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, BOOL bobUpAndDown, BOOL faceCamera, Any p19, BOOL rotate, const char* textureDict, const char* textureName, BOOL drawOnEnts, BOOL p24, BOOL p25)
	{
		return invoker::invoke<void, 0x9DC025C4B814AA09, 0xA6FEC4>(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts, p24, p25);
	}

	FORCEINLINE auto DRAW_MARKER_SPHERE(float x, float y, float z, float radius, int red, int green, int blue, float alpha)
	{
		return invoker::invoke<void, 0x426E16FFFB6D7AF1, 0xA6FED4>(x, y, z, radius, red, green, blue, alpha);
	}

	FORCEINLINE auto CREATE_CHECKPOINT(int type, float posX1, float posY1, float posZ1, float posX2, float posY2, float posZ2, float diameter, int red, int green, int blue, int alpha, int reserved)
	{
		return invoker::invoke<int, 0xDCC9FF4954D6DCB1, 0xA6EED4>(type, posX1, posY1, posZ1, posX2, posY2, posZ2, diameter, red, green, blue, alpha, reserved);
	}

	FORCEINLINE auto SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(int checkpoint, float scale)
	{
		return invoker::invoke<void, 0xF7A330D622F9A04F, 0xA752C0>(checkpoint, scale);
	}

	FORCEINLINE auto SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(int checkpoint, float scale)
	{
		return invoker::invoke<void, 0xE0B16D14D440A7C9, 0xA752D0>(checkpoint, scale);
	}

	FORCEINLINE auto SET_CHECKPOINT_CYLINDER_HEIGHT(int checkpoint, float nearHeight, float farHeight, float radius)
	{
		return invoker::invoke<void, 0xA7DD2E2BCBD9C8D5, 0xA75270>(checkpoint, nearHeight, farHeight, radius);
	}

	FORCEINLINE auto SET_CHECKPOINT_RGBA(int checkpoint, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0xEDC9B904B870CE80, 0xA7530C>(checkpoint, red, green, blue, alpha);
	}

	FORCEINLINE auto SET_CHECKPOINT_RGBA2(int checkpoint, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0xF7408C8F340BA88B, 0xA752E0>(checkpoint, red, green, blue, alpha);
	}

	FORCEINLINE auto SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(int checkpoint, float posX, float posY, float posZ, float unkX, float unkY, float unkZ)
	{
		return invoker::invoke<void, 0xEA8732A7013AB8DC, 0xA7525C>(checkpoint, posX, posY, posZ, unkX, unkY, unkZ);
	}

	FORCEINLINE auto SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(int checkpoint)
	{
		return invoker::invoke<void, 0xA46D09CA7F9EE44B, 0xA752B4>(checkpoint);
	}

	FORCEINLINE auto SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(int checkpoint)
	{
		return invoker::invoke<void, 0x6F331FADCE88574B, 0xA7528C>(checkpoint);
	}

	FORCEINLINE auto SET_CHECKPOINT_FORCE_DIRECTION(int checkpoint)
	{
		return invoker::invoke<void, 0xE90B81955102A66, 0xA752A8>(checkpoint);
	}

	FORCEINLINE auto SET_CHECKPOINT_DIRECTION(int checkpoint, float posX, float posY, float posZ)
	{
		return invoker::invoke<void, 0xA3ADA3BEDDCBD88B, 0xA75298>(checkpoint, posX, posY, posZ);
	}

	FORCEINLINE auto DELETE_CHECKPOINT(int checkpoint)
	{
		return invoker::invoke<void, 0xC2A5E7DCD1900AA1, 0xA6F894>(checkpoint);
	}

	FORCEINLINE auto DONT_RENDER_IN_GAME_UI(BOOL p0)
	{
		return invoker::invoke<void, 0xF5AB6155B7363507, 0xA6FD38>(p0);
	}

	FORCEINLINE auto FORCE_RENDER_IN_GAME_UI(BOOL toggle)
	{
		return invoker::invoke<void, 0xE1DC9972544E4160, 0xA704A8>(toggle);
	}

	FORCEINLINE auto REQUEST_STREAMED_TEXTURE_DICT(const char* textureDict, BOOL p1)
	{
		return invoker::invoke<void, 0xD0D00ED689D6CA81, 0xA74A28>(textureDict, p1);
	}

	FORCEINLINE auto HAS_STREAMED_TEXTURE_DICT_LOADED(const char* textureDict)
	{
		return invoker::invoke<BOOL, 0x38D063D8CF6D1967, 0xA72A74>(textureDict);
	}

	FORCEINLINE auto SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(const char* textureDict)
	{
		return invoker::invoke<void, 0x633E3833FB96BCCB, 0xA767A4>(textureDict);
	}

	FORCEINLINE auto DRAW_RECT(float x, float y, float width, float height, int r, int g, int b, int a, BOOL p8)
	{
		return invoker::invoke<void, 0x81645EE95A114FAE, 0xA6FF40>(x, y, width, height, r, g, b, a, p8);
	}

	FORCEINLINE auto SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(BOOL toggle)
	{
		return invoker::invoke<void, 0xA66AC5949E305457, 0xA766D0>(toggle);
	}

	FORCEINLINE auto SET_SCRIPT_GFX_DRAW_ORDER(int drawOrder)
	{
		return invoker::invoke<void, 0xA4F67CEB594AE064, 0xA766EC>(drawOrder);
	}

	FORCEINLINE auto SET_SCRIPT_GFX_ALIGN(int horizontalAlign, int verticalAlign)
	{
		return invoker::invoke<void, 0x9A122D542F2BB60E, 0xA76680>(horizontalAlign, verticalAlign);
	}

	FORCEINLINE auto RESET_SCRIPT_GFX_ALIGN()
	{
		return invoker::invoke<void, 0x90B531766063C5CD, 0xA74AD4>();
	}

	FORCEINLINE auto SET_SCRIPT_GFX_ALIGN_PARAMS(float x, float y, float w, float h)
	{
		return invoker::invoke<void, 0x9C066F8D86A1A438, 0xA76698>(x, y, w, h);
	}

	FORCEINLINE auto GET_SCRIPT_GFX_ALIGN_POSITION(float x, float y, float* calculatedX, float* calculatedY)
	{
		return invoker::invoke<void, 0x2BF75F235283775A, 0xA71EA8>(x, y, calculatedX, calculatedY);
	}

	FORCEINLINE auto GET_SAFE_ZONE_SIZE()
	{
		return invoker::invoke<float, 0x897B441FF18ECBBB, 0xA71DAC>();
	}

	FORCEINLINE auto DRAW_SPRITE(const char* textureDict, const char* textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, BOOL p11, Any p12)
	{
		return invoker::invoke<void, 0xFFA2B456A81EA1EB, 0xA70184>(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11, p12);
	}

	FORCEINLINE auto DRAW_SPRITE_ARX(const char* textureDict, const char* textureName, float x, float y, float width, float height, float p6, int red, int green, int blue, int alpha, Any p11, Any p12)
	{
		return invoker::invoke<void, 0xC54B91005A54695F, 0xA70194>(textureDict, textureName, x, y, width, height, p6, red, green, blue, alpha, p11, p12);
	}

	FORCEINLINE auto DRAW_SPRITE_NAMED_RENDERTARGET(const char* textureDict, const char* textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, Any p11)
	{
		return invoker::invoke<void, 0xF13626F74924F72A, 0xA701B4>(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11);
	}

	FORCEINLINE auto DRAW_SPRITE_ARX_WITH_UV(const char* textureDict, const char* textureName, float x, float y, float width, float height, float u1, float v1, float u2, float v2, float heading, int red, int green, int blue, int alpha, Any p15)
	{
		return invoker::invoke<void, 0xF9AAC4780D507BBC, 0xA701A4>(textureDict, textureName, x, y, width, height, u1, v1, u2, v2, heading, red, green, blue, alpha, p15);
	}

	FORCEINLINE auto ADD_ENTITY_ICON(Entity entity, const char* icon)
	{
		return invoker::invoke<int, 0x2EB73EDE5BD6492D, 0xA6E0D8>(entity, icon);
	}

	FORCEINLINE auto SET_ENTITY_ICON_VISIBILITY(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0xE71F327DD7F42EE2, 0xA75898>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_ICON_COLOR(Entity entity, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0x371531C96D032099, 0xA7586C>(entity, red, green, blue, alpha);
	}

	FORCEINLINE auto SET_DRAW_ORIGIN(float x, float y, float z, BOOL p3)
	{
		return invoker::invoke<void, 0xB56F2B356187E2E0, 0xA755D8>(x, y, z, p3);
	}

	FORCEINLINE auto CLEAR_DRAW_ORIGIN()
	{
		return invoker::invoke<void, 0xCE3DA51E28972A56, 0xA6ED90>();
	}

	FORCEINLINE auto SET_BINK_MOVIE(const char* name)
	{
		return invoker::invoke<int, 0x7DB4C41144D9961A, 0xA74EBC>(name);
	}

	FORCEINLINE auto PLAY_BINK_MOVIE(int binkMovie)
	{
		return invoker::invoke<void, 0x202024EB1E643238, 0xA73FF4>(binkMovie);
	}

	FORCEINLINE auto STOP_BINK_MOVIE(int binkMovie)
	{
		return invoker::invoke<void, 0x3A525484C63925D6, 0xA76F94>(binkMovie);
	}

	FORCEINLINE auto RELEASE_BINK_MOVIE(int binkMovie)
	{
		return invoker::invoke<void, 0xA3B3261566EE06A5, 0xA746F4>(binkMovie);
	}

	FORCEINLINE auto DRAW_BINK_MOVIE(int binkMovie, float p1, float p2, float p3, float p4, float p5, int r, int g, int b, int a)
	{
		return invoker::invoke<void, 0xAED06A53B3F23CC1, 0xA6FD64>(binkMovie, p1, p2, p3, p4, p5, r, g, b, a);
	}

	FORCEINLINE auto SET_BINK_MOVIE_TIME(int binkMovie, float progress)
	{
		return invoker::invoke<void, 0xBB1B3BE5A5E8B50C, 0xA74EF0>(binkMovie, progress);
	}

	FORCEINLINE auto GET_BINK_MOVIE_TIME(int binkMovie)
	{
		return invoker::invoke<float, 0x2362B981748EB883, 0xA70614>(binkMovie);
	}

	FORCEINLINE auto SET_BINK_MOVIE_VOLUME(int binkMovie, float value)
	{
		return invoker::invoke<void, 0xA24E6A436BF61457, 0xA74F00>(binkMovie, value);
	}

	FORCEINLINE auto ATTACH_TV_AUDIO_TO_ENTITY(Entity entity)
	{
		return invoker::invoke<void, 0xC850B483ACC98D91, 0xA6E7BC>(entity);
	}

	FORCEINLINE auto SET_BINK_MOVIE_AUDIO_FRONTEND(int binkMovie, BOOL p1)
	{
		return invoker::invoke<void, 0x8892E917CE7A0CB0, 0xA74EDC>(binkMovie, p1);
	}

	FORCEINLINE auto SET_TV_AUDIO_FRONTEND(BOOL toggle)
	{
		return invoker::invoke<void, 0x1BDD93397AF09D53, 0xA7688C>(toggle);
	}

	FORCEINLINE auto SET_BINK_SHOULD_SKIP(int binkMovie, BOOL bShouldSkip)
	{
		return invoker::invoke<void, 0x68BA02ADFAA2B2F, 0xA74F10>(binkMovie, bShouldSkip);
	}

	FORCEINLINE auto LOAD_MOVIE_MESH_SET(const char* movieMeshSetName)
	{
		return invoker::invoke<int, 0x60E2ADCDDFECC019, 0xA73CF0>(movieMeshSetName);
	}

	FORCEINLINE auto RELEASE_MOVIE_MESH_SET(int movieMeshSet)
	{
		return invoker::invoke<void, 0xE76A989290862FBF, 0xA74700>(movieMeshSet);
	}

	FORCEINLINE auto QUERY_MOVIE_MESH_SET_STATE(Any p0)
	{
		return invoker::invoke<int, 0x97EC9C4BC1C0F2E, 0xA745D4>(p0);
	}

	FORCEINLINE auto GET_SCREEN_RESOLUTION(int* x, int* y)
	{
		return invoker::invoke<void, 0x5949C3C031610A30, 0xA71E90>(x, y);
	}

	FORCEINLINE auto GET_ACTUAL_SCREEN_RESOLUTION(int* x, int* y)
	{
		return invoker::invoke<void, 0x21564F65F997D833, 0xA70554>(x, y);
	}

	FORCEINLINE auto GET_ASPECT_RATIO(BOOL b)
	{
		return invoker::invoke<float, 0x4AE9635532D92447, 0xA705CC>(b);
	}

	FORCEINLINE auto GET_SCREEN_ASPECT_RATIO()
	{
		return invoker::invoke<float, 0xDEE1875A0F6FC5F, 0xA71E44>();
	}

	FORCEINLINE auto GET_IS_WIDESCREEN()
	{
		return invoker::invoke<BOOL, 0x485ADB2D2728D748, 0xA718F4>();
	}

	FORCEINLINE auto GET_IS_HIDEF()
	{
		return invoker::invoke<BOOL, 0xC003EE4BA64FE66C, 0xA71850>();
	}

	FORCEINLINE auto ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9()
	{
		return invoker::invoke<void, 0x82987E4477EBF250, 0xA6E320>();
	}

	FORCEINLINE auto SET_NIGHTVISION(BOOL toggle)
	{
		return invoker::invoke<void, 0x7E732AC97C7488C2, 0xA76114>(toggle);
	}

	FORCEINLINE auto GET_REQUESTINGNIGHTVISION()
	{
		return invoker::invoke<BOOL, 0x9A207D2459EC3958, 0xA71D9C>();
	}

	FORCEINLINE auto GET_USINGNIGHTVISION()
	{
		return invoker::invoke<BOOL, 0xDC7D2B438B687A13, 0xA72308>();
	}

	FORCEINLINE auto SET_EXPOSURETWEAK(BOOL toggle)
	{
		return invoker::invoke<void, 0xBEE1FB2B37222CF5, 0xA75B10>(toggle);
	}

	FORCEINLINE auto FORCE_EXPOSURE_READBACK(BOOL toggle)
	{
		return invoker::invoke<void, 0xCB373F25B2EAB622, 0xA70444>(toggle);
	}

	FORCEINLINE auto OVERRIDE_NIGHTVISION_LIGHT_RANGE(float p0)
	{
		return invoker::invoke<void, 0x23F669E51BF7ABC7, 0xA73E50>(p0);
	}

	FORCEINLINE auto SET_NOISEOVERIDE(BOOL toggle)
	{
		return invoker::invoke<void, 0xA394F5DE4A5BE6D5, 0xA76124>(toggle);
	}

	FORCEINLINE auto SET_NOISINESSOVERIDE(float value)
	{
		return invoker::invoke<void, 0xF0E0A26499BF51AD, 0xA76134>(value);
	}

	FORCEINLINE auto GET_SCREEN_COORD_FROM_WORLD_COORD(float worldX, float worldY, float worldZ, float* screenX, float* screenY)
	{
		return invoker::invoke<BOOL, 0x2F8A75C70AF54208, 0xA71E68>(worldX, worldY, worldZ, screenX, screenY);
	}

	FORCEINLINE auto GET_TEXTURE_RESOLUTION(const char* textureDict, const char* textureName)
	{
		return invoker::invoke<Vector3, 0x32D86930C15E1159, 0xA72230>(textureDict, textureName);
	}

	FORCEINLINE auto OVERRIDE_PED_CREW_LOGO_TEXTURE(Ped ped, const char* txd, const char* txn)
	{
		return invoker::invoke<BOOL, 0xAAE0CF56E250FA77, 0xA73E60>(ped, txd, txn);
	}

	FORCEINLINE auto SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(float p0)
	{
		return invoker::invoke<void, 0x8AFA674B4DE9BCAE, 0xA755C0>(p0);
	}

	FORCEINLINE auto SET_FLASH(float p0, float p1, float fadeIn, float duration, float fadeOut)
	{
		return invoker::invoke<void, 0x6CC07FAD61035099, 0xA75C08>(p0, p1, fadeIn, duration, fadeOut);
	}

	FORCEINLINE auto DISABLE_OCCLUSION_THIS_FRAME()
	{
		return invoker::invoke<void, 0x66AA5AE1BFE28CA0, 0xA6F9F8>();
	}

	FORCEINLINE auto SET_ARTIFICIAL_LIGHTS_STATE(BOOL state)
	{
		return invoker::invoke<void, 0x771FE86D2A331DD7, 0xA74E28>(state);
	}

	FORCEINLINE auto SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(BOOL toggle)
	{
		return invoker::invoke<void, 0x5249247B8F69A39E, 0xA74E38>(toggle);
	}

	FORCEINLINE auto DISABLE_HDTEX_THIS_FRAME()
	{
		return invoker::invoke<void, 0xABCF34ADFD86B645, 0xA6F9C4>();
	}

	FORCEINLINE auto CREATE_TRACKED_POINT()
	{
		return invoker::invoke<int, 0x5008F9D1AD061D8C, 0xA6EFA8>();
	}

	FORCEINLINE auto SET_TRACKED_POINT_INFO(int point, float x, float y, float z, float radius)
	{
		return invoker::invoke<void, 0x9C0020A372AF7F16, 0xA76850>(point, x, y, z, radius);
	}

	FORCEINLINE auto IS_TRACKED_POINT_VISIBLE(int point)
	{
		return invoker::invoke<BOOL, 0x8018AA59F97FA9E3, 0xA73BE8>(point);
	}

	FORCEINLINE auto DESTROY_TRACKED_POINT(int point)
	{
		return invoker::invoke<void, 0x4FD2A45FD634CE58, 0xA6F8D0>(point);
	}

	FORCEINLINE auto SET_GRASS_CULL_SPHERE(float p0, float p1, float p2, float p3)
	{
		return invoker::invoke<int, 0x5F3592B356EE3A4C, 0xCCE8A8>(p0, p1, p2, p3);
	}

	FORCEINLINE auto REMOVE_GRASS_CULL_SPHERE(int handle)
	{
		return invoker::invoke<void, 0xB7F6A8F981EF6068, 0x81A1C0>(handle);
	}

	FORCEINLINE auto PROCGRASS_ENABLE_CULLSPHERE(int handle, float x, float y, float z, float scale)
	{
		return invoker::invoke<void, 0xACA69FD04F5F38B9, 0xA74558>(handle, x, y, z, scale);
	}

	FORCEINLINE auto PROCGRASS_DISABLE_CULLSPHERE(int handle)
	{
		return invoker::invoke<void, 0x85183ED7096BA9E5, 0xA7453C>(handle);
	}

	FORCEINLINE auto PROCGRASS_IS_CULLSPHERE_ENABLED(int handle)
	{
		return invoker::invoke<BOOL, 0x67A272C42918EF9F, 0xA745AC>(handle);
	}

	FORCEINLINE auto PROCGRASS_ENABLE_AMBSCALESCAN()
	{
		return invoker::invoke<void, 0xC6FE351F50854849, 0xA74550>();
	}

	FORCEINLINE auto PROCGRASS_DISABLE_AMBSCALESCAN()
	{
		return invoker::invoke<void, 0x8DCD9871820858E5, 0xA74534>();
	}

	FORCEINLINE auto DISABLE_PROCOBJ_CREATION()
	{
		return invoker::invoke<void, 0x7EEDA53E80999F2C, 0xA6FA30>();
	}

	FORCEINLINE auto ENABLE_PROCOBJ_CREATION()
	{
		return invoker::invoke<void, 0x976136EB2D134543, 0xA702AC>();
	}

	FORCEINLINE auto GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(float x, float y, float z, Any p3, float p4, float p5, float p6, float scale)
	{
		return invoker::invoke<void, 0x69F7527E6819E2B5, 0xA72688>(x, y, z, p3, p4, p5, p6, scale);
	}

	FORCEINLINE auto GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(float x, float y, float z, float radius, float p4, float p5, float p6)
	{
		return invoker::invoke<void, 0x400EE8EE61051687, 0xA726A0>(x, y, z, radius, p4, p5, p6);
	}

	FORCEINLINE auto GRASSBATCH_DISABLE_FLATTENING()
	{
		return invoker::invoke<void, 0x3BB0AB71DA07AD52, 0xA72680>();
	}

	FORCEINLINE auto CASCADE_SHADOWS_INIT_SESSION()
	{
		return invoker::invoke<void, 0x714097CFC7878BD0, 0xA6EBD0>();
	}

	FORCEINLINE auto CASCADE_SHADOWS_SET_CASCADE_BOUNDS(Any p0, BOOL p1, float p2, float p3, float p4, float p5, BOOL p6, float p7)
	{
		return invoker::invoke<void, 0xA4D68014F63795B7, 0xA6EC10>(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	FORCEINLINE auto CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(float p0)
	{
		return invoker::invoke<void, 0xD1EDF428E9679161, 0xA6EC6C>(p0);
	}

	FORCEINLINE auto CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(float p0)
	{
		return invoker::invoke<void, 0xA38ACCBA88BEF30D, 0xA6EC9C>(p0);
	}

	FORCEINLINE auto CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(float p0)
	{
		return invoker::invoke<void, 0x76C8F25CE400DBC9, 0xA6ECC8>(p0);
	}

	FORCEINLINE auto CASCADE_SHADOWS_SET_BOUND_POSITION(Any p0)
	{
		return invoker::invoke<void, 0x33DE7FF46025FB11, 0xA6EC00>(p0);
	}

	FORCEINLINE auto CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(BOOL toggle)
	{
		return invoker::invoke<void, 0x70F19143E4E40117, 0xA6EBB0>(toggle);
	}

	FORCEINLINE auto CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(BOOL p0)
	{
		return invoker::invoke<void, 0x29E1B2A8ED6262B, 0xA6ECAC>(p0);
	}

	FORCEINLINE auto CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(const char* type)
	{
		return invoker::invoke<void, 0x2327CC3214428B97, 0xA6ECBC>(type);
	}

	FORCEINLINE auto CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE()
	{
		return invoker::invoke<void, 0xA4F783C5B84288F2, 0xA6EBA8>();
	}

	FORCEINLINE auto CASCADE_SHADOWS_SET_AIRCRAFT_MODE(BOOL p0)
	{
		return invoker::invoke<void, 0x5222710997DF7E10, 0xA6EBF0>(p0);
	}

	FORCEINLINE auto CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(BOOL p0)
	{
		return invoker::invoke<void, 0x89ACA8B99257E016, 0xA6EC7C>(p0);
	}

	FORCEINLINE auto CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(float p0)
	{
		return invoker::invoke<void, 0x4FC2C77501EDCC1A, 0xA6EC8C>(p0);
	}

	FORCEINLINE auto CASCADE_SHADOWS_ENABLE_FREEZER(BOOL p0)
	{
		return invoker::invoke<void, 0x9EFA902715EB835D, 0xA6EBC0>(p0);
	}

	FORCEINLINE auto WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(Any p0)
	{
		return invoker::invoke<void, 0xF0A089C4753B822D, 0xA777B8>(p0);
	}

	FORCEINLINE auto GOLF_TRAIL_SET_ENABLED(BOOL toggle)
	{
		return invoker::invoke<void, 0x1100D0FDA8244965, 0xA72578>(toggle);
	}

	FORCEINLINE auto GOLF_TRAIL_SET_PATH(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, BOOL p8)
	{
		return invoker::invoke<void, 0x79C9D43F3FE4480B, 0xA725E4>(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto GOLF_TRAIL_SET_RADIUS(float p0, float p1, float p2)
	{
		return invoker::invoke<void, 0xFB8F1D6097145CC6, 0xA72610>(p0, p1, p2);
	}

	FORCEINLINE auto GOLF_TRAIL_SET_COLOUR(int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11)
	{
		return invoker::invoke<void, 0xF3DB862660144254, 0xA72568>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
	}

	FORCEINLINE auto GOLF_TRAIL_SET_TESSELLATION(int p0, int p1)
	{
		return invoker::invoke<void, 0x91A1DC814CBBB7AF, 0xA72658>(p0, p1);
	}

	FORCEINLINE auto GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(BOOL p0)
	{
		return invoker::invoke<void, 0x6171C9E04571F992, 0xA725D4>(p0);
	}

	FORCEINLINE auto GOLF_TRAIL_SET_FIXED_CONTROL_POINT(int type, float xPos, float yPos, float zPos, float p4, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0x4081B44AA3E3FAD3, 0xA72598>(type, xPos, yPos, zPos, p4, red, green, blue, alpha);
	}

	FORCEINLINE auto GOLF_TRAIL_SET_SHADER_PARAMS(float p0, float p1, float p2, float p3, float p4)
	{
		return invoker::invoke<void, 0xAB60C5CC1A3FCEB6, 0xA72628>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto GOLF_TRAIL_SET_FACING(BOOL p0)
	{
		return invoker::invoke<void, 0xD4C0EC928BB68223, 0xA72588>(p0);
	}

	FORCEINLINE auto GOLF_TRAIL_GET_MAX_HEIGHT()
	{
		return invoker::invoke<float, 0xAE8417FD434CE2AD, 0xA72504>();
	}

	FORCEINLINE auto GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(int p0)
	{
		return invoker::invoke<Vector3, 0x76AF286385CB7A3A, 0xA72520>(p0);
	}

	FORCEINLINE auto SET_SEETHROUGH(BOOL toggle)
	{
		return invoker::invoke<void, 0x29D3BA4C46972A1C, 0xA7670C>(toggle);
	}

	FORCEINLINE auto GET_USINGSEETHROUGH()
	{
		return invoker::invoke<BOOL, 0x8735D1F8A7023128, 0xA72354>();
	}

	FORCEINLINE auto SEETHROUGH_RESET()
	{
		return invoker::invoke<void, 0x20F3F547E98C23D8, 0xA74BB8>();
	}

	FORCEINLINE auto SEETHROUGH_SET_FADE_STARTDISTANCE(float distance)
	{
		return invoker::invoke<void, 0xB2F5BE72B0EC2DEE, 0xA74BE8>(distance);
	}

	FORCEINLINE auto SEETHROUGH_SET_FADE_ENDDISTANCE(float distance)
	{
		return invoker::invoke<void, 0x223BF824658215CB, 0xA74BD4>(distance);
	}

	FORCEINLINE auto SEETHROUGH_GET_MAX_THICKNESS()
	{
		return invoker::invoke<float, 0xA315036610507841, 0xA74BA8>();
	}

	FORCEINLINE auto SEETHROUGH_SET_MAX_THICKNESS(float thickness)
	{
		return invoker::invoke<void, 0x1D01A8724381340E, 0xA74C54>(thickness);
	}

	FORCEINLINE auto SEETHROUGH_SET_NOISE_MIN(float amount)
	{
		return invoker::invoke<void, 0x8FC9D74BE81B474E, 0xA74C78>(amount);
	}

	FORCEINLINE auto SEETHROUGH_SET_NOISE_MAX(float amount)
	{
		return invoker::invoke<void, 0x32A8433C67882382, 0xA74C64>(amount);
	}

	FORCEINLINE auto SEETHROUGH_SET_HILIGHT_INTENSITY(float intensity)
	{
		return invoker::invoke<void, 0xEE38FB77BB7A9700, 0xA74C40>(intensity);
	}

	FORCEINLINE auto SEETHROUGH_SET_HIGHLIGHT_NOISE(float noise)
	{
		return invoker::invoke<void, 0xD736F4EC169C0407, 0xA74C2C>(noise);
	}

	FORCEINLINE auto SEETHROUGH_SET_HEATSCALE(int index, float heatScale)
	{
		return invoker::invoke<void, 0xC5F88620264793E1, 0xA74BFC>(index, heatScale);
	}

	FORCEINLINE auto SEETHROUGH_SET_COLOR_NEAR(int red, int green, int blue)
	{
		return invoker::invoke<void, 0x37ED09D2BF486A04, 0xA74BC0>(red, green, blue);
	}

	FORCEINLINE auto SET_MOTIONBLUR_MAX_VEL_SCALER(float p0)
	{
		return invoker::invoke<void, 0x23A6A0C736CAD705, 0xA760DC>(p0);
	}

	FORCEINLINE auto GET_MOTIONBLUR_MAX_VEL_SCALER()
	{
		return invoker::invoke<float, 0x69AFCC77DCADB9BE, 0xA719B8>();
	}

	FORCEINLINE auto SET_FORCE_MOTIONBLUR(BOOL toggle)
	{
		return invoker::invoke<void, 0xB13A0D3DD3B674C6, 0xA75D74>(toggle);
	}

	FORCEINLINE auto TOGGLE_PLAYER_DAMAGE_OVERLAY(BOOL toggle)
	{
		return invoker::invoke<void, 0xA48EAC4D241222D3, 0xA772E8>(toggle);
	}

	FORCEINLINE auto RESET_ADAPTATION(int p0)
	{
		return invoker::invoke<void, 0xE3349610A15FA0D0, 0xA74A48>(p0);
	}

	FORCEINLINE auto TRIGGER_SCREENBLUR_FADE_IN(float transitionTime)
	{
		return invoker::invoke<BOOL, 0xC9C9496CFAAB8396, 0xA7732C>(transitionTime);
	}

	FORCEINLINE auto TRIGGER_SCREENBLUR_FADE_OUT(float transitionTime)
	{
		return invoker::invoke<BOOL, 0xB63687B4F0E3E236, 0xA77350>(transitionTime);
	}

	FORCEINLINE auto DISABLE_SCREENBLUR_FADE()
	{
		return invoker::invoke<void, 0xD2D97A8EA35312E0, 0xA6FA48>();
	}

	FORCEINLINE auto GET_SCREENBLUR_FADE_CURRENT_TIME()
	{
		return invoker::invoke<float, 0x6C91BB4DA2CAE9B1, 0xA71E2C>();
	}

	FORCEINLINE auto IS_SCREENBLUR_FADE_RUNNING()
	{
		return invoker::invoke<BOOL, 0xF2CF182F5FDA78DF, 0xA73A5C>();
	}

	FORCEINLINE auto TOGGLE_PAUSED_RENDERPHASES(BOOL toggle)
	{
		return invoker::invoke<void, 0xDD98B34A4A3AFA89, 0xA772CC>(toggle);
	}

	FORCEINLINE auto GET_TOGGLE_PAUSED_RENDERPHASES_STATUS()
	{
		return invoker::invoke<BOOL, 0x26A0105F181C2828, 0xA722C4>();
	}

	FORCEINLINE auto RESET_PAUSED_RENDERPHASES()
	{
		return invoker::invoke<void, 0x63FC71162B675A0, 0xA74AA0>();
	}

	FORCEINLINE auto GRAB_PAUSEMENU_OWNERSHIP()
	{
		return invoker::invoke<void, 0x414B57BC2AF5A7B1, 0xA72668>();
	}

	FORCEINLINE auto SET_HIDOF_OVERRIDE(BOOL p0, BOOL p1, float nearplaneOut, float nearplaneIn, float farplaneOut, float farplaneIn)
	{
		return invoker::invoke<void, 0xC31DA93280D5F36A, 0xA75FD8>(p0, p1, nearplaneOut, nearplaneIn, farplaneOut, farplaneIn);
	}

	FORCEINLINE auto SET_LOCK_ADAPTIVE_DOF_DISTANCE(BOOL p0)
	{
		return invoker::invoke<void, 0x4F35B6F682DEE8FA, 0xA76088>(p0);
	}

	FORCEINLINE auto PHONEPHOTOEDITOR_TOGGLE(BOOL p0)
	{
		return invoker::invoke<BOOL, 0x6256A54A328A35E6, 0xA73FA0>(p0);
	}

	FORCEINLINE auto PHONEPHOTOEDITOR_IS_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xB18CDB475D274A8E, 0xA73F60>();
	}

	FORCEINLINE auto PHONEPHOTOEDITOR_SET_FRAME_TXD(const char* textureDict, BOOL p1)
	{
		return invoker::invoke<BOOL, 0xEB4A8AC9A591F10E, 0xA73F74>(textureDict, p1);
	}

	FORCEINLINE auto START_PARTICLE_FX_NON_LOOPED_AT_COORD(const char* effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
	{
		return invoker::invoke<BOOL, 0xE56FEB6B12B5A32C, 0xA76D70>(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
	}

	FORCEINLINE auto START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(const char* effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis, BOOL p11)
	{
		return invoker::invoke<BOOL, 0x190E4141A4C4A1CA, 0xA76C64>(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
	}

	FORCEINLINE auto START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(const char* effectName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
	{
		return invoker::invoke<BOOL, 0x5B5B2AE530F511CC, 0xA76E38>(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
	}

	FORCEINLINE auto START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(const char* effectName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
	{
		return invoker::invoke<BOOL, 0x4E547C301F81B801, 0xA76CD4>(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
	}

	FORCEINLINE auto START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
	{
		return invoker::invoke<BOOL, 0xDD19F75405614D3C, 0xA76DC8>(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
	}

	FORCEINLINE auto START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
	{
		return invoker::invoke<BOOL, 0x51CD258B1EC7AB66, 0xA76C74>(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
	}

	FORCEINLINE auto START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(const char* effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, BOOL axisX, BOOL axisY, BOOL axisZ)
	{
		return invoker::invoke<BOOL, 0x73F69F74011DDBCA, 0xA76E28>(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
	}

	FORCEINLINE auto SET_PARTICLE_FX_NON_LOOPED_COLOUR(float r, float g, float b)
	{
		return invoker::invoke<void, 0x857B645DF072448C, 0xA762E8>(r, g, b);
	}

	FORCEINLINE auto SET_PARTICLE_FX_NON_LOOPED_ALPHA(float alpha)
	{
		return invoker::invoke<void, 0x7C087208DD019397, 0xA762C0>(alpha);
	}

	FORCEINLINE auto SET_PARTICLE_FX_NON_LOOPED_SCALE(float scale)
	{
		return invoker::invoke<void, 0xCB9A6C2693F6BC7D, 0xA7630C>(scale);
	}

	FORCEINLINE auto SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(float p0, float p1, float scale)
	{
		return invoker::invoke<void, 0x1B4B0BAF27CD18DB, 0xA76300>(p0, p1, scale);
	}

	FORCEINLINE auto SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(BOOL toggle)
	{
		return invoker::invoke<void, 0x66AEB7CADFF26E0B, 0xA76210>(toggle);
	}

	FORCEINLINE auto START_PARTICLE_FX_LOOPED_AT_COORD(const char* effectName, float x, float y, float z, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis, BOOL p11)
	{
		return invoker::invoke<int, 0x56E8A6AA712B10C2, 0xA76CE4>(effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
	}

	FORCEINLINE auto START_PARTICLE_FX_LOOPED_ON_PED_BONE(const char* effectName, Ped ped, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
	{
		return invoker::invoke<int, 0x2CC6B29B569945CC, 0xA76D60>(effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
	}

	FORCEINLINE auto START_PARTICLE_FX_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
	{
		return invoker::invoke<int, 0x62750FD2BDD8BD49, 0xA76CF4>(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
	}

	FORCEINLINE auto START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis)
	{
		return invoker::invoke<int, 0x3B8EE54DFE24F06C, 0xA76D50>(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
	}

	FORCEINLINE auto START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis, float r, float g, float b, float a)
	{
		return invoker::invoke<int, 0xB5BD5079F58A395F, 0xA76C44>(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, r, g, b, a);
	}

	FORCEINLINE auto START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(const char* effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, BOOL xAxis, BOOL yAxis, BOOL zAxis, float r, float g, float b, float a)
	{
		return invoker::invoke<int, 0x9BE6297091AF1898, 0xA76C54>(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis, r, g, b, a);
	}

	FORCEINLINE auto STOP_PARTICLE_FX_LOOPED(int ptfxHandle, BOOL p1)
	{
		return invoker::invoke<void, 0x182120534CCF9023, 0xA770C8>(ptfxHandle, p1);
	}

	FORCEINLINE auto REMOVE_PARTICLE_FX(int ptfxHandle, BOOL p1)
	{
		return invoker::invoke<void, 0x5301FEC6BB8F21DF, 0xA74814>(ptfxHandle, p1);
	}

	FORCEINLINE auto REMOVE_PARTICLE_FX_FROM_ENTITY(Entity entity)
	{
		return invoker::invoke<void, 0x8177A2A9DC5BD5B0, 0xA74828>(entity);
	}

	FORCEINLINE auto REMOVE_PARTICLE_FX_IN_RANGE(float X, float Y, float Z, float radius)
	{
		return invoker::invoke<void, 0xA69DCC67B2B61AD1, 0xA74834>(X, Y, Z, radius);
	}

	FORCEINLINE auto FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x4E96B177783A9BA6, 0xA70478>(p0, p1);
	}

	FORCEINLINE auto DOES_PARTICLE_FX_LOOPED_EXIST(int ptfxHandle)
	{
		return invoker::invoke<BOOL, 0x9CFFB7009B578840, 0xA6FCA0>(ptfxHandle);
	}

	FORCEINLINE auto SET_PARTICLE_FX_LOOPED_OFFSETS(int ptfxHandle, float x, float y, float z, float rotX, float rotY, float rotZ)
	{
		return invoker::invoke<void, 0xE1CDA05FEF060763, 0xA7629C>(ptfxHandle, x, y, z, rotX, rotY, rotZ);
	}

	FORCEINLINE auto SET_PARTICLE_FX_LOOPED_EVOLUTION(int ptfxHandle, const char* propertyName, float amount, BOOL noNetwork)
	{
		return invoker::invoke<void, 0xABAD28B5A427340D, 0xA76270>(ptfxHandle, propertyName, amount, noNetwork);
	}

	FORCEINLINE auto SET_PARTICLE_FX_LOOPED_COLOUR(int ptfxHandle, float r, float g, float b, BOOL p4)
	{
		return invoker::invoke<void, 0x6154AB43546C6437, 0xA76240>(ptfxHandle, r, g, b, p4);
	}

	FORCEINLINE auto SET_PARTICLE_FX_LOOPED_ALPHA(int ptfxHandle, float alpha)
	{
		return invoker::invoke<void, 0x1C53039135495CAE, 0xA76220>(ptfxHandle, alpha);
	}

	FORCEINLINE auto SET_PARTICLE_FX_LOOPED_SCALE(int ptfxHandle, float scale)
	{
		return invoker::invoke<void, 0x8ABEEFFE3E33A4FA, 0xA762B0>(ptfxHandle, scale);
	}

	FORCEINLINE auto SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(int ptfxHandle, float range)
	{
		return invoker::invoke<void, 0xC3E3C19E6844ABAB, 0xA7628C>(ptfxHandle, range);
	}

	FORCEINLINE auto _SET_PARTICLE_FX_LOOPED_CAMERA_BIAS(int ptfxHandle, float p1)
	{
		return invoker::invoke<void, 0x4100BF0346A8D2C3, 0xA76230>(ptfxHandle, p1);
	}

	FORCEINLINE auto SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(BOOL p0)
	{
		return invoker::invoke<void, 0x2F30818D75D66C5B, 0xA761E4>(p0);
	}

	FORCEINLINE auto SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0xEE3CD2D847C128FA, 0xA761D0>(vehicle, p1);
	}

	FORCEINLINE auto SET_PARTICLE_FX_SHOOTOUT_BOAT(Any p0)
	{
		return invoker::invoke<void, 0x8AC9895670AC9049, 0xA7632C>(p0);
	}

	FORCEINLINE auto CLEAR_PARTICLE_FX_SHOOTOUT_BOAT()
	{
		return invoker::invoke<void, 0x85771CA6A17CC68F, 0xA6EDAC>();
	}

	FORCEINLINE auto SET_PARTICLE_FX_BLOOD_SCALE(Any p0)
	{
		return invoker::invoke<void, 0xEF93301BC8E9BF71, 0xA76190>(p0);
	}

	FORCEINLINE auto DISABLE_IN_WATER_PTFX(BOOL toggle)
	{
		return invoker::invoke<void, 0xA9EDD0FB09620618, 0xA6F9CC>(toggle);
	}

	FORCEINLINE auto DISABLE_DOWNWASH_PTFX(BOOL toggle)
	{
		return invoker::invoke<void, 0x8D16FC917312C618, 0xA6F97C>(toggle);
	}

	FORCEINLINE auto SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(float scale)
	{
		return invoker::invoke<void, 0x3E9F81F9260D4C72, 0xA76338>(scale);
	}

	FORCEINLINE auto ENABLE_CLOWN_BLOOD_VFX(BOOL toggle)
	{
		return invoker::invoke<void, 0xC826EB0F21193234, 0xA7024C>(toggle);
	}

	FORCEINLINE auto ENABLE_ALIEN_BLOOD_VFX(BOOL toggle)
	{
		return invoker::invoke<void, 0xB8F49F9656A5277B, 0xA7023C>(toggle);
	}

	FORCEINLINE auto SET_PARTICLE_FX_BULLET_IMPACT_SCALE(float scale)
	{
		return invoker::invoke<void, 0x36C12D7B5744CAF, 0xA761B0>(scale);
	}

	FORCEINLINE auto SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(float p0)
	{
		return invoker::invoke<void, 0xB16EFD3957DD7FAD, 0xA761A0>(p0);
	}

	FORCEINLINE auto SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(BOOL p0)
	{
		return invoker::invoke<void, 0x2B05C87E14049BBF, 0xA761C0>(p0);
	}

	FORCEINLINE auto SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(float p0)
	{
		return invoker::invoke<void, 0xB260FC482D6B50B9, 0xA76180>(p0);
	}

	FORCEINLINE auto SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(float p0)
	{
		return invoker::invoke<void, 0xD07BB7EF3C9F43D8, 0xA761F4>(p0);
	}

	FORCEINLINE auto SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(const char* p0)
	{
		return invoker::invoke<void, 0x8E22BC7CC1BBF7E4, 0xA76204>(p0);
	}

	FORCEINLINE auto SET_SKIDMARK_RANGE_SCALE(float scale)
	{
		return invoker::invoke<void, 0x19270EAC91F9CFA8, 0xA76758>(scale);
	}

	FORCEINLINE auto SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(Any p0)
	{
		return invoker::invoke<void, 0x81A40A40A77958E, 0xA764B0>(p0);
	}

	FORCEINLINE auto REGISTER_POSTFX_BULLET_IMPACT(float weaponWorldPosX, float weaponWorldPosY, float weaponWorldPosZ, float intensity)
	{
		return invoker::invoke<void, 0xB0B142E5C2067BC4, 0xA746CC>(weaponWorldPosX, weaponWorldPosY, weaponWorldPosZ, intensity);
	}

	FORCEINLINE auto FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(BOOL p0)
	{
		return invoker::invoke<void, 0x989F8AD94D00CA21, 0xA70498>(p0);
	}

	FORCEINLINE auto USE_PARTICLE_FX_ASSET(const char* name)
	{
		return invoker::invoke<void, 0xD03F4780B97A39AE, 0xA776CC>(name);
	}

	FORCEINLINE auto SET_PARTICLE_FX_OVERRIDE(const char* oldAsset, const char* newAsset)
	{
		return invoker::invoke<void, 0xFCD81108C00214FE, 0xA7631C>(oldAsset, newAsset);
	}

	FORCEINLINE auto RESET_PARTICLE_FX_OVERRIDE(const char* name)
	{
		return invoker::invoke<void, 0x9C1E2E25111A648E, 0xA74A7C>(name);
	}

	FORCEINLINE auto _START_VEHICLE_PARTICLE_FX_LOOPED(Vehicle vehicle, const char* effectName, BOOL frontBack, BOOL leftRight, BOOL localOnly)
	{
		return invoker::invoke<int, 0xDF269BE2909E181A, 0xA76EEC>(vehicle, effectName, frontBack, leftRight, localOnly);
	}

	FORCEINLINE auto SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(BOOL p0)
	{
		return invoker::invoke<void, 0xC4551CF3C3F087F3, 0xA76B2C>(p0);
	}

	FORCEINLINE auto SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(float p0)
	{
		return invoker::invoke<void, 0x4E6B849A6CDF70A3, 0xA76B18>(p0);
	}

	FORCEINLINE auto WASH_DECALS_IN_RANGE(float x, float y, float z, float range, float p4)
	{
		return invoker::invoke<void, 0xA2EEF7A44465A04D, 0xA77760>(x, y, z, range, p4);
	}

	FORCEINLINE auto WASH_DECALS_FROM_VEHICLE(Vehicle vehicle, float p1)
	{
		return invoker::invoke<void, 0x8FD28E44F7FF2A54, 0xA77750>(vehicle, p1);
	}

	FORCEINLINE auto FADE_DECALS_IN_RANGE(float x, float y, float z, float p3, float p4)
	{
		return invoker::invoke<void, 0x726D5358D13D53BD, 0xA70360>(x, y, z, p3, p4);
	}

	FORCEINLINE auto REMOVE_DECALS_IN_RANGE(float x, float y, float z, float range)
	{
		return invoker::invoke<void, 0x5926A824AF54BCC3, 0xA74798>(x, y, z, range);
	}

	FORCEINLINE auto REMOVE_DECALS_FROM_OBJECT(Object obj)
	{
		return invoker::invoke<void, 0x73715B38A9962E7E, 0xA74770>(obj);
	}

	FORCEINLINE auto REMOVE_DECALS_FROM_OBJECT_FACING(Object obj, float x, float y, float z)
	{
		return invoker::invoke<void, 0x6434E0F1FB054F78, 0xA7477C>(obj, x, y, z);
	}

	FORCEINLINE auto REMOVE_DECALS_FROM_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xFEC8EAE457274AD3, 0xA7478C>(vehicle);
	}

	FORCEINLINE auto ADD_DECAL(int decalType, float posX, float posY, float posZ, float p4, float p5, float p6, float p7, float p8, float p9, float width, float height, float rCoef, float gCoef, float bCoef, float opacity, float timeout, BOOL p17, BOOL p18, BOOL p19)
	{
		return invoker::invoke<int, 0x153AEF89004E87C, 0xA6E0C8>(decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17, p18, p19);
	}

	FORCEINLINE auto ADD_PETROL_DECAL(float x, float y, float z, float groundLvl, float width, float transparency)
	{
		return invoker::invoke<int, 0x37E59D590865D5A, 0xA6E234>(x, y, z, groundLvl, width, transparency);
	}

	FORCEINLINE auto ADD_OIL_DECAL(float x, float y, float z, float groundLvl, float width, float transparency)
	{
		return invoker::invoke<int, 0x55A40CDFD8F6BD17, 0xA6E1A8>(x, y, z, groundLvl, width, transparency);
	}

	FORCEINLINE auto START_PETROL_TRAIL_DECALS(float p0)
	{
		return invoker::invoke<void, 0xE01851169F9A48A4, 0xA76E48>(p0);
	}

	FORCEINLINE auto ADD_PETROL_TRAIL_DECAL_INFO(float x, float y, float z, float p3)
	{
		return invoker::invoke<void, 0x83993C32C04DE125, 0xA6E260>(x, y, z, p3);
	}

	FORCEINLINE auto END_PETROL_TRAIL_DECALS()
	{
		return invoker::invoke<void, 0x28F49AC9C6000789, 0xA7030C>();
	}

	FORCEINLINE auto REMOVE_DECAL(int decal)
	{
		return invoker::invoke<void, 0x93E1EA1609ABF230, 0xA74764>(decal);
	}

	FORCEINLINE auto IS_DECAL_ALIVE(int decal)
	{
		return invoker::invoke<BOOL, 0x1A22029316A4B46C, 0xA73020>(decal);
	}

	FORCEINLINE auto GET_DECAL_WASH_LEVEL(int decal)
	{
		return invoker::invoke<float, 0xC437B7DF8EEE7C1D, 0xA70B10>(decal);
	}

	FORCEINLINE auto SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME()
	{
		return invoker::invoke<void, 0xAB03CF772B43A288, 0xA755B0>();
	}

	FORCEINLINE auto SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME()
	{
		return invoker::invoke<void, 0x6D268E74310FA45D, 0xA755B8>();
	}

	FORCEINLINE auto SET_DISABLE_DECAL_RENDERING_THIS_FRAME()
	{
		return invoker::invoke<void, 0xAF28608F1D388164, 0xA755A8>();
	}

	FORCEINLINE auto GET_IS_PETROL_DECAL_IN_RANGE(float xCoord, float yCoord, float zCoord, float radius)
	{
		return invoker::invoke<BOOL, 0x5713DE6DB59E98EB, 0xA71898>(xCoord, yCoord, zCoord, radius);
	}

	FORCEINLINE auto PATCH_DECAL_DIFFUSE_MAP(int decalType, const char* textureDict, const char* textureName)
	{
		return invoker::invoke<void, 0x1CB4702EAE3C89AB, 0xA73F08>(decalType, textureDict, textureName);
	}

	FORCEINLINE auto UNPATCH_DECAL_DIFFUSE_MAP(int decalType)
	{
		return invoker::invoke<void, 0x1B3B68D4F1783EBF, 0xA77630>(decalType);
	}

	FORCEINLINE auto MOVE_VEHICLE_DECALS(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xC1FEB5766814FAB4, 0xA73D9C>(p0, p1);
	}

	FORCEINLINE auto ADD_VEHICLE_CREW_EMBLEM(Vehicle vehicle, Ped ped, int boneIndex, float x1, float x2, float x3, float y1, float y2, float y3, float z1, float z2, float z3, float scale, Any p13, int alpha)
	{
		return invoker::invoke<BOOL, 0x6A808266C74B0678, 0xA6E310>(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha);
	}

	FORCEINLINE auto ABORT_VEHICLE_CREW_EMBLEM_REQUEST(int* p0)
	{
		return invoker::invoke<BOOL, 0x932EFF1079425E72, 0xA6E004>(p0);
	}

	FORCEINLINE auto REMOVE_VEHICLE_CREW_EMBLEM(Vehicle vehicle, int p1)
	{
		return invoker::invoke<void, 0x5429B2C176877208, 0xA74898>(vehicle, p1);
	}

	FORCEINLINE auto GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(Vehicle vehicle, int p1)
	{
		return invoker::invoke<int, 0xCF9D3F0358793BA8, 0xA72428>(vehicle, p1);
	}

	FORCEINLINE auto DOES_VEHICLE_HAVE_CREW_EMBLEM(Vehicle vehicle, int p1)
	{
		return invoker::invoke<BOOL, 0xBCE48C8677F9824, 0xA6FD10>(vehicle, p1);
	}

	FORCEINLINE auto DISABLE_COMPOSITE_SHOTGUN_DECALS(BOOL toggle)
	{
		return invoker::invoke<void, 0x30046CB0BDCE65EF, 0xA6F96C>(toggle);
	}

	FORCEINLINE auto DISABLE_SCUFF_DECALS(BOOL toggle)
	{
		return invoker::invoke<void, 0xBC31667BB0F6F0E5, 0xA6FA68>(toggle);
	}

	FORCEINLINE auto SET_DECAL_BULLET_IMPACT_RANGE_SCALE(float p0)
	{
		return invoker::invoke<void, 0xEB49514A4F04D59F, 0xA75578>(p0);
	}

	FORCEINLINE auto OVERRIDE_INTERIOR_SMOKE_NAME(const char* name)
	{
		return invoker::invoke<void, 0x81A1F979AAA91E2B, 0xA73E1C>(name);
	}

	FORCEINLINE auto OVERRIDE_INTERIOR_SMOKE_LEVEL(float level)
	{
		return invoker::invoke<void, 0xB9574E68CF98080B, 0xA73E08>(level);
	}

	FORCEINLINE auto OVERRIDE_INTERIOR_SMOKE_END()
	{
		return invoker::invoke<void, 0xA5EC3D4652F6CB02, 0xA73DFC>();
	}

	FORCEINLINE auto REGISTER_NOIR_LENS_EFFECT()
	{
		return invoker::invoke<void, 0x3BE1F84A537B34E0, 0xA74690>();
	}

	FORCEINLINE auto DISABLE_VEHICLE_DISTANTLIGHTS(BOOL toggle)
	{
		return invoker::invoke<void, 0x8A427A89051C6578, 0xA6FA78>(toggle);
	}

	FORCEINLINE auto RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(BOOL p0)
	{
		return invoker::invoke<void, 0x4DA9E018E2F3A01C, 0xA748EC>(p0);
	}

	FORCEINLINE auto REQUEST_EARLY_LIGHT_CHECK()
	{
		return invoker::invoke<void, 0x9E75427EC4E37CA5, 0xA74990>();
	}

	FORCEINLINE auto USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(BOOL toggle)
	{
		return invoker::invoke<void, 0x1258AD6DBC2FBAE1, 0xA77718>(toggle);
	}

	FORCEINLINE auto _FORCE_ALLOW_SNOW_FOOT_VFX_ON_ICE(BOOL toggle)
	{
		return invoker::invoke<void, 0xA342A3763B3AFB6C, 0xA703DC>(toggle);
	}

	FORCEINLINE auto USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(BOOL toggle)
	{
		return invoker::invoke<void, 0xD7DE01DAA350496A, 0xA77728>(toggle);
	}

	FORCEINLINE auto DISABLE_REGION_VFX(Any p0)
	{
		return invoker::invoke<void, 0x45059C350D918C38, 0xA6FA38>(p0);
	}

	FORCEINLINE auto _FORCE_GROUND_SNOW_PASS(BOOL toggle)
	{
		return invoker::invoke<void, 0x6E9EF3A33C8899F8, 0xA70454>(toggle);
	}

	FORCEINLINE auto PRESET_INTERIOR_AMBIENT_CACHE(const char* timecycleModifierName)
	{
		return invoker::invoke<void, 0x8CBAC8B951402F69, 0xA7451C>(timecycleModifierName);
	}

	FORCEINLINE auto SET_TIMECYCLE_MODIFIER(const char* modifierName)
	{
		return invoker::invoke<void, 0x5C483F4653DC993C, 0xA76830>(modifierName);
	}

	FORCEINLINE auto SET_TIMECYCLE_MODIFIER_STRENGTH(float strength)
	{
		return invoker::invoke<void, 0x886C31F5E888F079, 0xA7683C>(strength);
	}

	FORCEINLINE auto SET_TRANSITION_TIMECYCLE_MODIFIER(const char* modifierName, float transition)
	{
		return invoker::invoke<void, 0xDA3EE68EF78AA786, 0xA76878>(modifierName, transition);
	}

	FORCEINLINE auto SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(float strength)
	{
		return invoker::invoke<void, 0x20C160A285F3529C, 0xA76864>(strength);
	}

	FORCEINLINE auto CLEAR_TIMECYCLE_MODIFIER()
	{
		return invoker::invoke<void, 0x80F87A4A3B930613, 0xA6EDBC>();
	}

	FORCEINLINE auto GET_TIMECYCLE_MODIFIER_INDEX()
	{
		return invoker::invoke<int, 0x8960847E5FD7B48F, 0xA722AC>();
	}

	FORCEINLINE auto GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX()
	{
		return invoker::invoke<int, 0x765B41E82372AA97, 0xA722B8>();
	}

	FORCEINLINE auto GET_IS_TIMECYCLE_TRANSITIONING_OUT()
	{
		return invoker::invoke<BOOL, 0x382F60C368A6D416, 0xA718E4>();
	}

	FORCEINLINE auto PUSH_TIMECYCLE_MODIFIER()
	{
		return invoker::invoke<void, 0x74C42E6AE0F9355E, 0xA745C8>();
	}

	FORCEINLINE auto POP_TIMECYCLE_MODIFIER()
	{
		return invoker::invoke<void, 0x7232CF6DD26DC563, 0xA74404>();
	}

	FORCEINLINE auto SET_CURRENT_PLAYER_TCMODIFIER(const char* modifierName)
	{
		return invoker::invoke<void, 0xFE602AB8B7E9AF7D, 0xA753F0>(modifierName);
	}

	FORCEINLINE auto SET_PLAYER_TCMODIFIER_TRANSITION(float value)
	{
		return invoker::invoke<void, 0x58DF2EDF7CB54B60, 0xA76458>(value);
	}

	FORCEINLINE auto SET_NEXT_PLAYER_TCMODIFIER(const char* modifierName)
	{
		return invoker::invoke<void, 0xAFB25B9F2232474E, 0xA760F0>(modifierName);
	}

	FORCEINLINE auto ADD_TCMODIFIER_OVERRIDE(const char* modifierName1, const char* modifierName2)
	{
		return invoker::invoke<void, 0x20F21369990AB23F, 0xA6E2DC>(modifierName1, modifierName2);
	}

	FORCEINLINE auto CLEAR_ALL_TCMODIFIER_OVERRIDES(const char* p0)
	{
		return invoker::invoke<void, 0x96EB2A3044CE3688, 0xA6ECE8>(p0);
	}

	FORCEINLINE auto SET_EXTRA_TCMODIFIER(const char* modifierName)
	{
		return invoker::invoke<void, 0x23DAA15014BC100F, 0xA75B20>(modifierName);
	}

	FORCEINLINE auto CLEAR_EXTRA_TCMODIFIER()
	{
		return invoker::invoke<void, 0x15BEA5263EB7BF2A, 0xA6EDA4>();
	}

	FORCEINLINE auto GET_EXTRA_TCMODIFIER()
	{
		return invoker::invoke<int, 0xA81182F96782A8EE, 0xA71408>();
	}

	FORCEINLINE auto ENABLE_MOON_CYCLE_OVERRIDE(float strength)
	{
		return invoker::invoke<void, 0xF1759D35AF2F023B, 0xA7027C>(strength);
	}

	FORCEINLINE auto DISABLE_MOON_CYCLE_OVERRIDE()
	{
		return invoker::invoke<void, 0x36AC7953BF22FE97, 0xA6F9DC>();
	}

	FORCEINLINE auto REQUEST_SCALEFORM_MOVIE(const char* scaleformName)
	{
		return invoker::invoke<int, 0x8DE4F68A9728925E, 0xA74998>(scaleformName);
	}

	FORCEINLINE auto REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(const char* scaleformName)
	{
		return invoker::invoke<int, 0xEDB29E4B0AB3D876, 0xA749E8>(scaleformName);
	}

	FORCEINLINE auto REQUEST_SCALEFORM_MOVIE_INSTANCE(const char* scaleformName)
	{
		return invoker::invoke<int, 0x5AF05959A6F22BB4, 0xA74998>(scaleformName);
	}

	FORCEINLINE auto REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(const char* scaleformName)
	{
		return invoker::invoke<int, 0xED28B9E18E376D5D, 0xA749C0>(scaleformName);
	}

	FORCEINLINE auto HAS_SCALEFORM_MOVIE_LOADED(int scaleformHandle)
	{
		return invoker::invoke<BOOL, 0xA0C7B98BCF1EEF9E, 0xA729FC>(scaleformHandle);
	}

	FORCEINLINE auto IS_ACTIVE_SCALEFORM_MOVIE_DELETING(int val)
	{
		return invoker::invoke<BOOL, 0xA19744810BB29B74, 0xA72BE0>(val);
	}

	FORCEINLINE auto IS_SCALEFORM_MOVIE_DELETING(int val)
	{
		return invoker::invoke<BOOL, 0xF44F8CDAE3ED0ACB, 0xA73A14>(val);
	}

	FORCEINLINE auto HAS_SCALEFORM_MOVIE_FILENAME_LOADED(const char* scaleformName)
	{
		return invoker::invoke<BOOL, 0xE47743FF8F06F8C0, 0xA729D8>(scaleformName);
	}

	FORCEINLINE auto HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(int scaleformHandle)
	{
		return invoker::invoke<BOOL, 0xD1417F25E6970920, 0xA729B4>(scaleformHandle);
	}

	FORCEINLINE auto SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(int* scaleformHandle)
	{
		return invoker::invoke<void, 0xD314260005F064BF, 0xA76608>(scaleformHandle);
	}

	FORCEINLINE auto SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(int scaleform, BOOL toggle)
	{
		return invoker::invoke<void, 0x2EE4366DBD59BB7A, 0xA7663C>(scaleform, toggle);
	}

	FORCEINLINE auto SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(int scaleformHandle, BOOL toggle)
	{
		return invoker::invoke<void, 0x32323864D97FCFF0, 0xA76614>(scaleformHandle, toggle);
	}

	FORCEINLINE auto SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(int scaleformHandle, BOOL toggle)
	{
		return invoker::invoke<void, 0x6CDCD138191E7A06, 0xA76628>(scaleformHandle, toggle);
	}

	FORCEINLINE auto DRAW_SCALEFORM_MOVIE(int scaleformHandle, float x, float y, float width, float height, int red, int green, int blue, int alpha, int p9)
	{
		return invoker::invoke<void, 0x6D16B99FEB0AFFF1, 0xA6FF98>(scaleformHandle, x, y, width, height, red, green, blue, alpha, p9);
	}

	FORCEINLINE auto DRAW_SCALEFORM_MOVIE_FULLSCREEN(int scaleform, int red, int green, int blue, int alpha, int p5)
	{
		return invoker::invoke<void, 0xA91A4C18A2DB01BD, 0xA70058>(scaleform, red, green, blue, alpha, p5);
	}

	FORCEINLINE auto DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(int scaleform1, int scaleform2, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0xDBCD9A6B9D073786, 0xA7008C>(scaleform1, scaleform2, red, green, blue, alpha);
	}

	FORCEINLINE auto DRAW_SCALEFORM_MOVIE_3D(int scaleform, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float p7, float p8, float p9, float scaleX, float scaleY, float scaleZ, int rotationOrder)
	{
		return invoker::invoke<void, 0x3D1B3BF5963D08DE, 0xA6FFF8>(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder);
	}

	FORCEINLINE auto DRAW_SCALEFORM_MOVIE_3D_SOLID(int scaleform, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float p7, float p8, float p9, float scaleX, float scaleY, float scaleZ, int rotationOrder)
	{
		return invoker::invoke<void, 0xCC3DB9CC9CA34EE8, 0xA70028>(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, rotationOrder);
	}

	FORCEINLINE auto CALL_SCALEFORM_MOVIE_METHOD(int scaleform, const char* method)
	{
		return invoker::invoke<void, 0xB750FE3C9F094356, 0xA6E9C8>(scaleform, method);
	}

	FORCEINLINE auto CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(int scaleform, const char* methodName, float param1, float param2, float param3, float param4, float param5)
	{
		return invoker::invoke<void, 0xDBCE37B37A697642, 0xA6E9D8>(scaleform, methodName, param1, param2, param3, param4, param5);
	}

	FORCEINLINE auto CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(int scaleform, const char* methodName, const char* param1, const char* param2, const char* param3, const char* param4, const char* param5)
	{
		return invoker::invoke<void, 0x4A536D06AFED1D5B, 0xA6EA2C>(scaleform, methodName, param1, param2, param3, param4, param5);
	}

	FORCEINLINE auto CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(int scaleform, const char* methodName, float floatParam1, float floatParam2, float floatParam3, float floatParam4, float floatParam5, const char* stringParam1, const char* stringParam2, const char* stringParam3, const char* stringParam4, const char* stringParam5)
	{
		return invoker::invoke<void, 0x5EA38B125B8B37E5, 0xA6EA1C>(scaleform, methodName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5);
	}

	FORCEINLINE auto BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(int hudComponent, const char* methodName)
	{
		return invoker::invoke<BOOL, 0x192A6D8B6BBD4F41, 0xA6E8A4>(hudComponent, methodName);
	}

	FORCEINLINE auto BEGIN_SCALEFORM_MOVIE_METHOD(int scaleform, const char* methodName)
	{
		return invoker::invoke<BOOL, 0x88F483FBD433696A, 0xA6E834>(scaleform, methodName);
	}

	FORCEINLINE auto BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(const char* methodName)
	{
		return invoker::invoke<BOOL, 0xF3F7B05FC4684A7C, 0xA6E85C>(methodName);
	}

	FORCEINLINE auto BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(const char* methodName)
	{
		return invoker::invoke<BOOL, 0x23F66A35FFBE3FFA, 0xA6E880>(methodName);
	}

	FORCEINLINE auto END_SCALEFORM_MOVIE_METHOD()
	{
		return invoker::invoke<void, 0xE6B753D52F4CA222, 0xA70318>();
	}

	FORCEINLINE auto END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE()
	{
		return invoker::invoke<int, 0x6CA3F2B87712B6A4, 0xA70320>();
	}

	FORCEINLINE auto IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(int methodReturn)
	{
		return invoker::invoke<BOOL, 0xA6F779AA284EB20E, 0xA73A38>(methodReturn);
	}

	FORCEINLINE auto GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(int methodReturn)
	{
		return invoker::invoke<int, 0x5DEF122A58D4F685, 0xA71DEC>(methodReturn);
	}

	FORCEINLINE auto GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(int methodReturn)
	{
		return invoker::invoke<BOOL, 0x59252C070F1B0428, 0xA71DC8>(methodReturn);
	}

	FORCEINLINE auto GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(int methodReturn)
	{
		return invoker::invoke<const char*, 0xB78DC0F63757FBD4, 0xA71E0C>(methodReturn);
	}

	FORCEINLINE auto SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(int value)
	{
		return invoker::invoke<void, 0x330108B080A2132F, 0xA74B60>(value);
	}

	FORCEINLINE auto SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(float value)
	{
		return invoker::invoke<void, 0x74BF156C860580D4, 0xA74B50>(value);
	}

	FORCEINLINE auto SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(BOOL value)
	{
		return invoker::invoke<void, 0x557F1E2300EF1A3E, 0xA74B40>(value);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_SCALEFORM_STRING(const char* componentType)
	{
		return invoker::invoke<void, 0x882AEFD55B8D51FB, 0xA6E904>(componentType);
	}

	FORCEINLINE auto END_TEXT_COMMAND_SCALEFORM_STRING()
	{
		return invoker::invoke<void, 0xCFAD3D478C87321A, 0xA7033C>();
	}

	FORCEINLINE auto END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING()
	{
		return invoker::invoke<void, 0xF84BAB6A609E97D4, 0xA70344>();
	}

	FORCEINLINE auto SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(const char* string)
	{
		return invoker::invoke<void, 0xA9A70CB35AC098D9, 0xA74B78>(string);
	}

	FORCEINLINE auto SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(const char* string)
	{
		return invoker::invoke<void, 0x3585BEBEDC67FCC7, 0xA74B78>(string);
	}

	FORCEINLINE auto SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(const char* string)
	{
		return invoker::invoke<void, 0xCE3E870AC37B4253, 0xA74B78>(string);
	}

	FORCEINLINE auto DOES_LATEST_BRIEF_STRING_EXIST(int p0)
	{
		return invoker::invoke<BOOL, 0x9004B02246EEC817, 0xA6FC6C>(p0);
	}

	FORCEINLINE auto SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(int value)
	{
		return invoker::invoke<void, 0x2EF4D786C0BC9419, 0xA74B6C>(value);
	}

	FORCEINLINE auto REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(int hudComponent)
	{
		return invoker::invoke<void, 0x98930EDD857375BF, 0xA74A10>(hudComponent);
	}

	FORCEINLINE auto HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(int hudComponent)
	{
		return invoker::invoke<BOOL, 0x9E7C5A44096EB799, 0xA72A20>(hudComponent);
	}

	FORCEINLINE auto REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(int hudComponent)
	{
		return invoker::invoke<void, 0xE38DA3B12A4DAB3B, 0xA74850>(hudComponent);
	}

	FORCEINLINE auto PASS_KEYBOARD_INPUT_TO_SCALEFORM(int scaleformHandle)
	{
		return invoker::invoke<BOOL, 0x26879F0D0AF82C3, 0xA73EE4>(scaleformHandle);
	}

	FORCEINLINE auto SET_TV_CHANNEL(int channel)
	{
		return invoker::invoke<void, 0xECDF98280946398E, 0xA7689C>(channel);
	}

	FORCEINLINE auto GET_TV_CHANNEL()
	{
		return invoker::invoke<int, 0x6609A7E82612E0DF, 0xA722EC>();
	}

	FORCEINLINE auto SET_TV_VOLUME(float volume)
	{
		return invoker::invoke<void, 0xBAF43CF1A42D5B1A, 0xA768F4>(volume);
	}

	FORCEINLINE auto GET_TV_VOLUME()
	{
		return invoker::invoke<float, 0x666CD06EF4DA7E5F, 0xA722F8>();
	}

	FORCEINLINE auto DRAW_TV_CHANNEL(float xPos, float yPos, float xScale, float yScale, float rotation, int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0x1A926FCDE89B4E6E, 0xA701E4>(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
	}

	FORCEINLINE auto SET_TV_CHANNEL_PLAYLIST(int tvChannel, const char* playlistName, BOOL restart)
	{
		return invoker::invoke<void, 0x7C7F282055FB517C, 0xA768A8>(tvChannel, playlistName, restart);
	}

	FORCEINLINE auto SET_TV_CHANNEL_PLAYLIST_AT_HOUR(int tvChannel, const char* playlistName, int hour)
	{
		return invoker::invoke<void, 0x836D2C7CBC0248D9, 0xA768C0>(tvChannel, playlistName, hour);
	}

	FORCEINLINE auto _SET_TV_CHANNEL_PLAYLIST_DIRTY(int tvChannel, BOOL p1)
	{
		return invoker::invoke<void, 0xEE831F15A8D0D94A, 0xA768D4>(tvChannel, p1);
	}

	FORCEINLINE auto CLEAR_TV_CHANNEL_PLAYLIST(int tvChannel)
	{
		return invoker::invoke<void, 0xF03C7B57F88A5BD3, 0xA6EDF0>(tvChannel);
	}

	FORCEINLINE auto IS_PLAYLIST_ON_CHANNEL(int tvChannel, Any p1)
	{
		return invoker::invoke<BOOL, 0xF03BF645614F3175, 0xA73974>(tvChannel, p1);
	}

	FORCEINLINE auto IS_TVSHOW_CURRENTLY_PLAYING(Hash videoCliphash)
	{
		return invoker::invoke<BOOL, 0x2200033BCF24787D, 0xA73C20>(videoCliphash);
	}

	FORCEINLINE auto ENABLE_MOVIE_KEYFRAME_WAIT(BOOL toggle)
	{
		return invoker::invoke<void, 0x24D021DE46A198D2, 0xA7028C>(toggle);
	}

	FORCEINLINE auto SET_TV_PLAYER_WATCHING_THIS_FRAME(Any p0)
	{
		return invoker::invoke<void, 0xAFD4869CC7EDDF08, 0xA768E8>(p0);
	}

	FORCEINLINE auto GET_CURRENT_TV_CLIP_NAMEHASH()
	{
		return invoker::invoke<Hash, 0xE51354CCCD89945F, 0xA709D4>();
	}

	FORCEINLINE auto ENABLE_MOVIE_SUBTITLES(BOOL toggle)
	{
		return invoker::invoke<void, 0x85B701372CB0390F, 0xA7029C>(toggle);
	}

	FORCEINLINE auto UI3DSCENE_IS_AVAILABLE()
	{
		return invoker::invoke<BOOL, 0xAFF91C9040AC6A43, 0xA77548>();
	}

	FORCEINLINE auto UI3DSCENE_PUSH_PRESET(const char* presetName)
	{
		return invoker::invoke<BOOL, 0xCB55C62F869F934A, 0xA7757C>(presetName);
	}

	FORCEINLINE auto UI3DSCENE_ASSIGN_PED_TO_SLOT(const char* presetName, Ped ped, int slot, float posX, float posY, float posZ)
	{
		return invoker::invoke<BOOL, 0xBB0128A9D53B1935, 0xA77508>(presetName, ped, slot, posX, posY, posZ);
	}

	FORCEINLINE auto UI3DSCENE_CLEAR_PATCHED_DATA()
	{
		return invoker::invoke<void, 0xA33BDA0B7720976B, 0xA77538>();
	}

	FORCEINLINE auto UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(BOOL toggle)
	{
		return invoker::invoke<void, 0xEB1896D38B4F1DB4, 0xA77564>(toggle);
	}

	FORCEINLINE auto TERRAINGRID_ACTIVATE(BOOL toggle)
	{
		return invoker::invoke<void, 0x3DA00A8D58908B2C, 0xA77244>(toggle);
	}

	FORCEINLINE auto TERRAINGRID_SET_PARAMS(float x, float y, float z, float forwardX, float forwardY, float forwardZ, float sizeX, float sizeY, float sizeZ, float gridScale, float glowIntensity, float normalHeight, float heightDiff)
	{
		return invoker::invoke<void, 0xDF3F4CBE546A000D, 0xA7726C>(x, y, z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff);
	}

	FORCEINLINE auto TERRAINGRID_SET_COLOURS(int lowR, int lowG, int lowB, int lowAlpha, int r, int g, int b, int alpha, int highR, int highG, int highB, int highAlpha)
	{
		return invoker::invoke<void, 0x8FE53A17E3B48F44, 0xA7725C>(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha);
	}

	FORCEINLINE auto ANIMPOSTFX_PLAY(const char* effectName, int duration, BOOL looped)
	{
		return invoker::invoke<void, 0xDCAFFD08A08087EB, 0xA6E3F4>(effectName, duration, looped);
	}

	FORCEINLINE auto ANIMPOSTFX_STOP(const char* effectName)
	{
		return invoker::invoke<void, 0x21172E4DF035B893, 0xA6E40C>(effectName);
	}

	FORCEINLINE auto ANIMPOSTFX_GET_CURRENT_TIME(const char* effectName)
	{
		return invoker::invoke<float, 0xF854E7F9C196DEFE, 0xA6E3AC>(effectName);
	}

	FORCEINLINE auto ANIMPOSTFX_IS_RUNNING(const char* effectName)
	{
		return invoker::invoke<BOOL, 0x47CB3D397940E783, 0xA6E3D0>(effectName);
	}

	FORCEINLINE auto ANIMPOSTFX_STOP_ALL()
	{
		return invoker::invoke<void, 0x7919995BD2B8745C, 0xA6E418>();
	}

	FORCEINLINE auto ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(const char* effectName)
	{
		return invoker::invoke<void, 0x8A9BBDEAE0867331, 0xA6E42C>(effectName);
	}

}
namespace PLAYER
{
	FORCEINLINE auto GET_PLAYER_PED(Player player)
	{
		return invoker::invoke<Ped, 0x56E414973C2A8C0E, 0xCCF9A0>(player);
	}

	FORCEINLINE auto GET_PLAYER_PED_SCRIPT_INDEX(Player player)
	{
		return invoker::invoke<Ped, 0xE8466DBC1A7E794F, 0xCCF9E0>(player);
	}

	FORCEINLINE auto SET_PLAYER_MODEL(Player player, Hash model)
	{
		return invoker::invoke<void, 0x52E0301351FCDEC5, 0xCD9F04>(player, model);
	}

	FORCEINLINE auto CHANGE_PLAYER_PED(Player player, Ped ped, BOOL p2, BOOL resetDamage)
	{
		return invoker::invoke<void, 0x43892D65E9AE6F1B, 0xCCD0DC>(player, ped, p2, resetDamage);
	}

	FORCEINLINE auto GET_PLAYER_RGB_COLOUR(Player player, int* r, int* g, int* b)
	{
		return invoker::invoke<void, 0x8137826EBA634D9F, 0xCCFA60>(player, r, g, b);
	}

	FORCEINLINE auto GET_NUMBER_OF_PLAYERS()
	{
		return invoker::invoke<int, 0x7D1D107CFA0B3F0F, 0xCCEC9C>();
	}

	FORCEINLINE auto GET_PLAYER_TEAM(Player player)
	{
		return invoker::invoke<int, 0x1864096A95E36EBA, 0xCCFAE8>(player);
	}

	FORCEINLINE auto SET_PLAYER_TEAM(Player player, int team)
	{
		return invoker::invoke<void, 0x1B0F8D3B4EE07EE0, 0xCDA110>(player, team);
	}

	FORCEINLINE auto GET_NUMBER_OF_PLAYERS_IN_TEAM(int team)
	{
		return invoker::invoke<int, 0x18476AA515A4460B, 0xCCECC0>(team);
	}

	FORCEINLINE auto GET_PLAYER_NAME(Player player)
	{
		return invoker::invoke<const char*, 0xBD6CA019F46AB947, 0xCCF920>(player);
	}

	FORCEINLINE auto GET_WANTED_LEVEL_RADIUS(Player player)
	{
		return invoker::invoke<float, 0xF4141D223F2B1C76, 0xCD0220>(player);
	}

	FORCEINLINE auto GET_PLAYER_WANTED_CENTRE_POSITION(Player player)
	{
		return invoker::invoke<Vector3, 0x8924DF54D314FD78, 0xCCFB2C>(player);
	}

	FORCEINLINE auto SET_PLAYER_WANTED_CENTRE_POSITION(Player player, Vector3* position, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0xEFE2B06D5134CD46, 0xCDA170>(player, position, p2, p3);
	}

	FORCEINLINE auto GET_WANTED_LEVEL_THRESHOLD(int wantedLevel)
	{
		return invoker::invoke<int, 0x30C1D2072FB75567, 0xCD0244>(wantedLevel);
	}

	FORCEINLINE auto SET_PLAYER_WANTED_LEVEL(Player player, int wantedLevel, BOOL disableNoMission)
	{
		return invoker::invoke<void, 0xE20A252886E4FE1D, 0xCDA180>(player, wantedLevel, disableNoMission);
	}

	FORCEINLINE auto SET_PLAYER_WANTED_LEVEL_NO_DROP(Player player, int wantedLevel, BOOL p2)
	{
		return invoker::invoke<void, 0xF165EAD0AA08F3B6, 0xCDA1AC>(player, wantedLevel, p2);
	}

	FORCEINLINE auto SET_PLAYER_WANTED_LEVEL_NOW(Player player, BOOL p1)
	{
		return invoker::invoke<void, 0x42C9A22D6724F283, 0xCDA198>(player, p1);
	}

	FORCEINLINE auto ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(Player player)
	{
		return invoker::invoke<BOOL, 0xA2E55F2C91545EAD, 0xCCCBD8>(player);
	}

	FORCEINLINE auto ARE_PLAYER_STARS_GREYED_OUT(Player player)
	{
		return invoker::invoke<BOOL, 0x72C7CC058228E633, 0xCCCBFC>(player);
	}

	FORCEINLINE auto IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(Player player)
	{
		return invoker::invoke<BOOL, 0x9780872414DA43F8, 0xCD2420>(player);
	}

	FORCEINLINE auto SET_DISPATCH_COPS_FOR_PLAYER(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xE383E18054CA323B, 0xCD8070>(player, toggle);
	}

	FORCEINLINE auto IS_PLAYER_WANTED_LEVEL_GREATER(Player player, int wantedLevel)
	{
		return invoker::invoke<BOOL, 0x3EE1A6D743332852, 0xCD1F50>(player, wantedLevel);
	}

	FORCEINLINE auto CLEAR_PLAYER_WANTED_LEVEL(Player player)
	{
		return invoker::invoke<void, 0x3C482AC51A8E85DC, 0xCCD390>(player);
	}

	FORCEINLINE auto IS_PLAYER_DEAD(Player player)
	{
		return invoker::invoke<BOOL, 0xD5FF242D0AFC5855, 0xCD1CDC>(player);
	}

	FORCEINLINE auto IS_PLAYER_PRESSING_HORN(Player player)
	{
		return invoker::invoke<BOOL, 0x692665178199313C, 0xCD1E34>(player);
	}

	FORCEINLINE auto SET_PLAYER_CONTROL(Player player, BOOL bHasControl, int flags)
	{
		return invoker::invoke<void, 0x4686BC3BFDBB5348, 0xCD9D78>(player, bHasControl, flags);
	}

	FORCEINLINE auto GET_PLAYER_WANTED_LEVEL(Player player)
	{
		return invoker::invoke<int, 0xE7B45027762DEFE7, 0xCCFB74>(player);
	}

	FORCEINLINE auto SET_MAX_WANTED_LEVEL(int maxWantedLevel)
	{
		return invoker::invoke<void, 0xDAE61414743C8D1D, 0xCD857C>(maxWantedLevel);
	}

	FORCEINLINE auto SET_POLICE_RADAR_BLIPS(BOOL toggle)
	{
		return invoker::invoke<void, 0x7AD72DFA04253E47, 0xCDA218>(toggle);
	}

	FORCEINLINE auto SET_POLICE_IGNORE_PLAYER(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xDAA51A56DBEC0391, 0xCDA204>(player, toggle);
	}

	FORCEINLINE auto IS_PLAYER_PLAYING(Player player)
	{
		return invoker::invoke<BOOL, 0x75EAB09F5E974116, 0xCD1E10>(player);
	}

	FORCEINLINE auto SET_EVERYONE_IGNORE_PLAYER(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x3AFFD31224BF9207, 0xCD81C8>(player, toggle);
	}

	FORCEINLINE auto SET_ALL_RANDOM_PEDS_FLEE(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xAC50C24F47D00104, 0xCD7D38>(player, toggle);
	}

	FORCEINLINE auto SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0x9C931A1395CC1AE9, 0xCD7D4C>(player);
	}

	FORCEINLINE auto SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x8D76C231AB0E62A1, 0xCD7D18>(player, toggle);
	}

	FORCEINLINE auto SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0xCD0F6D8C76DD22A7, 0xCD7D2C>(player);
	}

	FORCEINLINE auto SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0x73CB9EAA55D097EB, 0xCD849C>(player);
	}

	FORCEINLINE auto SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x50402A290336E9AF, 0xCD8358>(player, toggle);
	}

	FORCEINLINE auto SET_WANTED_LEVEL_MULTIPLIER(float multiplier)
	{
		return invoker::invoke<void, 0x425BBE19F25A57AB, 0xCDA60C>(multiplier);
	}

	FORCEINLINE auto SET_WANTED_LEVEL_DIFFICULTY(Player player, float difficulty)
	{
		return invoker::invoke<void, 0x446468040E515438, 0xCDA5E8>(player, difficulty);
	}

	FORCEINLINE auto RESET_WANTED_LEVEL_DIFFICULTY(Player player)
	{
		return invoker::invoke<void, 0xF58D3BBA4A469D70, 0xCD7A30>(player);
	}

	FORCEINLINE auto GET_WANTED_LEVEL_TIME_TO_ESCAPE()
	{
		return invoker::invoke<int, 0xBF02D50FC8112D5B, 0xCD0264>();
	}

	FORCEINLINE auto SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(Player player, int wantedLevel, int lossTime)
	{
		return invoker::invoke<void, 0x64A38E41CEF44EEB, 0xCDA5F8>(player, wantedLevel, lossTime);
	}

	FORCEINLINE auto RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(Player player)
	{
		return invoker::invoke<void, 0x252B3E511E67DD84, 0xCD7A3C>(player);
	}

	FORCEINLINE auto START_FIRING_AMNESTY(int duration)
	{
		return invoker::invoke<void, 0x97915D82C999021F, 0xCDA9C0>(duration);
	}

	FORCEINLINE auto REPORT_CRIME(Player player, int crimeType, int wantedLvlThresh)
	{
		return invoker::invoke<void, 0x80A39DDADDA2585C, 0xCD77C0>(player, crimeType, wantedLvlThresh);
	}

	FORCEINLINE auto SUPPRESS_CRIME_THIS_FRAME(Player player, int crimeType)
	{
		return invoker::invoke<void, 0xFE89392FAC7394F2, 0xCDAA88>(player, crimeType);
	}

	FORCEINLINE auto UPDATE_WANTED_POSITION_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0x489BA9F867E58A85, 0xCDB9AC>(player);
	}

	FORCEINLINE auto SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0x75690DF4B79CDDCC, 0xCDAA98>(player);
	}

	FORCEINLINE auto ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(Player player, Any p1)
	{
		return invoker::invoke<void, 0x779023E7E53EB834, 0xCCC97C>(player, p1);
	}

	FORCEINLINE auto FORCE_START_HIDDEN_EVASION(Player player)
	{
		return invoker::invoke<void, 0x6B6014A58DEBCCF3, 0xCCE0F0>(player);
	}

	FORCEINLINE auto SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0x4BD41CDB13AC8486, 0xCDAAD4>(player);
	}

	FORCEINLINE auto REPORT_POLICE_SPOTTED_PLAYER(Player player)
	{
		return invoker::invoke<void, 0x873D736C20070A10, 0xCD77D4>(player);
	}

	FORCEINLINE auto SET_LAW_RESPONSE_DELAY_OVERRIDE(float p0)
	{
		return invoker::invoke<void, 0x89BC3C904E08199E, 0xCD84A8>(p0);
	}

	FORCEINLINE auto RESET_LAW_RESPONSE_DELAY_OVERRIDE()
	{
		return invoker::invoke<void, 0x2FE39C7786330945, 0xCD7988>();
	}

	FORCEINLINE auto CAN_PLAYER_START_MISSION(Player player)
	{
		return invoker::invoke<BOOL, 0xF7C1BF3F9EB7C65E, 0xCCCEDC>(player);
	}

	FORCEINLINE auto IS_PLAYER_READY_FOR_CUTSCENE(Player player)
	{
		return invoker::invoke<BOOL, 0xFB1E434B5C3D0CEE, 0xCD1E58>(player);
	}

	FORCEINLINE auto IS_PLAYER_TARGETTING_ENTITY(Player player, Entity entity)
	{
		return invoker::invoke<BOOL, 0x41754DC6001F6313, 0xCD1EE8>(player, entity);
	}

	FORCEINLINE auto GET_PLAYER_TARGET_ENTITY(Player player, Entity* entity)
	{
		return invoker::invoke<BOOL, 0x5266B2AB5BDC4B54, 0xCCFAC0>(player, entity);
	}

	FORCEINLINE auto IS_PLAYER_FREE_AIMING(Player player)
	{
		return invoker::invoke<BOOL, 0x1C751EF63BF4D501, 0xCD1D30>(player);
	}

	FORCEINLINE auto IS_PLAYER_FREE_AIMING_AT_ENTITY(Player player, Entity entity)
	{
		return invoker::invoke<BOOL, 0xE5D813FA6F741B01, 0xCD1D54>(player, entity);
	}

	FORCEINLINE auto GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(Player player, Entity* entity)
	{
		return invoker::invoke<BOOL, 0x66EE98F15844BE4D, 0xCCE6F8>(player, entity);
	}

	FORCEINLINE auto SET_PLAYER_LOCKON_RANGE_OVERRIDE(Player player, float range)
	{
		return invoker::invoke<void, 0xE7B6A36E4BDF7C4C, 0xCD9E90>(player, range);
	}

	FORCEINLINE auto SET_PLAYER_CAN_DO_DRIVE_BY(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x19AD76EC04A73800, 0xCD9CDC>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x9856853A6FCF4F85, 0xCD9C9C>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_CAN_USE_COVER(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x3EBA706E071AA76A, 0xCD9D04>(player, toggle);
	}

	FORCEINLINE auto GET_MAX_WANTED_LEVEL()
	{
		return invoker::invoke<int, 0xD6436470CD2C1484, 0xCCE9E0>();
	}

	FORCEINLINE auto IS_PLAYER_TARGETTING_ANYTHING(Player player)
	{
		return invoker::invoke<BOOL, 0x4F035D45FC2856F8, 0xCD1EC4>(player);
	}

	FORCEINLINE auto SET_PLAYER_SPRINT(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xE0E682049E26249, 0xCDA0D0>(player, toggle);
	}

	FORCEINLINE auto RESET_PLAYER_STAMINA(Player player)
	{
		return invoker::invoke<void, 0x336E2A96F643C9D5, 0xCD7A1C>(player);
	}

	FORCEINLINE auto RESTORE_PLAYER_STAMINA(Player player, float p1)
	{
		return invoker::invoke<void, 0x92EBF838856DCF63, 0xCD7A50>(player, p1);
	}

	FORCEINLINE auto GET_PLAYER_SPRINT_STAMINA_REMAINING(Player player)
	{
		return invoker::invoke<float, 0x3689A4961280354, 0xCCFA78>(player);
	}

	FORCEINLINE auto GET_PLAYER_SPRINT_TIME_REMAINING(Player player)
	{
		return invoker::invoke<float, 0xE43577CB2EC4FFD6, 0xCCFA9C>(player);
	}

	FORCEINLINE auto GET_PLAYER_UNDERWATER_TIME_REMAINING(Player player)
	{
		return invoker::invoke<float, 0x941BFBB789EE4863, 0xCCFB08>(player);
	}

	FORCEINLINE auto SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(Player player, float time)
	{
		return invoker::invoke<float, 0x932BEE6E64F0144E, 0xCDA120>(player, time);
	}

	FORCEINLINE auto GET_PLAYER_GROUP(Player player)
	{
		return invoker::invoke<int, 0xD59511AF30BE1934, 0xCCF858>(player);
	}

	FORCEINLINE auto GET_PLAYER_MAX_ARMOUR(Player player)
	{
		return invoker::invoke<int, 0xD69C6BA96938C9C1, 0xCCF900>(player);
	}

	FORCEINLINE auto IS_PLAYER_CONTROL_ON(Player player)
	{
		return invoker::invoke<BOOL, 0xE916D57851F785AB, 0xCD1CB8>(player);
	}

	FORCEINLINE auto GET_ARE_CAMERA_CONTROLS_DISABLED()
	{
		return invoker::invoke<BOOL, 0x3CC2AA893E5C4911, 0xCCE270>();
	}

	FORCEINLINE auto IS_PLAYER_SCRIPT_CONTROL_ON(Player player)
	{
		return invoker::invoke<BOOL, 0x206A708429803A39, 0xCD1EA0>(player);
	}

	FORCEINLINE auto IS_PLAYER_CLIMBING(Player player)
	{
		return invoker::invoke<BOOL, 0xB96BD3A32937D44E, 0xCD1C94>(player);
	}

	FORCEINLINE auto IS_PLAYER_BEING_ARRESTED(Player player, BOOL atArresting)
	{
		return invoker::invoke<BOOL, 0x6652E84A43F51B8B, 0xCD1C44>(player, atArresting);
	}

	FORCEINLINE auto RESET_PLAYER_ARREST_STATE(Player player)
	{
		return invoker::invoke<void, 0x3C2C878E6683CE75, 0xCD79E8>(player);
	}

	FORCEINLINE auto GET_PLAYERS_LAST_VEHICLE()
	{
		return invoker::invoke<Vehicle, 0xDC8D5832207C2EAD, 0xCCF7E8>();
	}

	FORCEINLINE auto GET_PLAYER_INDEX()
	{
		return invoker::invoke<Player, 0xB6B621402486C3E4, 0xCCF8C0>();
	}

	FORCEINLINE auto INT_TO_PLAYERINDEX(int value)
	{
		return invoker::invoke<Player, 0xB23E0F9B63D009A8, 0xA724AC>(value);
	}

	FORCEINLINE auto INT_TO_PARTICIPANTINDEX(int value)
	{
		return invoker::invoke<int, 0xF0C9E5565CB32F4B, 0xA724AC>(value);
	}

	FORCEINLINE auto GET_TIME_SINCE_PLAYER_HIT_VEHICLE(Player player)
	{
		return invoker::invoke<int, 0x750EA8475280B86D, 0xCD004C>(player);
	}

	FORCEINLINE auto GET_TIME_SINCE_PLAYER_HIT_PED(Player player)
	{
		return invoker::invoke<int, 0x98FA166AB01A46F7, 0xCD002C>(player);
	}

	FORCEINLINE auto GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(Player player)
	{
		return invoker::invoke<int, 0xAEAB3904F55BB907, 0xCD000C>(player);
	}

	FORCEINLINE auto GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(Player player)
	{
		return invoker::invoke<int, 0xA2AACDCE82B8394, 0xCCFFEC>(player);
	}

	FORCEINLINE auto IS_PLAYER_FREE_FOR_AMBIENT_TASK(Player player)
	{
		return invoker::invoke<BOOL, 0x566C977EEAE1C0D1, 0xCD1D7C>(player);
	}

	FORCEINLINE auto PLAYER_ID()
	{
		return invoker::invoke<Player, 0x259BE71D8A81D4FA, 0xCCF8C0>();
	}

	FORCEINLINE auto PLAYER_PED_ID()
	{
		return invoker::invoke<Ped, 0x4A8C381C258A124D, 0xCD744C>();
	}

	FORCEINLINE auto NETWORK_PLAYER_ID_TO_INT()
	{
		return invoker::invoke<int, 0x383461852896D73D, 0xCCF8C0>();
	}

	FORCEINLINE auto HAS_FORCE_CLEANUP_OCCURRED(int cleanupFlags)
	{
		return invoker::invoke<BOOL, 0x96CFB880BAC634CE, 0xCD03AC>(cleanupFlags);
	}

	FORCEINLINE auto FORCE_CLEANUP(int cleanupFlags)
	{
		return invoker::invoke<void, 0xB1495D79F52B9EEE, 0xCCE018>(cleanupFlags);
	}

	FORCEINLINE auto FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(const char* name, int cleanupFlags)
	{
		return invoker::invoke<void, 0x3A9A35C27C7B6D3C, 0xCCE024>(name, cleanupFlags);
	}

	FORCEINLINE auto FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(int id, int cleanupFlags)
	{
		return invoker::invoke<void, 0xE1440F5C29913E5D, 0xCCE034>(id, cleanupFlags);
	}

	FORCEINLINE auto GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP()
	{
		return invoker::invoke<int, 0x36E4BBBE16306470, 0xCCE29C>();
	}

	FORCEINLINE auto SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(Player player, Vehicle vehicle)
	{
		return invoker::invoke<void, 0x220BB75D2FDC7141, 0xCD9ECC>(player, vehicle);
	}

	FORCEINLINE auto SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(Player player)
	{
		return invoker::invoke<void, 0xC33666575B6C63DB, 0xCD9EC0>(player);
	}

	FORCEINLINE auto GIVE_ACHIEVEMENT_TO_PLAYER(int achievementId)
	{
		return invoker::invoke<BOOL, 0x584E143398F9661C, 0xCD0290>(achievementId);
	}

	FORCEINLINE auto SET_ACHIEVEMENT_PROGRESS(int achievementId, int progress)
	{
		return invoker::invoke<BOOL, 0xE3872E56266EDEDC, 0xCD7C38>(achievementId, progress);
	}

	FORCEINLINE auto GET_ACHIEVEMENT_PROGRESS(int achievementId)
	{
		return invoker::invoke<int, 0xB3E8CE9ABB5AD331, 0xCCE15C>(achievementId);
	}

	FORCEINLINE auto HAS_ACHIEVEMENT_BEEN_PASSED(int achievementId)
	{
		return invoker::invoke<BOOL, 0x37088D2C63AC4C01, 0xCD02F8>(achievementId);
	}

	FORCEINLINE auto IS_PLAYER_ONLINE()
	{
		return invoker::invoke<BOOL, 0x99DFE4CAC19D527F, 0xCD1DC4>();
	}

	FORCEINLINE auto IS_PLAYER_LOGGING_IN_NP()
	{
		return invoker::invoke<BOOL, 0x54A2F9B7AD878EB5, 0xCCE8A8>();
	}

	FORCEINLINE auto DISPLAY_SYSTEM_SIGNIN_UI(BOOL p0)
	{
		return invoker::invoke<void, 0xC296E8407A7E3E69, 0xCCDB40>(p0);
	}

	FORCEINLINE auto IS_SYSTEM_UI_BEING_DISPLAYED()
	{
		return invoker::invoke<BOOL, 0xEF37E704F02B50F3, 0xCD2278>();
	}

	FORCEINLINE auto SET_PLAYER_INVINCIBLE(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x2B52F77101390E6F, 0xCD9E2C>(player, toggle);
	}

	FORCEINLINE auto GET_PLAYER_INVINCIBLE(Player player)
	{
		return invoker::invoke<BOOL, 0xCF59B5FEF38A9930, 0xCCF8DC>(player);
	}

	FORCEINLINE auto GET_PLAYER_DEBUG_INVINCIBLE(Player player)
	{
		return invoker::invoke<BOOL, 0xD390851FAFF577C2, 0xCCE8A8>(player);
	}

	FORCEINLINE auto SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x6C4F5AA91D39455C, 0xCD9E40>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(Player player, BOOL p1)
	{
		return invoker::invoke<void, 0x66831E1107966731, 0xCD9CB0>(player, p1);
	}

	FORCEINLINE auto REMOVE_PLAYER_HELMET(Player player, BOOL p2)
	{
		return invoker::invoke<void, 0x380902AACBEF8EDD, 0xCD7704>(player, p2);
	}

	FORCEINLINE auto GIVE_PLAYER_RAGDOLL_CONTROL(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xAD38642974DA79B6, 0xCD02E4>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_LOCKON(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xEFF44B1774BDC08F, 0xCD9E7C>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_TARGETING_MODE(int targetMode)
	{
		return invoker::invoke<void, 0x1DBA5F84560D5943, 0xCDA0F4>(targetMode);
	}

	FORCEINLINE auto SET_PLAYER_TARGET_LEVEL(int targetLevel)
	{
		return invoker::invoke<void, 0x204EF9C415A885DE, 0xCDA100>(targetLevel);
	}

	FORCEINLINE auto GET_IS_USING_FPS_THIRD_PERSON_COVER()
	{
		return invoker::invoke<BOOL, 0xC600DDAA3EAEB670, 0xCCE94C>();
	}

	FORCEINLINE auto GET_IS_USING_HOOD_CAMERA()
	{
		return invoker::invoke<BOOL, 0x5A50E8F361E4CFB1, 0xCCE960>();
	}

	FORCEINLINE auto CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(Player player)
	{
		return invoker::invoke<void, 0xAC7090FFDF63A3A0, 0xCCD354>(player);
	}

	FORCEINLINE auto HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(Player player)
	{
		return invoker::invoke<BOOL, 0x1F8DDF94E5D56F59, 0xCD05A0>(player);
	}

	FORCEINLINE auto CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(Player player)
	{
		return invoker::invoke<void, 0xD6AD454C9B73DD75, 0xCCD348>(player);
	}

	FORCEINLINE auto HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(Player player)
	{
		return invoker::invoke<BOOL, 0xEFC75C3D53F60CB1, 0xCD057C>(player);
	}

	FORCEINLINE auto SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(Player player, float multiplier)
	{
		return invoker::invoke<void, 0x7BFF320D45B40B56, 0xCD7C7C>(player, multiplier);
	}

	FORCEINLINE auto SET_SWIM_MULTIPLIER_FOR_PLAYER(Player player, float multiplier)
	{
		return invoker::invoke<void, 0x289497A4BA9049E0, 0xCDA4E4>(player, multiplier);
	}

	FORCEINLINE auto SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(Player player, float multiplier)
	{
		return invoker::invoke<void, 0xA52E1AE3848A506B, 0xCDA3D0>(player, multiplier);
	}

	FORCEINLINE auto GET_TIME_SINCE_LAST_ARREST()
	{
		return invoker::invoke<int, 0x5B5405C7B1021630, 0xCCFFAC>();
	}

	FORCEINLINE auto GET_TIME_SINCE_LAST_DEATH()
	{
		return invoker::invoke<int, 0xA4A53492861BFB22, 0xCCFFCC>();
	}

	FORCEINLINE auto ASSISTED_MOVEMENT_CLOSE_ROUTE()
	{
		return invoker::invoke<void, 0xC281E62EC347918C, 0xCCCC20>();
	}

	FORCEINLINE auto ASSISTED_MOVEMENT_FLUSH_ROUTE()
	{
		return invoker::invoke<void, 0xC52E851E33ADFEE7, 0xCCCC28>();
	}

	FORCEINLINE auto SET_PLAYER_FORCED_AIM(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x5F607C9E85F2ECC5, 0xCD9DB0>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_FORCED_ZOOM(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x907872AE773E60D2, 0xCD9DC4>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_FORCE_SKIP_AIM_INTRO(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x676D58067087BA0A, 0xCD9DD8>(player, toggle);
	}

	FORCEINLINE auto DISABLE_PLAYER_FIRING(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xEF387B90B8B97EDA, 0xCCDAF8>(player, toggle);
	}

	FORCEINLINE auto DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN()
	{
		return invoker::invoke<void, 0xF37B149B1A382D5B, 0xCCDB18>();
	}

	FORCEINLINE auto SET_DISABLE_AMBIENT_MELEE_MOVE(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x3EC357F31CEA229D, 0xCD8004>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_MAX_ARMOUR(Player player, int value)
	{
		return invoker::invoke<void, 0x776D5F57819A1E41, 0xCD9EA0>(player, value);
	}

	FORCEINLINE auto SPECIAL_ABILITY_ACTIVATE(Player player, int p1)
	{
		return invoker::invoke<void, 0x565DC75434CCE76E, 0xCDA83C>(player, p1);
	}

	FORCEINLINE auto SET_SPECIAL_ABILITY_MP(Player player, int p1, Any p2)
	{
		return invoker::invoke<void, 0x5F5FDED45A3345C9, 0xCDA468>(player, p1, p2);
	}

	FORCEINLINE auto SPECIAL_ABILITY_DEACTIVATE_MP(Player player, int p1)
	{
		return invoker::invoke<void, 0x8181C267AB5DE670, 0xCDA92C>(player, p1);
	}

	FORCEINLINE auto SPECIAL_ABILITY_DEACTIVATE(Player player, Any p1)
	{
		return invoker::invoke<void, 0xF064FD8FB64821D1, 0xCDA90C>(player, p1);
	}

	FORCEINLINE auto SPECIAL_ABILITY_DEACTIVATE_FAST(Player player, Any p1)
	{
		return invoker::invoke<void, 0x6A84D4B060E73EF5, 0xCDA91C>(player, p1);
	}

	FORCEINLINE auto SPECIAL_ABILITY_RESET(Player player, Any p1)
	{
		return invoker::invoke<void, 0x89609F1D3BE65A34, 0xCDA984>(player, p1);
	}

	FORCEINLINE auto SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(Player player, Any p1)
	{
		return invoker::invoke<void, 0x3ECCF6485789A1D6, 0xCDA8DC>(player, p1);
	}

	FORCEINLINE auto SPECIAL_ABILITY_CHARGE_SMALL(Player player, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0xE085C345EE8A8E00, 0xCDA8EC>(player, p1, p2, p3);
	}

	FORCEINLINE auto SPECIAL_ABILITY_CHARGE_MEDIUM(Player player, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x31240ACBC2A082EA, 0xCDA8A0>(player, p1, p2, p3);
	}

	FORCEINLINE auto SPECIAL_ABILITY_CHARGE_LARGE(Player player, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x674C330ABC93304B, 0xCDA880>(player, p1, p2, p3);
	}

	FORCEINLINE auto SPECIAL_ABILITY_CHARGE_CONTINUOUS(Player player, Ped p1, Any p2)
	{
		return invoker::invoke<void, 0xEFA2B6B7AB16294E, 0xCDA868>(player, p1, p2);
	}

	FORCEINLINE auto SPECIAL_ABILITY_CHARGE_ABSOLUTE(Player player, int p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x7CCB2F844CA7C337, 0xCDA84C>(player, p1, p2, p3);
	}

	FORCEINLINE auto SPECIAL_ABILITY_CHARGE_NORMALIZED(Player player, float normalizedValue, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x9AD14335D95C64BA, 0xCDA8C0>(player, normalizedValue, p2, p3);
	}

	FORCEINLINE auto SPECIAL_ABILITY_FILL_METER(Player player, BOOL p1, Any p2)
	{
		return invoker::invoke<void, 0x15263A2A8A135DF3, 0xCDA954>(player, p1, p2);
	}

	FORCEINLINE auto SPECIAL_ABILITY_DEPLETE_METER(Player player, BOOL p1, Any p2)
	{
		return invoker::invoke<void, 0xB055330FF3BFD8A6, 0xCDA93C>(player, p1, p2);
	}

	FORCEINLINE auto SPECIAL_ABILITY_LOCK(Hash playerModel, Any p1)
	{
		return invoker::invoke<void, 0xE3D5A2DE522F29C1, 0xCDA96C>(playerModel, p1);
	}

	FORCEINLINE auto SPECIAL_ABILITY_UNLOCK(Hash playerModel, Any p1)
	{
		return invoker::invoke<void, 0xD33BCB9F50C1E588, 0xCDA994>(playerModel, p1);
	}

	FORCEINLINE auto IS_SPECIAL_ABILITY_UNLOCKED(Hash playerModel)
	{
		return invoker::invoke<BOOL, 0x10140D9546976B7F, 0xCD2178>(playerModel);
	}

	FORCEINLINE auto IS_SPECIAL_ABILITY_ACTIVE(Player player, Any p1)
	{
		return invoker::invoke<BOOL, 0xFD2D7766E325A3B2, 0xCD2100>(player, p1);
	}

	FORCEINLINE auto IS_SPECIAL_ABILITY_METER_FULL(Player player, Any p1)
	{
		return invoker::invoke<BOOL, 0x568A5F4040D722C0, 0xCD2150>(player, p1);
	}

	FORCEINLINE auto ENABLE_SPECIAL_ABILITY(Player player, BOOL toggle, Any p2)
	{
		return invoker::invoke<void, 0xE0A0D0E41195BAC0, 0xCCDF28>(player, toggle, p2);
	}

	FORCEINLINE auto IS_SPECIAL_ABILITY_ENABLED(Player player, Any p1)
	{
		return invoker::invoke<BOOL, 0x3BBF563E688265AF, 0xCD2128>(player, p1);
	}

	FORCEINLINE auto SET_SPECIAL_ABILITY_MULTIPLIER(float multiplier)
	{
		return invoker::invoke<void, 0xF65CE7345EAFDBE2, 0xCDA47C>(multiplier);
	}

	FORCEINLINE auto UPDATE_SPECIAL_ABILITY_FROM_STAT(Player player, Any p1)
	{
		return invoker::invoke<void, 0x4F239EFD194C236, 0xCDB99C>(player, p1);
	}

	FORCEINLINE auto GET_IS_PLAYER_DRIVING_ON_HIGHWAY(Player player)
	{
		return invoker::invoke<BOOL, 0x771C914E893FD9EB, 0xCCE8D8>(player);
	}

	FORCEINLINE auto GET_IS_PLAYER_DRIVING_WRECKLESS(Player player, int p1)
	{
		return invoker::invoke<BOOL, 0x4A3BD6441F87BBF1, 0xCCE8FC>(player, p1);
	}

	FORCEINLINE auto GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(Player player, float p1)
	{
		return invoker::invoke<BOOL, 0x93559B7C58C7660C, 0xCCE8B0>(player, p1);
	}

	FORCEINLINE auto START_PLAYER_TELEPORT(Player player, float x, float y, float z, float heading, BOOL p5, BOOL findCollisionLand, BOOL p7)
	{
		return invoker::invoke<void, 0xCB7327FDCE6757E1, 0xCDA9CC>(player, x, y, z, heading, p5, findCollisionLand, p7);
	}

	FORCEINLINE auto UPDATE_PLAYER_TELEPORT(Player player)
	{
		return invoker::invoke<BOOL, 0x8644ACAF2A301B7E, 0xCDB978>(player);
	}

	FORCEINLINE auto STOP_PLAYER_TELEPORT()
	{
		return invoker::invoke<void, 0xEB205B72FDDFDFC6, 0xCDAA58>();
	}

	FORCEINLINE auto IS_PLAYER_TELEPORT_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x705A7AB2D4BC0A9B, 0xCD1F10>();
	}

	FORCEINLINE auto GET_PLAYER_CURRENT_STEALTH_NOISE(Player player)
	{
		return invoker::invoke<float, 0x5F93A870D439E8B4, 0xCCF814>(player);
	}

	FORCEINLINE auto SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(Player player, float regenRate)
	{
		return invoker::invoke<void, 0x2DC05627BC628AF, 0xCD9E08>(player, regenRate);
	}

	FORCEINLINE auto GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(Player player)
	{
		return invoker::invoke<float, 0x4FF4A601A84AE24A, 0xCCF89C>(player);
	}

	FORCEINLINE auto SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(Player player, float limit)
	{
		return invoker::invoke<void, 0xE968651CFDDDE20B, 0xCD9DF8>(player, limit);
	}

	FORCEINLINE auto DISABLE_PLAYER_HEALTH_RECHARGE(Player player)
	{
		return invoker::invoke<void, 0x90F2F734B18CEBF, 0xCCDB0C>(player);
	}

	FORCEINLINE auto SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(Player player, float p1)
	{
		return invoker::invoke<void, 0xA9FF721056B7254E, 0xCD9DA0>(player, p1);
	}

	FORCEINLINE auto SET_PLAYER_WEAPON_DAMAGE_MODIFIER(Player player, float modifier)
	{
		return invoker::invoke<void, 0x148193D59AAB6D14, 0xCDA1C4>(player, modifier);
	}

	FORCEINLINE auto SET_PLAYER_WEAPON_DEFENSE_MODIFIER(Player player, float modifier)
	{
		return invoker::invoke<void, 0x43DFCD4B65960E46, 0xCDA1D4>(player, modifier);
	}

	FORCEINLINE auto SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(Player player, float modifier)
	{
		return invoker::invoke<void, 0x10F23FF10E9AA211, 0xCDA1E4>(player, modifier);
	}

	FORCEINLINE auto SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(Player player, float modifier, BOOL p2)
	{
		return invoker::invoke<void, 0xA8762533460B016B, 0xCD9EDC>(player, modifier, p2);
	}

	FORCEINLINE auto SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(Player player, float modifier)
	{
		return invoker::invoke<void, 0xECD5F8110C183253, 0xCD9EF4>(player, modifier);
	}

	FORCEINLINE auto SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(Player player, float modifier)
	{
		return invoker::invoke<void, 0x1BB5389ACC6BFCFC, 0xCDA130>(player, modifier);
	}

	FORCEINLINE auto SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(Player player, float modifier)
	{
		return invoker::invoke<void, 0x7754DB9F9579CEE4, 0xCDA140>(player, modifier);
	}

	FORCEINLINE auto SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(Player player, float p1)
	{
		return invoker::invoke<void, 0x14EBA27C5B556497, 0xCD9EB0>(player, p1);
	}

	FORCEINLINE auto SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(Player player, Any p1)
	{
		return invoker::invoke<void, 0x5DDADC6F9EA8B04, 0xCD9D90>(player, p1);
	}

	FORCEINLINE auto SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(Player player, float p1)
	{
		return invoker::invoke<void, 0xF1617CCA9785B3DA, 0xCDA1F4>(player, p1);
	}

	FORCEINLINE auto SET_PLAYER_PARACHUTE_TINT_INDEX(Player player, int tintIndex)
	{
		return invoker::invoke<void, 0x9C63D805CB2ABDB5, 0xCD9F8C>(player, tintIndex);
	}

	FORCEINLINE auto GET_PLAYER_PARACHUTE_TINT_INDEX(Player player, int* tintIndex)
	{
		return invoker::invoke<void, 0x6A3837CF4CF46A9D, 0xCCF990>(player, tintIndex);
	}

	FORCEINLINE auto SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(Player player, int index)
	{
		return invoker::invoke<void, 0xA4C157F5AAD56833, 0xCDA06C>(player, index);
	}

	FORCEINLINE auto GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(Player player, int* index)
	{
		return invoker::invoke<void, 0x9A6FA1C41236F7D3, 0xCCFA50>(player, index);
	}

	FORCEINLINE auto SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(Player player, int tintIndex)
	{
		return invoker::invoke<void, 0xC02C4AB8A5C744D7, 0xCD9F44>(player, tintIndex);
	}

	FORCEINLINE auto GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(Player player, int* tintIndex)
	{
		return invoker::invoke<void, 0x755C848B9B13C696, 0xCCF968>(player, tintIndex);
	}

	FORCEINLINE auto SET_PLAYER_HAS_RESERVE_PARACHUTE(Player player)
	{
		return invoker::invoke<void, 0x2DF241BBC3BB2698, 0xCD9DEC>(player);
	}

	FORCEINLINE auto GET_PLAYER_HAS_RESERVE_PARACHUTE(Player player)
	{
		return invoker::invoke<BOOL, 0x5B7F4CBFA7B6871, 0xCCF878>(player);
	}

	FORCEINLINE auto SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(Player player, BOOL enabled)
	{
		return invoker::invoke<void, 0x92BC68FD9EBF7832, 0xCD9CF0>(player, enabled);
	}

	FORCEINLINE auto SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(Player player, int r, int g, int b)
	{
		return invoker::invoke<void, 0xDC198F70124270BE, 0xCD9F74>(player, r, g, b);
	}

	FORCEINLINE auto GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(Player player, int* r, int* g, int* b)
	{
		return invoker::invoke<void, 0xA74429530D79E338, 0xCCF978>(player, r, g, b);
	}

	FORCEINLINE auto SET_PLAYER_PHONE_PALETTE_IDX(Player player, int flags)
	{
		return invoker::invoke<void, 0x454108124161B7D7, 0xCDA000>(player, flags);
	}

	FORCEINLINE auto SET_PLAYER_NOISE_MULTIPLIER(Player player, float multiplier)
	{
		return invoker::invoke<void, 0xF75E68D9DCB8C80B, 0xCD9F14>(player, multiplier);
	}

	FORCEINLINE auto SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(Player player, float multiplier)
	{
		return invoker::invoke<void, 0x92F9E3A242F41E98, 0xCDA0B0>(player, multiplier);
	}

	FORCEINLINE auto CAN_PED_HEAR_PLAYER(Player player, Ped ped)
	{
		return invoker::invoke<BOOL, 0xC1204DBD7B8A643E, 0xCCCDF0>(player, ped);
	}

	FORCEINLINE auto SIMULATE_PLAYER_INPUT_GAIT(Player player, float amount, int gaitType, float speed, BOOL p4, BOOL p5, Any p6)
	{
		return invoker::invoke<void, 0x8EAC8FBDF8A3830E, 0xCDA674>(player, amount, gaitType, speed, p4, p5, p6);
	}

	FORCEINLINE auto RESET_PLAYER_INPUT_GAIT(Player player)
	{
		return invoker::invoke<void, 0xDF1A809B241FEE24, 0xCD7A10>(player);
	}

	FORCEINLINE auto SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xE8B2E2E978035EF0, 0xCD7DAC>(player, toggle);
	}

	FORCEINLINE auto SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x5D0510F58106E4FF, 0xCD7DC0>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(Player player, float value)
	{
		return invoker::invoke<void, 0x48D90B19F701DC3, 0xCDA0E4>(player, value);
	}

	FORCEINLINE auto IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(Player player)
	{
		return invoker::invoke<BOOL, 0x423F801F012D944B, 0xCD2008>(player);
	}

	FORCEINLINE auto INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(Player player)
	{
		return invoker::invoke<void, 0x2B5801E768BECF3C, 0xCD0694>(player);
	}

	FORCEINLINE auto SET_PLAYER_SIMULATE_AIMING(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x469AD8A2B1EBB937, 0xCDA09C>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_CLOTH_PIN_FRAMES(Player player, int p1)
	{
		return invoker::invoke<void, 0xE00868707690F6A7, 0xCD9D4C>(player, p1);
	}

	FORCEINLINE auto SET_PLAYER_CLOTH_PACKAGE_INDEX(int index)
	{
		return invoker::invoke<void, 0xDAFB2A5B123922B, 0xCD9D40>(index);
	}

	FORCEINLINE auto SET_PLAYER_CLOTH_LOCK_COUNTER(int value)
	{
		return invoker::invoke<void, 0x8D51A58AA12E95D0, 0xCD9D18>(value);
	}

	FORCEINLINE auto PLAYER_ATTACH_VIRTUAL_BOUND(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7)
	{
		return invoker::invoke<void, 0xB56783BB72003C9A, 0xCD742C>(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	FORCEINLINE auto PLAYER_DETACH_VIRTUAL_BOUND()
	{
		return invoker::invoke<void, 0xD11FB55020B6F371, 0xCD7444>();
	}

	FORCEINLINE auto HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(Player player)
	{
		return invoker::invoke<BOOL, 0xE6896553A815F074, 0xCD0558>(player);
	}

	FORCEINLINE auto IS_PLAYER_BATTLE_AWARE(Player player)
	{
		return invoker::invoke<BOOL, 0x1AF2787435531EA9, 0xCD1C20>(player);
	}

	FORCEINLINE auto GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(Player player, int p1, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x992BFEB6732434E5, 0xCCFA00>(player, p1, p2);
	}

	FORCEINLINE auto EXTEND_WORLD_BOUNDARY_FOR_PLAYER(float x, float y, float z)
	{
		return invoker::invoke<void, 0xFFD4786D6EA9F414, 0xCCDF50>(x, y, z);
	}

	FORCEINLINE auto RESET_WORLD_BOUNDARY_FOR_PLAYER()
	{
		return invoker::invoke<void, 0xDC14EA9673A80516, 0xCD7A48>();
	}

	FORCEINLINE auto IS_PLAYER_RIDING_TRAIN(Player player)
	{
		return invoker::invoke<BOOL, 0x94CC17D69C81292D, 0xCD1E7C>(player);
	}

	FORCEINLINE auto HAS_PLAYER_LEFT_THE_WORLD(Player player)
	{
		return invoker::invoke<BOOL, 0x358E7369E46B466E, 0xCD05C4>(player);
	}

	FORCEINLINE auto SET_PLAYER_LEAVE_PED_BEHIND(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xC4A38E060739AAF9, 0xCD9E68>(player, toggle);
	}

	FORCEINLINE auto SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(Player player, int p1, Any p2, Any p3, BOOL p4)
	{
		return invoker::invoke<void, 0x740F6E63EE1C1D43, 0xCD9FBC>(player, p1, p2, p3, p4);
	}

	FORCEINLINE auto CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(Player player)
	{
		return invoker::invoke<void, 0xBFB1BDBC26BB9501, 0xCCD378>(player);
	}

	FORCEINLINE auto SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(Player player, Hash model)
	{
		return invoker::invoke<void, 0xCE1864BA99DCF3C2, 0xCD9F24>(player, model);
	}

	FORCEINLINE auto SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(Player player, Hash model)
	{
		return invoker::invoke<void, 0x953124DAB474F504, 0xCDA05C>(player, model);
	}

	FORCEINLINE auto GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(Player player)
	{
		return invoker::invoke<Hash, 0x4B04D06A9A9A2186, 0xCCF948>(player);
	}

	FORCEINLINE auto GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(Player player)
	{
		return invoker::invoke<Hash, 0xE48394E21867C, 0xCCFA30>(player);
	}

	FORCEINLINE auto CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(Player player)
	{
		return invoker::invoke<void, 0xC7DB642109D72AF8, 0xCCD360>(player);
	}

	FORCEINLINE auto CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(Player player)
	{
		return invoker::invoke<void, 0x6C8F0A6A6EFD073C, 0xCCD384>(player);
	}

	FORCEINLINE auto SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(Player player, Hash model)
	{
		return invoker::invoke<void, 0xD8FE716A11BE669A, 0xCD9F34>(player, model);
	}

	FORCEINLINE auto CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(Player player)
	{
		return invoker::invoke<void, 0xBDAA517C3D10DB80, 0xCCD36C>(player);
	}

	FORCEINLINE auto DISABLE_PLAYER_VEHICLE_REWARDS(Player player)
	{
		return invoker::invoke<void, 0x706D6DF51D119A27, 0xCCDB20>(player);
	}

	FORCEINLINE auto SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(BOOL p0)
	{
		return invoker::invoke<void, 0xE3CF1CD0E11083B3, 0xCDA0C0>(p0);
	}

	FORCEINLINE auto SET_PLAYER_BLUETOOTH_STATE(Player player, BOOL state)
	{
		return invoker::invoke<void, 0x7B537987214FC5A3, 0xCD9C88>(player, state);
	}

	FORCEINLINE auto IS_PLAYER_BLUETOOTH_ENABLE(Player player)
	{
		return invoker::invoke<BOOL, 0x86A327F828FE34D1, 0xCD1C70>(player);
	}

	FORCEINLINE auto DISABLE_CAMERA_VIEW_MODE_CYCLE(Player player)
	{
		return invoker::invoke<void, 0x98D2FC8206AB54E0, 0xCCDA6C>(player);
	}

	FORCEINLINE auto GET_PLAYER_FAKE_WANTED_LEVEL(Player player)
	{
		return invoker::invoke<int, 0xF9DAC8C6B952C2B, 0xCCF838>(player);
	}

	FORCEINLINE auto SET_PLAYER_CAN_DAMAGE_PLAYER(Player player1, Player player2, BOOL toggle)
	{
		return invoker::invoke<void, 0xA4337AACEADDAA8E, 0xCD9CC4>(player1, player2, toggle);
	}

	FORCEINLINE auto SET_APPLY_WAYPOINT_OF_PLAYER(Player player, int hudColor)
	{
		return invoker::invoke<void, 0xC29BDAAD2623309A, 0xCD7D9C>(player, hudColor);
	}

	FORCEINLINE auto IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(Any p0)
	{
		return invoker::invoke<BOOL, 0xBB7E639305F91EF7, 0xCD1F2C>(p0);
	}

	FORCEINLINE auto SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(Any p0)
	{
		return invoker::invoke<void, 0x174A79E28AE4782E, 0xCDA150>(p0);
	}

	FORCEINLINE auto SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x62013EEF72D4454F, 0xCD9E18>(p0, p1);
	}

	FORCEINLINE auto ADD_PLAYER_TARGETABLE_ENTITY(Player player, Entity entity)
	{
		return invoker::invoke<void, 0x1DE8C13F47D5A73F, 0xCCC8AC>(player, entity);
	}

	FORCEINLINE auto REMOVE_PLAYER_TARGETABLE_ENTITY(Player player, Entity entity)
	{
		return invoker::invoke<void, 0x5D602AB9F6E93843, 0xCD7718>(player, entity);
	}

	FORCEINLINE auto SET_PLAYER_PREVIOUS_VARIATION_DATA(Player player, int p1, int p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<void, 0xFA5313EFD99BB771, 0xCDA028>(player, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto REMOVE_SCRIPT_FIRE_POSITION()
	{
		return invoker::invoke<void, 0xE0CE913C020B2907, 0xCD7768>();
	}

	FORCEINLINE auto SET_SCRIPT_FIRE_POSITION(float coordX, float coordY, float coordZ)
	{
		return invoker::invoke<void, 0x00, 0xCDA45C>(coordX, coordY, coordZ);
	}

}
namespace FILES
{
	FORCEINLINE auto GET_NUM_TATTOO_SHOP_DLC_ITEMS(int character)
	{
		return invoker::invoke<int, 0x82D6E3FDBD0A80B6, 0xA71B94>(character);
	}

	FORCEINLINE auto GET_TATTOO_SHOP_DLC_ITEM_DATA(int characterType, int decorationIndex, Any* outComponent)
	{
		return invoker::invoke<BOOL, 0xC8FF7E3E267EBEF5, 0xA721C8>(characterType, decorationIndex, outComponent);
	}

	FORCEINLINE auto GET_TATTOO_SHOP_DLC_ITEM_INDEX(Hash overlayHash, Any p1, int character)
	{
		return invoker::invoke<int, 0xE80EBC1CABE1C8A7, 0xA721F4>(overlayHash, p1, character);
	}

	FORCEINLINE auto INIT_SHOP_PED_COMPONENT(Any* outComponent)
	{
		return invoker::invoke<void, 0x15D20F88F06530A5, 0xA72AF4>(outComponent);
	}

	FORCEINLINE auto INIT_SHOP_PED_PROP(Any* outProp)
	{
		return invoker::invoke<void, 0x7A491C9A90975007, 0xA72AF4>(outProp);
	}

	FORCEINLINE auto SETUP_SHOP_PED_APPAREL_QUERY(int p0, int p1, int p2, int p3)
	{
		return invoker::invoke<int, 0xD9B1BDDEA510CD90, 0xA74C8C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto SETUP_SHOP_PED_APPAREL_QUERY_TU(int character, int p1, int p2, BOOL p3, int p4, int componentId)
	{
		return invoker::invoke<int, 0x7B6C0A0D604E68FA, 0xA74CB8>(character, p1, p2, p3, p4, componentId);
	}

	FORCEINLINE auto GET_SHOP_PED_QUERY_COMPONENT(int componentId, Any* outComponent)
	{
		return invoker::invoke<void, 0xD36906FE7BBBDB62, 0xA7200C>(componentId, outComponent);
	}

	FORCEINLINE auto GET_SHOP_PED_QUERY_COMPONENT_INDEX(Hash componentHash)
	{
		return invoker::invoke<int, 0x55FF07D3A2FE8317, 0xA7201C>(componentHash);
	}

	FORCEINLINE auto GET_SHOP_PED_COMPONENT(Hash componentHash, Any* outComponent)
	{
		return invoker::invoke<void, 0xA5690D702773BED4, 0xA71F64>(componentHash, outComponent);
	}

	FORCEINLINE auto GET_SHOP_PED_QUERY_PROP(int componentId, Any* outProp)
	{
		return invoker::invoke<void, 0x2DBB2D25D50A5392, 0xA72054>(componentId, outProp);
	}

	FORCEINLINE auto GET_SHOP_PED_QUERY_PROP_INDEX(Hash componentHash)
	{
		return invoker::invoke<int, 0x289EDE99827978AD, 0xA72064>(componentHash);
	}

	FORCEINLINE auto GET_SHOP_PED_PROP(Hash componentHash, Any* outProp)
	{
		return invoker::invoke<void, 0x9A485A642AEADEF, 0xA71FFC>(componentHash, outProp);
	}

	FORCEINLINE auto GET_HASH_NAME_FOR_COMPONENT(Entity entity, int componentId, int drawableVariant, int textureVariant)
	{
		return invoker::invoke<Hash, 0x94B8A32AA940A6B5, 0xA717E0>(entity, componentId, drawableVariant, textureVariant);
	}

	FORCEINLINE auto GET_HASH_NAME_FOR_PROP(Entity entity, int componentId, int propIndex, int propTextureIndex)
	{
		return invoker::invoke<Hash, 0x6B7AEB5F3D578298, 0xA71818>(entity, componentId, propIndex, propTextureIndex);
	}

	FORCEINLINE auto GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(Hash componentHash)
	{
		return invoker::invoke<int, 0x5A3F0A3B7ECCBD32, 0xA71F14>(componentHash);
	}

	FORCEINLINE auto GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(Hash propHash)
	{
		return invoker::invoke<int, 0xCD6EB4A3CCA20602, 0xA71F3C>(propHash);
	}

	FORCEINLINE auto GET_VARIANT_COMPONENT(Hash componentHash, int variantComponentIndex, Hash* nameHash, int* enumValue, int* componentType)
	{
		return invoker::invoke<void, 0x249B53AB91BF9D0, 0xA72398>(componentHash, variantComponentIndex, nameHash, enumValue, componentType);
	}

	FORCEINLINE auto GET_VARIANT_PROP(Hash componentHash, int variantPropIndex, Hash* nameHash, int* enumValue, int* anchorPoint)
	{
		return invoker::invoke<void, 0x5C6B8DD2E15C6B3C, 0xA723D0>(componentHash, variantPropIndex, nameHash, enumValue, anchorPoint);
	}

	FORCEINLINE auto GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(Hash componentHash)
	{
		return invoker::invoke<int, 0x9FB2D71D9CEC8B5A, 0xA71EC4>(componentHash);
	}

	FORCEINLINE auto GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(Hash componentHash)
	{
		return invoker::invoke<int, 0xCBBA20766F48DC67, 0xA71EEC>(componentHash);
	}

	FORCEINLINE auto GET_FORCED_COMPONENT(Hash componentHash, int forcedComponentIndex, Hash* nameHash, int* enumValue, int* componentType)
	{
		return invoker::invoke<void, 0xCF4D7500E7DA5D8E, 0xA7166C>(componentHash, forcedComponentIndex, nameHash, enumValue, componentType);
	}

	FORCEINLINE auto GET_FORCED_PROP(Hash componentHash, int forcedPropIndex, Hash* nameHash, int* enumValue, int* anchorPoint)
	{
		return invoker::invoke<void, 0x24F0ED4836CD2E4D, 0xA716A4>(componentHash, forcedPropIndex, nameHash, enumValue, anchorPoint);
	}

	FORCEINLINE auto DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(Hash componentHash, Hash restrictionTagHash, int componentId)
	{
		return invoker::invoke<BOOL, 0x304A39EB177D246B, 0xA6FCE0>(componentHash, restrictionTagHash, componentId);
	}

	FORCEINLINE auto DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(Ped ped, int componentId, Hash restrictionTagHash)
	{
		return invoker::invoke<BOOL, 0xCA362C769B0F4F0E, 0xA6FAEC>(ped, componentId, restrictionTagHash);
	}

	FORCEINLINE auto DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(Ped ped, int componentId, Hash restrictionTagHash)
	{
		return invoker::invoke<BOOL, 0x6C309E623368F96B, 0xA6FB18>(ped, componentId, restrictionTagHash);
	}

	FORCEINLINE auto SETUP_SHOP_PED_OUTFIT_QUERY(int character, BOOL p1)
	{
		return invoker::invoke<int, 0xF2DDA7CE028AB9CB, 0xA74CF8>(character, p1);
	}

	FORCEINLINE auto GET_SHOP_PED_QUERY_OUTFIT(int outfitIndex, Any* outfit)
	{
		return invoker::invoke<void, 0x808A8ABE207631DF, 0xA72044>(outfitIndex, outfit);
	}

	FORCEINLINE auto GET_SHOP_PED_OUTFIT(Any p0, Any* p1)
	{
		return invoker::invoke<void, 0x565B95D20273E8CD, 0xA71F74>(p0, p1);
	}

	FORCEINLINE auto GET_SHOP_PED_OUTFIT_LOCATE(Any p0)
	{
		return invoker::invoke<int, 0x1D814CA2350EAA9E, 0xA71FB0>(p0);
	}

	FORCEINLINE auto GET_SHOP_PED_OUTFIT_PROP_VARIANT(Hash outfitHash, int variantIndex, Any* outPropVariant)
	{
		return invoker::invoke<BOOL, 0xCD4F2395AE80D510, 0xA71FD0>(outfitHash, variantIndex, outPropVariant);
	}

	FORCEINLINE auto GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(Hash outfitHash, int variantIndex, Any* outComponentVariant)
	{
		return invoker::invoke<BOOL, 0xABE43EB6EBE5F2F5, 0xA71F84>(outfitHash, variantIndex, outComponentVariant);
	}

	FORCEINLINE auto GET_NUM_DLC_VEHICLES()
	{
		return invoker::invoke<int, 0x62B04373BFAD9B85, 0xA71AFC>();
	}

	FORCEINLINE auto GET_DLC_VEHICLE_MODEL(int dlcVehicleIndex)
	{
		return invoker::invoke<Hash, 0xBDEBCB00EBC6F89E, 0xA70B90>(dlcVehicleIndex);
	}

	FORCEINLINE auto GET_DLC_VEHICLE_DATA(int dlcVehicleIndex, Any* outData)
	{
		return invoker::invoke<BOOL, 0x92EAC7DBD5D1D750, 0xA70B38>(dlcVehicleIndex, outData);
	}

	FORCEINLINE auto GET_DLC_VEHICLE_FLAGS(int dlcVehicleIndex)
	{
		return invoker::invoke<int, 0x6A1E7E50A4AF1FBD, 0xA70B60>(dlcVehicleIndex);
	}

	FORCEINLINE auto GET_NUM_DLC_WEAPONS()
	{
		return invoker::invoke<int, 0x9A7818E159C72516, 0xA71B10>();
	}

	FORCEINLINE auto GET_NUM_DLC_WEAPONS_SP()
	{
		return invoker::invoke<int, 0xAFA659708600A8CD, 0xA71B24>();
	}

	FORCEINLINE auto GET_DLC_WEAPON_DATA(int dlcWeaponIndex, Any* outData)
	{
		return invoker::invoke<BOOL, 0xDF94727C5BBB298F, 0xA70C30>(dlcWeaponIndex, outData);
	}

	FORCEINLINE auto GET_DLC_WEAPON_DATA_SP(int dlcWeaponIndex, Any* outData)
	{
		return invoker::invoke<BOOL, 0xA40B513DA7201333, 0xA70C58>(dlcWeaponIndex, outData);
	}

	FORCEINLINE auto GET_NUM_DLC_WEAPON_COMPONENTS(int dlcWeaponIndex)
	{
		return invoker::invoke<int, 0x660FA55F8D417CAB, 0xA71B44>(dlcWeaponIndex);
	}

	FORCEINLINE auto GET_NUM_DLC_WEAPON_COMPONENTS_SP(int dlcWeaponIndex)
	{
		return invoker::invoke<int, 0xA334014DFD4952C, 0xA71B6C>(dlcWeaponIndex);
	}

	FORCEINLINE auto GET_DLC_WEAPON_COMPONENT_DATA(int dlcWeaponIndex, int dlcWeapCompIndex, Any* ComponentDataPtr)
	{
		return invoker::invoke<BOOL, 0x737024F2814ABDDD, 0xA70BD8>(dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr);
	}

	FORCEINLINE auto GET_DLC_WEAPON_COMPONENT_DATA_SP(int dlcWeaponIndex, int dlcWeapCompIndex, Any* ComponentDataPtr)
	{
		return invoker::invoke<BOOL, 0x38A1582CAC3F4E95, 0xA70C04>(dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr);
	}

	FORCEINLINE auto IS_CONTENT_ITEM_LOCKED(Hash itemHash)
	{
		return invoker::invoke<BOOL, 0x4BFA043D318BF9AE, 0xA72F8C>(itemHash);
	}

	FORCEINLINE auto IS_DLC_VEHICLE_MOD(Hash hash)
	{
		return invoker::invoke<BOOL, 0xC638DA98694CE80F, 0xA73070>(hash);
	}

	FORCEINLINE auto GET_DLC_VEHICLE_MOD_LOCK_HASH(Hash hash)
	{
		return invoker::invoke<Hash, 0x1F6B09FE73B99828, 0xA70BB8>(hash);
	}

	FORCEINLINE auto EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(Hash hash)
	{
		return invoker::invoke<void, 0x5A8C2218A9C71C65, 0xA7034C>(hash);
	}

	FORCEINLINE auto REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(Hash hash)
	{
		return invoker::invoke<void, 0x5D75D30DF32ECA8E, 0xA74B10>(hash);
	}

}
namespace ENTITY
{
	FORCEINLINE auto DOES_ENTITY_EXIST(Entity entity)
	{
		return invoker::invoke<BOOL, 0xFC8BFE4B41177C22, 0xA6FBB8>(entity);
	}

	FORCEINLINE auto DOES_ENTITY_BELONG_TO_THIS_SCRIPT(Entity entity, BOOL p1)
	{
		return invoker::invoke<BOOL, 0x7C9905528EE2C3AB, 0xA6FB8C>(entity, p1);
	}

	FORCEINLINE auto DOES_ENTITY_HAVE_DRAWABLE(Entity entity)
	{
		return invoker::invoke<BOOL, 0xF98CC1C0E657B6CB, 0xA6FC00>(entity);
	}

	FORCEINLINE auto DOES_ENTITY_HAVE_PHYSICS(Entity entity)
	{
		return invoker::invoke<BOOL, 0x4DBCC7D5D01D67FA, 0xA6FC24>(entity);
	}

	FORCEINLINE auto DOES_ENTITY_HAVE_SKELETON(Entity entity)
	{
		return invoker::invoke<BOOL, 0x3D4B0DBFA0E78D88, 0xA6FC48>(entity);
	}

	FORCEINLINE auto DOES_ENTITY_HAVE_ANIM_DIRECTOR(Entity entity)
	{
		return invoker::invoke<BOOL, 0x14A90D05363A2A09, 0xA6FBDC>(entity);
	}

	FORCEINLINE auto HAS_ENTITY_ANIM_FINISHED(Entity entity, const char* animDict, const char* animName, int p3)
	{
		return invoker::invoke<BOOL, 0x67C276550F2DBF33, 0xA7281C>(entity, animDict, animName, p3);
	}

	FORCEINLINE auto HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(Entity entity)
	{
		return invoker::invoke<BOOL, 0x6E470765558FCD9E, 0xA7284C>(entity);
	}

	FORCEINLINE auto HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(Entity entity)
	{
		return invoker::invoke<BOOL, 0xF76AF9D45D6BDA45, 0xA72870>(entity);
	}

	FORCEINLINE auto HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(Entity entity)
	{
		return invoker::invoke<BOOL, 0xFFF4FB66DA549D0F, 0xA72894>(entity);
	}

	FORCEINLINE auto HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(Entity entity1, Entity entity2, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x9B3D4335E0EDB0BE, 0xA728B8>(entity1, entity2, p2);
	}

	FORCEINLINE auto HAS_ENTITY_CLEAR_LOS_TO_ENTITY(Entity entity1, Entity entity2, int traceType)
	{
		return invoker::invoke<BOOL, 0xAD915B5E38F323E5, 0xA728E8>(entity1, entity2, traceType);
	}

	FORCEINLINE auto HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(Entity entity1, Entity entity2, int traceType)
	{
		return invoker::invoke<BOOL, 0x4EAD67A3E57A9458, 0xA72914>(entity1, entity2, traceType);
	}

	FORCEINLINE auto HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(Entity entity1, Entity entity2)
	{
		return invoker::invoke<BOOL, 0x300A997AE991C0A8, 0xA72940>(entity1, entity2);
	}

	FORCEINLINE auto HAS_ENTITY_COLLIDED_WITH_ANYTHING(Entity entity)
	{
		return invoker::invoke<BOOL, 0x14E25ED5E75102C8, 0xA72968>(entity);
	}

	FORCEINLINE auto _GET_LAST_ENTITY_HIT_BY_ENTITY(Entity entity)
	{
		return invoker::invoke<Entity, 0xDA02F6FBBDEBF43D, 0xA71910>(entity);
	}

	FORCEINLINE auto GET_LAST_MATERIAL_HIT_BY_ENTITY(Entity entity)
	{
		return invoker::invoke<Hash, 0x28637BDE402A5913, 0xA71930>(entity);
	}

	FORCEINLINE auto GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(Entity entity)
	{
		return invoker::invoke<Vector3, 0xB6BF12B4CF844B3E, 0xA70910>(entity);
	}

	FORCEINLINE auto FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(Entity entity)
	{
		return invoker::invoke<void, 0x2B2ECB6F6371E59E, 0xA70438>(entity);
	}

	FORCEINLINE auto GET_ENTITY_ANIM_CURRENT_TIME(Entity entity, const char* animDict, const char* animName)
	{
		return invoker::invoke<float, 0x82E64DE58A6B84A8, 0xA70CA0>(entity, animDict, animName);
	}

	FORCEINLINE auto GET_ENTITY_ANIM_TOTAL_TIME(Entity entity, const char* animDict, const char* animName)
	{
		return invoker::invoke<float, 0x58C2315AA20FAF06, 0xA70CCC>(entity, animDict, animName);
	}

	FORCEINLINE auto GET_ANIM_DURATION(const char* animDict, const char* animName)
	{
		return invoker::invoke<float, 0x6CEF2D1ADD6A5E7F, 0xA70590>(animDict, animName);
	}

	FORCEINLINE auto GET_ENTITY_ATTACHED_TO(Entity entity)
	{
		return invoker::invoke<Entity, 0xAD0F9A0F639285AA, 0xA70CF8>(entity);
	}

	FORCEINLINE auto GET_ENTITY_COORDS(Entity entity, bool alive)
	{
		return invoker::invoke<Vector3, 0xD1A6A821F5AC81DB, 0xA70EE4>(entity, alive);
	}

	FORCEINLINE auto GET_ENTITY_FORWARD_VECTOR(Entity entity)
	{
		return invoker::invoke<Vector3, 0x90D0E0397D3F7690, 0xA70F34>(entity);
	}

	FORCEINLINE auto GET_ENTITY_FORWARD_X(Entity entity)
	{
		return invoker::invoke<float, 0xE4833C1EFC5928A6, 0xA70F7C>(entity);
	}

	FORCEINLINE auto GET_ENTITY_FORWARD_Y(Entity entity)
	{
		return invoker::invoke<float, 0xD7A7E267DEDA742E, 0xA70FA0>(entity);
	}

	FORCEINLINE auto GET_ENTITY_HEADING(Entity entity)
	{
		return invoker::invoke<float, 0xCFC0C995455A6204, 0xA70FC4>(entity);
	}

	FORCEINLINE auto GET_ENTITY_HEADING_FROM_EULERS(Entity entity)
	{
		return invoker::invoke<float, 0xC5A566D912050568, 0xA70FE8>(entity);
	}

	FORCEINLINE auto GET_ENTITY_HEALTH(Entity entity)
	{
		return invoker::invoke<int, 0x8D91ADE44AC79BC9, 0xA7100C>(entity);
	}

	FORCEINLINE auto GET_ENTITY_MAX_HEALTH(Entity entity)
	{
		return invoker::invoke<int, 0xF8A78594664D23A6, 0xA71110>(entity);
	}

	FORCEINLINE auto SET_ENTITY_MAX_HEALTH(Entity entity, int value)
	{
		return invoker::invoke<void, 0xF0259D91B002AE9F, 0xA75938>(entity, value);
	}

	FORCEINLINE auto GET_ENTITY_HEIGHT(Entity entity, float X, float Y, float Z, BOOL atTop, BOOL inWorldCoords)
	{
		return invoker::invoke<float, 0x12C7364D43F17CF1, 0xA7102C>(entity, X, Y, Z, atTop, inWorldCoords);
	}

	FORCEINLINE auto GET_ENTITY_HEIGHT_ABOVE_GROUND(Entity entity)
	{
		return invoker::invoke<float, 0x2399A6E4929050EE, 0xA71064>(entity);
	}

	FORCEINLINE auto GET_ENTITY_MATRIX(Entity entity, Vector3* forwardVector, Vector3* rightVector, Vector3* upVector, Vector3* position)
	{
		return invoker::invoke<void, 0xAAB58D9C726404C0, 0xA71100>(entity, forwardVector, rightVector, upVector, position);
	}

	FORCEINLINE auto GET_ENTITY_MODEL(Entity entity)
	{
		return invoker::invoke<Hash, 0x4B423FAA24E8ABF0, 0xA71130>(entity);
	}

	FORCEINLINE auto GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(Entity entity, float posX, float posY, float posZ)
	{
		return invoker::invoke<Vector3, 0xAD8278DAEC2CC059, 0xA71BC8>(entity, posX, posY, posZ);
	}

	FORCEINLINE auto GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Entity entity, float offsetX, float offsetY, float offsetZ)
	{
		return invoker::invoke<Vector3, 0xD1381B6E0F3987D, 0xA71C18>(entity, offsetX, offsetY, offsetZ);
	}

	FORCEINLINE auto GET_ENTITY_PITCH(Entity entity)
	{
		return invoker::invoke<float, 0xED4193081E867405, 0xA71174>(entity);
	}

	FORCEINLINE auto GET_ENTITY_QUATERNION(Entity entity, float* x, float* y, float* z, float* w)
	{
		return invoker::invoke<void, 0xB66CD98548798F26, 0xA711C8>(entity, x, y, z, w);
	}

	FORCEINLINE auto GET_ENTITY_ROLL(Entity entity)
	{
		return invoker::invoke<float, 0x5E674CD80769B53A, 0xA711F4>(entity);
	}

	FORCEINLINE auto GET_ENTITY_ROTATION(Entity entity, int rotationOrder)
	{
		return invoker::invoke<Vector3, 0x88124E0D60FB8D11, 0xA71218>(entity, rotationOrder);
	}

	FORCEINLINE auto GET_ENTITY_ROTATION_VELOCITY(Entity entity)
	{
		return invoker::invoke<Vector3, 0x47507DD57C93B472, 0xA7125C>(entity);
	}

	FORCEINLINE auto GET_ENTITY_SCRIPT(Entity entity, ScrHandle* script)
	{
		return invoker::invoke<const char*, 0xED22194AB8539910, 0xA712A4>(entity, script);
	}

	FORCEINLINE auto GET_ENTITY_SPEED(Entity entity)
	{
		return invoker::invoke<float, 0xDF93B3CFAC96698F, 0xA712C8>(entity);
	}

	FORCEINLINE auto GET_ENTITY_SPEED_VECTOR(Entity entity, BOOL relative)
	{
		return invoker::invoke<Vector3, 0x4ED40BE47D8C1896, 0xA712EC>(entity, relative);
	}

	FORCEINLINE auto GET_ENTITY_UPRIGHT_VALUE(Entity entity)
	{
		return invoker::invoke<float, 0x32CEF99C0D59B73, 0xA71380>(entity);
	}

	FORCEINLINE auto GET_ENTITY_VELOCITY(Entity entity)
	{
		return invoker::invoke<Vector3, 0xE5741C6B6539231F, 0xA713A4>(entity);
	}

	FORCEINLINE auto GET_OBJECT_INDEX_FROM_ENTITY_INDEX(Entity entity)
	{
		return invoker::invoke<Object, 0x646D07BB2D516CD, 0xA724AC>(entity);
	}

	FORCEINLINE auto GET_PED_INDEX_FROM_ENTITY_INDEX(Entity entity)
	{
		return invoker::invoke<Ped, 0xBD545F8729E9F413, 0xA724AC>(entity);
	}

	FORCEINLINE auto GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(Entity entity)
	{
		return invoker::invoke<Vehicle, 0xE93EDE86BBB66532, 0xA724AC>(entity);
	}

	FORCEINLINE auto GET_WORLD_POSITION_OF_ENTITY_BONE(Entity entity, int boneIndex)
	{
		return invoker::invoke<Vector3, 0x75DF72FC74EED046, 0xA724B8>(entity, boneIndex);
	}

	FORCEINLINE auto GET_NEAREST_PLAYER_TO_ENTITY(Entity entity)
	{
		return invoker::invoke<Player, 0xBD9259F686649141, 0xA71A18>(entity);
	}

	FORCEINLINE auto GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(Entity entity, int team)
	{
		return invoker::invoke<Player, 0x87384D2CF86135EB, 0xA71A48>(entity, team);
	}

	FORCEINLINE auto GET_NEAREST_PARTICIPANT_TO_ENTITY(Entity entity)
	{
		return invoker::invoke<int, 0xFFBD7052D65BE0FF, 0xA719F8>(entity);
	}

	FORCEINLINE auto GET_ENTITY_TYPE(Entity entity)
	{
		return invoker::invoke<int, 0x75A2D1BBA9D95D0E, 0xA71360>(entity);
	}

	FORCEINLINE auto GET_ENTITY_POPULATION_TYPE(Entity entity)
	{
		return invoker::invoke<int, 0xA598E8A456B0A2F7, 0xA71198>(entity);
	}

	FORCEINLINE auto IS_AN_ENTITY(ScrHandle handle)
	{
		return invoker::invoke<BOOL, 0x5DA1DE6C940D22C1, 0xA72D44>(handle);
	}

	FORCEINLINE auto IS_ENTITY_A_PED(Entity entity)
	{
		return invoker::invoke<BOOL, 0x101C509A6E67F99, 0xA73224>(entity);
	}

	FORCEINLINE auto IS_ENTITY_A_MISSION_ENTITY(Entity entity)
	{
		return invoker::invoke<BOOL, 0x110821AE6C63DD4F, 0xA73200>(entity);
	}

	FORCEINLINE auto IS_ENTITY_A_VEHICLE(Entity entity)
	{
		return invoker::invoke<BOOL, 0x55B80B6E7AB61270, 0xA73248>(entity);
	}

	FORCEINLINE auto IS_ENTITY_AN_OBJECT(Entity entity)
	{
		return invoker::invoke<BOOL, 0xBE79A96C521F4432, 0xA73094>(entity);
	}

	FORCEINLINE auto IS_ENTITY_AT_COORD(Entity entity, float xPos, float yPos, float zPos, float xSize, float ySize, float zSize, BOOL p7, BOOL p8, int p9)
	{
		return invoker::invoke<BOOL, 0x65FFA94B82A71741, 0xA73170>(entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9);
	}

	FORCEINLINE auto IS_ENTITY_AT_ENTITY(Entity entity1, Entity entity2, float xSize, float ySize, float zSize, BOOL p5, BOOL p6, int p7)
	{
		return invoker::invoke<BOOL, 0xFAA48325A90263BE, 0xA731B8>(entity1, entity2, xSize, ySize, zSize, p5, p6, p7);
	}

	FORCEINLINE auto IS_ENTITY_ATTACHED(Entity entity)
	{
		return invoker::invoke<BOOL, 0xA3736D76B0E93E93, 0xA730B8>(entity);
	}

	FORCEINLINE auto IS_ENTITY_ATTACHED_TO_ANY_OBJECT(Entity entity)
	{
		return invoker::invoke<BOOL, 0x592E6281C16BB0F2, 0xA730DC>(entity);
	}

	FORCEINLINE auto IS_ENTITY_ATTACHED_TO_ANY_PED(Entity entity)
	{
		return invoker::invoke<BOOL, 0x5B9219522937741D, 0xA73100>(entity);
	}

	FORCEINLINE auto IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(Entity entity)
	{
		return invoker::invoke<BOOL, 0xB431D60610E7F85F, 0xA73124>(entity);
	}

	FORCEINLINE auto IS_ENTITY_ATTACHED_TO_ENTITY(Entity from, Entity to)
	{
		return invoker::invoke<BOOL, 0x21478251925DBFD7, 0xA73148>(from, to);
	}

	FORCEINLINE auto IS_ENTITY_DEAD(Entity entity, BOOL p1)
	{
		return invoker::invoke<BOOL, 0x1C2F771CDC87A3A5, 0xA7326C>(entity, p1);
	}

	FORCEINLINE auto IS_ENTITY_IN_AIR(Entity entity)
	{
		return invoker::invoke<BOOL, 0x3F18810075C77D41, 0xA73298>(entity);
	}

	FORCEINLINE auto IS_ENTITY_IN_ANGLED_AREA(Entity entity, float x1, float y1, float z1, float x2, float y2, float z2, float width, BOOL debug, BOOL includeZ, Any p10)
	{
		return invoker::invoke<BOOL, 0x5105BE70DEF1F5FB, 0xA732BC>(entity, x1, y1, z1, x2, y2, z2, width, debug, includeZ, p10);
	}

	FORCEINLINE auto IS_ENTITY_IN_AREA(Entity entity, float x1, float y1, float z1, float x2, float y2, float z2, BOOL p7, BOOL p8, Any p9)
	{
		return invoker::invoke<BOOL, 0xFCEB38AB3EDCF9BE, 0xA73314>(entity, x1, y1, z1, x2, y2, z2, p7, p8, p9);
	}

	FORCEINLINE auto IS_ENTITY_IN_ZONE(Entity entity, const char* zone)
	{
		return invoker::invoke<BOOL, 0xDECEB0709855F876, 0xA73380>(entity, zone);
	}

	FORCEINLINE auto IS_ENTITY_IN_WATER(Entity entity)
	{
		return invoker::invoke<BOOL, 0x69799E0840A34AFB, 0xA7335C>(entity);
	}

	FORCEINLINE auto GET_ENTITY_SUBMERGED_LEVEL(Entity entity)
	{
		return invoker::invoke<float, 0x837FF265C016E3B7, 0xA7133C>(entity);
	}

	FORCEINLINE auto SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0xD1426896B0800D21, 0xA75A58>(entity, toggle);
	}

	FORCEINLINE auto IS_ENTITY_ON_SCREEN(Entity entity)
	{
		return invoker::invoke<BOOL, 0xCB5CAFF0A4A8B74B, 0xA733F0>(entity);
	}

	FORCEINLINE auto IS_ENTITY_PLAYING_ANIM(Entity entity, const char* animDict, const char* animName, int taskFlag)
	{
		return invoker::invoke<BOOL, 0x13CCB1AD131C1082, 0xA73414>(entity, animDict, animName, taskFlag);
	}

	FORCEINLINE auto IS_ENTITY_STATIC(Entity entity)
	{
		return invoker::invoke<BOOL, 0xD7186810BF44109, 0xA73444>(entity);
	}

	FORCEINLINE auto IS_ENTITY_TOUCHING_ENTITY(Entity entity, Entity targetEntity)
	{
		return invoker::invoke<BOOL, 0x685171EED42BC4DF, 0xA73468>(entity, targetEntity);
	}

	FORCEINLINE auto IS_ENTITY_TOUCHING_MODEL(Entity entity, Hash modelHash)
	{
		return invoker::invoke<BOOL, 0xE68E61D23A75BC3E, 0xA73490>(entity, modelHash);
	}

	FORCEINLINE auto IS_ENTITY_UPRIGHT(Entity entity, float angle)
	{
		return invoker::invoke<BOOL, 0xE99B9AC112F55D16, 0xA734B8>(entity, angle);
	}

	FORCEINLINE auto IS_ENTITY_UPSIDEDOWN(Entity entity)
	{
		return invoker::invoke<BOOL, 0xD1F1A906BA9226BE, 0xA734E0>(entity);
	}

	FORCEINLINE auto IS_ENTITY_VISIBLE(Entity entity)
	{
		return invoker::invoke<BOOL, 0xE5E2AE8B19267B8A, 0xA73504>(entity);
	}

	FORCEINLINE auto IS_ENTITY_VISIBLE_TO_SCRIPT(Entity entity)
	{
		return invoker::invoke<BOOL, 0x870372B586EFB3EE, 0xA7353C>(entity);
	}

	FORCEINLINE auto IS_ENTITY_OCCLUDED(Entity entity)
	{
		return invoker::invoke<BOOL, 0xF6C26AE940C14749, 0xA733A8>(entity);
	}

	FORCEINLINE auto WOULD_ENTITY_BE_OCCLUDED(Hash entityModelHash, float x, float y, float z, BOOL p4)
	{
		return invoker::invoke<BOOL, 0xB74F8EB686030603, 0xA777C8>(entityModelHash, x, y, z, p4);
	}

	FORCEINLINE auto IS_ENTITY_WAITING_FOR_WORLD_COLLISION(Entity entity)
	{
		return invoker::invoke<BOOL, 0x642A49B0C066F723, 0xA73560>(entity);
	}

	FORCEINLINE auto APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(Entity entity, int forceType, float x, float y, float z, BOOL p5, BOOL isDirectionRel, BOOL isForceRel, BOOL p8)
	{
		return invoker::invoke<void, 0x96CCECDBC57DA984, 0xA6E448>(entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8);
	}

	FORCEINLINE auto APPLY_FORCE_TO_ENTITY(Entity entity, int forceFlags, float x, float y, float z, float offX, float offY, float offZ, int boneIndex, BOOL isDirectionRel, BOOL ignoreUpVec, BOOL isForceRel, BOOL p12, BOOL p13)
	{
		return invoker::invoke<void, 0xE592D924D5438108, 0xA6E438>(entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13);
	}

	FORCEINLINE auto ATTACH_ENTITY_TO_ENTITY(Entity entity1, Entity entity2, int boneIndex, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, BOOL p9, BOOL useSoftPinning, BOOL collision, BOOL isPed, int vertexIndex, BOOL fixedRot, Any p15)
	{
		return invoker::invoke<void, 0x4D306DD94DD6FDBA, 0xA6E78C>(entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15);
	}

	FORCEINLINE auto ATTACH_ENTITY_BONE_TO_ENTITY_BONE(Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, BOOL p4, BOOL p5)
	{
		return invoker::invoke<void, 0x8026FC64F8CCD292, 0xA6E71C>(entity1, entity2, boneIndex1, boneIndex2, p4, p5);
	}

	FORCEINLINE auto ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, BOOL p4, BOOL p5)
	{
		return invoker::invoke<void, 0xB30977F20556F296, 0xA6E754>(entity1, entity2, boneIndex1, boneIndex2, p4, p5);
	}

	FORCEINLINE auto ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, float xPos1, float yPos1, float zPos1, float xPos2, float yPos2, float zPos2, float xRot, float yRot, float zRot, float breakForce, BOOL fixedRot, BOOL p15, BOOL collision, BOOL p17, int p18)
	{
		return invoker::invoke<void, 0xDE55146A7765454D, 0xA6E79C>(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18);
	}

	FORCEINLINE auto ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS(Entity firstEntityIndex, Entity secondEntityIndex, int firstEntityBoneIndex, int secondEntityBoneIndex, float secondEntityOffsetX, float secondEntityOffsetY, float secondEntityOffsetZ, float firstEntityOffsetX, float firstEntityOffsetY, float firstEntityOffsetZ, float vecRotationX, float vecRotationY, float vecRotationZ, float physicalStrength, BOOL constrainRotation, BOOL doInitialWarp, BOOL collideWithEntity, BOOL addInitialSeperation, int rotOrder, float invMassScaleA, float invMassScaleB)
	{
		return invoker::invoke<void, 0x168A09D1B25B0BA4, 0xA6E7AC>(firstEntityIndex, secondEntityIndex, firstEntityBoneIndex, secondEntityBoneIndex, secondEntityOffsetX, secondEntityOffsetY, secondEntityOffsetZ, firstEntityOffsetX, firstEntityOffsetY, firstEntityOffsetZ, vecRotationX, vecRotationY, vecRotationZ, physicalStrength, constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation, rotOrder, invMassScaleA, invMassScaleB);
	}

	FORCEINLINE auto PROCESS_ENTITY_ATTACHMENTS(Entity entity)
	{
		return invoker::invoke<void, 0xD84113E3B923524, 0xA74528>(entity);
	}

	FORCEINLINE auto GET_ENTITY_BONE_INDEX_BY_NAME(Entity entity, const char* boneName)
	{
		return invoker::invoke<int, 0x365DC1E8054AF31A, 0xA70D38>(entity, boneName);
	}

	FORCEINLINE auto CLEAR_ENTITY_LAST_DAMAGE_ENTITY(Entity entity)
	{
		return invoker::invoke<void, 0xE4DC7B3DD712372B, 0xA6ED98>(entity);
	}

	FORCEINLINE auto DELETE_ENTITY(Entity* entity)
	{
		return invoker::invoke<void, 0x81A7F3CD719DD53B, 0xA6F8A0>(entity);
	}

	FORCEINLINE auto DETACH_ENTITY(Entity entity, BOOL dynamic, BOOL collision)
	{
		return invoker::invoke<void, 0x837D67618BF89034, 0xA6F8F4>(entity, dynamic, collision);
	}

	FORCEINLINE auto FREEZE_ENTITY_POSITION(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x5D7CD709B34C90F0, 0xA7050C>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x11C125313CB8ADA2, 0xA75A88>(entity, toggle);
	}

	FORCEINLINE auto PLAY_ENTITY_ANIM(Entity entity, const char* animName, const char* animDict, float p3, BOOL loop, BOOL stayInAnim, BOOL p6, float delta, Any bitset)
	{
		return invoker::invoke<BOOL, 0x5ED9595F4AC7D134, 0xA74074>(entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset);
	}

	FORCEINLINE auto PLAY_SYNCHRONIZED_ENTITY_ANIM(Entity entity, int syncedScene, const char* animation, const char* propName, float p4, float p5, Any p6, float p7)
	{
		return invoker::invoke<BOOL, 0x381D671BCFC294D9, 0xA74320>(entity, syncedScene, animation, propName, p4, p5, p6, p7);
	}

	FORCEINLINE auto PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(float x1, float y1, float z1, float x2, Any y2, float z2, const char* p6, const char* p7, float p8, float p9, Any p10, float p11)
	{
		return invoker::invoke<BOOL, 0xB75A7F8E568F3BE6, 0xA7437C>(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9, p10, p11);
	}

	FORCEINLINE auto STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(float x1, float y1, float z1, float x2, Any y2, float z2)
	{
		return invoker::invoke<BOOL, 0xDA2A1BB9D3A890AC, 0xA771EC>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto STOP_ENTITY_ANIM(Entity entity, const char* animation, const char* animGroup, float p3)
	{
		return invoker::invoke<BOOL, 0x1D949F0AD44C7F05, 0xA77060>(entity, animation, animGroup, p3);
	}

	FORCEINLINE auto STOP_SYNCHRONIZED_ENTITY_ANIM(Entity entity, float p1, BOOL p2)
	{
		return invoker::invoke<BOOL, 0xC0086E5CBF13BBF7, 0xA771BC>(entity, p1, p2);
	}

	FORCEINLINE auto HAS_ANIM_EVENT_FIRED(Entity entity, Hash actionHash)
	{
		return invoker::invoke<BOOL, 0x5D640DD02AFD9F75, 0xA7271C>(entity, actionHash);
	}

	FORCEINLINE auto FIND_ANIM_EVENT_PHASE(const char* animDictionary, const char* animName, const char* p2, Any* p3, Any* p4)
	{
		return invoker::invoke<BOOL, 0xA2A6AE50772C4FDB, 0xA70384>(animDictionary, animName, p2, p3, p4);
	}

	FORCEINLINE auto SET_ENTITY_ANIM_CURRENT_TIME(Entity entity, const char* animDictionary, const char* animName, float time)
	{
		return invoker::invoke<void, 0x6D75623C644D6F83, 0xA75644>(entity, animDictionary, animName, time);
	}

	FORCEINLINE auto SET_ENTITY_ANIM_SPEED(Entity entity, const char* animDictionary, const char* animName, float speedMultiplier)
	{
		return invoker::invoke<void, 0x458AA1A01F53901E, 0xA7565C>(entity, animDictionary, animName, speedMultiplier);
	}

	FORCEINLINE auto SET_ENTITY_AS_MISSION_ENTITY(Entity entity, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xEE0BCDB1B5E36BCB, 0xA75674>(entity, p1, p2);
	}

	FORCEINLINE auto SET_ENTITY_AS_NO_LONGER_NEEDED(Entity* entity)
	{
		return invoker::invoke<void, 0x76AD45C3946F87DD, 0xA76348>(entity);
	}

	FORCEINLINE auto SET_PED_AS_NO_LONGER_NEEDED(Ped* ped)
	{
		return invoker::invoke<void, 0xF09E30AF1B8FB379, 0xA76348>(ped);
	}

	FORCEINLINE auto SET_VEHICLE_AS_NO_LONGER_NEEDED(Vehicle* vehicle)
	{
		return invoker::invoke<void, 0x68298CA6191CDFDB, 0xA76348>(vehicle);
	}

	FORCEINLINE auto SET_OBJECT_AS_NO_LONGER_NEEDED(Object* object)
	{
		return invoker::invoke<void, 0xB3B56385ECA230B4, 0xA76348>(object);
	}

	FORCEINLINE auto SET_ENTITY_CAN_BE_DAMAGED(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x999C62072AF920FD, 0xA756A0>(entity, toggle);
	}

	FORCEINLINE auto GET_ENTITY_CAN_BE_DAMAGED(Entity entity)
	{
		return invoker::invoke<BOOL, 0xCC7210A943D5E698, 0xA70E8C>(entity);
	}

	FORCEINLINE auto SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(Entity entity, BOOL bCanBeDamaged, int relGroup)
	{
		return invoker::invoke<void, 0x5355DCB5D35ADF0F, 0xA756B4>(entity, bCanBeDamaged, relGroup);
	}

	FORCEINLINE auto SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x8FEAF7F0538CEF55, 0xA756F0>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0xE78E66BE6EB7D534, 0xA756CC>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_COLLISION(Entity entity, BOOL toggle, BOOL keepPhysics)
	{
		return invoker::invoke<void, 0x44C48AC14D3C09ED, 0xA75704>(entity, toggle, keepPhysics);
	}

	FORCEINLINE auto GET_ENTITY_COLLISION_DISABLED(Entity entity)
	{
		return invoker::invoke<BOOL, 0x8473361800D1B85B, 0xA70EB0>(entity);
	}

	FORCEINLINE auto SET_ENTITY_COMPLETELY_DISABLE_COLLISION(Entity entity, BOOL toggle, BOOL keepPhysics)
	{
		return invoker::invoke<void, 0x52528272B59EBA11, 0xA75724>(entity, toggle, keepPhysics);
	}

	FORCEINLINE auto SET_ENTITY_COORDS(Entity entity, float xPos, float yPos, float zPos, BOOL xAxis, BOOL yAxis, BOOL zAxis, BOOL clearArea)
	{
		return invoker::invoke<void, 0xB2BD5837A8D3CEDA, 0xA75744>(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea);
	}

	FORCEINLINE auto SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(Entity entity, float xPos, float yPos, float zPos, BOOL alive, BOOL deadFlag, BOOL ragdollFlag, BOOL clearArea)
	{
		return invoker::invoke<void, 0x4FFCA145489D86B7, 0xA757C4>(entity, xPos, yPos, zPos, alive, deadFlag, ragdollFlag, clearArea);
	}

	FORCEINLINE auto SET_ENTITY_COORDS_NO_OFFSET(Entity entity, float xPos, float yPos, float zPos, BOOL xAxis, BOOL yAxis, BOOL zAxis)
	{
		return invoker::invoke<void, 0x62C438C53BB57AFD, 0xA7578C>(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis);
	}

	FORCEINLINE auto SET_ENTITY_DYNAMIC(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0xC7D381E526A969D3, 0xA7580C>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_HEADING(Entity entity, float heading)
	{
		return invoker::invoke<void, 0x5C96CEA06531AB03, 0xA75844>(entity, heading);
	}

	FORCEINLINE auto SET_ENTITY_HEALTH(Entity entity, int health, Entity instigator, Hash weaponType)
	{
		return invoker::invoke<void, 0xD25E9BDC14A0B649, 0xA75854>(entity, health, instigator, weaponType);
	}

	FORCEINLINE auto SET_ENTITY_INVINCIBLE(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x935364B4448CD584, 0xA758AC>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_IS_TARGET_PRIORITY(Entity entity, BOOL p1, float p2)
	{
		return invoker::invoke<void, 0x87EDE48547CC8942, 0xA758CC>(entity, p1, p2);
	}

	FORCEINLINE auto SET_ENTITY_LIGHTS(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x4CD0763EB5DCD503, 0xA758E4>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_LOAD_COLLISION_FLAG(Entity entity, BOOL toggle, Any p2)
	{
		return invoker::invoke<void, 0x788F35D395511DFE, 0xA758F8>(entity, toggle, p2);
	}

	FORCEINLINE auto HAS_COLLISION_LOADED_AROUND_ENTITY(Entity entity)
	{
		return invoker::invoke<BOOL, 0x5E22EA3310AF52EA, 0xA72758>(entity);
	}

	FORCEINLINE auto SET_ENTITY_MAX_SPEED(Entity entity, float speed)
	{
		return invoker::invoke<void, 0xB4E9A7A3A518ECC1, 0xA75948>(entity, speed);
	}

	FORCEINLINE auto SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x1F7539C841C2A71F, 0xA759AC>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(Entity entity, BOOL p1, Any p2)
	{
		return invoker::invoke<void, 0x7AF89DBF250A2C27, 0xA759C0>(entity, p1, p2);
	}

	FORCEINLINE auto SET_ENTITY_PROOFS(Entity entity, BOOL bulletProof, BOOL fireProof, BOOL explosionProof, BOOL collisionProof, BOOL meleeProof, BOOL steamProof, BOOL p7, BOOL waterProof)
	{
		return invoker::invoke<void, 0xD0F1DB0E50B367AD, 0xA759D8>(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, waterProof);
	}

	FORCEINLINE auto GET_ENTITY_PROOFS(Entity entity, BOOL* bulletProof, BOOL* fireProof, BOOL* explosionProof, BOOL* collisionProof, BOOL* meleeProof, BOOL* steamProof, BOOL* p7, BOOL* drownProof)
	{
		return invoker::invoke<BOOL, 0x3A4536D7E89CD377, 0xA711B8>(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, drownProof);
	}

	FORCEINLINE auto SET_ENTITY_QUATERNION(Entity entity, float x, float y, float z, float w)
	{
		return invoker::invoke<void, 0xF425E0B05426E088, 0xA759E8>(entity, x, y, z, w);
	}

	FORCEINLINE auto SET_ENTITY_RECORDS_COLLISIONS(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x3A95CBA6857C4C37, 0xA75A18>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_ROTATION(Entity entity, float pitch, float roll, float yaw, int rotationOrder, BOOL p5)
	{
		return invoker::invoke<void, 0xCF39804E8C88080E, 0xA75A6C>(entity, pitch, roll, yaw, rotationOrder, p5);
	}

	FORCEINLINE auto SET_ENTITY_VISIBLE(Entity entity, BOOL toggle, BOOL p2)
	{
		return invoker::invoke<void, 0x4285E11B28063EE0, 0xA75AE0>(entity, toggle, p2);
	}

	FORCEINLINE auto SET_ENTITY_WATER_REFLECTION_FLAG(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x119BDA4392B5BAB2, 0xA75AFC>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_MIRROR_REFLECTION_FLAG(Entity entity, BOOL p1)
	{
		return invoker::invoke<void, 0xDE9AC11F2927457D, 0xA75958>(entity, p1);
	}

	FORCEINLINE auto SET_ENTITY_VELOCITY(Entity entity, float x, float y, float z)
	{
		return invoker::invoke<void, 0x1AB7223AC0702871, 0xA75AD0>(entity, x, y, z);
	}

	FORCEINLINE auto SET_ENTITY_ANGULAR_VELOCITY(Entity entity, float x, float y, float z)
	{
		return invoker::invoke<void, 0x7B6B10D7260C93CF, 0xA75634>(entity, x, y, z);
	}

	FORCEINLINE auto SET_ENTITY_HAS_GRAVITY(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0xBF861D73D95BF415, 0xA75830>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_LOD_DIST(Entity entity, int value)
	{
		return invoker::invoke<void, 0xF88FC425EC7D675D, 0xA75928>(entity, value);
	}

	FORCEINLINE auto GET_ENTITY_LOD_DIST(Entity entity)
	{
		return invoker::invoke<int, 0x5748CF36AE9EC4E1, 0xA710D0>(entity);
	}

	FORCEINLINE auto SET_ENTITY_ALPHA(Entity entity, int alphaLevel, BOOL skin)
	{
		return invoker::invoke<void, 0xC1DAC4DA85BB166D, 0xA75608>(entity, alphaLevel, skin);
	}

	FORCEINLINE auto GET_ENTITY_ALPHA(Entity entity)
	{
		return invoker::invoke<int, 0x3D2DD3A02C8AA9A8, 0xA70C80>(entity);
	}

	FORCEINLINE auto RESET_ENTITY_ALPHA(Entity entity)
	{
		return invoker::invoke<void, 0xC14A2FED36D0EBB9, 0xA74A58>(entity);
	}

	FORCEINLINE auto RESET_PICKUP_ENTITY_GLOW(Entity entity)
	{
		return invoker::invoke<void, 0x5145F9B426021578, 0xA74AB8>(entity);
	}

	FORCEINLINE auto SET_PICKUP_COLLIDES_WITH_PROJECTILES(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xD28214FC77C81F2E, 0xA7641C>(p0, p1);
	}

	FORCEINLINE auto SET_ENTITY_SORT_BIAS(Entity entity, float p1)
	{
		return invoker::invoke<void, 0xF1E557B19688B30D, 0xA75A9C>(entity, p1);
	}

	FORCEINLINE auto SET_ENTITY_ALWAYS_PRERENDER(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x5177DCE3DD6F271, 0xA75620>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_RENDER_SCORCHED(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x615DFA55885D5B3, 0xA75A44>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_TRAFFICLIGHT_OVERRIDE(Entity entity, int state)
	{
		return invoker::invoke<void, 0x20FF02ED0F707CBC, 0xA75AAC>(entity, state);
	}

	FORCEINLINE auto SET_ENTITY_IS_IN_VEHICLE(Entity entity)
	{
		return invoker::invoke<void, 0x1F6D8B404B68A2BC, 0xA758C0>(entity);
	}

	FORCEINLINE auto CREATE_MODEL_SWAP(float x, float y, float z, float radius, Hash originalModel, Hash newModel, BOOL p6)
	{
		return invoker::invoke<void, 0x7C601010148C8DDB, 0xA6EF68>(x, y, z, radius, originalModel, newModel, p6);
	}

	FORCEINLINE auto REMOVE_MODEL_SWAP(float x, float y, float z, float radius, Hash originalModel, Hash newModel, BOOL p6)
	{
		return invoker::invoke<void, 0xD80C3522AC21FDB8, 0xA747E8>(x, y, z, radius, originalModel, newModel, p6);
	}

	FORCEINLINE auto CREATE_MODEL_HIDE(float x, float y, float z, float radius, Hash modelHash, BOOL p5)
	{
		return invoker::invoke<void, 0xE226F16D30AF5945, 0xA6EF18>(x, y, z, radius, modelHash, p5);
	}

	FORCEINLINE auto CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(float x, float y, float z, float radius, Hash modelHash, BOOL p5)
	{
		return invoker::invoke<void, 0x77AE88CF56FF88EA, 0xA6EF40>(x, y, z, radius, modelHash, p5);
	}

	FORCEINLINE auto REMOVE_MODEL_HIDE(float x, float y, float z, float radius, Hash modelHash, BOOL p5)
	{
		return invoker::invoke<void, 0xC94AE68759E1B3BD, 0xA747CC>(x, y, z, radius, modelHash, p5);
	}

	FORCEINLINE auto CREATE_FORCED_OBJECT(float x, float y, float z, Any p3, Hash modelHash, BOOL p5)
	{
		return invoker::invoke<void, 0x9D23D954FF4403CD, 0xA6EEFC>(x, y, z, p3, modelHash, p5);
	}

	FORCEINLINE auto REMOVE_FORCED_OBJECT(float x, float y, float z, float p3, Hash modelHash)
	{
		return invoker::invoke<void, 0x66D6CECFEEC87130, 0xA747B8>(x, y, z, p3, modelHash);
	}

	FORCEINLINE auto SET_ENTITY_NO_COLLISION_ENTITY(Entity entity1, Entity entity2, BOOL thisFrameOnly)
	{
		return invoker::invoke<void, 0x15E1BBD4DB33542, 0xA75994>(entity1, entity2, thisFrameOnly);
	}

	FORCEINLINE auto SET_ENTITY_MOTION_BLUR(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0xD7AC50B9FB801C60, 0xA7596C>(entity, toggle);
	}

	FORCEINLINE auto SET_CAN_AUTO_VAULT_ON_ENTITY(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x6A3C9A5604F9F4C, 0xA7521C>(entity, toggle);
	}

	FORCEINLINE auto SET_CAN_CLIMB_ON_ENTITY(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0xE59BDA10CE05FD35, 0xA75230>(entity, toggle);
	}

	FORCEINLINE auto SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x5A91FB116578FE09, 0xA76B04>(entity, toggle);
	}

	FORCEINLINE auto SET_ENTITY_NOWEAPONDECALS(Entity entity, BOOL p1)
	{
		return invoker::invoke<void, 0x33D2D42AC3E42D0B, 0xA75980>(entity, p1);
	}

	FORCEINLINE auto SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(Entity entity, BOOL p1)
	{
		return invoker::invoke<void, 0xAC895C06C6322C1E, 0xA75ABC>(entity, p1);
	}

	FORCEINLINE auto GET_ENTITY_BONE_ROTATION(Entity entity, int boneIndex)
	{
		return invoker::invoke<Vector3, 0x8ED7A7A44B79007B, 0xA70E40>(entity, boneIndex);
	}

	FORCEINLINE auto GET_ENTITY_BONE_POSTION(Entity entity, int boneIndex)
	{
		return invoker::invoke<Vector3, 0x1D49B6C92B9A5B1C, 0xA70DF4>(entity, boneIndex);
	}

	FORCEINLINE auto GET_ENTITY_BONE_OBJECT_ROTATION(Entity entity, int boneIndex)
	{
		return invoker::invoke<Vector3, 0x5834A431DBD4B5E5, 0xA70DA8>(entity, boneIndex);
	}

	FORCEINLINE auto GET_ENTITY_BONE_OBJECT_POSTION(Entity entity, int boneIndex)
	{
		return invoker::invoke<Vector3, 0xD7F3495D8307C112, 0xA70D5C>(entity, boneIndex);
	}

	FORCEINLINE auto GET_ENTITY_BONE_COUNT(Entity entity)
	{
		return invoker::invoke<int, 0x132FBDC52691A1A7, 0xA70D18>(entity);
	}

	FORCEINLINE auto ENABLE_ENTITY_BULLET_COLLISION(Entity entity)
	{
		return invoker::invoke<void, 0x9C69236A3D0F1B96, 0xA70270>(entity);
	}

	FORCEINLINE auto SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(Entity entity1, Entity entity2)
	{
		return invoker::invoke<void, 0x6662B1F8A5BFA0F2, 0xA756E0>(entity1, entity2);
	}

	FORCEINLINE auto SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(Entity entity1, Entity entity2)
	{
		return invoker::invoke<void, 0x37419414971A4C4B, 0xA75690>(entity1, entity2);
	}

	FORCEINLINE auto SET_ALLOW_MIGRATE_TO_SPECTATOR(Entity entity, Any p1)
	{
		return invoker::invoke<void, 0xAD93DB374DA8B3C7, 0xA74D64>(entity, p1);
	}

	FORCEINLINE auto GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(Entity entity, Hash modelHash)
	{
		return invoker::invoke<Entity, 0x21B8871CE9CD1479, 0xA71150>(entity, modelHash);
	}

	FORCEINLINE auto SET_PICK_UP_BY_CARGOBOB_DISABLED(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x70BAF7723F26069A, 0xA76430>(entity, toggle);
	}

}
namespace TASK
{
	FORCEINLINE auto TASK_PAUSE(Ped ped, int ms)
	{
		return invoker::invoke<void, 0x5524CAF18378DF39, 0xD6CF3C>(ped, ms);
	}

	FORCEINLINE auto TASK_STAND_STILL(Ped ped, int time)
	{
		return invoker::invoke<void, 0xFD8B5F4BB15CD71, 0xD6D448>(ped, time);
	}

	FORCEINLINE auto TASK_JUMP(Ped ped, BOOL usePlayerLaunchForce, BOOL doSuperJump, BOOL useFullSuperJumpForce)
	{
		return invoker::invoke<void, 0xC3EBEA7530D64F53, 0xD6CD2C>(ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce);
	}

	FORCEINLINE auto TASK_COWER(Ped ped, int duration)
	{
		return invoker::invoke<void, 0xAFC7A89C990C4339, 0xD6C864>(ped, duration);
	}

	FORCEINLINE auto TASK_HANDS_UP(Ped ped, int duration, Ped facingPed, int timeToFacePed, int flags)
	{
		return invoker::invoke<void, 0xB1A40D00F279307, 0xD6CCC4>(ped, duration, facingPed, timeToFacePed, flags);
	}

	FORCEINLINE auto UPDATE_TASK_HANDS_UP_DURATION(Ped ped, int duration)
	{
		return invoker::invoke<void, 0xAD548E64669C4255, 0xD6DD98>(ped, duration);
	}

	FORCEINLINE auto TASK_OPEN_VEHICLE_DOOR(Ped ped, Vehicle vehicle, int timeOut, int seat, float speed)
	{
		return invoker::invoke<void, 0xFECF11FFA163942B, 0xD6CEB4>(ped, vehicle, timeOut, seat, speed);
	}

	FORCEINLINE auto TASK_ENTER_VEHICLE(Ped ped, Vehicle vehicle, int timeout, int seat, float speed, int flag, const char* overrideEntryClipsetName, Any p7)
	{
		return invoker::invoke<void, 0xEBA229B2E0BB05E0, 0xD6C8BC>(ped, vehicle, timeout, seat, speed, flag, overrideEntryClipsetName, p7);
	}

	FORCEINLINE auto TASK_LEAVE_VEHICLE(Ped ped, Vehicle vehicle, int flags)
	{
		return invoker::invoke<void, 0x23EB5FC236231892, 0xD6CD64>(ped, vehicle, flags);
	}

	FORCEINLINE auto TASK_GET_OFF_BOAT(Ped ped, Vehicle boat)
	{
		return invoker::invoke<void, 0x693BCB64E0E60254, 0xD6CA18>(ped, boat);
	}

	FORCEINLINE auto TASK_SKY_DIVE(Ped ped, BOOL instant)
	{
		return invoker::invoke<void, 0xF9185EBA84883764, 0xD6D39C>(ped, instant);
	}

	FORCEINLINE auto TASK_PARACHUTE(Ped ped, BOOL giveParachuteItem, BOOL instant)
	{
		return invoker::invoke<void, 0x2A82E9CBC48CF2F8, 0xD6CEE0>(ped, giveParachuteItem, instant);
	}

	FORCEINLINE auto TASK_PARACHUTE_TO_TARGET(Ped ped, float x, float y, float z)
	{
		return invoker::invoke<void, 0xD62DC69EB22834CE, 0xD6CEFC>(ped, x, y, z);
	}

	FORCEINLINE auto SET_PARACHUTE_TASK_TARGET(Ped ped, float x, float y, float z)
	{
		return invoker::invoke<void, 0x83834BBDF7CA6EC7, 0xD69B30>(ped, x, y, z);
	}

	FORCEINLINE auto SET_PARACHUTE_TASK_THRUST(Ped ped, float thrust)
	{
		return invoker::invoke<void, 0xA81F12900F3749B3, 0xD69B40>(ped, thrust);
	}

	FORCEINLINE auto TASK_RAPPEL_FROM_HELI(Ped ped, float minHeightAboveGround)
	{
		return invoker::invoke<void, 0xC52B4FFE6114ED5E, 0xD6D204>(ped, minHeightAboveGround);
	}

	FORCEINLINE auto TASK_VEHICLE_DRIVE_TO_COORD(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, Any p6, Hash vehicleModel, int drivingMode, float stopRange, float straightLineDistance)
	{
		return invoker::invoke<void, 0xCF6CC9EA0D2EFE23, 0xD6D744>(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, straightLineDistance);
	}

	FORCEINLINE auto TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int driveMode, float stopRange)
	{
		return invoker::invoke<void, 0x6C33493626F3C0D1, 0xD6D79C>(ped, vehicle, x, y, z, speed, driveMode, stopRange);
	}

	FORCEINLINE auto TASK_VEHICLE_DRIVE_WANDER(Ped ped, Vehicle vehicle, float speed, int drivingStyle)
	{
		return invoker::invoke<void, 0x7C8E9DE09D4AD3FF, 0xD6D7D4>(ped, vehicle, speed, drivingStyle);
	}

	FORCEINLINE auto TASK_FOLLOW_TO_OFFSET_OF_ENTITY(Ped ped, Entity entity, float offsetX, float offsetY, float offsetZ, float movementSpeed, int timeout, float stoppingRange, BOOL persistFollowing)
	{
		return invoker::invoke<void, 0x329B82704ED2A3E3, 0xD6C990>(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing);
	}

	FORCEINLINE auto TASK_GO_STRAIGHT_TO_COORD(Ped ped, float x, float y, float z, float speed, int timeout, float targetHeading, float distanceToSlide)
	{
		return invoker::invoke<void, 0x63C8DCBEC1CF8225, 0xD6CAD4>(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide);
	}

	FORCEINLINE auto TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(Ped ped, Entity entity, float x, float y, float z, float moveBlendRatio, int time)
	{
		return invoker::invoke<void, 0x3713EFBC9B9F5150, 0xD6CB0C>(ped, entity, x, y, z, moveBlendRatio, time);
	}

	FORCEINLINE auto TASK_ACHIEVE_HEADING(Ped ped, float heading, int timeout)
	{
		return invoker::invoke<void, 0x2280392018BC0DD3, 0xD6C690>(ped, heading, timeout);
	}

	FORCEINLINE auto TASK_FLUSH_ROUTE()
	{
		return invoker::invoke<void, 0x76FB64D39D380B3, 0xD6C930>();
	}

	FORCEINLINE auto TASK_EXTEND_ROUTE(float x, float y, float z)
	{
		return invoker::invoke<void, 0x8B59380D9D15EBCD, 0xD6C924>(x, y, z);
	}

	FORCEINLINE auto TASK_FOLLOW_POINT_ROUTE(Ped ped, float speed, int mode)
	{
		return invoker::invoke<void, 0xCEF5F1212D833FEF, 0xD6C97C>(ped, speed, mode);
	}

	FORCEINLINE auto TASK_GO_TO_ENTITY(Entity entity, Entity target, int duration, float distance, float moveBlendRatio, float slowDownDistance, int flags)
	{
		return invoker::invoke<void, 0xAB3658A740EED98E, 0xD6CBCC>(entity, target, duration, distance, moveBlendRatio, slowDownDistance, flags);
	}

	FORCEINLINE auto TASK_SMART_FLEE_COORD(Ped ped, float x, float y, float z, float distance, int time, BOOL preferPavements, BOOL quitIfOutOfRange)
	{
		return invoker::invoke<void, 0xFD251F92B546F389, 0xD6D3B0>(ped, x, y, z, distance, time, preferPavements, quitIfOutOfRange);
	}

	FORCEINLINE auto TASK_SMART_FLEE_PED(Ped ped, Ped fleeTarget, float safeDistance, int fleeTime, BOOL preferPavements, BOOL updateToNearestHatedPed)
	{
		return invoker::invoke<void, 0xD844F5E50DAB6FF7, 0xD6D3F0>(ped, fleeTarget, safeDistance, fleeTime, preferPavements, updateToNearestHatedPed);
	}

	FORCEINLINE auto TASK_REACT_AND_FLEE_PED(Ped ped, Ped fleeTarget)
	{
		return invoker::invoke<void, 0x3EE6720350A31CAB, 0xD6D214>(ped, fleeTarget);
	}

	FORCEINLINE auto TASK_SHOCKING_EVENT_REACT(Ped ped, int eventHandle)
	{
		return invoker::invoke<void, 0xDBFFE049CC0EA5E0, 0xD6D344>(ped, eventHandle);
	}

	FORCEINLINE auto TASK_WANDER_IN_AREA(Ped ped, float x, float y, float z, float radius, float minimalLength, float timeBetweenWalks)
	{
		return invoker::invoke<void, 0xE092C8C5A5EA5F57, 0xD6DA94>(ped, x, y, z, radius, minimalLength, timeBetweenWalks);
	}

	FORCEINLINE auto TASK_WANDER_STANDARD(Ped ped, float heading, int flags)
	{
		return invoker::invoke<void, 0x761F56E633460973, 0xD6DADC>(ped, heading, flags);
	}

	FORCEINLINE auto TASK_WANDER_SPECIFIC(Ped ped, const char* conditionalAnimGroupStr, const char* conditionalAnimStr, float heading)
	{
		return invoker::invoke<void, 0xFDBB3471DA96A6F4, 0xD6DAC4>(ped, conditionalAnimGroupStr, conditionalAnimStr, heading);
	}

	FORCEINLINE auto TASK_VEHICLE_PARK(Ped ped, Vehicle vehicle, float x, float y, float z, float heading, int mode, float radius, BOOL keepEngineOn)
	{
		return invoker::invoke<void, 0x2D864CC37DDFA963, 0xD6D9FC>(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn);
	}

	FORCEINLINE auto TASK_STEALTH_KILL(Ped killer, Ped target, Hash stealthKillActionResultHash, float desiredMoveBlendRatio, int stealthFlags)
	{
		return invoker::invoke<void, 0x29EE4DD912B2F524, 0xD6D4C8>(killer, target, stealthKillActionResultHash, desiredMoveBlendRatio, stealthFlags);
	}

	FORCEINLINE auto TASK_PLANT_BOMB(Ped ped, float x, float y, float z, float heading)
	{
		return invoker::invoke<void, 0xA15E9E221AF6CC4, 0xD6D094>(ped, x, y, z, heading);
	}

	FORCEINLINE auto TASK_FOLLOW_NAV_MESH_TO_COORD(Ped ped, float x, float y, float z, float moveBlendRatio, int time, float targetRadius, int flags, float targetHeading)
	{
		return invoker::invoke<void, 0xA966E518B752B92A, 0xD6C938>(ped, x, y, z, moveBlendRatio, time, targetRadius, flags, targetHeading);
	}

	FORCEINLINE auto TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(Ped ped, float x, float y, float z, float moveBlendRatio, int time, float targetRadius, int flags, float slideToCoordHeading, float maxSlopeNavigable, float clampMaxSearchDistance, float targetHeading)
	{
		return invoker::invoke<void, 0x505D1BE21E9DF7E0, 0xD94744>(ped, x, y, z, moveBlendRatio, time, targetRadius, flags, slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading);
	}

	FORCEINLINE auto SET_PED_PATH_CAN_USE_CLIMBOVERS(Ped ped, BOOL Toggle)
	{
		return invoker::invoke<void, 0x176A19E4589CC2C6, 0xD69CF8>(ped, Toggle);
	}

	FORCEINLINE auto SET_PED_PATH_CAN_USE_LADDERS(Ped ped, BOOL Toggle)
	{
		return invoker::invoke<void, 0xDAB3EED1D80C2712, 0xD69D0C>(ped, Toggle);
	}

	FORCEINLINE auto SET_PED_PATH_CAN_DROP_FROM_HEIGHT(Ped ped, BOOL Toggle)
	{
		return invoker::invoke<void, 0x828D385CED572E95, 0xD69CE4>(ped, Toggle);
	}

	FORCEINLINE auto SET_PED_PATH_CLIMB_COST_MODIFIER(Ped ped, float modifier)
	{
		return invoker::invoke<void, 0x1DEB47A41CF1C17E, 0xD69D20>(ped, modifier);
	}

	FORCEINLINE auto SET_PED_PATH_MAY_ENTER_WATER(Ped ped, BOOL mayEnterWater)
	{
		return invoker::invoke<void, 0x753DE44F9049D173, 0xD69D30>(ped, mayEnterWater);
	}

	FORCEINLINE auto SET_PED_PATH_PREFER_TO_AVOID_WATER(Ped ped, BOOL avoidWater)
	{
		return invoker::invoke<void, 0xF24ADF73381B85C1, 0xD69D44>(ped, avoidWater);
	}

	FORCEINLINE auto SET_PED_PATH_AVOID_FIRE(Ped ped, BOOL avoidFire)
	{
		return invoker::invoke<void, 0x5514EB508DD5A132, 0xD69CD0>(ped, avoidFire);
	}

	FORCEINLINE auto SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(float height)
	{
		return invoker::invoke<void, 0x78081A114400EA30, 0xD696FC>(height);
	}

	FORCEINLINE auto GET_NAVMESH_ROUTE_DISTANCE_REMAINING(Ped ped, float* distanceRemaining, BOOL* isPathReady)
	{
		return invoker::invoke<int, 0x32ABB6392C917150, 0xD62F64>(ped, distanceRemaining, isPathReady);
	}

	FORCEINLINE auto GET_NAVMESH_ROUTE_RESULT(Ped ped)
	{
		return invoker::invoke<int, 0x604F9A1C471B5137, 0xD62F8C>(ped);
	}

	FORCEINLINE auto IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(Ped ped)
	{
		return invoker::invoke<BOOL, 0x19B15B2D6C049166, 0xD65238>(ped);
	}

	FORCEINLINE auto TASK_GO_TO_COORD_ANY_MEANS(Ped ped, float x, float y, float z, float moveBlendRatio, Vehicle vehicle, BOOL useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets)
	{
		return invoker::invoke<void, 0x30FAA55EAF29F9BE, 0xD6CB44>(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets);
	}

	FORCEINLINE auto TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(Ped ped, float x, float y, float z, float moveBlendRatio, Vehicle vehicle, BOOL useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets, float extraVehToTargetDistToPreferVehicle, float driveStraightLineDistance, int extraFlags, float warpTimerMS)
	{
		return invoker::invoke<void, 0xE4250AD3565B478E, 0xD6CB8C>(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, warpTimerMS);
	}

	FORCEINLINE auto TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(Ped ped, float x, float y, float z, float moveBlendRatio, Vehicle vehicle, BOOL useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets, float extraVehToTargetDistToPreferVehicle, float driveStraightLineDistance, int extraFlags, float cruiseSpeed, float targetArriveDist)
	{
		return invoker::invoke<void, 0x8B561CAF821BBFCE, 0xD6CB9C>(ped, x, y, z, moveBlendRatio, vehicle, useLongRangeVehiclePathing, drivingFlags, maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance, extraFlags, cruiseSpeed, targetArriveDist);
	}

	FORCEINLINE auto TASK_PLAY_ANIM(Ped ped, const char* animDictionary, const char* animationName, float blendInSpeed, float blendOutSpeed, int duration, int flag, float playbackRate, BOOL lockX, BOOL lockY, BOOL lockZ)
	{
		return invoker::invoke<void, 0x10425721983AE158, 0xD6D0A8>(ped, animDictionary, animationName, blendInSpeed, blendOutSpeed, duration, flag, playbackRate, lockX, lockY, lockZ);
	}

	FORCEINLINE auto TASK_PLAY_ANIM_ADVANCED(Ped ped, const char* animDict, const char* animName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float animEnterSpeed, float animExitSpeed, int duration, Any flag, float animTime, int rotOrder, int ikFlags)
	{
		return invoker::invoke<void, 0x9F5225AA1E102B7A, 0xD6D0B8>(ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed, duration, flag, animTime, rotOrder, ikFlags);
	}

	FORCEINLINE auto STOP_ANIM_TASK(Entity entity, const char* animDictionary, const char* animationName, float blendDelta)
	{
		return invoker::invoke<void, 0x8D8528BA8E43641, 0xD6C4EC>(entity, animDictionary, animationName, blendDelta);
	}

	FORCEINLINE auto TASK_SCRIPTED_ANIMATION(Ped ped, int* priorityLowData, int* priorityMidData, int* priorityHighData, float blendInDelta, float blendOutDelta)
	{
		return invoker::invoke<void, 0x70BCE9B2354D8E3D, 0xD6D238>(ped, priorityLowData, priorityMidData, priorityHighData, blendInDelta, blendOutDelta);
	}

	FORCEINLINE auto PLAY_ENTITY_SCRIPTED_ANIM(Entity entity, int* priorityLowData, int* priorityMidData, int* priorityHighData, float blendInDelta, float blendOutDelta)
	{
		return invoker::invoke<void, 0x24E88846ADF60E68, 0xD67874>(entity, priorityLowData, priorityMidData, priorityHighData, blendInDelta, blendOutDelta);
	}

	FORCEINLINE auto STOP_ANIM_PLAYBACK(Entity entity, int priority, BOOL secondary)
	{
		return invoker::invoke<void, 0xE1C7B23ECC5080B5, 0xD6C4D4>(entity, priority, secondary);
	}

	FORCEINLINE auto SET_ANIM_WEIGHT(Entity entity, float weight, int priority, int index, BOOL secondary)
	{
		return invoker::invoke<void, 0xD395C44C3F7C3BB4, 0xD68E58>(entity, weight, priority, index, secondary);
	}

	FORCEINLINE auto SET_ANIM_PHASE(Entity entity, float phase, int priority, BOOL secondary)
	{
		return invoker::invoke<void, 0x8EF3D1BEA34BCB15, 0xD68E20>(entity, phase, priority, secondary);
	}

	FORCEINLINE auto SET_ANIM_RATE(Entity entity, float rate, int priority, BOOL secondary)
	{
		return invoker::invoke<void, 0x5D15315EA989E69A, 0xD68E3C>(entity, rate, priority, secondary);
	}

	FORCEINLINE auto SET_ANIM_LOOPED(Entity entity, BOOL looped, int priority, BOOL secondary)
	{
		return invoker::invoke<void, 0x5EFA80915529F5C1, 0xD68E00>(entity, looped, priority, secondary);
	}

	FORCEINLINE auto TASK_PLAY_PHONE_GESTURE_ANIMATION(Ped ped, const char* animDict, const char* animation, const char* boneMaskType, float blendInDuration, float blendOutDuration, BOOL isLooping, BOOL holdLastFrame)
	{
		return invoker::invoke<void, 0xF6ED7D9DE21CF122, 0xD6D0C8>(ped, animDict, animation, boneMaskType, blendInDuration, blendOutDuration, isLooping, holdLastFrame);
	}

	FORCEINLINE auto TASK_STOP_PHONE_GESTURE_ANIMATION(Ped ped, float blendOutOverride)
	{
		return invoker::invoke<void, 0xA284376577BBECE, 0xD6D4F4>(ped, blendOutOverride);
	}

	FORCEINLINE auto IS_PLAYING_PHONE_GESTURE_ANIM(Ped ped)
	{
		return invoker::invoke<BOOL, 0x5BBE12D14B71C12A, 0xD6591C>(ped);
	}

	FORCEINLINE auto GET_PHONE_GESTURE_ANIM_CURRENT_TIME(Ped ped)
	{
		return invoker::invoke<float, 0x51495BC78F70B066, 0xD63450>(ped);
	}

	FORCEINLINE auto GET_PHONE_GESTURE_ANIM_TOTAL_TIME(Ped ped)
	{
		return invoker::invoke<float, 0x7B426C13A6E40397, 0xD63474>(ped);
	}

	FORCEINLINE auto TASK_VEHICLE_PLAY_ANIM(Vehicle vehicle, const char* animationSet, const char* animationName)
	{
		return invoker::invoke<void, 0x3D98759970C5FCC9, 0xD6DA40>(vehicle, animationSet, animationName);
	}

	FORCEINLINE auto TASK_LOOK_AT_COORD(Entity entity, float x, float y, float z, int duration, int flags, int priority)
	{
		return invoker::invoke<void, 0xE237FA90A8AFEE59, 0xD6CD78>(entity, x, y, z, duration, flags, priority);
	}

	FORCEINLINE auto TASK_LOOK_AT_ENTITY(Ped ped, Entity lookAt, int duration, int flags, int priority)
	{
		return invoker::invoke<void, 0xE67051907958B5EB, 0xD6CDA4>(ped, lookAt, duration, flags, priority);
	}

	FORCEINLINE auto TASK_CLEAR_LOOK_AT(Ped ped)
	{
		return invoker::invoke<void, 0x84B06A81C98DA4B8, 0xD6C7BC>(ped);
	}

	FORCEINLINE auto OPEN_SEQUENCE_TASK(int* taskSequenceId)
	{
		return invoker::invoke<void, 0xB5396F1FB088FE38, 0xD66968>(taskSequenceId);
	}

	FORCEINLINE auto CLOSE_SEQUENCE_TASK(int taskSequenceId)
	{
		return invoker::invoke<void, 0x93C0674FC00824D0, 0xD61C14>(taskSequenceId);
	}

	FORCEINLINE auto TASK_PERFORM_SEQUENCE(Ped ped, int taskSequenceId)
	{
		return invoker::invoke<void, 0x4BD42B0527065BB6, 0xD6CFA8>(ped, taskSequenceId);
	}

	FORCEINLINE auto TASK_PERFORM_SEQUENCE_LOCALLY(Ped ped, int taskSequenceId)
	{
		return invoker::invoke<void, 0x9C4B07B40A05D45D, 0xD6CFD0>(ped, taskSequenceId);
	}

	FORCEINLINE auto CLEAR_SEQUENCE_TASK(int* taskSequenceId)
	{
		return invoker::invoke<void, 0xD0557B139A542F12, 0xD61B98>(taskSequenceId);
	}

	FORCEINLINE auto SET_SEQUENCE_TO_REPEAT(int taskSequenceId, BOOL repeat)
	{
		return invoker::invoke<void, 0xC58DD79B4CA8487F, 0xD6A180>(taskSequenceId, repeat);
	}

	FORCEINLINE auto GET_SEQUENCE_PROGRESS(Ped ped)
	{
		return invoker::invoke<int, 0x89EC60A4485FD199, 0xD637E4>(ped);
	}

	FORCEINLINE auto GET_IS_TASK_ACTIVE(Ped ped, int taskIndex)
	{
		return invoker::invoke<BOOL, 0x12623527E5B8AB7C, 0xD62BD0>(ped, taskIndex);
	}

	FORCEINLINE auto GET_SCRIPT_TASK_STATUS(Ped ped, Hash taskHash)
	{
		return invoker::invoke<int, 0x9B5C1660CCDF7189, 0xD637A0>(ped, taskHash);
	}

	FORCEINLINE auto GET_ACTIVE_VEHICLE_MISSION_TYPE(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x927395DFE42BE071, 0xD62414>(vehicle);
	}

	FORCEINLINE auto TASK_LEAVE_ANY_VEHICLE(Ped ped, int delayTime, int flags)
	{
		return invoker::invoke<void, 0x92B9247AF00F5CF, 0xD6CD50>(ped, delayTime, flags);
	}

	FORCEINLINE auto TASK_AIM_GUN_SCRIPTED(Ped ped, Hash scriptTask, BOOL disableBlockingClip, BOOL instantBlendToAim)
	{
		return invoker::invoke<void, 0x67F37AE193B6C0E0, 0xD6C700>(ped, scriptTask, disableBlockingClip, instantBlendToAim);
	}

	FORCEINLINE auto TASK_AIM_GUN_SCRIPTED_WITH_TARGET(Ped ped, Ped target, float x, float y, float z, int gunTaskType, BOOL disableBlockingClip, BOOL forceAim)
	{
		return invoker::invoke<void, 0x948C59076639BD77, 0xD6C720>(ped, target, x, y, z, gunTaskType, disableBlockingClip, forceAim);
	}

	FORCEINLINE auto UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(Ped ped, Ped target, float x, float y, float z, BOOL disableBlockingClip)
	{
		return invoker::invoke<void, 0x287D43AF8CDBA667, 0xD6DD7C>(ped, target, x, y, z, disableBlockingClip);
	}

	FORCEINLINE auto GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(int gunTaskType)
	{
		return invoker::invoke<const char*, 0x71929CB75E82CF02, 0xD62624>(gunTaskType);
	}

	FORCEINLINE auto TASK_AIM_GUN_AT_ENTITY(Ped ped, Entity entity, int duration, BOOL instantBlendToAim)
	{
		return invoker::invoke<void, 0x646DE293036A3499, 0xD6C6E4>(ped, entity, duration, instantBlendToAim);
	}

	FORCEINLINE auto TASK_TURN_PED_TO_FACE_ENTITY(Ped ped, Entity entity, int duration)
	{
		return invoker::invoke<void, 0xE95B96CFEFE7B61, 0xD6D678>(ped, entity, duration);
	}

	FORCEINLINE auto TASK_AIM_GUN_AT_COORD(Ped ped, float x, float y, float z, int time, BOOL instantBlendToAim, BOOL playAnimIntro)
	{
		return invoker::invoke<void, 0xC86A930D894F8CE2, 0xD6C6B4>(ped, x, y, z, time, instantBlendToAim, playAnimIntro);
	}

	FORCEINLINE auto TASK_SHOOT_AT_COORD(Ped ped, float x, float y, float z, int duration, Hash firingPattern)
	{
		return invoker::invoke<void, 0x6C4E9ADFB1521AAC, 0xD6D354>(ped, x, y, z, duration, firingPattern);
	}

	FORCEINLINE auto TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(Ped ped, Vehicle vehicle, BOOL useAlternateShuffle)
	{
		return invoker::invoke<void, 0x7A55A25242FBE562, 0xD6D384>(ped, vehicle, useAlternateShuffle);
	}

	FORCEINLINE auto CLEAR_PED_TASKS(Ped ped)
	{
		return invoker::invoke<void, 0x974022927CB47E68, 0xD61B68>(ped);
	}

	FORCEINLINE auto CLEAR_PED_SECONDARY_TASK(Ped ped)
	{
		return invoker::invoke<void, 0xBEB96F1A510EE9AA, 0xD61B5C>(ped);
	}

	FORCEINLINE auto TASK_EVERYONE_LEAVE_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xD5094C4B174E9016, 0xD6C904>(vehicle);
	}

	FORCEINLINE auto TASK_GOTO_ENTITY_OFFSET(Ped ped, Entity entity, int time, float seekRadius, float seekAngleDeg, float moveBlendRatio, int gotoEntityOffsetFlags)
	{
		return invoker::invoke<void, 0xF3812FC874B9C273, 0xD6CA40>(ped, entity, time, seekRadius, seekAngleDeg, moveBlendRatio, gotoEntityOffsetFlags);
	}

	FORCEINLINE auto TASK_GOTO_ENTITY_OFFSET_XY(Ped ped, Entity entity, int duration, float targetRadius, float offsetX, float offsetY, float moveBlendRatio, int gotoEntityOffsetFlags)
	{
		return invoker::invoke<void, 0x35CBF41D628A3871, 0xD6CA84>(ped, entity, duration, targetRadius, offsetX, offsetY, moveBlendRatio, gotoEntityOffsetFlags);
	}

	FORCEINLINE auto TASK_TURN_PED_TO_FACE_COORD(Ped ped, float x, float y, float z, int duration)
	{
		return invoker::invoke<void, 0xCD76801E1106CABE, 0xD6D664>(ped, x, y, z, duration);
	}

	FORCEINLINE auto TASK_VEHICLE_TEMP_ACTION(Ped driver, Vehicle vehicle, int action, int time)
	{
		return invoker::invoke<void, 0xFCCE667AD0E974AD, 0xD6DA7C>(driver, vehicle, action, time);
	}

	FORCEINLINE auto TASK_VEHICLE_MISSION(Ped driver, Vehicle vehicle, Vehicle vehicleTarget, int missionType, float cruiseSpeed, int drivingStyle, float targetReached, float straightLineDistance, BOOL DriveAgainstTraffic)
	{
		return invoker::invoke<void, 0xB3DA477F44309390, 0xD6D900>(driver, vehicle, vehicleTarget, missionType, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
	}

	FORCEINLINE auto TASK_VEHICLE_MISSION_PED_TARGET(Ped ped, Vehicle vehicle, Ped pedTarget, int missionType, float maxSpeed, int drivingStyle, float minDistance, float straightLineDistance, BOOL DriveAgainstTraffic)
	{
		return invoker::invoke<void, 0x13DE13EA38996410, 0xD6D9A8>(ped, vehicle, pedTarget, missionType, maxSpeed, drivingStyle, minDistance, straightLineDistance, DriveAgainstTraffic);
	}

	FORCEINLINE auto TASK_VEHICLE_MISSION_COORS_TARGET(Ped ped, Vehicle vehicle, float x, float y, float z, int mission, float cruiseSpeed, int drivingStyle, float targetReached, float straightLineDistance, BOOL DriveAgainstTraffic)
	{
		return invoker::invoke<void, 0x30CCF17FEE4BDA53, 0xD6D954>(ped, vehicle, x, y, z, mission, cruiseSpeed, drivingStyle, targetReached, straightLineDistance, DriveAgainstTraffic);
	}

	FORCEINLINE auto TASK_VEHICLE_ESCORT(Ped ped, Vehicle vehicle, Vehicle targetVehicle, int mode, float speed, int drivingStyle, float minDistance, int minHeightAboveTerrain, float noRoadsDistance)
	{
		return invoker::invoke<void, 0x6AA87C4ADF4A6BFF, 0xD6D7EC>(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, minHeightAboveTerrain, noRoadsDistance);
	}

	FORCEINLINE auto TASK_VEHICLE_FOLLOW(Ped driver, Vehicle vehicle, Entity targetEntity, float speed, int drivingStyle, int minDistance)
	{
		return invoker::invoke<void, 0x1114FB0D0DF739D0, 0xD6D83C>(driver, vehicle, targetEntity, speed, drivingStyle, minDistance);
	}

	FORCEINLINE auto TASK_VEHICLE_CHASE(Ped driver, Entity targetEnt)
	{
		return invoker::invoke<void, 0xBCDC8EFDC767C85B, 0xD6D734>(driver, targetEnt);
	}

	FORCEINLINE auto TASK_VEHICLE_HELI_PROTECT(Ped pilot, Vehicle vehicle, Entity entityToFollow, float targetSpeed, int drivingFlags, float radius, int altitude, int heliFlags)
	{
		return invoker::invoke<void, 0xE4B10D5B4C7A3BEB, 0xD6D8B8>(pilot, vehicle, entityToFollow, targetSpeed, drivingFlags, radius, altitude, heliFlags);
	}

	FORCEINLINE auto SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(Ped ped, int flag, BOOL set)
	{
		return invoker::invoke<void, 0x5D374B426098D36A, 0xD6A368>(ped, flag, set);
	}

	FORCEINLINE auto SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(Ped ped, float distance)
	{
		return invoker::invoke<void, 0x7F9BCC1F05831CC1, 0xD6A380>(ped, distance);
	}

	FORCEINLINE auto TASK_HELI_CHASE(Ped pilot, Entity entityToFollow, float x, float y, float z)
	{
		return invoker::invoke<void, 0xBAA88971DB28023A, 0xD6CCF0>(pilot, entityToFollow, x, y, z);
	}

	FORCEINLINE auto TASK_PLANE_CHASE(Ped pilot, Entity entityToFollow, float x, float y, float z)
	{
		return invoker::invoke<void, 0x6793968E12D821E5, 0xD6CFE0>(pilot, entityToFollow, x, y, z);
	}

	FORCEINLINE auto TASK_PLANE_LAND(Ped pilot, Vehicle plane, float runwayStartX, float runwayStartY, float runwayStartZ, float runwayEndX, float runwayEndY, float runwayEndZ)
	{
		return invoker::invoke<void, 0x6F09ACD24CD7E2D1, 0xD6D040>(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ);
	}

	FORCEINLINE auto CLEAR_DEFAULT_PRIMARY_TASK(Ped ped)
	{
		return invoker::invoke<void, 0xDF671228EB81F6F6, 0xD61AF8>(ped);
	}

	FORCEINLINE auto CLEAR_PRIMARY_VEHICLE_TASK(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xBCF5323C85E59066, 0xD61B8C>(vehicle);
	}

	FORCEINLINE auto CLEAR_VEHICLE_CRASH_TASK(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xE61DA9B9D8DB2035, 0xD61BA4>(vehicle);
	}

	FORCEINLINE auto TASK_PLANE_GOTO_PRECISE_VTOL(Ped ped, Vehicle vehicle, float x, float y, float z, int flightHeight, int minHeightAboveTerrain, BOOL useDesiredOrientation, float desiredOrientation, BOOL autopilot)
	{
		return invoker::invoke<void, 0xF9B70B973193533C, 0xD6CFF4>(ped, vehicle, x, y, z, flightHeight, minHeightAboveTerrain, useDesiredOrientation, desiredOrientation, autopilot);
	}

	FORCEINLINE auto TASK_SUBMARINE_GOTO_AND_STOP(Ped ped, Vehicle submarine, float x, float y, float z, BOOL autopilot)
	{
		return invoker::invoke<void, 0x790442D9A27FBFC1, 0xD6D504>(ped, submarine, x, y, z, autopilot);
	}

	FORCEINLINE auto TASK_HELI_MISSION(Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float maxSpeed, float radius, float targetHeading, int maxHeight, int minHeight, float slowDownDistance, int behaviorFlags)
	{
		return invoker::invoke<void, 0xDAC27BA46D21818F, 0xD6CD1C>(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, maxSpeed, radius, targetHeading, maxHeight, minHeight, slowDownDistance, behaviorFlags);
	}

	FORCEINLINE auto TASK_HELI_ESCORT_HELI(Ped pilot, Vehicle heli1, Vehicle heli2, float offsetX, float offsetY, float offsetZ)
	{
		return invoker::invoke<void, 0xDEA77F41BAFD4054, 0xD6CD04>(pilot, heli1, heli2, offsetX, offsetY, offsetZ);
	}

	FORCEINLINE auto TASK_PLANE_MISSION(Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float angularDrag, float targetReached, float targetHeading, float maxZ, float minZ, BOOL precise)
	{
		return invoker::invoke<void, 0x8737E7B1F3150A9F, 0xD6D058>(pilot, aircraft, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionFlag, angularDrag, targetReached, targetHeading, maxZ, minZ, precise);
	}

	FORCEINLINE auto TASK_PLANE_TAXI(Ped pilot, Vehicle aircraft, float x, float y, float z, float cruiseSpeed, float targetReached)
	{
		return invoker::invoke<void, 0xD3EF88657552E38E, 0xD6D068>(pilot, aircraft, x, y, z, cruiseSpeed, targetReached);
	}

	FORCEINLINE auto TASK_BOAT_MISSION(Ped pedDriver, Vehicle vehicle, Vehicle targetVehicle, Ped targetPed, float x, float y, float z, int mission, float maxSpeed, int drivingStyle, float targetReached, Any boatFlags)
	{
		return invoker::invoke<void, 0xDD216642D7E1AD6B, 0xD6C768>(pedDriver, vehicle, targetVehicle, targetPed, x, y, z, mission, maxSpeed, drivingStyle, targetReached, boatFlags);
	}

	FORCEINLINE auto TASK_DRIVE_BY(Ped driverPed, Ped targetPed, Vehicle targetVehicle, float targetX, float targetY, float targetZ, float distanceToShoot, int pedAccuracy, BOOL pushUnderneathDrivingTaskIfDriving, Hash firingPattern)
	{
		return invoker::invoke<void, 0xD83588CA24829967, 0xD6C874>(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, pushUnderneathDrivingTaskIfDriving, firingPattern);
	}

	FORCEINLINE auto SET_DRIVEBY_TASK_TARGET(Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z)
	{
		return invoker::invoke<void, 0xF38F1E299109383A, 0xD6953C>(shootingPed, targetPed, targetVehicle, x, y, z);
	}

	FORCEINLINE auto CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(Ped ped)
	{
		return invoker::invoke<void, 0x827783BAD5CBE95D, 0xD61B04>(ped);
	}

	FORCEINLINE auto IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(Ped ped)
	{
		return invoker::invoke<BOOL, 0x10BAD2FED582B598, 0xD65280>(ped);
	}

	FORCEINLINE auto CONTROL_MOUNTED_WEAPON(Ped ped)
	{
		return invoker::invoke<BOOL, 0x54E6D48F5FEEC68E, 0xD61C38>(ped);
	}

	FORCEINLINE auto SET_MOUNTED_WEAPON_TARGET(Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z, int taskMode, BOOL ignoreTargetVehDeadCheck)
	{
		return invoker::invoke<void, 0x26CC8B808F859C87, 0xD699E4>(shootingPed, targetPed, targetVehicle, x, y, z, taskMode, ignoreTargetVehDeadCheck);
	}

	FORCEINLINE auto IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(Ped ped)
	{
		return invoker::invoke<BOOL, 0x5652C0D8FC728983, 0xD654D4>(ped);
	}

	FORCEINLINE auto TASK_USE_MOBILE_PHONE(Ped ped, BOOL usePhone, int desiredPhoneMode)
	{
		return invoker::invoke<void, 0x974B2530CABDF56, 0xD6D68C>(ped, usePhone, desiredPhoneMode);
	}

	FORCEINLINE auto TASK_USE_MOBILE_PHONE_TIMED(Ped ped, int duration)
	{
		return invoker::invoke<void, 0xE69B8FE2F4FD0178, 0xD6D6A4>(ped, duration);
	}

	FORCEINLINE auto TASK_CHAT_TO_PED(Ped ped, Ped target, int flags, float goToLocationX, float goToLocationY, float goToLocationZ, float headingDegs, float idleTime)
	{
		return invoker::invoke<void, 0x4663BE37E4E93BC6, 0xD6C778>(ped, target, flags, goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime);
	}

	FORCEINLINE auto TASK_WARP_PED_INTO_VEHICLE(Ped ped, Vehicle vehicle, int seat)
	{
		return invoker::invoke<void, 0x6CB88242CC3DA778, 0xD6DB30>(ped, vehicle, seat);
	}

	FORCEINLINE auto TASK_SHOOT_AT_ENTITY(Entity entity, Entity target, int duration, Hash firingPattern)
	{
		return invoker::invoke<void, 0xE84EF4129A44CCA3, 0xD6D36C>(entity, target, duration, firingPattern);
	}

	FORCEINLINE auto TASK_CLIMB(Ped ped, BOOL usePlayerLaunchForce)
	{
		return invoker::invoke<void, 0x345C12E1D643634F, 0xD6C7C8>(ped, usePlayerLaunchForce);
	}

	FORCEINLINE auto TASK_CLIMB_LADDER(Ped ped, BOOL fast)
	{
		return invoker::invoke<void, 0x52210330D36ACD48, 0xD6C7DC>(ped, fast);
	}

	FORCEINLINE auto TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float minZ, int ropeHandle, const char* clipSet, Any p10, Any p11)
	{
		return invoker::invoke<void, 0x82F4A39274853E9D, 0xD6D1B4>(ped, x1, y1, z1, x2, y2, z2, minZ, ropeHandle, clipSet, p10, p11);
	}

	FORCEINLINE auto GET_TASK_RAPPEL_DOWN_WALL_STATE(Ped ped)
	{
		return invoker::invoke<int, 0x29643B8A675F8422, 0xD63928>(ped);
	}

	FORCEINLINE auto CLEAR_PED_TASKS_IMMEDIATELY(Ped ped)
	{
		return invoker::invoke<void, 0x19626F992DC71FB9, 0xD61B74>(ped);
	}

	FORCEINLINE auto TASK_PERFORM_SEQUENCE_FROM_PROGRESS(Ped ped, int taskIndex, int progress1, int progress2)
	{
		return invoker::invoke<void, 0xDB27D5D6C78A71BD, 0xD6CFB8>(ped, taskIndex, progress1, progress2);
	}

	FORCEINLINE auto SET_NEXT_DESIRED_MOVE_STATE(float nextMoveState)
	{
		return invoker::invoke<void, 0x3CB52882A241CEA1, 0x81A1C0>(nextMoveState);
	}

	FORCEINLINE auto SET_PED_DESIRED_MOVE_BLEND_RATIO(Ped ped, float newMoveBlendRatio)
	{
		return invoker::invoke<void, 0xA6897CC743103C98, 0xD69C44>(ped, newMoveBlendRatio);
	}

	FORCEINLINE auto GET_PED_DESIRED_MOVE_BLEND_RATIO(Ped ped)
	{
		return invoker::invoke<float, 0x864E9BBAA7BFA064, 0xD63288>(ped);
	}

	FORCEINLINE auto TASK_GOTO_ENTITY_AIMING(Ped ped, Entity target, float distanceToStopAt, float StartAimingDist)
	{
		return invoker::invoke<void, 0xA1EF3D61667DA3F4, 0xD6CA28>(ped, target, distanceToStopAt, StartAimingDist);
	}

	FORCEINLINE auto TASK_SET_DECISION_MAKER(Ped ped, Hash decisionMakerId)
	{
		return invoker::invoke<void, 0x4A01AD13AAA82768, 0xD6D320>(ped, decisionMakerId);
	}

	FORCEINLINE auto TASK_SET_SPHERE_DEFENSIVE_AREA(Ped ped, float x, float y, float z, float radius)
	{
		return invoker::invoke<void, 0xD5A6D66C06D8ADB4, 0xD6D330>(ped, x, y, z, radius);
	}

	FORCEINLINE auto TASK_CLEAR_DEFENSIVE_AREA(Ped ped)
	{
		return invoker::invoke<void, 0x16C7AB5DAFB71459, 0xD6C7B0>(ped);
	}

	FORCEINLINE auto TASK_PED_SLIDE_TO_COORD(Ped ped, float x, float y, float z, float heading, float speed)
	{
		return invoker::invoke<void, 0x807D24321098A1C7, 0xD6CF4C>(ped, x, y, z, heading, speed);
	}

	FORCEINLINE auto TASK_PED_SLIDE_TO_COORD_HDG_RATE(Ped ped, float x, float y, float z, float heading, float speed, float headingChangeRate)
	{
		return invoker::invoke<void, 0xDC90C3410FA6A9F1, 0xD6CF78>(ped, x, y, z, heading, speed, headingChangeRate);
	}

	FORCEINLINE auto ADD_COVER_POINT(float x, float y, float z, float direction, int usage, int height, int arc, BOOL isPriority)
	{
		return invoker::invoke<ScrHandle, 0xBE006B266746B58A, 0xD614AC>(x, y, z, direction, usage, height, arc, isPriority);
	}

	FORCEINLINE auto REMOVE_COVER_POINT(ScrHandle coverpoint)
	{
		return invoker::invoke<void, 0x2115305B42B198D2, 0xD67AE8>(coverpoint);
	}

	FORCEINLINE auto DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(float x, float y, float z)
	{
		return invoker::invoke<BOOL, 0xB4AC30A54094D002, 0xD62080>(x, y, z);
	}

	FORCEINLINE auto GET_SCRIPTED_COVER_POINT_COORDS(ScrHandle coverpoint)
	{
		return invoker::invoke<Vector3, 0x8E8BD1A76D6D9230, 0xD63758>(coverpoint);
	}

	FORCEINLINE auto ADD_SCRIPTED_COVER_AREA(float x, float y, float z, float radius)
	{
		return invoker::invoke<void, 0x4CF9046448DA511B, 0xD615D0>(x, y, z, radius);
	}

	FORCEINLINE auto TASK_COMBAT_PED(Ped ped, Ped targetPed, int combatFlags, int threatResponseFlags)
	{
		return invoker::invoke<void, 0x62A5310368A20EFA, 0xD6C834>(ped, targetPed, combatFlags, threatResponseFlags);
	}

	FORCEINLINE auto TASK_COMBAT_PED_TIMED(Ped ped, Ped target, int time, int flags)
	{
		return invoker::invoke<void, 0xC22FB64C71A7CD89, 0xD6C84C>(ped, target, time, flags);
	}

	FORCEINLINE auto TASK_SEEK_COVER_FROM_POS(Ped ped, float x, float y, float z, int duration, BOOL allowPeekingAndFiring)
	{
		return invoker::invoke<void, 0xE31B7CB52E42E2B6, 0xD6D290>(ped, x, y, z, duration, allowPeekingAndFiring);
	}

	FORCEINLINE auto TASK_SEEK_COVER_FROM_PED(Ped ped, Ped target, int duration, BOOL allowPeekingAndFiring)
	{
		return invoker::invoke<void, 0x3D948B91131AF671, 0xD6D274>(ped, target, duration, allowPeekingAndFiring);
	}

	FORCEINLINE auto TASK_SEEK_COVER_TO_COVER_POINT(Ped ped, ScrHandle coverpoint, float x, float y, float z, int time, BOOL allowPeekingAndFiring)
	{
		return invoker::invoke<void, 0xEC4B308C708928CD, 0xD6D2DC>(ped, coverpoint, x, y, z, time, allowPeekingAndFiring);
	}

	FORCEINLINE auto TASK_SEEK_COVER_TO_COORDS(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, int timeout, BOOL shortRoute)
	{
		return invoker::invoke<void, 0xF8936AB29F37B33B, 0xD6D2AC>(ped, x1, y1, z1, x2, y2, z2, timeout, shortRoute);
	}

	FORCEINLINE auto TASK_PUT_PED_DIRECTLY_INTO_COVER(Ped ped, float x, float y, float z, int time, BOOL allowPeekingAndFiring, float blendInDuration, BOOL forceInitialFacingDirection, BOOL forceFaceLeft, int identifier, BOOL doEntry)
	{
		return invoker::invoke<void, 0x994B4C04761C0AA0, 0xD6D118>(ped, x, y, z, time, allowPeekingAndFiring, blendInDuration, forceInitialFacingDirection, forceFaceLeft, identifier, doEntry);
	}

	FORCEINLINE auto TASK_WARP_PED_DIRECTLY_INTO_COVER(Ped ped, int time, BOOL allowPeekingAndFiring, BOOL forceInitialFacingDirection, BOOL forceFaceLeft, int identifier)
	{
		return invoker::invoke<void, 0x49FC50A5D65452, 0xD6DAF0>(ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier);
	}

	FORCEINLINE auto TASK_EXIT_COVER(Ped ped, int exitType, float x, float y, float z)
	{
		return invoker::invoke<void, 0x3BD287EC78FB55F, 0xD6C910>(ped, exitType, x, y, z);
	}

	FORCEINLINE auto TASK_PUT_PED_DIRECTLY_INTO_MELEE(Ped ped, Ped meleeTarget, float blendInDuration, float timeInMelee, float strafePhaseSync, int aiCombatFlags)
	{
		return invoker::invoke<void, 0x849ABF0CBD8EE0D6, 0xD6D178>(ped, meleeTarget, blendInDuration, timeInMelee, strafePhaseSync, aiCombatFlags);
	}

	FORCEINLINE auto TASK_TOGGLE_DUCK(Ped ped, int toggleType)
	{
		return invoker::invoke<void, 0x613C57A8216F81FC, 0xD6D654>(ped, toggleType);
	}

	FORCEINLINE auto TASK_GUARD_CURRENT_POSITION(Ped ped, float maxPatrolProximity, float defensiveAreaRadius, BOOL setDefensiveArea)
	{
		return invoker::invoke<void, 0xAEFEF83576CF9532, 0xD6CC60>(ped, maxPatrolProximity, defensiveAreaRadius, setDefensiveArea);
	}

	FORCEINLINE auto TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(Ped ped, float x, float y, float z, float heading, float maxPatrolProximity, int timer)
	{
		return invoker::invoke<void, 0x2CFEEE8E3E154877, 0xD6CC30>(ped, x, y, z, heading, maxPatrolProximity, timer);
	}

	FORCEINLINE auto TASK_GUARD_SPHERE_DEFENSIVE_AREA(Ped ped, float defendPositionX, float defendPositionY, float defendPositionZ, float heading, float maxPatrolProximity, int time, float x, float y, float z, float defensiveAreaRadius)
	{
		return invoker::invoke<void, 0x9B1FD51B92E0C07E, 0xD6CC80>(ped, defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity, time, x, y, z, defensiveAreaRadius);
	}

	FORCEINLINE auto TASK_STAND_GUARD(Ped ped, float x, float y, float z, float heading, const char* scenarioName)
	{
		return invoker::invoke<void, 0xDEA4D02E8F52CE87, 0xD6D430>(ped, x, y, z, heading, scenarioName);
	}

	FORCEINLINE auto SET_DRIVE_TASK_CRUISE_SPEED(Ped driver, float cruiseSpeed)
	{
		return invoker::invoke<void, 0x553B31859911EC59, 0xD69554>(driver, cruiseSpeed);
	}

	FORCEINLINE auto SET_DRIVE_TASK_MAX_CRUISE_SPEED(Ped ped, float speed)
	{
		return invoker::invoke<void, 0x24B82F8CB7F8A3E5, 0xD69574>(ped, speed);
	}

	FORCEINLINE auto SET_DRIVE_TASK_DRIVING_STYLE(Ped ped, int drivingStyle)
	{
		return invoker::invoke<void, 0x413BDD7A1192FC87, 0xD69564>(ped, drivingStyle);
	}

	FORCEINLINE auto ADD_COVER_BLOCKING_AREA(float startX, float startY, float startZ, float endX, float endY, float endZ, BOOL blockObjects, BOOL blockVehicles, BOOL blockMap, BOOL blockPlayer)
	{
		return invoker::invoke<void, 0xCA32E959324DBA6C, 0xD61470>(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
	}

	FORCEINLINE auto REMOVE_ALL_COVER_BLOCKING_AREAS()
	{
		return invoker::invoke<void, 0xB1EEA6106C0A95F5, 0xD67A94>();
	}

	FORCEINLINE auto REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(float x, float y, float z)
	{
		return invoker::invoke<void, 0x71CFAA5488AD3649, 0xD67ADC>(x, y, z);
	}

	FORCEINLINE auto REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(float startX, float startY, float startZ, float endX, float endY, float endZ, BOOL blockObjects, BOOL blockVehicles, BOOL blockMap, BOOL blockPlayer)
	{
		return invoker::invoke<void, 0x1323CB5E215AACEC, 0xD67B5C>(startX, startY, startZ, endX, endY, endZ, blockObjects, blockVehicles, blockMap, blockPlayer);
	}

	FORCEINLINE auto TASK_START_SCENARIO_IN_PLACE(Ped ped, const char* scenarioName, int unkDelay, BOOL playEnterAnim)
	{
		return invoker::invoke<void, 0x21B9EFA4B4AA3A5B, 0xD6D4A0>(ped, scenarioName, unkDelay, playEnterAnim);
	}

	FORCEINLINE auto TASK_START_SCENARIO_AT_POSITION(Ped ped, const char* scenarioName, float x, float y, float z, float heading, int duration, BOOL sittingScenario, BOOL teleport)
	{
		return invoker::invoke<void, 0x634E47EF112F3802, 0xD6D458>(ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport);
	}

	FORCEINLINE auto TASK_USE_NEAREST_SCENARIO_TO_COORD(Ped ped, float x, float y, float z, float distance, int duration)
	{
		return invoker::invoke<void, 0xFC8E18D52935E5EB, 0xD6D6E4>(ped, x, y, z, distance, duration);
	}

	FORCEINLINE auto TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(Ped ped, float x, float y, float z, float radius, int timeToLeave)
	{
		return invoker::invoke<void, 0xCDA51E8BE6E5790A, 0xD6D6FC>(ped, x, y, z, radius, timeToLeave);
	}

	FORCEINLINE auto TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(Ped ped, float x, float y, float z, float maxRange, int timeToLeave)
	{
		return invoker::invoke<void, 0xB50A89E4C8C2A37C, 0xD6D6B4>(ped, x, y, z, maxRange, timeToLeave);
	}

	FORCEINLINE auto TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(Ped ped, float x, float y, float z, float radius, int timeToLeave)
	{
		return invoker::invoke<void, 0x449C7EE823FE407B, 0xD6D6CC>(ped, x, y, z, radius, timeToLeave);
	}

	FORCEINLINE auto DOES_SCENARIO_EXIST_IN_AREA(float x, float y, float z, float radius, BOOL mustBeFree)
	{
		return invoker::invoke<BOOL, 0x81E5E9AE1379B068, 0xD61FE8>(x, y, z, radius, mustBeFree);
	}

	FORCEINLINE auto DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(float x, float y, float z, const char* scenarioName, float radius, BOOL mustBeFree)
	{
		return invoker::invoke<BOOL, 0x813D79A654EE13DA, 0xD6204C>(x, y, z, scenarioName, radius, mustBeFree);
	}

	FORCEINLINE auto IS_SCENARIO_OCCUPIED(float x, float y, float z, float maxRange, BOOL onlyUsersActuallyAtScenario)
	{
		return invoker::invoke<BOOL, 0x9C8348AB222FEBA3, 0xD659A4>(x, y, z, maxRange, onlyUsersActuallyAtScenario);
	}

	FORCEINLINE auto PED_HAS_USE_SCENARIO_TASK(Ped ped)
	{
		return invoker::invoke<BOOL, 0x1FF4AE189014B73E, 0xD66A50>(ped);
	}

	FORCEINLINE auto PLAY_ANIM_ON_RUNNING_SCENARIO(Ped ped, const char* animDict, const char* animName)
	{
		return invoker::invoke<void, 0x3BD18E9EF59645CF, 0xD67860>(ped, animDict, animName);
	}

	FORCEINLINE auto DOES_SCENARIO_GROUP_EXIST(const char* scenarioGroup)
	{
		return invoker::invoke<BOOL, 0xA2FEC91FCC08673E, 0xD62018>(scenarioGroup);
	}

	FORCEINLINE auto IS_SCENARIO_GROUP_ENABLED(const char* scenarioGroup)
	{
		return invoker::invoke<BOOL, 0x3F4074C23C3682E, 0xD65980>(scenarioGroup);
	}

	FORCEINLINE auto SET_SCENARIO_GROUP_ENABLED(const char* scenarioGroup, BOOL enabled)
	{
		return invoker::invoke<void, 0x7DA9B8DF3A97D040, 0xD6A0D4>(scenarioGroup, enabled);
	}

	FORCEINLINE auto RESET_SCENARIO_GROUPS_ENABLED()
	{
		return invoker::invoke<void, 0xDFBE573FB949C828, 0xD67DF8>();
	}

	FORCEINLINE auto SET_EXCLUSIVE_SCENARIO_GROUP(const char* scenarioGroup)
	{
		return invoker::invoke<void, 0xDD0315A8F8B31039, 0xD695A0>(scenarioGroup);
	}

	FORCEINLINE auto RESET_EXCLUSIVE_SCENARIO_GROUP()
	{
		return invoker::invoke<void, 0x3966463F3674C7D5, 0xC7A4D0>();
	}

	FORCEINLINE auto IS_SCENARIO_TYPE_ENABLED(const char* scenarioType)
	{
		return invoker::invoke<BOOL, 0x6964489BB575FE9D, 0xD659D4>(scenarioType);
	}

	FORCEINLINE auto SET_SCENARIO_TYPE_ENABLED(const char* scenarioType, BOOL toggle)
	{
		return invoker::invoke<void, 0x470041F66BF345BA, 0xD6A0E8>(scenarioType, toggle);
	}

	FORCEINLINE auto RESET_SCENARIO_TYPES_ENABLED()
	{
		return invoker::invoke<void, 0xED8A3DF1DC96764E, 0xD67E04>();
	}

	FORCEINLINE auto IS_PED_ACTIVE_IN_SCENARIO(Ped ped)
	{
		return invoker::invoke<BOOL, 0x55057693AB7FCFF9, 0xD655F8>(ped);
	}

	FORCEINLINE auto IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(Ped ped)
	{
		return invoker::invoke<BOOL, 0x79D8334A10A1DB2E, 0xD65720>(ped);
	}

	FORCEINLINE auto SET_PED_CAN_PLAY_AMBIENT_IDLES(Ped ped, BOOL blockIdleClips, BOOL removeIdleClipIfPlaying)
	{
		return invoker::invoke<void, 0x2A89ED7D4265A941, 0xD69BC8>(ped, blockIdleClips, removeIdleClipIfPlaying);
	}

	FORCEINLINE auto TASK_COMBAT_HATED_TARGETS_IN_AREA(Ped ped, float x, float y, float z, float radius, int combatFlags)
	{
		return invoker::invoke<void, 0x6D81908BD7709ABC, 0xD6C81C>(ped, x, y, z, radius, combatFlags);
	}

	FORCEINLINE auto TASK_COMBAT_HATED_TARGETS_AROUND_PED(Ped ped, float radius, int combatFlags)
	{
		return invoker::invoke<void, 0xF6CC23160DD0AAED, 0xD6C7F0>(ped, radius, combatFlags);
	}

	FORCEINLINE auto TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(Ped ped, float radius, int time, int combatFlags)
	{
		return invoker::invoke<void, 0x1D006DA9CB2B79B2, 0xD6C804>(ped, radius, time, combatFlags);
	}

	FORCEINLINE auto TASK_THROW_PROJECTILE(Ped ped, float x, float y, float z, int ignoreCollisionEntityIndex, BOOL createInvincibleProjectile)
	{
		return invoker::invoke<void, 0x1BFCFCC8F6D798A6, 0xD6D638>(ped, x, y, z, ignoreCollisionEntityIndex, createInvincibleProjectile);
	}

	FORCEINLINE auto TASK_SWAP_WEAPON(Ped ped, BOOL drawWeapon)
	{
		return invoker::invoke<void, 0x71A3A3C67C692798, 0xD6D520>(ped, drawWeapon);
	}

	FORCEINLINE auto TASK_RELOAD_WEAPON(Ped ped, BOOL drawWeapon)
	{
		return invoker::invoke<void, 0x550B03C7904C63CD, 0xD6D224>(ped, drawWeapon);
	}

	FORCEINLINE auto IS_PED_GETTING_UP(Ped ped)
	{
		return invoker::invoke<BOOL, 0xB3FC0E7676E79BF, 0xD656C8>(ped);
	}

	FORCEINLINE auto TASK_WRITHE(Ped ped, Ped target, int minFireLoops, int startState, BOOL forceShootOnGround, int shootFromGroundTimer)
	{
		return invoker::invoke<void, 0xB8943DE03F115DCF, 0xD6DB44>(ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer);
	}

	FORCEINLINE auto IS_PED_IN_WRITHE(Ped ped)
	{
		return invoker::invoke<BOOL, 0xCE6BB45648900227, 0xD656EC>(ped);
	}

	FORCEINLINE auto OPEN_PATROL_ROUTE(const char* patrolRoute)
	{
		return invoker::invoke<void, 0xFA0AB32CDCA06D33, 0xD66954>(patrolRoute);
	}

	FORCEINLINE auto CLOSE_PATROL_ROUTE()
	{
		return invoker::invoke<void, 0xD769493B5A72D117, 0xD61C08>();
	}

	FORCEINLINE auto ADD_PATROL_ROUTE_NODE(int nodeId, const char* nodeType, float posX, float posY, float posZ, float headingX, float headingY, float headingZ, int duration)
	{
		return invoker::invoke<void, 0x595076DE836264C0, 0xD61564>(nodeId, nodeType, posX, posY, posZ, headingX, headingY, headingZ, duration);
	}

	FORCEINLINE auto ADD_PATROL_ROUTE_LINK(int nodeId1, int nodeId2)
	{
		return invoker::invoke<void, 0x62DDD8B4533C8E19, 0xD6154C>(nodeId1, nodeId2);
	}

	FORCEINLINE auto CREATE_PATROL_ROUTE()
	{
		return invoker::invoke<void, 0xF41DCE3B39E05E82, 0xD61D10>();
	}

	FORCEINLINE auto DELETE_PATROL_ROUTE(const char* patrolRoute)
	{
		return invoker::invoke<void, 0x2225C9F62E93B943, 0xD61DF8>(patrolRoute);
	}

	FORCEINLINE auto GET_PATROL_TASK_INFO(Ped ped, int* timeLeftAtNode, int* nodeId)
	{
		return invoker::invoke<BOOL, 0x4CC29C988AA182D9, 0xD63214>(ped, timeLeftAtNode, nodeId);
	}

	FORCEINLINE auto TASK_PATROL(Ped ped, const char* patrolRouteName, int alertState, BOOL canChatToPeds, BOOL useHeadLookAt)
	{
		return invoker::invoke<void, 0x253650DCBDD84B3, 0xD6CF0C>(ped, patrolRouteName, alertState, canChatToPeds, useHeadLookAt);
	}

	FORCEINLINE auto TASK_STAY_IN_COVER(Ped ped)
	{
		return invoker::invoke<void, 0x115CA3B4F950226D, 0xD6D4BC>(ped);
	}

	FORCEINLINE auto ADD_VEHICLE_SUBTASK_ATTACK_COORD(Ped ped, float x, float y, float z)
	{
		return invoker::invoke<void, 0xAB57201DCBB14A07, 0xD61660>(ped, x, y, z);
	}

	FORCEINLINE auto ADD_VEHICLE_SUBTASK_ATTACK_PED(Ped ped, Ped target)
	{
		return invoker::invoke<void, 0xF63C3F5B1BFD9CE4, 0xD61670>(ped, target);
	}

	FORCEINLINE auto TASK_VEHICLE_SHOOT_AT_PED(Ped ped, Ped target, float fireTolerance)
	{
		return invoker::invoke<void, 0xADB09C3437C4CCD, 0xD6DA68>(ped, target, fireTolerance);
	}

	FORCEINLINE auto TASK_VEHICLE_AIM_AT_PED(Ped ped, Ped target)
	{
		return invoker::invoke<void, 0xE021F54CBB4F4FD1, 0xD6D724>(ped, target);
	}

	FORCEINLINE auto TASK_VEHICLE_SHOOT_AT_COORD(Ped ped, float x, float y, float z, float fireTolerance)
	{
		return invoker::invoke<void, 0x777E107FA017C2BE, 0xD6DA54>(ped, x, y, z, fireTolerance);
	}

	FORCEINLINE auto TASK_VEHICLE_AIM_AT_COORD(Ped ped, float x, float y, float z)
	{
		return invoker::invoke<void, 0xE61AF8D27706A774, 0xD6D714>(ped, x, y, z);
	}

	FORCEINLINE auto TASK_VEHICLE_GOTO_NAVMESH(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int behaviorFlag, float stoppingRange)
	{
		return invoker::invoke<void, 0x3114F582B6F4FD2C, 0xD6D880>(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
	}

	FORCEINLINE auto TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(Ped ped, float x, float y, float z, float aimAtX, float aimAtY, float aimAtZ, float moveBlendRatio, BOOL shoot, float targetRadius, float slowDistance, BOOL useNavMesh, int navFlags, BOOL instantBlendToAim, Hash firingPattern)
	{
		return invoker::invoke<void, 0xB8551FB832F73124, 0xD6CBAC>(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern);
	}

	FORCEINLINE auto TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(Ped ped, float x, float y, float z, Entity aimAtID, float moveBlendRatio, BOOL shoot, float targetRadius, float slowDistance, BOOL useNavMesh, int navFlags, BOOL instantBlendToAim, Hash firingPattern, int time)
	{
		return invoker::invoke<void, 0xA68F93198FAC44EC, 0xD6CBBC>(ped, x, y, z, aimAtID, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, navFlags, instantBlendToAim, firingPattern, time);
	}

	FORCEINLINE auto TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(Ped pedHandle, float goToLocationX, float goToLocationY, float goToLocationZ, float focusLocationX, float focusLocationY, float focusLocationZ, float speed, BOOL shootAtEnemies, float distanceToStopAt, float noRoadsDistance, BOOL useNavMesh, int navFlags, int taskFlags, Hash firingPattern)
	{
		return invoker::invoke<void, 0x81C4993E5E1CEB9B, 0xD6CB34>(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, useNavMesh, navFlags, taskFlags, firingPattern);
	}

	FORCEINLINE auto TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(Ped ped, Entity entity, float aimX, float aimY, float aimZ, float moveBlendRatio, BOOL shoot, float targetRadius, float slowDistance, BOOL useNavMesh, BOOL instantBlendToAim, Hash firingPattern)
	{
		return invoker::invoke<void, 0x2868A36BD27FD939, 0xD6CC10>(ped, entity, aimX, aimY, aimZ, moveBlendRatio, shoot, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
	}

	FORCEINLINE auto TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(Ped ped, Entity entityToWalkTo, Entity entityToAimAt, float speed, BOOL shootatEntity, float targetRadius, float slowDistance, BOOL useNavMesh, BOOL instantBlendToAim, Hash firingPattern)
	{
		return invoker::invoke<void, 0x2433FB137DF847D2, 0xD6CC20>(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, targetRadius, slowDistance, useNavMesh, instantBlendToAim, firingPattern);
	}

	FORCEINLINE auto SET_HIGH_FALL_TASK(Ped ped, int minTime, int maxTime, int entryType)
	{
		return invoker::invoke<void, 0x8A43FAF3B2368B62, 0xD69814>(ped, minTime, maxTime, entryType);
	}

	FORCEINLINE auto REQUEST_WAYPOINT_RECORDING(const char* name)
	{
		return invoker::invoke<void, 0xD04A772C411165F2, 0xD67DB0>(name);
	}

	FORCEINLINE auto GET_IS_WAYPOINT_RECORDING_LOADED(const char* name)
	{
		return invoker::invoke<BOOL, 0xA08EEC7306CF6198, 0xD62CF0>(name);
	}

	FORCEINLINE auto REMOVE_WAYPOINT_RECORDING(const char* name)
	{
		return invoker::invoke<void, 0x8943BF9E0F15EDA0, 0xD67C40>(name);
	}

	FORCEINLINE auto WAYPOINT_RECORDING_GET_NUM_POINTS(const char* name, int* points)
	{
		return invoker::invoke<BOOL, 0xD352CFACACA313A1, 0xD6DFCC>(name, points);
	}

	FORCEINLINE auto WAYPOINT_RECORDING_GET_COORD(const char* name, int point, Vector3* coord)
	{
		return invoker::invoke<BOOL, 0x653B8254D6830E88, 0xD6DFBC>(name, point, coord);
	}

	FORCEINLINE auto WAYPOINT_RECORDING_GET_SPEED_AT_POINT(const char* name, int point)
	{
		return invoker::invoke<float, 0x2A0C849D5991C7F4, 0xD6DFF4>(name, point);
	}

	FORCEINLINE auto WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(const char* name, float x, float y, float z, int* point)
	{
		return invoker::invoke<BOOL, 0xC283DA397F6D065D, 0xD6DF90>(name, x, y, z, point);
	}

	FORCEINLINE auto TASK_FOLLOW_WAYPOINT_RECORDING(Ped ped, const char* name, int p2, int p3, int p4)
	{
		return invoker::invoke<void, 0x7FD62C74ABB26599, 0xD6C9D4>(ped, name, p2, p3, p4);
	}

	FORCEINLINE auto IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(Ped ped)
	{
		return invoker::invoke<BOOL, 0xBD08B11F7404F5CD, 0xD662B0>(ped);
	}

	FORCEINLINE auto GET_PED_WAYPOINT_PROGRESS(Ped ped)
	{
		return invoker::invoke<int, 0x9558BBC6B5B65853, 0xD6339C>(ped);
	}

	FORCEINLINE auto GET_PED_WAYPOINT_DISTANCE(Any p0)
	{
		return invoker::invoke<float, 0xD4AB5C0D7A1B6058, 0xD63378>(p0);
	}

	FORCEINLINE auto SET_PED_WAYPOINT_ROUTE_OFFSET(Ped ped, float x, float y, float z)
	{
		return invoker::invoke<BOOL, 0x1549A6163A4CED2D, 0xD69DB0>(ped, x, y, z);
	}

	FORCEINLINE auto GET_WAYPOINT_DISTANCE_ALONG_ROUTE(const char* name, int point)
	{
		return invoker::invoke<float, 0x2157DED369B9B03F, 0xD64964>(name, point);
	}

	FORCEINLINE auto WAYPOINT_PLAYBACK_GET_IS_PAUSED(Any p0)
	{
		return invoker::invoke<BOOL, 0xD6C64BE35FD4ED11, 0xD6DE9C>(p0);
	}

	FORCEINLINE auto WAYPOINT_PLAYBACK_PAUSE(Any p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x27EC70BAD907B76B, 0xD6DED8>(p0, p1, p2);
	}

	FORCEINLINE auto WAYPOINT_PLAYBACK_RESUME(Any p0, BOOL p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xFFD8D929BFEA2C66, 0xD6DEF4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto WAYPOINT_PLAYBACK_OVERRIDE_SPEED(Any p0, float p1, BOOL p2)
	{
		return invoker::invoke<void, 0x3A4A0A988D382998, 0xD6DEC0>(p0, p1, p2);
	}

	FORCEINLINE auto WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(Any p0)
	{
		return invoker::invoke<void, 0xF2BE617CD4ED96CD, 0xD6DF84>(p0);
	}

	FORCEINLINE auto USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(const char* name, BOOL p1, float p2, float p3)
	{
		return invoker::invoke<void, 0x94302E8F619FAF3E, 0xD6DDC8>(name, p1, p2, p3);
	}

	FORCEINLINE auto WAYPOINT_PLAYBACK_START_AIMING_AT_PED(Ped ped, Ped target, BOOL p2)
	{
		return invoker::invoke<void, 0x5316592ADD122C13, 0xD6DF28>(ped, target, p2);
	}

	FORCEINLINE auto WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(Ped ped, float x, float y, float z, BOOL p4)
	{
		return invoker::invoke<void, 0xA9260F368C3AE393, 0xD6DF10>(ped, x, y, z, p4);
	}

	FORCEINLINE auto WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(Ped ped, Ped ped2, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x379242666BA2ED8B, 0xD6DF5C>(ped, ped2, p2, p3);
	}

	FORCEINLINE auto WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(Ped ped, float x, float y, float z, BOOL p4, Hash firingPattern)
	{
		return invoker::invoke<void, 0x8CE357AE01230A0B, 0xD6DF40>(ped, x, y, z, p4, firingPattern);
	}

	FORCEINLINE auto WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(Ped ped)
	{
		return invoker::invoke<void, 0x1B24CB0A1764E540, 0xD6DF78>(ped);
	}

	FORCEINLINE auto ASSISTED_MOVEMENT_REQUEST_ROUTE(const char* route)
	{
		return invoker::invoke<void, 0xF73325FB8144737E, 0xD61840>(route);
	}

	FORCEINLINE auto ASSISTED_MOVEMENT_REMOVE_ROUTE(const char* route)
	{
		return invoker::invoke<void, 0xA332714024BC3F0C, 0xD61834>(route);
	}

	FORCEINLINE auto ASSISTED_MOVEMENT_IS_ROUTE_LOADED(const char* route)
	{
		return invoker::invoke<BOOL, 0x6C9A2A441E73E5E6, 0xD617FC>(route);
	}

	FORCEINLINE auto ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(const char* route, int props)
	{
		return invoker::invoke<void, 0xD60BA488D361DF8C, 0xD6184C>(route, props);
	}

	FORCEINLINE auto ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(float dist)
	{
		return invoker::invoke<void, 0x118744F545022B3E, 0xD61820>(dist);
	}

	FORCEINLINE auto TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(Ped ped, Vehicle vehicle, const char* WPRecording, int p3, int p4, int p5, int p6, float p7, BOOL p8, float p9)
	{
		return invoker::invoke<void, 0x43E9B2BD3668B432, 0xD6D870>(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9);
	}

	FORCEINLINE auto IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x8DC9348C726B1575, 0xD662E4>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_WAYPOINT_PROGRESS(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xD25BEA95F6673491, 0xD64844>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_WAYPOINT_TARGET_POINT(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x78BCB869DD6BFD3C, 0xD64878>(vehicle);
	}

	FORCEINLINE auto VEHICLE_WAYPOINT_PLAYBACK_PAUSE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x1A33666733F63EE2, 0xD6DE78>(vehicle);
	}

	FORCEINLINE auto VEHICLE_WAYPOINT_PLAYBACK_RESUME(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x5FC3A3680DA3531A, 0xD6DE84>(vehicle);
	}

	FORCEINLINE auto VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x6956712D887FB12E, 0xD6DE90>(vehicle);
	}

	FORCEINLINE auto VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(Vehicle vehicle, float speed)
	{
		return invoker::invoke<void, 0x2A62B5809D44FA48, 0xD6DE68>(vehicle, speed);
	}

	FORCEINLINE auto TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x96F4A599D1C6F95A, 0xD6D30C>(ped, toggle);
	}

	FORCEINLINE auto TASK_FORCE_MOTION_STATE(Ped ped, Hash state, BOOL forceRestart)
	{
		return invoker::invoke<void, 0x218240D21FF14E21, 0xD6CA00>(ped, state, forceRestart);
	}

	FORCEINLINE auto TASK_MOVE_NETWORK_BY_NAME(Ped ped, const char* task, float multiplier, BOOL allowOverrideCloneUpdate, const char* animDict, int flags)
	{
		return invoker::invoke<void, 0xBED82BCB158AC570, 0xD6CE34>(ped, task, multiplier, allowOverrideCloneUpdate, animDict, flags);
	}

	FORCEINLINE auto TASK_MOVE_NETWORK_ADVANCED_BY_NAME(Ped ped, const char* network, float x, float y, float z, float rotX, float rotY, float rotZ, int rotOrder, float blendDuration, BOOL allowOverrideCloneUpdate, const char* animDict, int flags)
	{
		return invoker::invoke<void, 0xE8F1DEE1AE8DBF3E, 0xD6CDD0>(ped, network, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, animDict, flags);
	}

	FORCEINLINE auto TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(Ped ped, const char* network, int* initialParameters, float blendDuration, BOOL allowOverrideCloneUpdate, const char* animDict, int flags)
	{
		return invoker::invoke<void, 0x9874D5FB1E8B02CB, 0xD6CE70>(ped, network, initialParameters, blendDuration, allowOverrideCloneUpdate, animDict, flags);
	}

	FORCEINLINE auto TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(Ped ped, const char* network, int* initialParameters, float x, float y, float z, float rotX, float rotY, float rotZ, int rotOrder, float blendDuration, BOOL allowOverrideCloneUpdate, const char* dictionary, int flags)
	{
		return invoker::invoke<void, 0xF73EE77793731309, 0xD6CE24>(ped, network, initialParameters, x, y, z, rotX, rotY, rotZ, rotOrder, blendDuration, allowOverrideCloneUpdate, dictionary, flags);
	}

	FORCEINLINE auto IS_TASK_MOVE_NETWORK_ACTIVE(Ped ped)
	{
		return invoker::invoke<BOOL, 0xB2E8986FED6B1539, 0xD65A98>(ped);
	}

	FORCEINLINE auto IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(Ped ped)
	{
		return invoker::invoke<BOOL, 0x998B35A7F4D0F0C7, 0xD65ABC>(ped);
	}

	FORCEINLINE auto REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(Ped ped, const char* name)
	{
		return invoker::invoke<BOOL, 0x442A7753A4EB7411, 0xD67D3C>(ped, name);
	}

	FORCEINLINE auto SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(Ped ped, const char* state)
	{
		return invoker::invoke<BOOL, 0xA6C2BBE598A91988, 0xD695AC>(ped, state);
	}

	FORCEINLINE auto GET_TASK_MOVE_NETWORK_STATE(Ped ped)
	{
		return invoker::invoke<const char*, 0x9DC8697AB3A155E7, 0xD63908>(ped);
	}

	FORCEINLINE auto SET_TASK_MOVE_NETWORK_ANIM_SET(Ped ped, Hash clipSet, Hash variableClipSet)
	{
		return invoker::invoke<void, 0x92DF696E2104166F, 0xD6A2EC>(ped, clipSet, variableClipSet);
	}

	FORCEINLINE auto SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(Ped ped, const char* signalName, float value)
	{
		return invoker::invoke<void, 0xDB1DAB5E0E775E2D, 0xD6A32C>(ped, signalName, value);
	}

	FORCEINLINE auto SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(Ped ped, const char* signalName, float value)
	{
		return invoker::invoke<void, 0xE523F21FAB5438DA, 0xD6A354>(ped, signalName, value);
	}

	FORCEINLINE auto SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(Ped ped, const char* signalName, float value)
	{
		return invoker::invoke<void, 0x515111A614F76DC4, 0xD6A340>(ped, signalName, value);
	}

	FORCEINLINE auto SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(Ped ped, const char* signalName, BOOL value)
	{
		return invoker::invoke<void, 0xBF87221921DE71CA, 0xD6A314>(ped, signalName, value);
	}

	FORCEINLINE auto GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(Ped ped, const char* signalName)
	{
		return invoker::invoke<float, 0x6E19562EC08A07C6, 0xD638E0>(ped, signalName);
	}

	FORCEINLINE auto GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(Ped ped, const char* signalName)
	{
		return invoker::invoke<BOOL, 0x12C0D6CD0D2EBB6F, 0xD638B8>(ped, signalName);
	}

	FORCEINLINE auto GET_TASK_MOVE_NETWORK_EVENT(Ped ped, const char* eventName)
	{
		return invoker::invoke<BOOL, 0xB6CFA448D6BF4690, 0xD63890>(ped, eventName);
	}

	FORCEINLINE auto SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(Ped ped, BOOL enable)
	{
		return invoker::invoke<BOOL, 0x4A27E73B31F943DC, 0xD6A300>(ped, enable);
	}

	FORCEINLINE auto _SET_SCRIPT_TASK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(Ped ped, BOOL enable)
	{
		return invoker::invoke<void, 0x32F6EEF031F943DC, 0xD6A150>(ped, enable);
	}

	FORCEINLINE auto IS_MOVE_BLEND_RATIO_STILL(Ped ped)
	{
		return invoker::invoke<BOOL, 0xF35435F8DC034A5C, 0xD65544>(ped);
	}

	FORCEINLINE auto IS_MOVE_BLEND_RATIO_WALKING(Ped ped)
	{
		return invoker::invoke<BOOL, 0xF6F7567DC74C45CE, 0xD65560>(ped);
	}

	FORCEINLINE auto IS_MOVE_BLEND_RATIO_RUNNING(Ped ped)
	{
		return invoker::invoke<BOOL, 0xC1C69295C2020379, 0xD654F8>(ped);
	}

	FORCEINLINE auto IS_MOVE_BLEND_RATIO_SPRINTING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x77FC7BDED929C9BD, 0xD65528>(ped);
	}

	FORCEINLINE auto IS_PED_STILL(Ped ped)
	{
		return invoker::invoke<BOOL, 0x6CDEFB59235A1FD9, 0xD657B0>(ped);
	}

	FORCEINLINE auto IS_PED_WALKING(Ped ped)
	{
		return invoker::invoke<BOOL, 0xA11073DD28E2CD9, 0xD65808>(ped);
	}

	FORCEINLINE auto IS_PED_RUNNING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x24433628C02BED5F, 0xD65744>(ped);
	}

	FORCEINLINE auto IS_PED_SPRINTING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x6F21822F60DC0945, 0xD6578C>(ped);
	}

	FORCEINLINE auto IS_PED_STRAFING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x3D686813DBBECE04, 0xD657D4>(ped);
	}

	FORCEINLINE auto TASK_SYNCHRONIZED_SCENE(Ped ped, int scene, const char* animDictionary, const char* animationName, float blendIn, float blendOut, int flags, int ragdollBlockingFlags, float moverBlendDelta, int ikFlags)
	{
		return invoker::invoke<void, 0x3DA436E63AB0F541, 0xD6D5DC>(ped, scene, animDictionary, animationName, blendIn, blendOut, flags, ragdollBlockingFlags, moverBlendDelta, ikFlags);
	}

	FORCEINLINE auto TASK_AGITATED_ACTION_CONFRONT_RESPONSE(Ped ped, Ped ped2)
	{
		return invoker::invoke<void, 0x883E603A316F6D3B, 0xD6C6A4>(ped, ped2);
	}

	FORCEINLINE auto TASK_SWEEP_AIM_ENTITY(Ped ped, const char* animDict, const char* lowAnimName, const char* medAnimName, const char* hiAnimName, int runtime, Entity targetEntity, float turnRate, float blendInDuration)
	{
		return invoker::invoke<void, 0x15F4AEC8F54F37B9, 0xD6D534>(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, targetEntity, turnRate, blendInDuration);
	}

	FORCEINLINE auto UPDATE_TASK_SWEEP_AIM_ENTITY(Ped ped, Entity entity)
	{
		return invoker::invoke<void, 0x2F1AD04B7C8A76C3, 0xD6DDA8>(ped, entity);
	}

	FORCEINLINE auto TASK_SWEEP_AIM_POSITION(Ped ped, const char* animDict, const char* lowAnimName, const char* medAnimName, const char* hiAnimName, int runtime, float x, float y, float z, float turnRate, float blendInDuration)
	{
		return invoker::invoke<void, 0xE7D618671D65A1FF, 0xD6D588>(ped, animDict, lowAnimName, medAnimName, hiAnimName, runtime, x, y, z, turnRate, blendInDuration);
	}

	FORCEINLINE auto UPDATE_TASK_SWEEP_AIM_POSITION(Ped ped, float x, float y, float z)
	{
		return invoker::invoke<void, 0xBDCCE8FE97AA3A1C, 0xD6DDB8>(ped, x, y, z);
	}

	FORCEINLINE auto TASK_ARREST_PED(Ped ped, Ped target)
	{
		return invoker::invoke<void, 0xBF348C17AF180F42, 0xD6C758>(ped, target);
	}

	FORCEINLINE auto IS_PED_RUNNING_ARREST_TASK(Ped ped)
	{
		return invoker::invoke<BOOL, 0x441E4524AA1CF9C, 0xD65768>(ped);
	}

	FORCEINLINE auto IS_PED_BEING_ARRESTED(Ped ped)
	{
		return invoker::invoke<BOOL, 0x7FB6C108C1694163, 0xCCE8A8>(ped);
	}

	FORCEINLINE auto UNCUFF_PED(Ped ped)
	{
		return invoker::invoke<void, 0x5C47299F055D05B5, 0xD6DD2C>(ped);
	}

	FORCEINLINE auto IS_PED_CUFFED(Ped ped)
	{
		return invoker::invoke<BOOL, 0x736821465DA66F80, 0xD65644>(ped);
	}

}
namespace MISC
{
	FORCEINLINE auto GET_ALLOCATED_STACK_SIZE()
	{
		return invoker::invoke<int, 0x6F4C4DF60C52867E, 0xD188B4>();
	}

	FORCEINLINE auto GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(int stackSize)
	{
		return invoker::invoke<int, 0x546238515F929872, 0xD195E8>(stackSize);
	}

	FORCEINLINE auto SET_RANDOM_SEED(int seed)
	{
		return invoker::invoke<void, 0x3B9F35917EDE3ACB, 0xD1EBA0>(seed);
	}

	FORCEINLINE auto SET_TIME_SCALE(float timeScale)
	{
		return invoker::invoke<void, 0xE6AC149D1121535D, 0xD1EF00>(timeScale);
	}

	FORCEINLINE auto SET_MISSION_FLAG(BOOL toggle)
	{
		return invoker::invoke<void, 0x925970A93719CADE, 0xD1E73C>(toggle);
	}

	FORCEINLINE auto GET_MISSION_FLAG()
	{
		return invoker::invoke<BOOL, 0x3D2EB53CF281A77E, 0xD1949C>();
	}

	FORCEINLINE auto SET_RANDOM_EVENT_FLAG(BOOL toggle)
	{
		return invoker::invoke<void, 0x7EA65A7D5C6CBDB5, 0xD1EB90>(toggle);
	}

	FORCEINLINE auto GET_RANDOM_EVENT_FLAG()
	{
		return invoker::invoke<BOOL, 0x9FA91AA1AC724CD0, 0xD19804>();
	}

	FORCEINLINE auto GET_CONTENT_TO_LOAD()
	{
		return invoker::invoke<const char*, 0x3DF0567938549C05, 0xD18D3C>();
	}

	FORCEINLINE auto ACTIVITY_FEED_CREATE(const char* p0, const char* p1)
	{
		return invoker::invoke<void, 0x1C18D23E19C76212, 0x81A1C0>(p0, p1);
	}

	FORCEINLINE auto ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(const char* p0)
	{
		return invoker::invoke<void, 0xE68815680F90E0E, 0x81A1C0>(p0);
	}

	FORCEINLINE auto ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(const char* p0)
	{
		return invoker::invoke<void, 0x7199DFD024AA24F3, 0x81A1C0>(p0);
	}

	FORCEINLINE auto ACTIVITY_FEED_ADD_INT_TO_CAPTION(Any p0)
	{
		return invoker::invoke<void, 0x1C49F79FA808A72C, 0x81A1C0>(p0);
	}

	FORCEINLINE auto ACTIVITY_FEED_LARGE_IMAGE_URL(const char* p0)
	{
		return invoker::invoke<void, 0x6304FE01A952A1ED, 0x81A1C0>(p0);
	}

	FORCEINLINE auto ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(const char* p0, const char* p1)
	{
		return invoker::invoke<void, 0x1ECA72F56ADCE605, 0x81A1C0>(p0, p1);
	}

	FORCEINLINE auto ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(const char* p0)
	{
		return invoker::invoke<void, 0x1BB362CAE190AD06, 0x81A1C0>(p0);
	}

	FORCEINLINE auto ACTIVITY_FEED_POST()
	{
		return invoker::invoke<void, 0x3A4500FC2B94720A, 0x81A1C0>();
	}

	FORCEINLINE auto ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(const char* p0)
	{
		return invoker::invoke<void, 0x41DBD10907A5CF18, 0x81A1C0>(p0);
	}

	FORCEINLINE auto HAS_RESUMED_FROM_SUSPEND()
	{
		return invoker::invoke<BOOL, 0x801039B3B8E28F8D, 0xD19D1C>();
	}

	FORCEINLINE auto SET_SCRIPT_HIGH_PRIO(BOOL toggle)
	{
		return invoker::invoke<void, 0x21EA3DC8C16770EF, 0xD1EC80>(toggle);
	}

	FORCEINLINE auto SET_THIS_IS_A_TRIGGER_SCRIPT(BOOL toggle)
	{
		return invoker::invoke<void, 0x2918C30E34ED2C88, 0xD1EEA0>(toggle);
	}

	FORCEINLINE auto INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(const char* p0)
	{
		return invoker::invoke<void, 0x1F1A910C8AD5C453, 0xD19EF0>(p0);
	}

	FORCEINLINE auto GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(Any* p0, Any* p1, Any p2, BOOL p3)
	{
		return invoker::invoke<BOOL, 0xC557C842E425A746, 0xD18910>(p0, p1, p2, p3);
	}

	FORCEINLINE auto GET_PREV_WEATHER_TYPE_HASH_NAME()
	{
		return invoker::invoke<Hash, 0xED2E53B1A3927830, 0xD1979C>();
	}

	FORCEINLINE auto GET_NEXT_WEATHER_TYPE_HASH_NAME()
	{
		return invoker::invoke<Hash, 0x60B554F782F2E6A6, 0xD195A0>();
	}

	FORCEINLINE auto IS_PREV_WEATHER_TYPE(const char* weatherType)
	{
		return invoker::invoke<BOOL, 0x4DC8DC4C28B3BADA, 0xD1A534>(weatherType);
	}

	FORCEINLINE auto IS_NEXT_WEATHER_TYPE(const char* weatherType)
	{
		return invoker::invoke<BOOL, 0x79C890C56ADBF83B, 0xD1A464>(weatherType);
	}

	FORCEINLINE auto SET_WEATHER_TYPE_PERSIST(const char* weatherType)
	{
		return invoker::invoke<void, 0xFD5A87843250F1B3, 0xD1F078>(weatherType);
	}

	FORCEINLINE auto SET_WEATHER_TYPE_NOW_PERSIST(const char* weatherType)
	{
		return invoker::invoke<void, 0xE38A58649E049502, 0xD1F058>(weatherType);
	}

	FORCEINLINE auto SET_WEATHER_TYPE_NOW(const char* weatherType)
	{
		return invoker::invoke<void, 0xF286E683D1E1F101, 0xD1F04C>(weatherType);
	}

	FORCEINLINE auto SET_WEATHER_TYPE_OVERTIME_PERSIST(const char* weatherType, float time)
	{
		return invoker::invoke<void, 0xE0F4EA3A654155A3, 0xD1F064>(weatherType, time);
	}

	FORCEINLINE auto SET_RANDOM_WEATHER_TYPE()
	{
		return invoker::invoke<void, 0x9E392E2DB654EE0A, 0xD1EBD8>();
	}

	FORCEINLINE auto CLEAR_WEATHER_TYPE_PERSIST()
	{
		return invoker::invoke<void, 0xA21EFB60FCA3D0F6, 0xD17C3C>();
	}

	FORCEINLINE auto CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(int milliseconds)
	{
		return invoker::invoke<void, 0x4EAA4126FEE56C40, 0xD17C30>(milliseconds);
	}

	FORCEINLINE auto GET_CURR_WEATHER_STATE(Hash* weatherType1, Hash* weatherType2, float* percentWeather2)
	{
		return invoker::invoke<void, 0x239D73A1DE006629, 0xD18DD8>(weatherType1, weatherType2, percentWeather2);
	}

	FORCEINLINE auto SET_CURR_WEATHER_STATE(Hash weatherType1, Hash weatherType2, float percentWeather2)
	{
		return invoker::invoke<void, 0x2D213D9B5D0FE42B, 0xD1E218>(weatherType1, weatherType2, percentWeather2);
	}

	FORCEINLINE auto SET_OVERRIDE_WEATHER(const char* weatherType)
	{
		return invoker::invoke<void, 0x88791F880F624022, 0xD1E9A4>(weatherType);
	}

	FORCEINLINE auto SET_OVERRIDE_WEATHEREX(const char* weatherType, BOOL p1)
	{
		return invoker::invoke<void, 0x43BE2F49C708E7B4, 0xD1E9B4>(weatherType, p1);
	}

	FORCEINLINE auto CLEAR_OVERRIDE_WEATHER()
	{
		return invoker::invoke<void, 0x58A3B74F26D2B532, 0xD17BC4>();
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(float amplitude)
	{
		return invoker::invoke<void, 0x2D6868095BD2DF64, 0xD1F8E8>(amplitude);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(float minAmplitude)
	{
		return invoker::invoke<void, 0xB39B9674B1E9D097, 0xD1F910>(minAmplitude);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(float maxAmplitude)
	{
		return invoker::invoke<void, 0x5D2587098D2C9CEF, 0xD1F8FC>(maxAmplitude);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(float minAmplitude)
	{
		return invoker::invoke<void, 0xA3F61E8395582E30, 0xD1F848>(minAmplitude);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(float amplitude)
	{
		return invoker::invoke<void, 0xE8B5A1B75D8BF700, 0xD1F85C>(amplitude);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(float minAmplitude)
	{
		return invoker::invoke<void, 0x2CA1243CF0209F78, 0xD1F884>(minAmplitude);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(float maxAmplitude)
	{
		return invoker::invoke<void, 0x1FAABAECFD9A7C83, 0xD1F870>(maxAmplitude);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_RIPPLEBUMPINESS(float bumpiness)
	{
		return invoker::invoke<void, 0x716752DE8ABA2F76, 0xD1F898>(bumpiness);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(float minBumpiness)
	{
		return invoker::invoke<void, 0x3C7E67D89C37CDBA, 0xD1F8D4>(minBumpiness);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(float maxBumpiness)
	{
		return invoker::invoke<void, 0x18DEB87CBCBB1C35, 0xD1F8C0>(maxBumpiness);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_RIPPLEDISTURB(float disturb)
	{
		return invoker::invoke<void, 0xAC4F34F6299E2289, 0xD1F8AC>(disturb);
	}

	FORCEINLINE auto WATER_OVERRIDE_SET_STRENGTH(float strength)
	{
		return invoker::invoke<void, 0x92425F5F9A2DC557, 0xD1F924>(strength);
	}

	FORCEINLINE auto WATER_OVERRIDE_FADE_IN(float p0)
	{
		return invoker::invoke<void, 0x2E7312742ADECB25, 0xD1F820>(p0);
	}

	FORCEINLINE auto WATER_OVERRIDE_FADE_OUT(float p0)
	{
		return invoker::invoke<void, 0xC425B6AC7F4443A0, 0xD1F834>(p0);
	}

	FORCEINLINE auto SET_WIND(float speed)
	{
		return invoker::invoke<void, 0x65D8EA648927792B, 0xD1F098>(speed);
	}

	FORCEINLINE auto SET_WIND_SPEED(float speed)
	{
		return invoker::invoke<void, 0xF9CA39E1CCB8EA1D, 0xD1F0C0>(speed);
	}

	FORCEINLINE auto GET_WIND_SPEED()
	{
		return invoker::invoke<float, 0xDD9996B22AD9179C, 0xD19BAC>();
	}

	FORCEINLINE auto SET_WIND_DIRECTION(float direction)
	{
		return invoker::invoke<void, 0xA9D04B4275939F5, 0xD1F0AC>(direction);
	}

	FORCEINLINE auto GET_WIND_DIRECTION()
	{
		return invoker::invoke<Vector3, 0xF12BE04302B5836E, 0xD19B68>();
	}

	FORCEINLINE auto SET_RAIN(float intensity)
	{
		return invoker::invoke<void, 0x3AC92E39007E1D09, 0xD1EB7C>(intensity);
	}

	FORCEINLINE auto GET_RAIN_LEVEL()
	{
		return invoker::invoke<float, 0x12BE8EA03391694B, 0xD197F4>();
	}

	FORCEINLINE auto SET_SNOW(float level)
	{
		return invoker::invoke<void, 0x312CA455A59783FA, 0xD1ECFC>(level);
	}

	FORCEINLINE auto GET_SNOW_LEVEL()
	{
		return invoker::invoke<float, 0xB68ECCFF52582B84, 0xD19A44>();
	}

	FORCEINLINE auto FORCE_LIGHTNING_FLASH()
	{
		return invoker::invoke<void, 0xD4BCC7D6BFB4EF0F, 0xD18818>();
	}

	FORCEINLINE auto SET_CLOUD_SETTINGS_OVERRIDE(const char* p0)
	{
		return invoker::invoke<void, 0x6D47423391C7C131, 0xD1E148>(p0);
	}

	FORCEINLINE auto PRELOAD_CLOUD_HAT(const char* name)
	{
		return invoker::invoke<void, 0xC540300DE977409D, 0xD1D6C0>(name);
	}

	FORCEINLINE auto LOAD_CLOUD_HAT(const char* name, float transitionTime)
	{
		return invoker::invoke<void, 0xEE3C332799057645, 0xD1A8A8>(name, transitionTime);
	}

	FORCEINLINE auto UNLOAD_CLOUD_HAT(const char* name, float p1)
	{
		return invoker::invoke<void, 0xE6FCB8178DFE489F, 0xD1F764>(name, p1);
	}

	FORCEINLINE auto UNLOAD_ALL_CLOUD_HATS()
	{
		return invoker::invoke<void, 0xB7C3B23648284A54, 0xD1F758>();
	}

	FORCEINLINE auto SET_CLOUDS_ALPHA(float opacity)
	{
		return invoker::invoke<void, 0xC05F48B1C4FD8BC9, 0xD1E134>(opacity);
	}

	FORCEINLINE auto GET_CLOUDS_ALPHA()
	{
		return invoker::invoke<float, 0xB5B278F6D1EBCD53, 0xD18CEC>();
	}

	FORCEINLINE auto GET_GAME_TIMER()
	{
		return invoker::invoke<int, 0x1DD05E817C89C737, 0xD18EFC>();
	}

	FORCEINLINE auto GET_FRAME_TIME()
	{
		return invoker::invoke<float, 0xB852B0BF94A8DC1, 0xD18EEC>();
	}

	FORCEINLINE auto GET_SYSTEM_TIME_STEP()
	{
		return invoker::invoke<float, 0xEC235469207D1121, 0xD19A9C>();
	}

	FORCEINLINE auto GET_FRAME_COUNT()
	{
		return invoker::invoke<int, 0x8034325BF6D6E41F, 0xD18EE0>();
	}

	FORCEINLINE auto GET_RANDOM_FLOAT_IN_RANGE(float startRange, float endRange)
	{
		return invoker::invoke<float, 0xD2AA6F822D3A55D2, 0xD19814>(startRange, endRange);
	}

	FORCEINLINE auto GET_RANDOM_INT_IN_RANGE(int startRange, int endRange)
	{
		return invoker::invoke<int, 0xC5935DFB3F39785A, 0xD19874>(startRange, endRange);
	}

	FORCEINLINE auto GET_RANDOM_MWC_INT_IN_RANGE(int startRange, int endRange)
	{
		return invoker::invoke<int, 0x4AFA59A11CC00538, 0xD198C8>(startRange, endRange);
	}

	FORCEINLINE auto GET_GROUND_Z_FOR_3D_COORD(float x, float y, float z, float* groundZ, BOOL ignoreWater, BOOL p5)
	{
		return invoker::invoke<BOOL, 0xB1EAADCB692D69CE, 0xD18FB4>(x, y, z, groundZ, ignoreWater, p5);
	}

	FORCEINLINE auto GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(float x, float y, float z, float* groundZ, Vector3* normal)
	{
		return invoker::invoke<BOOL, 0x1C23EBEE3AABD4C7, 0xD18F28>(x, y, z, groundZ, normal);
	}

	FORCEINLINE auto GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(float x, float y, float z, float* groundZ, BOOL p4, BOOL p5)
	{
		return invoker::invoke<BOOL, 0x81AB70B3FE98F1DF, 0xD18F80>(x, y, z, groundZ, p4, p5);
	}

	FORCEINLINE auto ASIN(float p0)
	{
		return invoker::invoke<float, 0x1670C66FA901C0D8, 0xD1778C>(p0);
	}

	FORCEINLINE auto ACOS(float p0)
	{
		return invoker::invoke<float, 0x42CDD13001C98400, 0xD17324>(p0);
	}

	FORCEINLINE auto TAN(float p0)
	{
		return invoker::invoke<float, 0xD1AA84345B760931, 0xD1F428>(p0);
	}

	FORCEINLINE auto ATAN(float p0)
	{
		return invoker::invoke<float, 0x21CDF75488EFB98B, 0xD177E0>(p0);
	}

	FORCEINLINE auto ATAN2(float p0, float p1)
	{
		return invoker::invoke<float, 0x4964D7A2BFD2F9A3, 0xD177B0>(p0, p1);
	}

	FORCEINLINE auto GET_DISTANCE_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, BOOL useZ)
	{
		return invoker::invoke<float, 0xED977E2AE2CB16EE, 0xD18E28>(x1, y1, z1, x2, y2, z2, useZ);
	}

	FORCEINLINE auto GET_ANGLE_BETWEEN_2D_VECTORS(float x1, float y1, float x2, float y2)
	{
		return invoker::invoke<float, 0x20A3B1C2EC4167BB, 0xD188DC>(x1, y1, x2, y2);
	}

	FORCEINLINE auto GET_HEADING_FROM_VECTOR_2D(float dx, float dy)
	{
		return invoker::invoke<float, 0x97BC40FFA2FFCCD2, 0xD1900C>(dx, dy);
	}

	FORCEINLINE auto GET_RATIO_OF_CLOSEST_POINT_ON_LINE(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, BOOL clamp)
	{
		return invoker::invoke<float, 0xA2DD309FA5FD1435, 0xD198EC>(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp);
	}

	FORCEINLINE auto GET_CLOSEST_POINT_ON_LINE(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, BOOL clamp)
	{
		return invoker::invoke<Vector3, 0xC14F2F615169363F, 0xD18C90>(x1, y1, z1, x2, y2, z2, x3, y3, z3, clamp);
	}

	FORCEINLINE auto GET_LINE_PLANE_INTERSECTION(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float* p12)
	{
		return invoker::invoke<BOOL, 0x148F60DDDBC323FD, 0xD19340>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
	}

	FORCEINLINE auto GET_POINT_AREA_OVERLAP(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13)
	{
		return invoker::invoke<BOOL, 0x298E7BBD04F29848, 0xD19758>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
	}

	FORCEINLINE auto SET_BIT(int* address, int offset)
	{
		return invoker::invoke<void, 0xB0C9A0F9AAEB7F0, 0xD1DC6C>(address, offset);
	}

	FORCEINLINE auto CLEAR_BIT(int* address, int offset)
	{
		return invoker::invoke<void, 0x8744D2E3FC95740E, 0xD17AD8>(address, offset);
	}

	FORCEINLINE auto GET_HASH_KEY(const char* string)
	{
		return invoker::invoke<Hash, 0x70E57E9927B6BA58, 0xD18FE8>(string);
	}

	FORCEINLINE auto SLERP_NEAR_QUATERNION(float t, float x, float y, float z, float w, float x1, float y1, float z1, float w1, float* outX, float* outY, float* outZ, float* outW)
	{
		return invoker::invoke<void, 0x4D16ECAA05186DFE, 0xD1F324>(t, x, y, z, w, x1, y1, z1, w1, outX, outY, outZ, outW);
	}

	FORCEINLINE auto IS_AREA_OCCUPIED(float p0, float p1, float p2, float p3, float p4, float p5, BOOL p6, BOOL p7, BOOL p8, BOOL p9, BOOL p10, Any p11, BOOL p12)
	{
		return invoker::invoke<BOOL, 0xEBC91D4C68FF5260, 0xD19EFC>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
	}

	FORCEINLINE auto IS_AREA_OCCUPIED_SLOW(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12)
	{
		return invoker::invoke<BOOL, 0x7405FEB2AD8926AC, 0xD19F0C>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
	}

	FORCEINLINE auto IS_POSITION_OCCUPIED(float x, float y, float z, float range, BOOL p4, BOOL checkVehicles, BOOL checkPeds, BOOL p7, BOOL p8, Entity ignoreEntity, BOOL p10)
	{
		return invoker::invoke<BOOL, 0x5A3D7606D599F99A, 0xD1A524>(x, y, z, range, p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10);
	}

	FORCEINLINE auto IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(float p0, float p1, float p2, float p3, float p4, float p5, Any p6)
	{
		return invoker::invoke<BOOL, 0xD7813C7A74CA9AF9, 0xD1A4D8>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto CLEAR_AREA(float X, float Y, float Z, float radius, BOOL p4, BOOL ignoreCopCars, BOOL ignoreObjects, BOOL p7)
	{
		return invoker::invoke<void, 0x2094BC4B6731BA68, 0xD179F4>(X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7);
	}

	FORCEINLINE auto CLEAR_AREA_LEAVE_VEHICLE_HEALTH(float x, float y, float z, float radius, BOOL p4, BOOL p5, BOOL p6, BOOL p7)
	{
		return invoker::invoke<void, 0x4FEBA5060BFD5111, 0xD17A30>(x, y, z, radius, p4, p5, p6, p7);
	}

	FORCEINLINE auto CLEAR_AREA_OF_VEHICLES(float x, float y, float z, float radius, BOOL p4, BOOL p5, BOOL p6, BOOL p7, BOOL p8, BOOL p9, Any p10)
	{
		return invoker::invoke<void, 0x60040CDD28AA1BC3, 0xD17AC8>(x, y, z, radius, p4, p5, p6, p7, p8, p9, p10);
	}

	FORCEINLINE auto CLEAR_ANGLED_AREA_OF_VEHICLES(float x1, float y1, float z1, float x2, float y2, float z2, float width, BOOL p7, BOOL p8, BOOL p9, BOOL p10, BOOL p11, Any p12, Any p13)
	{
		return invoker::invoke<void, 0x6F3435F85C932A08, 0xD179E4>(x1, y1, z1, x2, y2, z2, width, p7, p8, p9, p10, p11, p12, p13);
	}

	FORCEINLINE auto CLEAR_AREA_OF_OBJECTS(float x, float y, float z, float radius, int flags)
	{
		return invoker::invoke<void, 0xBAAB54D57B40765E, 0xD17A84>(x, y, z, radius, flags);
	}

	FORCEINLINE auto CLEAR_AREA_OF_PEDS(float x, float y, float z, float radius, int flags)
	{
		return invoker::invoke<void, 0x55F7AC4B2B875901, 0xD17A98>(x, y, z, radius, flags);
	}

	FORCEINLINE auto CLEAR_AREA_OF_COPS(float x, float y, float z, float radius, int flags)
	{
		return invoker::invoke<void, 0x8B0110C1F1D9D177, 0xD17A6C>(x, y, z, radius, flags);
	}

	FORCEINLINE auto CLEAR_AREA_OF_PROJECTILES(float x, float y, float z, float radius, int flags)
	{
		return invoker::invoke<void, 0xEC73DFE5CE55E19C, 0xD17AB0>(x, y, z, radius, flags);
	}

	FORCEINLINE auto CLEAR_SCENARIO_SPAWN_HISTORY()
	{
		return invoker::invoke<void, 0xE0443EB1DC8A2F79, 0xD17C08>();
	}

	FORCEINLINE auto SET_SAVE_MENU_ACTIVE(BOOL ignoreVehicle)
	{
		return invoker::invoke<void, 0x20D668730B14B5F4, 0xD1EC70>(ignoreVehicle);
	}

	FORCEINLINE auto GET_STATUS_OF_MANUAL_SAVE()
	{
		return invoker::invoke<int, 0xDEBBFB8E738665F4, 0xD19A54>();
	}

	FORCEINLINE auto SET_CREDITS_ACTIVE(BOOL toggle)
	{
		return invoker::invoke<void, 0x810E39899814611D, 0xD1E1F0>(toggle);
	}

	FORCEINLINE auto SET_CREDITS_FADE_OUT_WITH_SCREEN(BOOL toggle)
	{
		return invoker::invoke<void, 0x9969A63702BCDEFE, 0xD1E208>(toggle);
	}

	FORCEINLINE auto HAVE_CREDITS_REACHED_END()
	{
		return invoker::invoke<BOOL, 0xDCD722759F93678D, 0xD19D90>();
	}

	FORCEINLINE auto ARE_CREDITS_RUNNING()
	{
		return invoker::invoke<BOOL, 0x45E146165ACF587E, 0xD17708>();
	}

	FORCEINLINE auto TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(const char* scriptName)
	{
		return invoker::invoke<void, 0xD13237BC328B938E, 0xD1F454>(scriptName);
	}

	FORCEINLINE auto NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME()
	{
		return invoker::invoke<void, 0x51CC1333A10C4E09, 0xD1BB9C>();
	}

	FORCEINLINE auto ADD_HOSPITAL_RESTART(float x, float y, float z, float p3, Any p4)
	{
		return invoker::invoke<int, 0x69A4491104E14366, 0xD1748C>(x, y, z, p3, p4);
	}

	FORCEINLINE auto DISABLE_HOSPITAL_RESTART(int hospitalIndex, BOOL toggle)
	{
		return invoker::invoke<void, 0x281BDB37010064F5, 0xD17F14>(hospitalIndex, toggle);
	}

	FORCEINLINE auto ADD_POLICE_RESTART(float p0, float p1, float p2, float p3, Any p4)
	{
		return invoker::invoke<int, 0xDFA763BBB6D72603, 0xD174E0>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto DISABLE_POLICE_RESTART(int policeIndex, BOOL toggle)
	{
		return invoker::invoke<void, 0xD9256F7FF1791115, 0xD17F5C>(policeIndex, toggle);
	}

	FORCEINLINE auto SET_RESTART_COORD_OVERRIDE(float x, float y, float z, float heading)
	{
		return invoker::invoke<void, 0xB8F3F7DA0F3F93F, 0xD1EBF8>(x, y, z, heading);
	}

	FORCEINLINE auto CLEAR_RESTART_COORD_OVERRIDE()
	{
		return invoker::invoke<void, 0x51F06E07524AD20D, 0xD17BEC>();
	}

	FORCEINLINE auto PAUSE_DEATH_ARREST_RESTART(BOOL toggle)
	{
		return invoker::invoke<void, 0xD43B9D1692F5C06E, 0xD1D434>(toggle);
	}

	FORCEINLINE auto IGNORE_NEXT_RESTART(BOOL toggle)
	{
		return invoker::invoke<void, 0x72B1E2693AC30407, 0xD19EE0>(toggle);
	}

	FORCEINLINE auto SET_FADE_OUT_AFTER_DEATH(BOOL toggle)
	{
		return invoker::invoke<void, 0x31E8D1058586E006, 0xD1E344>(toggle);
	}

	FORCEINLINE auto SET_FADE_OUT_AFTER_ARREST(BOOL toggle)
	{
		return invoker::invoke<void, 0x332262819D51DF61, 0xD1E330>(toggle);
	}

	FORCEINLINE auto SET_FADE_IN_AFTER_DEATH_ARREST(BOOL toggle)
	{
		return invoker::invoke<void, 0x40AC02FA167D4D0A, 0xD1E30C>(toggle);
	}

	FORCEINLINE auto SET_FADE_IN_AFTER_LOAD(BOOL toggle)
	{
		return invoker::invoke<void, 0xC83C5315C571C2FE, 0xD1E320>(toggle);
	}

	FORCEINLINE auto REGISTER_SAVE_HOUSE(float x, float y, float z, float p3, const char* p4, Any p5, Any p6)
	{
		return invoker::invoke<int, 0x869634E57B4F3343, 0xD1D7E8>(x, y, z, p3, p4, p5, p6);
	}

	FORCEINLINE auto SET_SAVE_HOUSE(int savehouseHandle, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xC372A80C7719DF28, 0xD1EC54>(savehouseHandle, p1, p2);
	}

	FORCEINLINE auto OVERRIDE_SAVE_HOUSE(BOOL p0, float p1, float p2, float p3, float p4, BOOL p5, float p6, float p7)
	{
		return invoker::invoke<BOOL, 0x4C6A124A4C49BC22, 0xD1D424>(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	FORCEINLINE auto GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(Vector3* p0, float* p1, BOOL* fadeInAfterLoad, BOOL* p3)
	{
		return invoker::invoke<BOOL, 0xD1CA4C3A111D9BBF, 0xD199F4>(p0, p1, fadeInAfterLoad, p3);
	}

	FORCEINLINE auto DO_AUTO_SAVE()
	{
		return invoker::invoke<void, 0xE3BCCCA3244EDF82, 0xD181CC>();
	}

	FORCEINLINE auto GET_IS_AUTO_SAVE_OFF()
	{
		return invoker::invoke<BOOL, 0xB0B88048B5914A7A, 0xD19270>();
	}

	FORCEINLINE auto IS_AUTO_SAVE_IN_PROGRESS()
	{
		return invoker::invoke<BOOL, 0x46150A5112561134, 0xD19F1C>();
	}

	FORCEINLINE auto HAS_CODE_REQUESTED_AUTOSAVE()
	{
		return invoker::invoke<BOOL, 0x9F4AE9BED29CAFA0, 0xD19CA8>();
	}

	FORCEINLINE auto CLEAR_CODE_REQUESTED_AUTOSAVE()
	{
		return invoker::invoke<void, 0xF7F21AEA9B22B838, 0xD17B14>();
	}

	FORCEINLINE auto BEGIN_REPLAY_STATS(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x2133FE32510D05F7, 0xD17814>(p0, p1);
	}

	FORCEINLINE auto ADD_REPLAY_STAT_VALUE(Any value)
	{
		return invoker::invoke<void, 0x9012CD429E55212A, 0xD17590>(value);
	}

	FORCEINLINE auto END_REPLAY_STATS()
	{
		return invoker::invoke<void, 0xCA08FA2F9FE43B29, 0xD18278>();
	}

	FORCEINLINE auto HAVE_REPLAY_STATS_BEEN_STORED()
	{
		return invoker::invoke<BOOL, 0x90168A0DE18A7F1A, 0xD19DA0>();
	}

	FORCEINLINE auto GET_REPLAY_STAT_MISSION_ID()
	{
		return invoker::invoke<int, 0x81D4D874CB1DFBE4, 0xD199A0>();
	}

	FORCEINLINE auto GET_REPLAY_STAT_MISSION_TYPE()
	{
		return invoker::invoke<int, 0x16C990F0AEBBC7A3, 0xD199AC>();
	}

	FORCEINLINE auto GET_REPLAY_STAT_COUNT()
	{
		return invoker::invoke<int, 0x536257A79D7C865A, 0xD19980>();
	}

	FORCEINLINE auto GET_REPLAY_STAT_AT_INDEX(int index)
	{
		return invoker::invoke<int, 0x8BDAC9E7F4C1D9E5, 0xD19958>(index);
	}

	FORCEINLINE auto CLEAR_REPLAY_STATS()
	{
		return invoker::invoke<void, 0x4BB54FF089A08B44, 0xD17BE0>();
	}

	FORCEINLINE auto QUEUE_MISSION_REPEAT_LOAD()
	{
		return invoker::invoke<BOOL, 0x46A69DE38863D8FD, 0xD1D708>();
	}

	FORCEINLINE auto QUEUE_MISSION_REPEAT_SAVE()
	{
		return invoker::invoke<BOOL, 0x9F57DA3897B26EAE, 0xD1D724>();
	}

	FORCEINLINE auto QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST()
	{
		return invoker::invoke<BOOL, 0x80152C0ECDC471B, 0xD1D744>();
	}

	FORCEINLINE auto GET_STATUS_OF_MISSION_REPEAT_SAVE()
	{
		return invoker::invoke<int, 0x7DE5CD18CC7CF0A6, 0xD19A60>();
	}

	FORCEINLINE auto IS_MEMORY_CARD_IN_USE()
	{
		return invoker::invoke<BOOL, 0x8B27A086F4268F56, 0xD1A2E4>();
	}

	FORCEINLINE auto SHOOT_SINGLE_BULLET_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, int damage, BOOL p7, Hash weaponHash, Ped ownerPed, BOOL isAudible, BOOL isInvisible, float speed)
	{
		return invoker::invoke<void, 0xA934E5D7EEE03C7E, 0xD1F0D0>(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed);
	}

	FORCEINLINE auto SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(float x1, float y1, float z1, float x2, float y2, float z2, int damage, BOOL p7, Hash weaponHash, Ped ownerPed, BOOL isAudible, BOOL isInvisible, float speed, Entity entity, Any p14)
	{
		return invoker::invoke<void, 0x2D8982A81816E618, 0xD1F128>(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14);
	}

	FORCEINLINE auto SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(float x1, float y1, float z1, float x2, float y2, float z2, int damage, BOOL p7, Hash weaponHash, Ped ownerPed, BOOL isAudible, BOOL isInvisible, float speed, Entity entity, BOOL p14, BOOL p15, Entity targetEntity, BOOL p17, Any p18, Any p19, Any p20)
	{
		return invoker::invoke<void, 0x5733B7E88AFB2E3B, 0xD1F138>(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, targetEntity, p17, p18, p19, p20);
	}

	FORCEINLINE auto GET_MODEL_DIMENSIONS(Hash modelHash, Vector3* minimum, Vector3* maximum)
	{
		return invoker::invoke<void, 0xC93BAF616F1C680F, 0xD194B8>(modelHash, minimum, maximum);
	}

	FORCEINLINE auto SET_FAKE_WANTED_LEVEL(int fakeWantedLevel)
	{
		return invoker::invoke<void, 0x50FB8785AFA2D59C, 0xD1E3FC>(fakeWantedLevel);
	}

	FORCEINLINE auto GET_FAKE_WANTED_LEVEL()
	{
		return invoker::invoke<int, 0x3C273019E2F3471D, 0xD18E64>();
	}

	FORCEINLINE auto USING_MISSION_CREATOR(BOOL toggle)
	{
		return invoker::invoke<void, 0xCC1EDB9BCC914639, 0xD1F804>(toggle);
	}

	FORCEINLINE auto ALLOW_MISSION_CREATOR_WARP(BOOL toggle)
	{
		return invoker::invoke<void, 0x8D57FA5F8F95730F, 0xD176E0>(toggle);
	}

	FORCEINLINE auto SET_MINIGAME_IN_PROGRESS(BOOL toggle)
	{
		return invoker::invoke<void, 0x58B5B800DED763EE, 0xD1E674>(toggle);
	}

	FORCEINLINE auto IS_MINIGAME_IN_PROGRESS()
	{
		return invoker::invoke<BOOL, 0x94A7730DEC6E86C8, 0xD1A328>();
	}

	FORCEINLINE auto IS_THIS_A_MINIGAME_SCRIPT()
	{
		return invoker::invoke<BOOL, 0x204E68849C425DF0, 0xD1A7D4>();
	}

	FORCEINLINE auto IS_SNIPER_INVERTED()
	{
		return invoker::invoke<BOOL, 0x1156728DBCB1F3B2, 0xCCE8A8>();
	}

	FORCEINLINE auto SHOULD_USE_METRIC_MEASUREMENTS()
	{
		return invoker::invoke<BOOL, 0x4721B5E26C8861C8, 0xD1F148>();
	}

	FORCEINLINE auto GET_PROFILE_SETTING(int profileSetting)
	{
		return invoker::invoke<int, 0x38640D2193CB547F, 0xD197BC>(profileSetting);
	}

	FORCEINLINE auto ARE_STRINGS_EQUAL(const char* string1, const char* string2)
	{
		return invoker::invoke<BOOL, 0x1B79E937E91F40C3, 0xD17748>(string1, string2);
	}

	FORCEINLINE auto COMPARE_STRINGS(const char* str1, const char* str2, BOOL matchCase, int maxLength)
	{
		return invoker::invoke<int, 0xDCE96FB47C1D0314, 0xD17C80>(str1, str2, matchCase, maxLength);
	}

	FORCEINLINE auto ABSI(int value)
	{
		return invoker::invoke<int, 0x510D0699BE9C6D06, 0xD17310>(value);
	}

	FORCEINLINE auto ABSF(float value)
	{
		return invoker::invoke<float, 0x1D5CD3EAAA7422B0, 0xD172F0>(value);
	}

	FORCEINLINE auto IS_SNIPER_BULLET_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<BOOL, 0xD83D7629BFD65725, 0xD1A694>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto IS_PROJECTILE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL ownedByPlayer)
	{
		return invoker::invoke<BOOL, 0xE94C7FA27FEB00DD, 0xD1A558>(x1, y1, z1, x2, y2, z2, ownedByPlayer);
	}

	FORCEINLINE auto IS_PROJECTILE_TYPE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, int type, BOOL ownedByPlayer)
	{
		return invoker::invoke<BOOL, 0x7A082DC02E5E00C1, 0xD1A5C8>(x1, y1, z1, x2, y2, z2, type, ownedByPlayer);
	}

	FORCEINLINE auto IS_PROJECTILE_TYPE_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, Any p7, BOOL ownedByPlayer)
	{
		return invoker::invoke<BOOL, 0x9F8FB43463B75A3D, 0xD1A584>(x1, y1, z1, x2, y2, z2, width, p7, ownedByPlayer);
	}

	FORCEINLINE auto IS_PROJECTILE_TYPE_WITHIN_DISTANCE(float x, float y, float z, Hash projectileHash, float radius, BOOL ownedByPlayer)
	{
		return invoker::invoke<BOOL, 0x8EC0BB480F11446F, 0xD1A600>(x, y, z, projectileHash, radius, ownedByPlayer);
	}

	FORCEINLINE auto GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, Hash projectileHash, Vector3* projectilePos, BOOL ownedByPlayer)
	{
		return invoker::invoke<BOOL, 0x8C538F7B2B233B2C, 0xD18D5C>(x1, y1, z1, x2, y2, z2, projectileHash, projectilePos, ownedByPlayer);
	}

	FORCEINLINE auto GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA(float vecAngledAreaPoint1X, float vecAngledAreaPoint1Y, float vecAngledAreaPoint1Z, float vecAngledAreaPoint2X, float vecAngledAreaPoint2Y, float vecAngledAreaPoint2Z, float distanceOfOppositeFace, Hash weaponType, Vector3* positionOut, BOOL bIsPlayer)
	{
		return invoker::invoke<BOOL, 0x17D830B00DB4A9DC, 0xD18D4C>(vecAngledAreaPoint1X, vecAngledAreaPoint1Y, vecAngledAreaPoint1Z, vecAngledAreaPoint2X, vecAngledAreaPoint2Y, vecAngledAreaPoint2Z, distanceOfOppositeFace, weaponType, positionOut, bIsPlayer);
	}

	FORCEINLINE auto GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(Ped ped, Hash weaponHash, float distance, Vector3* outCoords, BOOL p4)
	{
		return invoker::invoke<BOOL, 0xED2558D599937EFD, 0xD18D6C>(ped, weaponHash, distance, outCoords, p4);
	}

	FORCEINLINE auto GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(Ped ped, Hash weaponHash, float distance, Vector3* outCoords, Object* outProjectile, BOOL p5)
	{
		return invoker::invoke<BOOL, 0xF67924A428A734EC, 0xD197E4>(ped, weaponHash, distance, outCoords, outProjectile, p5);
	}

	FORCEINLINE auto IS_BULLET_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, BOOL ownedByPlayer)
	{
		return invoker::invoke<BOOL, 0xF20EF02FBF173C32, 0xD19FB8>(x1, y1, z1, x2, y2, z2, width, ownedByPlayer);
	}

	FORCEINLINE auto IS_BULLET_IN_AREA(float x, float y, float z, float radius, BOOL ownedByPlayer)
	{
		return invoker::invoke<BOOL, 0x398315D0C90DE6F6, 0xD19FEC>(x, y, z, radius, ownedByPlayer);
	}

	FORCEINLINE auto IS_BULLET_IN_BOX(float x1, float y1, float z1, float x2, float y2, float z2, BOOL ownedByPlayer)
	{
		return invoker::invoke<BOOL, 0x5BF86E66F9BF0BE9, 0xD1A01C>(x1, y1, z1, x2, y2, z2, ownedByPlayer);
	}

	FORCEINLINE auto HAS_BULLET_IMPACTED_IN_AREA(float x, float y, float z, float p3, BOOL p4, BOOL p5)
	{
		return invoker::invoke<BOOL, 0xA646A9FF47E2E515, 0xD19C14>(x, y, z, p3, p4, p5);
	}

	FORCEINLINE auto HAS_BULLET_IMPACTED_IN_BOX(float p0, float p1, float p2, float p3, float p4, float p5, BOOL p6, BOOL p7)
	{
		return invoker::invoke<BOOL, 0xB7C4B23CEF2B3B58, 0xD19C4C>(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	FORCEINLINE auto IS_ORBIS_VERSION()
	{
		return invoker::invoke<BOOL, 0x3B880DE16766E9C3, 0xCCE8A8>();
	}

	FORCEINLINE auto IS_DURANGO_VERSION()
	{
		return invoker::invoke<BOOL, 0xFD5A25A8B9488D42, 0xCCE8A8>();
	}

	FORCEINLINE auto IS_XBOX360_VERSION()
	{
		return invoker::invoke<BOOL, 0x1226C55CA7D2269A, 0xCCE8A8>();
	}

	FORCEINLINE auto IS_PS3_VERSION()
	{
		return invoker::invoke<BOOL, 0xBA1A956D36B210F, 0xCCE8A8>();
	}

	FORCEINLINE auto IS_PC_VERSION()
	{
		return invoker::invoke<BOOL, 0x761778199FE1211C, 0xD1F814>();
	}

	FORCEINLINE auto IS_STEAM_VERSION()
	{
		return invoker::invoke<BOOL, 0x32BC1B96D39D2E38, 0xD1A6C8>();
	}

	FORCEINLINE auto IS_AUSSIE_VERSION()
	{
		return invoker::invoke<BOOL, 0x1EF90593EF09F7FA, 0xCCE8A8>();
	}

	FORCEINLINE auto IS_JAPANESE_VERSION()
	{
		return invoker::invoke<BOOL, 0x74C1828126652223, 0xD1A2C8>();
	}

	FORCEINLINE auto IS_XBOX_PLATFORM()
	{
		return invoker::invoke<BOOL, 0xFF449C9B68734F2B, 0xCCE8A8>();
	}

	FORCEINLINE auto IS_SCARLETT_VERSION()
	{
		return invoker::invoke<BOOL, 0x6823557BDD18031C, 0xCCE8A8>();
	}

	FORCEINLINE auto IS_SCE_PLATFORM()
	{
		return invoker::invoke<BOOL, 0xC5D69BE0998EF509, 0xCCE8A8>();
	}

	FORCEINLINE auto IS_PROSPERO_VERSION()
	{
		return invoker::invoke<BOOL, 0x716271729B9FB8E6, 0xCCE8A8>();
	}

	FORCEINLINE auto IS_STRING_NULL(const char* string)
	{
		return invoker::invoke<BOOL, 0xFF692AB7350A74D7, 0xD1A714>(string);
	}

	FORCEINLINE auto IS_STRING_NULL_OR_EMPTY(const char* string)
	{
		return invoker::invoke<BOOL, 0xD6F9DEE4765092A9, 0xD1A728>(string);
	}

	FORCEINLINE auto STRING_TO_INT(const char* string, int* outInteger)
	{
		return invoker::invoke<BOOL, 0xA2ADD4A27CA857C2, 0xD1F3D4>(string, outInteger);
	}

	FORCEINLINE auto SET_BITS_IN_RANGE(int* var, int rangeStart, int rangeEnd, int p3)
	{
		return invoker::invoke<void, 0xA11116C8E2E46ED4, 0xD1DC88>(var, rangeStart, rangeEnd, p3);
	}

	FORCEINLINE auto GET_BITS_IN_RANGE(int var, int rangeStart, int rangeEnd)
	{
		return invoker::invoke<int, 0x8B5B2BE72A7C0CF6, 0xD18978>(var, rangeStart, rangeEnd);
	}

	FORCEINLINE auto ADD_STUNT_JUMP(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float x4, float y4, float z4, float camX, float camY, float camZ, int p15, int p16, int p17)
	{
		return invoker::invoke<int, 0xC0DBC28967D7BE19, 0xD175A4>(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ, p15, p16, p17);
	}

	FORCEINLINE auto ADD_STUNT_JUMP_ANGLED(float x1, float y1, float z1, float x2, float y2, float z2, float radius1, float x3, float y3, float z3, float x4, float y4, float z4, float radius2, float camX, float camY, float camZ, int p17, int p18, int p19)
	{
		return invoker::invoke<int, 0x8CD9B5E60B98207A, 0xD17604>(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ, p17, p18, p19);
	}

	FORCEINLINE auto TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(BOOL toggle)
	{
		return invoker::invoke<void, 0xCE366B3838FC5CC5, 0xD1F704>(toggle);
	}

	FORCEINLINE auto DELETE_STUNT_JUMP(int p0)
	{
		return invoker::invoke<void, 0xDE4E7D1D52BD4533, 0xD17E9C>(p0);
	}

	FORCEINLINE auto ENABLE_STUNT_JUMP_SET(int p0)
	{
		return invoker::invoke<void, 0x28365F67ED751FCB, 0xD18238>(p0);
	}

	FORCEINLINE auto DISABLE_STUNT_JUMP_SET(int p0)
	{
		return invoker::invoke<void, 0xF27998ADBDAB9049, 0xD17F70>(p0);
	}

	FORCEINLINE auto SET_STUNT_JUMPS_CAN_TRIGGER(BOOL toggle)
	{
		return invoker::invoke<void, 0x7F0D18D1F5BF6D0F, 0xD1ED34>(toggle);
	}

	FORCEINLINE auto IS_STUNT_JUMP_IN_PROGRESS()
	{
		return invoker::invoke<BOOL, 0xF6D8C7059C3C2495, 0xD1A74C>();
	}

	FORCEINLINE auto IS_STUNT_JUMP_MESSAGE_SHOWING()
	{
		return invoker::invoke<BOOL, 0xB2E86D4871B30979, 0xD1A774>();
	}

	FORCEINLINE auto GET_NUM_SUCCESSFUL_STUNT_JUMPS()
	{
		return invoker::invoke<int, 0x2FED6B8DCEAE8D75, 0xD19628>();
	}

	FORCEINLINE auto GET_TOTAL_SUCCESSFUL_STUNT_JUMPS()
	{
		return invoker::invoke<int, 0x356BDA6BB9847878, 0xD19B18>();
	}

	FORCEINLINE auto CANCEL_STUNT_JUMP()
	{
		return invoker::invoke<void, 0xE751ECBA8573687A, 0xD1793C>();
	}

	FORCEINLINE auto SET_GAME_PAUSED(BOOL toggle)
	{
		return invoker::invoke<void, 0x98E393364463951A, 0xD1E4D0>(toggle);
	}

	FORCEINLINE auto SET_THIS_SCRIPT_CAN_BE_PAUSED(BOOL toggle)
	{
		return invoker::invoke<void, 0xAECC5FA98C879D67, 0xD1EEB0>(toggle);
	}

	FORCEINLINE auto SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(BOOL toggle)
	{
		return invoker::invoke<void, 0x9F83BF77C7204C05, 0xD1EED4>(toggle);
	}

	FORCEINLINE auto HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(Hash hash, int amount)
	{
		return invoker::invoke<BOOL, 0x1DBC8A6F227520FD, 0xD19C80>(hash, amount);
	}

	FORCEINLINE auto HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(Hash hash)
	{
		return invoker::invoke<BOOL, 0x4590C086096F07D8, 0xD19CF8>(hash);
	}

	FORCEINLINE auto OVERRIDE_FREEZE_FLAGS(BOOL p0)
	{
		return invoker::invoke<void, 0x8822ABB8DFD960E5, 0xD1D3D8>(p0);
	}

	FORCEINLINE auto SET_INSTANCE_PRIORITY_MODE(int p0)
	{
		return invoker::invoke<void, 0x2268617D0B5A5B35, 0xD1E614>(p0);
	}

	FORCEINLINE auto SET_INSTANCE_PRIORITY_HINT(int flag)
	{
		return invoker::invoke<void, 0xF6ECB54A7941386F, 0xD1E604>(flag);
	}

	FORCEINLINE auto IS_FRONTEND_FADING()
	{
		return invoker::invoke<BOOL, 0x114ABA9988FF784B, 0xCCE8A8>();
	}

	FORCEINLINE auto POPULATE_NOW()
	{
		return invoker::invoke<void, 0x1BBEB35757ED1961, 0xD1D6A4>();
	}

	FORCEINLINE auto GET_INDEX_OF_CURRENT_LEVEL()
	{
		return invoker::invoke<int, 0xC5C8FC4D42BFD749, 0xD190EC>();
	}

	FORCEINLINE auto SET_GRAVITY_LEVEL(int level)
	{
		return invoker::invoke<void, 0x446CF90BF0024020, 0xD1E528>(level);
	}

	FORCEINLINE auto START_SAVE_DATA(Any* p0, Any p1, BOOL p2)
	{
		return invoker::invoke<void, 0xA2CDB686AB549D8A, 0xD1F388>(p0, p1, p2);
	}

	FORCEINLINE auto STOP_SAVE_DATA()
	{
		return invoker::invoke<void, 0xB6F769D890A34B99, 0xD1F3BC>();
	}

	FORCEINLINE auto GET_SIZE_OF_SAVE_DATA(BOOL p0)
	{
		return invoker::invoke<int, 0x7E1CF25229CF544D, 0xD19A20>(p0);
	}

	FORCEINLINE auto REGISTER_INT_TO_SAVE(Any* p0, const char* name)
	{
		return invoker::invoke<void, 0xA40FAFA53DFF4362, 0xD1D78C>(p0, name);
	}

	FORCEINLINE auto REGISTER_INT64_TO_SAVE(Any* p0, const char* name)
	{
		return invoker::invoke<void, 0x385F74AF4024D51A, 0xD1D7AC>(p0, name);
	}

	FORCEINLINE auto REGISTER_ENUM_TO_SAVE(Any* p0, const char* name)
	{
		return invoker::invoke<void, 0x93C679A3AE20C964, 0xD1D78C>(p0, name);
	}

	FORCEINLINE auto REGISTER_FLOAT_TO_SAVE(Any* p0, const char* name)
	{
		return invoker::invoke<void, 0x3C17D57F8A1F4336, 0xD1D79C>(p0, name);
	}

	FORCEINLINE auto REGISTER_BOOL_TO_SAVE(Any* p0, const char* name)
	{
		return invoker::invoke<void, 0x929D7CE0F2CAD21C, 0xD1D78C>(p0, name);
	}

	FORCEINLINE auto REGISTER_TEXT_LABEL_TO_SAVE(Any* p0, const char* name)
	{
		return invoker::invoke<void, 0x62FF4ED33C1328C, 0xD1D84C>(p0, name);
	}

	FORCEINLINE auto REGISTER_TEXT_LABEL_15_TO_SAVE(Any* p0, const char* name)
	{
		return invoker::invoke<void, 0x70972D3D43C1B5EB, 0xD1D84C>(p0, name);
	}

	FORCEINLINE auto REGISTER_TEXT_LABEL_23_TO_SAVE(Any* p0, const char* name)
	{
		return invoker::invoke<void, 0x29926EE43ABCE454, 0xD1D81C>(p0, name);
	}

	FORCEINLINE auto REGISTER_TEXT_LABEL_31_TO_SAVE(Any* p0, const char* name)
	{
		return invoker::invoke<void, 0x2CEFD365B46A1DBE, 0xD1D82C>(p0, name);
	}

	FORCEINLINE auto REGISTER_TEXT_LABEL_63_TO_SAVE(Any* p0, const char* name)
	{
		return invoker::invoke<void, 0xC05BEBBC3D252F8C, 0xD1D83C>(p0, name);
	}

	FORCEINLINE auto START_SAVE_STRUCT_WITH_SIZE(Any* p0, int size, const char* structName)
	{
		return invoker::invoke<void, 0x2714FB94E6EAC372, 0xD1F3A0>(p0, size, structName);
	}

	FORCEINLINE auto STOP_SAVE_STRUCT()
	{
		return invoker::invoke<void, 0x648D295A649ED2C3, 0xD1F3BC>();
	}

	FORCEINLINE auto START_SAVE_ARRAY_WITH_SIZE(Any* p0, int size, const char* arrayName)
	{
		return invoker::invoke<void, 0x54DF17092B1F59BA, 0xD1F374>(p0, size, arrayName);
	}

	FORCEINLINE auto STOP_SAVE_ARRAY()
	{
		return invoker::invoke<void, 0x6C29B075C8530441, 0xD1F3BC>();
	}

	FORCEINLINE auto COPY_SCRIPT_STRUCT(Any* dst, Any* src, int size)
	{
		return invoker::invoke<void, 0xDD7F149F8BAF1260, 0xD17CB0>(dst, src, size);
	}

	FORCEINLINE auto ENABLE_DISPATCH_SERVICE(int dispatchService, BOOL toggle)
	{
		return invoker::invoke<void, 0xCC1C92F7E1A3CE9D, 0xD181DC>(dispatchService, toggle);
	}

	FORCEINLINE auto BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(int dispatchService, BOOL toggle)
	{
		return invoker::invoke<void, 0xB3BB215FCE55E6A9, 0xD178C8>(dispatchService, toggle);
	}

	FORCEINLINE auto GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(int dispatchService)
	{
		return invoker::invoke<int, 0x874C935832B2AE06, 0xD19608>(dispatchService);
	}

	FORCEINLINE auto CREATE_INCIDENT(int dispatchService, float x, float y, float z, int numUnits, float radius, int* outIncidentID, Any p7, Any p8)
	{
		return invoker::invoke<BOOL, 0x70DA4F87B396F9F9, 0xD17D10>(dispatchService, x, y, z, numUnits, radius, outIncidentID, p7, p8);
	}

	FORCEINLINE auto CREATE_INCIDENT_WITH_ENTITY(int dispatchService, Ped ped, int numUnits, float radius, int* outIncidentID, Any p5, Any p6)
	{
		return invoker::invoke<BOOL, 0xDD121F61016F3CE0, 0xD17D5C>(dispatchService, ped, numUnits, radius, outIncidentID, p5, p6);
	}

	FORCEINLINE auto DELETE_INCIDENT(int incidentId)
	{
		return invoker::invoke<void, 0x3D09B44C2ACEA592, 0xD17E90>(incidentId);
	}

	FORCEINLINE auto IS_INCIDENT_VALID(int incidentId)
	{
		return invoker::invoke<BOOL, 0x5BA108AB15E668B7, 0xD1A198>(incidentId);
	}

	FORCEINLINE auto SET_INCIDENT_REQUESTED_UNITS(int incidentId, int dispatchService, int numUnits)
	{
		return invoker::invoke<void, 0x399A3B6D30C64629, 0xD1E5D0>(incidentId, dispatchService, numUnits);
	}

	FORCEINLINE auto SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(int incidentId, float p1)
	{
		return invoker::invoke<void, 0xBF2292E4C98122D5, 0xD1E5C0>(incidentId, p1);
	}

	FORCEINLINE auto FIND_SPAWN_POINT_IN_DIRECTION(float posX, float posY, float posZ, float fwdVecX, float fwdVecY, float fwdVecZ, float distance, Vector3* spawnPoint)
	{
		return invoker::invoke<BOOL, 0x604F09F8F9DA5404, 0xD1878C>(posX, posY, posZ, fwdVecX, fwdVecY, fwdVecZ, distance, spawnPoint);
	}

	FORCEINLINE auto ADD_POP_MULTIPLIER_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float p6, float p7, BOOL p8, BOOL p9)
	{
		return invoker::invoke<int, 0x6991BFCE3D87261B, 0xD17508>(x1, y1, z1, x2, y2, z2, p6, p7, p8, p9);
	}

	FORCEINLINE auto DOES_POP_MULTIPLIER_AREA_EXIST(int id)
	{
		return invoker::invoke<BOOL, 0x87EDD05291B7412C, 0xD18130>(id);
	}

	FORCEINLINE auto REMOVE_POP_MULTIPLIER_AREA(int id, BOOL p1)
	{
		return invoker::invoke<void, 0x78640FB2D4298B2D, 0xD1D970>(id, p1);
	}

	FORCEINLINE auto IS_POP_MULTIPLIER_AREA_NETWORKED(int id)
	{
		return invoker::invoke<BOOL, 0x3989D4F6D95B3DBD, 0xD1A500>(id);
	}

	FORCEINLINE auto ADD_POP_MULTIPLIER_SPHERE(float x, float y, float z, float radius, float pedMultiplier, float vehicleMultiplier, BOOL p6, BOOL p7)
	{
		return invoker::invoke<int, 0xA0FA113A187BAF0D, 0xD1754C>(x, y, z, radius, pedMultiplier, vehicleMultiplier, p6, p7);
	}

	FORCEINLINE auto DOES_POP_MULTIPLIER_SPHERE_EXIST(int id)
	{
		return invoker::invoke<BOOL, 0xCA7C80E031F9BFD2, 0xD18130>(id);
	}

	FORCEINLINE auto REMOVE_POP_MULTIPLIER_SPHERE(int id, BOOL p1)
	{
		return invoker::invoke<void, 0x9049EEEF48D81A2F, 0xD1D970>(id, p1);
	}

	FORCEINLINE auto ENABLE_TENNIS_MODE(Ped ped, BOOL toggle, BOOL p2)
	{
		return invoker::invoke<void, 0x311543257CA6E66E, 0xD1825C>(ped, toggle, p2);
	}

	FORCEINLINE auto IS_TENNIS_MODE(Ped ped)
	{
		return invoker::invoke<BOOL, 0xB5B917AAA3DF1A78, 0xD1A7B0>(ped);
	}

	FORCEINLINE auto PLAY_TENNIS_SWING_ANIM(Ped ped, const char* animDict, const char* animName, float p3, float p4, BOOL p5)
	{
		return invoker::invoke<void, 0x66D844353F51465F, 0xD1D624>(ped, animDict, animName, p3, p4, p5);
	}

	FORCEINLINE auto GET_TENNIS_SWING_ANIM_COMPLETE(Ped ped)
	{
		return invoker::invoke<BOOL, 0xC9F6150424259965, 0xD19AD0>(ped);
	}

	FORCEINLINE auto GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(Ped ped)
	{
		return invoker::invoke<BOOL, 0xD4DBCC67CA333F7D, 0xD19AAC>(ped);
	}

	FORCEINLINE auto GET_TENNIS_SWING_ANIM_SWUNG(Ped ped)
	{
		return invoker::invoke<BOOL, 0x812812F60647A0F8, 0xD19AF4>(ped);
	}

	FORCEINLINE auto PLAY_TENNIS_DIVE_ANIM(Ped ped, int p1, float p2, float p3, float p4, BOOL p5)
	{
		return invoker::invoke<void, 0x9A6987280C48639C, 0xD1D5E4>(ped, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(Ped ped, const char* p1, float p2)
	{
		return invoker::invoke<void, 0xD3FF6AD07BECA69C, 0xD1ED64>(ped, p1, p2);
	}

	FORCEINLINE auto RESET_DISPATCH_SPAWN_LOCATION()
	{
		return invoker::invoke<void, 0xB111CFC87C576C1C, 0xD1DA48>();
	}

	FORCEINLINE auto SET_DISPATCH_SPAWN_LOCATION(float x, float y, float z)
	{
		return invoker::invoke<void, 0xDB96C28A65D345EE, 0xD1E2C8>(x, y, z);
	}

	FORCEINLINE auto RESET_DISPATCH_IDEAL_SPAWN_DISTANCE()
	{
		return invoker::invoke<void, 0xD7186A4A316964F2, 0xD1DA18>();
	}

	FORCEINLINE auto SET_DISPATCH_IDEAL_SPAWN_DISTANCE(float distance)
	{
		return invoker::invoke<void, 0x6625908717AE7808, 0xD1E2B8>(distance);
	}

	FORCEINLINE auto RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(Any p0)
	{
		return invoker::invoke<void, 0x5FBC5D27DD8DFF61, 0xD1DA60>(p0);
	}

	FORCEINLINE auto SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(Any p0, float p1)
	{
		return invoker::invoke<void, 0x986164755D8E9A93, 0xD1E2D4>(p0, p1);
	}

	FORCEINLINE auto SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(Any p0, float p1)
	{
		return invoker::invoke<void, 0x28CC6EA9A96AA5D4, 0xD1E2E4>(p0, p1);
	}

	FORCEINLINE auto ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width)
	{
		return invoker::invoke<int, 0xBE01072D0E1EE6DD, 0xD17440>(x1, y1, z1, x2, y2, z2, width);
	}

	FORCEINLINE auto ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(float x1, float y1, float x2, float y2)
	{
		return invoker::invoke<int, 0xB33FCD685BC4E12D, 0xD17468>(x1, y1, x2, y2);
	}

	FORCEINLINE auto REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(int p0)
	{
		return invoker::invoke<void, 0x2AF25F1F08FCBEF6, 0xD1D8C4>(p0);
	}

	FORCEINLINE auto RESET_DISPATCH_SPAWN_BLOCKING_AREAS()
	{
		return invoker::invoke<void, 0xFE4FED766438E0E, 0xD1DA30>();
	}

	FORCEINLINE auto RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN()
	{
		return invoker::invoke<void, 0x3C6FB3D7478BC495, 0xD1DAA4>();
	}

	FORCEINLINE auto SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(int p0, int p1)
	{
		return invoker::invoke<void, 0x5844B0328AB76BBF, 0xD1EF30>(p0, p1);
	}

	FORCEINLINE auto ADD_TACTICAL_NAV_MESH_POINT(float x, float y, float z)
	{
		return invoker::invoke<void, 0x74057F606033EB70, 0xD17614>(x, y, z);
	}

	FORCEINLINE auto CLEAR_TACTICAL_NAV_MESH_POINTS()
	{
		return invoker::invoke<void, 0x81B15F40AAE95932, 0xD17C14>();
	}

	FORCEINLINE auto SET_RIOT_MODE_ENABLED(BOOL toggle)
	{
		return invoker::invoke<void, 0x44182C1D103A97D2, 0xD1EC08>(toggle);
	}

	FORCEINLINE auto DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(int p0, const char* windowTitle, Any* p2, const char* defaultText, const char* defaultConcat1, const char* defaultConcat2, const char* defaultConcat3, const char* defaultConcat4, const char* defaultConcat5, const char* defaultConcat6, const char* defaultConcat7, int maxInputLength)
	{
		return invoker::invoke<void, 0x305739C2F5BFA5D9, 0xD18070>(p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength);
	}

	FORCEINLINE auto DISPLAY_ONSCREEN_KEYBOARD(int p0, const char* windowTitle, const char* p2, const char* defaultText, const char* defaultConcat1, const char* defaultConcat2, const char* defaultConcat3, int maxInputLength)
	{
		return invoker::invoke<void, 0xCFF30C6181F9B8BC, 0xD18028>(p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
	}

	FORCEINLINE auto UPDATE_ONSCREEN_KEYBOARD()
	{
		return invoker::invoke<int, 0x66DA7155B68E7638, 0xD1F7B0>();
	}

	FORCEINLINE auto GET_ONSCREEN_KEYBOARD_RESULT()
	{
		return invoker::invoke<const char*, 0x43FB09E8020180EA, 0xD196A0>();
	}

	FORCEINLINE auto CANCEL_ONSCREEN_KEYBOARD()
	{
		return invoker::invoke<void, 0x541EC9E98C2783B3, 0xD17934>();
	}

	FORCEINLINE auto NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(int p0)
	{
		return invoker::invoke<void, 0x8CB5613E14D44228, 0xD1D380>(p0);
	}

	FORCEINLINE auto ACTION_MANAGER_ENABLE_ACTION(Hash hash, BOOL enable)
	{
		return invoker::invoke<void, 0x324833E4F1D15D2D, 0xD17348>(hash, enable);
	}

	FORCEINLINE auto GET_REAL_WORLD_TIME()
	{
		return invoker::invoke<int, 0x93F26D866EFF997, 0xD1991C>();
	}

	FORCEINLINE auto SUPRESS_RANDOM_EVENT_THIS_FRAME(int eventType, BOOL suppress)
	{
		return invoker::invoke<void, 0x6687A6579389884, 0xD1F404>(eventType, suppress);
	}

	FORCEINLINE auto SET_EXPLOSIVE_AMMO_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0x35A960C1E2064D55, 0xD1E2F4>(player);
	}

	FORCEINLINE auto SET_FIRE_AMMO_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0x6966C09904B48D54, 0xD1E408>(player);
	}

	FORCEINLINE auto SET_EXPLOSIVE_MELEE_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0x7F2AA4BA999DE234, 0xD1E300>(player);
	}

	FORCEINLINE auto SET_SUPER_JUMP_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0x353BF8D85390AA39, 0xD1ED58>(player);
	}

	FORCEINLINE auto SET_BEAST_JUMP_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0xEA00B3128DDC34A5, 0xD1DC48>(player);
	}

	FORCEINLINE auto SET_FORCED_JUMP_THIS_FRAME(Player player)
	{
		return invoker::invoke<void, 0xBD53F503C46AD430, 0xD1E4A4>(player);
	}

	FORCEINLINE auto HAS_GAME_INSTALLED_THIS_SESSION()
	{
		return invoker::invoke<BOOL, 0xF27FC86E347471F1, 0xD19CC8>();
	}

	FORCEINLINE auto SET_TICKER_JOHNMARSTON_IS_DONE()
	{
		return invoker::invoke<void, 0xB691EC20AD2A1AC2, 0xD1EEF8>();
	}

	FORCEINLINE auto ARE_PROFILE_SETTINGS_VALID()
	{
		return invoker::invoke<BOOL, 0x76CA59C648318506, 0xD17734>();
	}

	FORCEINLINE auto PREVENT_ARREST_STATE_THIS_FRAME()
	{
		return invoker::invoke<void, 0xD4930C902E5CD6B6, 0xD1D6D4>();
	}

	FORCEINLINE auto FORCE_GAME_STATE_PLAYING()
	{
		return invoker::invoke<void, 0xDA91D9D96ED0EB8F, 0xD18810>();
	}

	FORCEINLINE auto SCRIPT_RACE_INIT(int p0, int p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xE971F2F7312DC1FB, 0xD1DB24>(p0, p1, p2, p3);
	}

	FORCEINLINE auto SCRIPT_RACE_SHUTDOWN()
	{
		return invoker::invoke<void, 0x33F8639DDBB019B4, 0xD1DB54>();
	}

	FORCEINLINE auto SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(Player player, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x52E29231F896396E, 0xD1DB3C>(player, p1, p2, p3);
	}

	FORCEINLINE auto SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(Player player, int* p1, int* p2)
	{
		return invoker::invoke<BOOL, 0x53A5BC0515A038AB, 0xD1DAF8>(player, p1, p2);
	}

	FORCEINLINE auto START_END_USER_BENCHMARK()
	{
		return invoker::invoke<void, 0x666ACF938032B583, 0xD1F334>();
	}

	FORCEINLINE auto STOP_END_USER_BENCHMARK()
	{
		return invoker::invoke<void, 0x11E6F86BB2700BFB, 0xD1F3B4>();
	}

	FORCEINLINE auto RESET_END_USER_BENCHMARK()
	{
		return invoker::invoke<void, 0x35E6F04FC81C5EA2, 0xD1DA6C>();
	}

	FORCEINLINE auto SAVE_END_USER_BENCHMARK()
	{
		return invoker::invoke<void, 0x2070D32BEB6A3825, 0xD1DAF0>();
	}

	FORCEINLINE auto UI_STARTED_END_USER_BENCHMARK()
	{
		return invoker::invoke<BOOL, 0xB0DAD631C6A2A5EB, 0xD1F740>();
	}

	FORCEINLINE auto LANDING_SCREEN_STARTED_END_USER_BENCHMARK()
	{
		return invoker::invoke<BOOL, 0xF3098F5B044D6CE, 0xD1A884>();
	}

	FORCEINLINE auto IS_COMMANDLINE_END_USER_BENCHMARK()
	{
		return invoker::invoke<BOOL, 0x3BFC5030EF1E6147, 0xD1A068>();
	}

	FORCEINLINE auto GET_BENCHMARK_ITERATIONS()
	{
		return invoker::invoke<int, 0x588D1FA610887CFD, 0xD18940>();
	}

	FORCEINLINE auto GET_BENCHMARK_PASS()
	{
		return invoker::invoke<int, 0x7007C113A8466ADE, 0xD1895C>();
	}

	FORCEINLINE auto RESTART_GAME()
	{
		return invoker::invoke<void, 0xF86F13F66FC06EDF, 0xD1DACC>();
	}

	FORCEINLINE auto QUIT_GAME()
	{
		return invoker::invoke<void, 0x1AB062C44F06F033, 0xD1D764>();
	}

	FORCEINLINE auto HAS_ASYNC_INSTALL_FINISHED()
	{
		return invoker::invoke<BOOL, 0xD7F2FC1281F868FD, 0xD19BF8>();
	}

	FORCEINLINE auto CLEANUP_ASYNC_INSTALL()
	{
		return invoker::invoke<void, 0x129E6CC3506106AC, 0xD179AC>();
	}

	FORCEINLINE auto PLM_IS_IN_CONSTRAINED_MODE()
	{
		return invoker::invoke<BOOL, 0x5318F44DB7A13F50, 0xD1D680>();
	}

	FORCEINLINE auto PLM_GET_CONSTRAINED_DURATION_MS()
	{
		return invoker::invoke<int, 0x4DDCC681612459A6, 0xD1D660>();
	}

	FORCEINLINE auto SET_PLAYER_IS_IN_ANIMAL_FORM(BOOL toggle)
	{
		return invoker::invoke<void, 0xA818A2A38A2A3D6D, 0xD1EA94>(toggle);
	}

	FORCEINLINE auto GET_IS_PLAYER_IN_ANIMAL_FORM()
	{
		return invoker::invoke<BOOL, 0x7B42AC66804829CF, 0xD19284>();
	}

	FORCEINLINE auto SET_PLAYER_IS_REPEATING_A_MISSION(BOOL toggle)
	{
		return invoker::invoke<void, 0xA53470336C143CAE, 0xD1EAB4>(toggle);
	}

	FORCEINLINE auto DISABLE_SCREEN_DIMMING_THIS_FRAME()
	{
		return invoker::invoke<void, 0x71673481F07D6434, 0x81A1C0>();
	}

	FORCEINLINE auto GET_CITY_DENSITY()
	{
		return invoker::invoke<float, 0xAB154BFC15F33733, 0xD18C54>();
	}

	FORCEINLINE auto USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE()
	{
		return invoker::invoke<void, 0xC4A706CAFECA1953, 0xD1F7CC>();
	}

	FORCEINLINE auto SET_CONTENT_ID_INDEX(Hash contentId, int index)
	{
		return invoker::invoke<void, 0xF0F077286626CEBB, 0xD1E18C>(contentId, index);
	}

	FORCEINLINE auto GET_CONTENT_ID_INDEX(Hash contentId)
	{
		return invoker::invoke<int, 0xEAA437DE2A801E8A, 0xD18D1C>(contentId);
	}

	FORCEINLINE auto _SET_CONTENT_PROP_TYPE(Hash model, int type)
	{
		return invoker::invoke<void, 0xBA4583AF4C678A9B, 0xD1E160>(model, type);
	}

	FORCEINLINE auto _GET_CONTENT_PROP_TYPE(Hash model)
	{
		return invoker::invoke<int, 0x8BAF8AD59F47AAFC, 0xD18CFC>(model);
	}

}
namespace AUDIO
{
	FORCEINLINE auto PLAY_PED_RINGTONE(const char* ringtoneName, Ped ped, BOOL p2)
	{
		return invoker::invoke<void, 0x1BC60757AC20ACCF, 0xA74124>(ringtoneName, ped, p2);
	}

	FORCEINLINE auto IS_PED_RINGTONE_PLAYING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x129DE7ED6456C4CA, 0xA73934>(ped);
	}

	FORCEINLINE auto STOP_PED_RINGTONE(Ped ped)
	{
		return invoker::invoke<void, 0x92187CF73A8D1B96, 0xA770DC>(ped);
	}

	FORCEINLINE auto IS_MOBILE_PHONE_CALL_ONGOING()
	{
		return invoker::invoke<BOOL, 0xE87F28FD4128D063, 0xA7387C>();
	}

	FORCEINLINE auto IS_MOBILE_INTERFERENCE_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x56D84C8BC3CE3EF9, 0xA73868>();
	}

	FORCEINLINE auto GET_CURRENT_TV_SHOW_PLAY_TIME()
	{
		return invoker::invoke<int, 0xDD3AA743AB7D4D75, 0xA709F0>();
	}

	FORCEINLINE auto CREATE_NEW_SCRIPTED_CONVERSATION()
	{
		return invoker::invoke<void, 0x4C2ADBAAF83DA56A, 0xA6EF94>();
	}

	FORCEINLINE auto ADD_LINE_TO_CONVERSATION(int index, const char* p1, const char* p2, int p3, int p4, BOOL p5, BOOL p6, BOOL p7, BOOL p8, int p9, BOOL p10, BOOL p11, BOOL p12)
	{
		return invoker::invoke<void, 0xC401B1960D35A6C4, 0xA6E198>(index, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
	}

	FORCEINLINE auto ADD_PED_TO_CONVERSATION(int index, Ped ped, const char* p2)
	{
		return invoker::invoke<void, 0x302B7D91564CDE7F, 0xA6E220>(index, ped, p2);
	}

	FORCEINLINE auto SET_POSITION_FOR_NULL_CONV_PED(Any p0, float p1, float p2, float p3)
	{
		return invoker::invoke<void, 0x353876FDDC0D0E0E, 0xA764A0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto SET_ENTITY_FOR_NULL_CONV_PED(int p0, Entity entity)
	{
		return invoker::invoke<void, 0x34F5E7395D31DAD7, 0xA75820>(p0, entity);
	}

	FORCEINLINE auto SET_MICROPHONE_POSITION(BOOL toggle, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3)
	{
		return invoker::invoke<void, 0x6250F3FAA1D0F93E, 0xA76098>(toggle, x1, y1, z1, x2, y2, z2, x3, y3, z3);
	}

	FORCEINLINE auto SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(BOOL p0)
	{
		return invoker::invoke<void, 0x6CBE32FD4ABF9B73, 0xA753C0>(p0);
	}

	FORCEINLINE auto SET_CONVERSATION_AUDIO_PLACEHOLDER(BOOL p0)
	{
		return invoker::invoke<void, 0xC5C39679B6570380, 0xA753D8>(p0);
	}

	FORCEINLINE auto START_SCRIPT_PHONE_CONVERSATION(BOOL p0, BOOL p1)
	{
		return invoker::invoke<void, 0xABC27367E50604B7, 0xA76ED4>(p0, p1);
	}

	FORCEINLINE auto PRELOAD_SCRIPT_PHONE_CONVERSATION(BOOL p0, BOOL p1)
	{
		return invoker::invoke<void, 0x4FF8DE2B4C376BE4, 0xA74454>(p0, p1);
	}

	FORCEINLINE auto START_SCRIPT_CONVERSATION(BOOL p0, BOOL p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0xA406335199BF1001, 0xA76E6C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PRELOAD_SCRIPT_CONVERSATION(BOOL p0, BOOL p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x4082E7EF621D1686, 0xA74410>(p0, p1, p2, p3);
	}

	FORCEINLINE auto START_PRELOADED_CONVERSATION()
	{
		return invoker::invoke<void, 0x43D69D4AAC59FA8E, 0xA76E58>();
	}

	FORCEINLINE auto GET_IS_PRELOADED_CONVERSATION_READY()
	{
		return invoker::invoke<BOOL, 0x22258A5EB34183DC, 0xA718C0>();
	}

	FORCEINLINE auto IS_SCRIPTED_CONVERSATION_ONGOING()
	{
		return invoker::invoke<BOOL, 0x1F9EB85925C3ECD7, 0xA73B0C>();
	}

	FORCEINLINE auto IS_SCRIPTED_CONVERSATION_LOADED()
	{
		return invoker::invoke<BOOL, 0xF7C641B5F6AF0A82, 0xA73AE8>();
	}

	FORCEINLINE auto GET_CURRENT_SCRIPTED_CONVERSATION_LINE()
	{
		return invoker::invoke<int, 0xE7365CC791D1E4EB, 0xA70974>();
	}

	FORCEINLINE auto PAUSE_SCRIPTED_CONVERSATION(BOOL p0)
	{
		return invoker::invoke<void, 0xF329B991CDE087C7, 0xA73F44>(p0);
	}

	FORCEINLINE auto RESTART_SCRIPTED_CONVERSATION()
	{
		return invoker::invoke<void, 0xC78B293A5F4EACF9, 0xA76E58>();
	}

	FORCEINLINE auto STOP_SCRIPTED_CONVERSATION(BOOL p0)
	{
		return invoker::invoke<int, 0xF15249D24BC5ADA, 0xA7712C>(p0);
	}

	FORCEINLINE auto SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE()
	{
		return invoker::invoke<void, 0x329FFB0BB004FDEE, 0xA76BB0>();
	}

	FORCEINLINE auto INTERRUPT_CONVERSATION(Ped ped, const char* voiceline, const char* speaker)
	{
		return invoker::invoke<void, 0x695EDD4AD352F831, 0xA72B88>(ped, voiceline, speaker);
	}

	FORCEINLINE auto INTERRUPT_CONVERSATION_AND_PAUSE(Ped ped, const char* p1, const char* speaker)
	{
		return invoker::invoke<void, 0xEEC6E2199CA0A2FC, 0xA72B9C>(ped, p1, speaker);
	}

	FORCEINLINE auto GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(Any* p0)
	{
		return invoker::invoke<int, 0xC0B57599F426855E, 0xA72408>(p0);
	}

	FORCEINLINE auto SET_NO_DUCKING_FOR_CONVERSATION(BOOL p0)
	{
		return invoker::invoke<void, 0x8B3770418CACFABE, 0xA76148>(p0);
	}

	FORCEINLINE auto REGISTER_SCRIPT_WITH_AUDIO(int p0)
	{
		return invoker::invoke<void, 0x8E1F26D6742EC167, 0x81A1C0>(p0);
	}

	FORCEINLINE auto UNREGISTER_SCRIPT_WITH_AUDIO()
	{
		return invoker::invoke<void, 0x6CC88053C1AF072D, 0x81A1C0>();
	}

	FORCEINLINE auto REQUEST_MISSION_AUDIO_BANK(const char* audioBank, BOOL p1, Any p2)
	{
		return invoker::invoke<BOOL, 0xE60D329593E7759D, 0xA74924>(audioBank, p1, p2);
	}

	FORCEINLINE auto REQUEST_AMBIENT_AUDIO_BANK(const char* audioBank, BOOL p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x91476A70AA1CB09A, 0xA74924>(audioBank, p1, p2);
	}

	FORCEINLINE auto REQUEST_SCRIPT_AUDIO_BANK(const char* audioBank, BOOL p1, Any p2)
	{
		return invoker::invoke<BOOL, 0xD7E1DF759CD0FFF2, 0xA74924>(audioBank, p1, p2);
	}

	FORCEINLINE auto HINT_MISSION_AUDIO_BANK(const char* audioBank, BOOL p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x329F5E069BAF8209, 0xA72ABC>(audioBank, p1, p2);
	}

	FORCEINLINE auto HINT_AMBIENT_AUDIO_BANK(const char* audioBank, BOOL p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x69600B337BEBDC69, 0xA72ABC>(audioBank, p1, p2);
	}

	FORCEINLINE auto HINT_SCRIPT_AUDIO_BANK(const char* audioBank, BOOL p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x533FC7490FC4937D, 0xA72ABC>(audioBank, p1, p2);
	}

	FORCEINLINE auto RELEASE_MISSION_AUDIO_BANK()
	{
		return invoker::invoke<void, 0xAF648ACD10AB3A0F, 0xA7470C>();
	}

	FORCEINLINE auto RELEASE_AMBIENT_AUDIO_BANK()
	{
		return invoker::invoke<void, 0x37EFCB45A4F13EB5, 0xA7470C>();
	}

	FORCEINLINE auto RELEASE_NAMED_SCRIPT_AUDIO_BANK(const char* audioBank)
	{
		return invoker::invoke<void, 0x48FA483FE4F18CFE, 0xA77600>(audioBank);
	}

	FORCEINLINE auto RELEASE_SCRIPT_AUDIO_BANK()
	{
		return invoker::invoke<void, 0x59E2E0637E7776F3, 0xA7470C>();
	}

	FORCEINLINE auto UNHINT_AMBIENT_AUDIO_BANK()
	{
		return invoker::invoke<void, 0x3A2C09DEA2F7A5FB, 0xA7470C>();
	}

	FORCEINLINE auto UNHINT_SCRIPT_AUDIO_BANK()
	{
		return invoker::invoke<void, 0xC0BE3854AFD77802, 0xA7470C>();
	}

	FORCEINLINE auto UNHINT_NAMED_SCRIPT_AUDIO_BANK(const char* audioBank)
	{
		return invoker::invoke<void, 0x9F7EBAD31811A31E, 0xA77600>(audioBank);
	}

	FORCEINLINE auto GET_SOUND_ID()
	{
		return invoker::invoke<int, 0xCA369FBC0DE29517, 0xA7208C>();
	}

	FORCEINLINE auto RELEASE_SOUND_ID(int soundId)
	{
		return invoker::invoke<void, 0x394AFAC073E1F277, 0xA74718>(soundId);
	}

	FORCEINLINE auto PLAY_SOUND(int soundId, const char* audioName, const char* audioRef, BOOL p3, Any p4, BOOL p5)
	{
		return invoker::invoke<void, 0x85E83A170EF61477, 0xA74168>(soundId, audioName, audioRef, p3, p4, p5);
	}

	FORCEINLINE auto PLAY_SOUND_FRONTEND(int soundId, const char* audioName, const char* audioRef, BOOL p3)
	{
		return invoker::invoke<void, 0xBF3D28CA44F3BE2D, 0xA74260>(soundId, audioName, audioRef, p3);
	}

	FORCEINLINE auto PLAY_DEFERRED_SOUND_FRONTEND(const char* soundName, const char* soundsetName)
	{
		return invoker::invoke<void, 0xD35776C4668F2E8D, 0xA74048>(soundName, soundsetName);
	}

	FORCEINLINE auto PLAY_SOUND_FROM_ENTITY(int soundId, const char* audioName, Entity entity, const char* audioRef, BOOL isNetwork, Any p5)
	{
		return invoker::invoke<void, 0xBD618A73193F9982, 0xA741F0>(soundId, audioName, entity, audioRef, isNetwork, p5);
	}

	FORCEINLINE auto PLAY_SOUND_FROM_ENTITY_HASH(int soundId, Hash model, Entity entity, Hash soundSetHash, Any p4, Any p5)
	{
		return invoker::invoke<void, 0x299B36D8A0393C3E, 0xA74228>(soundId, model, entity, soundSetHash, p4, p5);
	}

	FORCEINLINE auto PLAY_SOUND_FROM_COORD(int soundId, const char* audioName, float x, float y, float z, const char* audioRef, BOOL isNetwork, int range, BOOL p8)
	{
		return invoker::invoke<void, 0xF37CDE164C892195, 0xA741AC>(soundId, audioName, x, y, z, audioRef, isNetwork, range, p8);
	}

	FORCEINLINE auto UPDATE_SOUND_COORD(int soundId, float x, float y, float z)
	{
		return invoker::invoke<void, 0xBE63C0B214CC5142, 0xA77680>(soundId, x, y, z);
	}

	FORCEINLINE auto STOP_SOUND(int soundId)
	{
		return invoker::invoke<void, 0x8E4825CCACA34B58, 0xA77184>(soundId);
	}

	FORCEINLINE auto GET_NETWORK_ID_FROM_SOUND_ID(int soundId)
	{
		return invoker::invoke<int, 0xFCF4655788628D0F, 0xA71A7C>(soundId);
	}

	FORCEINLINE auto GET_SOUND_ID_FROM_NETWORK_ID(int netId)
	{
		return invoker::invoke<int, 0x37964484C6C1561D, 0xA720AC>(netId);
	}

	FORCEINLINE auto SET_VARIABLE_ON_SOUND(int soundId, const char* variable, float p2)
	{
		return invoker::invoke<void, 0x3F002AA9562BF0BE, 0xA76944>(soundId, variable, p2);
	}

	FORCEINLINE auto SET_VARIABLE_ON_STREAM(const char* variable, float p1)
	{
		return invoker::invoke<void, 0x37605EDCEE5D5944, 0xA76964>(variable, p1);
	}

	FORCEINLINE auto OVERRIDE_UNDERWATER_STREAM(const char* p0, BOOL p1)
	{
		return invoker::invoke<void, 0xC9695FEF4C4A96F8, 0xA73EB0>(p0, p1);
	}

	FORCEINLINE auto SET_VARIABLE_ON_UNDER_WATER_STREAM(const char* variableName, float value)
	{
		return invoker::invoke<void, 0xFFB39CC82F4E6583, 0xA76990>(variableName, value);
	}

	FORCEINLINE auto HAS_SOUND_FINISHED(int soundId)
	{
		return invoker::invoke<BOOL, 0x9F0C06CFBACDD6A1, 0xA72A48>(soundId);
	}

	FORCEINLINE auto PLAY_PED_AMBIENT_SPEECH_NATIVE(Ped ped, const char* speechName, const char* speechParam, Any p3)
	{
		return invoker::invoke<void, 0x4C016145CE6A18B, 0xA740D8>(ped, speechName, speechParam, p3);
	}

	FORCEINLINE auto PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(Ped ped, const char* speechName, const char* speechParam, Any p3)
	{
		return invoker::invoke<void, 0x6F0064B122E0462C, 0xA740BC>(ped, speechName, speechParam, p3);
	}

	FORCEINLINE auto PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(Ped ped, const char* speechName, const char* voiceName, const char* speechParam, BOOL p4)
	{
		return invoker::invoke<void, 0x4CAD907F190E6F10, 0xA740F4>(ped, speechName, voiceName, speechParam, p4);
	}

	FORCEINLINE auto PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(const char* speechName, const char* voiceName, float x, float y, float z, const char* speechParam)
	{
		return invoker::invoke<void, 0xF4129180F5858D16, 0xA73FC8>(speechName, voiceName, x, y, z, speechParam);
	}

	FORCEINLINE auto OVERRIDE_TREVOR_RAGE(const char* voiceEffect)
	{
		return invoker::invoke<void, 0xFABB7252CDD75478, 0xA73EA0>(voiceEffect);
	}

	FORCEINLINE auto RESET_TREVOR_RAGE()
	{
		return invoker::invoke<void, 0xEAC3827244C8E5B5, 0xA74AFC>();
	}

	FORCEINLINE auto SET_PLAYER_ANGRY(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x892251E58BAE563B, 0xA76444>(ped, toggle);
	}

	FORCEINLINE auto PLAY_PAIN(Ped ped, int painID, int p1, Any p3)
	{
		return invoker::invoke<void, 0xEBA2204AAD092B47, 0xA740A0>(ped, painID, p1, p3);
	}

	FORCEINLINE auto RELEASE_WEAPON_AUDIO()
	{
		return invoker::invoke<void, 0xAE5E74D6FA4EF0D8, 0xA7472C>();
	}

	FORCEINLINE auto ACTIVATE_AUDIO_SLOWMO_MODE(const char* mode)
	{
		return invoker::invoke<void, 0xF010888FF9A380E6, 0xA6E010>(mode);
	}

	FORCEINLINE auto DEACTIVATE_AUDIO_SLOWMO_MODE(const char* mode)
	{
		return invoker::invoke<void, 0x5FFA5801E4084FC5, 0xA6F6D0>(mode);
	}

	FORCEINLINE auto SET_AMBIENT_VOICE_NAME(Ped ped, const char* name)
	{
		return invoker::invoke<void, 0x397CF4F4C8B17365, 0xA74D78>(ped, name);
	}

	FORCEINLINE auto SET_AMBIENT_VOICE_NAME_HASH(Ped ped, Hash hash)
	{
		return invoker::invoke<void, 0xE0B01E3F4FF01B04, 0xA74D88>(ped, hash);
	}

	FORCEINLINE auto GET_AMBIENT_VOICE_NAME_HASH(Ped ped)
	{
		return invoker::invoke<Hash, 0xD93B65D497A805BA, 0xA70570>(ped);
	}

	FORCEINLINE auto SET_PED_VOICE_FULL(Ped ped)
	{
		return invoker::invoke<void, 0x7E30BA14928608A0, 0xA763D4>(ped);
	}

	FORCEINLINE auto SET_PED_RACE_AND_VOICE_GROUP(Ped ped, int p1, Hash voiceGroup)
	{
		return invoker::invoke<void, 0xE315F38FDD0139FF, 0xA763C0>(ped, p1, voiceGroup);
	}

	FORCEINLINE auto SET_PED_VOICE_GROUP(Ped ped, Hash voiceGroupHash)
	{
		return invoker::invoke<void, 0x996F4A3208DAD314, 0xA763E0>(ped, voiceGroupHash);
	}

	FORCEINLINE auto SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(Ped ped, Hash voiceGroupHash)
	{
		return invoker::invoke<void, 0x4349438F7A83A186, 0xA763F0>(ped, voiceGroupHash);
	}

	FORCEINLINE auto SET_PED_GENDER(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0xCE8A758C0ADD192B, 0xA7637C>(ped, p1);
	}

	FORCEINLINE auto STOP_CURRENT_PLAYING_SPEECH(Ped ped)
	{
		return invoker::invoke<void, 0x16DD8628F525A206, 0xA7700C>(ped);
	}

	FORCEINLINE auto STOP_CURRENT_PLAYING_AMBIENT_SPEECH(Ped ped)
	{
		return invoker::invoke<void, 0xDCD95AE65EFC28CE, 0xA77000>(ped);
	}

	FORCEINLINE auto IS_AMBIENT_SPEECH_PLAYING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x912159A05BE6B52E, 0xA72C98>(ped);
	}

	FORCEINLINE auto IS_SCRIPTED_SPEECH_PLAYING(Ped p0)
	{
		return invoker::invoke<BOOL, 0xAD0D2187C5FE447D, 0xA73B28>(p0);
	}

	FORCEINLINE auto IS_ANY_SPEECH_PLAYING(Ped ped)
	{
		return invoker::invoke<BOOL, 0x75E315E7679F4F24, 0xA72D20>(ped);
	}

	FORCEINLINE auto IS_ANY_POSITIONAL_SPEECH_PLAYING()
	{
		return invoker::invoke<BOOL, 0x101615BBD5E614BD, 0xA72D04>();
	}

	FORCEINLINE auto DOES_CONTEXT_EXIST_FOR_THIS_PED(Ped ped, const char* speechName, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x8A6F4A122DEA1DA7, 0xA6FABC>(ped, speechName, p2);
	}

	FORCEINLINE auto IS_PED_IN_CURRENT_CONVERSATION(Ped ped)
	{
		return invoker::invoke<BOOL, 0x6B919BD9340E189A, 0xA73910>(ped);
	}

	FORCEINLINE auto SET_PED_IS_DRUNK(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x8A19BA162BA1DE3E, 0xA763AC>(ped, toggle);
	}

	FORCEINLINE auto PLAY_ANIMAL_VOCALIZATION(Ped pedHandle, int p1, const char* speechName)
	{
		return invoker::invoke<void, 0xABFC7C2CD8D89949, 0xA73FE0>(pedHandle, p1, speechName);
	}

	FORCEINLINE auto IS_ANIMAL_VOCALIZATION_PLAYING(Ped pedHandle)
	{
		return invoker::invoke<BOOL, 0xA6A0FE99C58BF725, 0xA72CE0>(pedHandle);
	}

	FORCEINLINE auto SET_ANIMAL_MOOD(Ped animal, int mood)
	{
		return invoker::invoke<void, 0xB66A5C25E8DCC180, 0xA74E08>(animal, mood);
	}

	FORCEINLINE auto IS_MOBILE_PHONE_RADIO_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x92BAF57CC368DFC5, 0xA73898>();
	}

	FORCEINLINE auto SET_MOBILE_PHONE_RADIO_STATE(BOOL state)
	{
		return invoker::invoke<void, 0xFFC0556FB7074B1F, 0xA760B4>(state);
	}

	FORCEINLINE auto GET_PLAYER_RADIO_STATION_INDEX()
	{
		return invoker::invoke<int, 0xE1799BB6E4C1CDFB, 0xA71CEC>();
	}

	FORCEINLINE auto GET_PLAYER_RADIO_STATION_NAME()
	{
		return invoker::invoke<const char*, 0xA9CB3A11303C5801, 0xA71D08>();
	}

	FORCEINLINE auto GET_RADIO_STATION_NAME(int radioStation)
	{
		return invoker::invoke<const char*, 0x9A7254C20CB82B70, 0xA71D60>(radioStation);
	}

	FORCEINLINE auto GET_PLAYER_RADIO_STATION_GENRE()
	{
		return invoker::invoke<int, 0x3BB0DC333050E9BD, 0xA71CBC>();
	}

	FORCEINLINE auto IS_RADIO_RETUNING()
	{
		return invoker::invoke<BOOL, 0xC47E3FF56898A28B, 0xA739B8>();
	}

	FORCEINLINE auto IS_RADIO_FADED_OUT()
	{
		return invoker::invoke<BOOL, 0x93D3C066DE3C5879, 0xA7399C>();
	}

	FORCEINLINE auto SET_RADIO_RETUNE_UP()
	{
		return invoker::invoke<void, 0x7CD8D024151C6CF9, 0xA76510>();
	}

	FORCEINLINE auto SET_RADIO_RETUNE_DOWN()
	{
		return invoker::invoke<void, 0xFB7DD2B09F9CFA1E, 0xA764F0>();
	}

	FORCEINLINE auto SET_RADIO_TO_STATION_NAME(const char* stationName)
	{
		return invoker::invoke<void, 0x166878629B365828, 0xA765B0>(stationName);
	}

	FORCEINLINE auto SET_VEH_RADIO_STATION(Vehicle vehicle, const char* radioStation)
	{
		return invoker::invoke<void, 0x38911F7BA2D48F10, 0xA76AF4>(vehicle, radioStation);
	}

	FORCEINLINE auto SET_VEH_HAS_NORMAL_RADIO(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x678D5CE177157549, 0xA76AE8>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_RADIO_ON(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xC052348A3DF7313F, 0xA73C68>(vehicle);
	}

	FORCEINLINE auto SET_VEH_FORCED_RADIO_THIS_FRAME(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xC023C55477474DBE, 0xA76ADC>(vehicle);
	}

	FORCEINLINE auto SET_EMITTER_RADIO_STATION(const char* emitterName, const char* radioStation, Any p2)
	{
		return invoker::invoke<void, 0x74378390011ACDA4, 0xA755E8>(emitterName, radioStation, p2);
	}

	FORCEINLINE auto SET_STATIC_EMITTER_ENABLED(const char* emitterName, BOOL toggle)
	{
		return invoker::invoke<void, 0xC897319696131088, 0xA76778>(emitterName, toggle);
	}

	FORCEINLINE auto LINK_STATIC_EMITTER_TO_ENTITY(const char* emitterName, Entity entity)
	{
		return invoker::invoke<void, 0xACF36914BA191DCB, 0xA73CA8>(emitterName, entity);
	}

	FORCEINLINE auto SET_RADIO_TO_STATION_INDEX(int radioStation)
	{
		return invoker::invoke<void, 0x21880A4FCBA19269, 0xA7658C>(radioStation);
	}

	FORCEINLINE auto SET_FRONTEND_RADIO_ACTIVE(BOOL active)
	{
		return invoker::invoke<void, 0x51E3279E9437131C, 0xA75D84>(active);
	}

	FORCEINLINE auto UNLOCK_MISSION_NEWS_STORY(int newsStory)
	{
		return invoker::invoke<void, 0x5A0A1BD816B9AAB5, 0xA77614>(newsStory);
	}

	FORCEINLINE auto IS_MISSION_NEWS_STORY_UNLOCKED(int newsStory)
	{
		return invoker::invoke<BOOL, 0x7D01976EF2600F1C, 0xA73848>(newsStory);
	}

	FORCEINLINE auto GET_AUDIBLE_MUSIC_TRACK_TEXT_ID()
	{
		return invoker::invoke<int, 0x6E5F2B4C6A398419, 0xA705F4>();
	}

	FORCEINLINE auto PLAY_END_CREDITS_MUSIC(BOOL play)
	{
		return invoker::invoke<void, 0xB830B097D0050A2F, 0xA74058>(play);
	}

	FORCEINLINE auto SKIP_RADIO_FORWARD()
	{
		return invoker::invoke<void, 0xDB57B7ED2C49BEAD, 0x1704638>();
	}

	FORCEINLINE auto FREEZE_RADIO_STATION(const char* radioStation)
	{
		return invoker::invoke<void, 0x203D79229B3797AE, 0xA70528>(radioStation);
	}

	FORCEINLINE auto UNFREEZE_RADIO_STATION(const char* radioStation)
	{
		return invoker::invoke<void, 0xAA4A71CD7DB4FB3B, 0xA775DC>(radioStation);
	}

	FORCEINLINE auto SET_RADIO_AUTO_UNFREEZE(BOOL toggle)
	{
		return invoker::invoke<void, 0xF51244E6BCE779C5, 0xA764C0>(toggle);
	}

	FORCEINLINE auto SET_INITIAL_PLAYER_STATION(const char* radioStation)
	{
		return invoker::invoke<void, 0x91115A9BE4445AA6, 0xA7605C>(radioStation);
	}

	FORCEINLINE auto SET_USER_RADIO_CONTROL_ENABLED(BOOL toggle)
	{
		return invoker::invoke<void, 0x938C85923AD6778A, 0xA76904>(toggle);
	}

	FORCEINLINE auto SET_RADIO_TRACK(const char* radioStation, const char* radioTrack)
	{
		return invoker::invoke<void, 0xE42344700E00B10F, 0xA765C4>(radioStation, radioTrack);
	}

	FORCEINLINE auto SET_RADIO_TRACK_WITH_START_OFFSET(const char* radioStationName, const char* mixName, int p2)
	{
		return invoker::invoke<void, 0x117ED8E568A3BE94, 0xA765F4>(radioStationName, mixName, p2);
	}

	FORCEINLINE auto SET_NEXT_RADIO_TRACK(const char* radioName, const char* radioTrack, const char* p2, const char* p3)
	{
		return invoker::invoke<void, 0x709E956A8CB78CCA, 0xA760FC>(radioName, radioTrack, p2, p3);
	}

	FORCEINLINE auto SET_VEHICLE_RADIO_LOUD(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x7D167E642755C276, 0xA76A94>(vehicle, toggle);
	}

	FORCEINLINE auto CAN_VEHICLE_RECEIVE_CB_RADIO(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x798A910E92BD7584, 0xA6EB84>(vehicle);
	}

	FORCEINLINE auto SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(BOOL toggle)
	{
		return invoker::invoke<void, 0x48A57C4A90E9F0D, 0xA760CC>(toggle);
	}

	FORCEINLINE auto DOES_PLAYER_VEH_HAVE_RADIO()
	{
		return invoker::invoke<BOOL, 0x2044128E627E0951, 0xA6FCC4>();
	}

	FORCEINLINE auto IS_PLAYER_VEH_RADIO_ENABLE()
	{
		return invoker::invoke<BOOL, 0x28D9C88BBCC658EF, 0xA73958>();
	}

	FORCEINLINE auto SET_VEHICLE_RADIO_ENABLED(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x4DC72C4B884A6C59, 0xA76A80>(vehicle, toggle);
	}

	FORCEINLINE auto SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(Any p0)
	{
		return invoker::invoke<void, 0xEECA35FE21D7026, 0xA76490>(p0);
	}

	FORCEINLINE auto SET_CUSTOM_RADIO_TRACK_LIST(const char* radioStation, const char* trackListName, BOOL p2)
	{
		return invoker::invoke<void, 0xB1A857E9C5658D10, 0xA753FC>(radioStation, trackListName, p2);
	}

	FORCEINLINE auto CLEAR_CUSTOM_RADIO_TRACK_LIST(const char* radioStation)
	{
		return invoker::invoke<void, 0x7035CF3AB08A7AF7, 0xA6ED3C>(radioStation);
	}

	FORCEINLINE auto GET_NUM_UNLOCKED_RADIO_STATIONS()
	{
		return invoker::invoke<int, 0x8044961915B48136, 0xA71BBC>();
	}

	FORCEINLINE auto FIND_RADIO_STATION_INDEX(Hash stationNameHash)
	{
		return invoker::invoke<int, 0xE029F4A956BFCCBE, 0xA703BC>(stationNameHash);
	}

	FORCEINLINE auto SET_RADIO_STATION_MUSIC_ONLY(const char* radioStation, BOOL toggle)
	{
		return invoker::invoke<void, 0x247C4DE693AD9B36, 0xA76560>(radioStation, toggle);
	}

	FORCEINLINE auto SET_RADIO_FRONTEND_FADE_TIME(float fadeTime)
	{
		return invoker::invoke<void, 0xACF6553AB8A4EA53, 0xA764DC>(fadeTime);
	}

	FORCEINLINE auto UNLOCK_RADIO_STATION_TRACK_LIST(const char* radioStation, const char* trackListName)
	{
		return invoker::invoke<void, 0x7C236591DA4F980B, 0xA77620>(radioStation, trackListName);
	}

	FORCEINLINE auto LOCK_RADIO_STATION_TRACK_LIST(const char* radioStation, const char* trackListName)
	{
		return invoker::invoke<void, 0x68A74A172B90D43E, 0xA73D8C>(radioStation, trackListName);
	}

	FORCEINLINE auto UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(BOOL enableMixes)
	{
		return invoker::invoke<void, 0x66B137F3AE54333B, 0x81A1C0>(enableMixes);
	}

	FORCEINLINE auto LOCK_RADIO_STATION(const char* radioStationName, BOOL toggle)
	{
		return invoker::invoke<void, 0xCA3C8048CFD52E02, 0xA73D78>(radioStationName, toggle);
	}

	FORCEINLINE auto SET_RADIO_STATION_AS_FAVOURITE(const char* radioStation, BOOL toggle)
	{
		return invoker::invoke<void, 0x518DFEC4FCC07749, 0xA76530>(radioStation, toggle);
	}

	FORCEINLINE auto IS_RADIO_STATION_FAVOURITED(const char* radioStation)
	{
		return invoker::invoke<BOOL, 0x36759581D0633B06, 0xA739E0>(radioStation);
	}

	FORCEINLINE auto GET_NEXT_AUDIBLE_BEAT(float* out1, float* out2, int* out3)
	{
		return invoker::invoke<BOOL, 0x604E6C2DCB4B137F, 0xA71AA4>(out1, out2, out3);
	}

	FORCEINLINE auto FORCE_MUSIC_TRACK_LIST(const char* radioStation, const char* trackListName, int milliseconds)
	{
		return invoker::invoke<void, 0x7B35A877A492E93, 0xA70464>(radioStation, trackListName, milliseconds);
	}

	FORCEINLINE auto GET_CURRENT_TRACK_PLAY_TIME(const char* radioStationName)
	{
		return invoker::invoke<int, 0x19CC911A97AF8F27, 0xA70994>(radioStationName);
	}

	FORCEINLINE auto GET_CURRENT_TRACK_SOUND_NAME(const char* radioStationName)
	{
		return invoker::invoke<Hash, 0xBFF9D1DD2EA1B515, 0xA709B4>(radioStationName);
	}

	FORCEINLINE auto SET_VEHICLE_MISSILE_WARNING_ENABLED(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x41F9D74D334CF57B, 0xA76A4C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_AMBIENT_ZONE_STATE(const char* zoneName, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x57FF2FF5DA6DCB15, 0xA74DD0>(zoneName, p1, p2);
	}

	FORCEINLINE auto CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, BOOL p1)
	{
		return invoker::invoke<void, 0xA9B69A9A9C786B86, 0xA6ED08>(zoneName, p1);
	}

	FORCEINLINE auto SET_AMBIENT_ZONE_LIST_STATE(const char* ambientZone, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xAE9B78A0E33292A8, 0xA74D98>(ambientZone, p1, p2);
	}

	FORCEINLINE auto CLEAR_AMBIENT_ZONE_LIST_STATE(const char* ambientZone, BOOL p1)
	{
		return invoker::invoke<void, 0x884A5994C1CC6222, 0xA6ECF4>(ambientZone, p1);
	}

	FORCEINLINE auto SET_AMBIENT_ZONE_STATE_PERSISTENT(const char* ambientZone, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xCD04ECE71F3A9215, 0xA74DEC>(ambientZone, p1, p2);
	}

	FORCEINLINE auto SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(const char* ambientZone, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x6866AF3D8691EDC0, 0xA74DB4>(ambientZone, p1, p2);
	}

	FORCEINLINE auto IS_AMBIENT_ZONE_ENABLED(const char* ambientZone)
	{
		return invoker::invoke<BOOL, 0x80EEE4C5880DA82E, 0xA72CBC>(ambientZone);
	}

	FORCEINLINE auto REFRESH_CLOSEST_OCEAN_SHORELINE()
	{
		return invoker::invoke<void, 0x8D2FEC38ED93537D, 0xA74658>();
	}

	FORCEINLINE auto SET_CUTSCENE_AUDIO_OVERRIDE(const char* name)
	{
		return invoker::invoke<void, 0x91044D2095108F03, 0xA75414>(name);
	}

	FORCEINLINE auto SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(const char* variableName, float value)
	{
		return invoker::invoke<void, 0x477B0461E172D182, 0xA7697C>(variableName, value);
	}

	FORCEINLINE auto PLAY_POLICE_REPORT(const char* name, float p1)
	{
		return invoker::invoke<int, 0x7A9F2D6596A1FF08, 0xA7413C>(name, p1);
	}

	FORCEINLINE auto CANCEL_ALL_POLICE_REPORTS()
	{
		return invoker::invoke<void, 0x19F3009F6A632270, 0xA6EA80>();
	}

	FORCEINLINE auto BLIP_SIREN(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x5D4EC68787718A25, 0xA6E910>(vehicle);
	}

	FORCEINLINE auto OVERRIDE_VEH_HORN(Vehicle vehicle, BOOL override, int hornHash)
	{
		return invoker::invoke<void, 0x7BEAE55022AB21EB, 0xA73ECC>(vehicle, override, hornHash);
	}

	FORCEINLINE auto IS_HORN_ACTIVE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x1A90E9DC88A85C9D, 0xA7379C>(vehicle);
	}

	FORCEINLINE auto SET_AGGRESSIVE_HORNS(BOOL toggle)
	{
		return invoker::invoke<void, 0x99E0ED93D0644C97, 0xA74D28>(toggle);
	}

	FORCEINLINE auto SET_RADIO_POSITION_AUDIO_MUTE(BOOL p0)
	{
		return invoker::invoke<void, 0x58438EA17EA0E85, 0x81A1C0>(p0);
	}

	FORCEINLINE auto SET_VEHICLE_CONVERSATIONS_PERSIST(BOOL p0, BOOL p1)
	{
		return invoker::invoke<void, 0x443E60546660D332, 0xA769DC>(p0, p1);
	}

	FORCEINLINE auto SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(BOOL p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xD61294E5AA976DE5, 0xA76A00>(p0, p1, p2);
	}

	FORCEINLINE auto IS_STREAM_PLAYING()
	{
		return invoker::invoke<BOOL, 0x3D6F33E7EFD6D669, 0xA73BC4>();
	}

	FORCEINLINE auto GET_STREAM_PLAY_TIME()
	{
		return invoker::invoke<int, 0x99BA44ED7240274A, 0xA721A8>();
	}

	FORCEINLINE auto LOAD_STREAM(const char* streamName, const char* soundSet)
	{
		return invoker::invoke<BOOL, 0xB3157976738FC0C0, 0xA73D10>(streamName, soundSet);
	}

	FORCEINLINE auto LOAD_STREAM_WITH_START_OFFSET(const char* streamName, int startOffset, const char* soundSet)
	{
		return invoker::invoke<BOOL, 0xCC32CFCCD0223A2F, 0xA73D44>(streamName, startOffset, soundSet);
	}

	FORCEINLINE auto PLAY_STREAM_FROM_PED(Ped ped)
	{
		return invoker::invoke<void, 0xF60A7646F4B460F7, 0xA7429C>(ped);
	}

	FORCEINLINE auto PLAY_STREAM_FROM_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x40B0ADC3A86BF939, 0xA742B4>(vehicle);
	}

	FORCEINLINE auto PLAY_STREAM_FROM_OBJECT(Object object)
	{
		return invoker::invoke<void, 0x1A44103FB18BB653, 0xA74290>(object);
	}

	FORCEINLINE auto PLAY_STREAM_FRONTEND()
	{
		return invoker::invoke<void, 0x64B3EF30EAA9FBA3, 0xA742C0>();
	}

	FORCEINLINE auto PLAY_STREAM_FROM_POSITION(float x, float y, float z)
	{
		return invoker::invoke<void, 0x8D4B90E299F8C082, 0xA742A8>(x, y, z);
	}

	FORCEINLINE auto STOP_STREAM()
	{
		return invoker::invoke<void, 0x22A76EDE2316E9A1, 0x4F0074>();
	}

	FORCEINLINE auto STOP_PED_SPEAKING(Ped ped, BOOL shaking)
	{
		return invoker::invoke<void, 0xFD61BB3B8F1CDB6D, 0xA770E8>(ped, shaking);
	}

	FORCEINLINE auto BLOCK_ALL_SPEECH_FROM_PED(Ped ped, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x789F31BC158A5307, 0xA6E938>(ped, p1, p2);
	}

	FORCEINLINE auto STOP_PED_SPEAKING_SYNCED(Ped ped, BOOL p1)
	{
		return invoker::invoke<void, 0x8ADC49ACBB4FF0E4, 0xA770FC>(ped, p1);
	}

	FORCEINLINE auto DISABLE_PED_PAIN_AUDIO(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xEA65800FC08BB2CB, 0xA6FA1C>(ped, toggle);
	}

	FORCEINLINE auto IS_AMBIENT_SPEECH_DISABLED(Ped ped)
	{
		return invoker::invoke<BOOL, 0xE8B33D130955481B, 0xA72C74>(ped);
	}

	FORCEINLINE auto BLOCK_SPEECH_CONTEXT_GROUP(const char* p0, int p1)
	{
		return invoker::invoke<void, 0x4D4012166DD4F5AA, 0xA6E998>(p0, p1);
	}

	FORCEINLINE auto UNBLOCK_SPEECH_CONTEXT_GROUP(const char* p0)
	{
		return invoker::invoke<void, 0x9C23276BBB08E098, 0xA775D0>(p0);
	}

	FORCEINLINE auto SET_SIREN_WITH_NO_DRIVER(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x8C9AE8FF021E8F23, 0xA76744>(vehicle, toggle);
	}

	FORCEINLINE auto SET_SIREN_BYPASS_MP_DRIVER_CHECK(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x88B7E0BE68436D8B, 0xA7671C>(vehicle, toggle);
	}

	FORCEINLINE auto TRIGGER_SIREN_AUDIO(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xE868283F11B10F97, 0xA77374>(vehicle);
	}

	FORCEINLINE auto SET_HORN_PERMANENTLY_ON(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x8D78BCB9B0FC86A6, 0xA76040>(vehicle);
	}

	FORCEINLINE auto SET_HORN_ENABLED(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x7A608749EC88F3A, 0xA7602C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_AUDIO_VEHICLE_PRIORITY(Vehicle vehicle, Any p1)
	{
		return invoker::invoke<void, 0xF8B40A38F93CE540, 0xA74E9C>(vehicle, p1);
	}

	FORCEINLINE auto SET_HORN_PERMANENTLY_ON_TIME(Vehicle vehicle, float time)
	{
		return invoker::invoke<void, 0xE054C79B87C8FB2, 0xA7604C>(vehicle, time);
	}

	FORCEINLINE auto USE_SIREN_AS_HORN(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x27E2D66061E7E264, 0xA77704>(vehicle, toggle);
	}

	FORCEINLINE auto FORCE_USE_AUDIO_GAME_OBJECT(Vehicle vehicle, const char* audioName)
	{
		return invoker::invoke<void, 0x4294356B761DCABE, 0xA704D0>(vehicle, audioName);
	}

	FORCEINLINE auto PRELOAD_VEHICLE_AUDIO_BANK(Hash vehicleModel)
	{
		return invoker::invoke<void, 0xE84254DC19B3CA6B, 0xA7446C>(vehicleModel);
	}

	FORCEINLINE auto SET_VEHICLE_STARTUP_REV_SOUND(Vehicle vehicle, const char* p1, const char* p2)
	{
		return invoker::invoke<void, 0xD87145DC228F73CB, 0xA76AC8>(vehicle, p1, p2);
	}

	FORCEINLINE auto RESET_VEHICLE_STARTUP_REV_SOUND(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xBE72843E382ACF4E, 0xA74B04>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_FORCE_REVERSE_WARNING(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x495131016E1A03BE, 0xA76A28>(p0, p1);
	}

	FORCEINLINE auto IS_VEHICLE_AUDIBLY_DAMAGED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xE3DB661464962CF4, 0xA73C44>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(Vehicle vehicle, float damageFactor)
	{
		return invoker::invoke<void, 0xBA0348CAAB53EC0, 0xA769B8>(vehicle, damageFactor);
	}

	FORCEINLINE auto SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(Vehicle vehicle, float intensity)
	{
		return invoker::invoke<void, 0x45FFAC45E551D308, 0xA769A8>(vehicle, intensity);
	}

	FORCEINLINE auto _FORCE_VEHICLE_ENGINE_SYNTH(Vehicle vehicle, BOOL force)
	{
		return invoker::invoke<void, 0xEB7D0E1FCC8FE17A, 0xA704F8>(vehicle, force);
	}

	FORCEINLINE auto ENABLE_VEHICLE_FANBELT_DAMAGE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x2F0DDBBB402A1C2F, 0xA702F8>(vehicle, toggle);
	}

	FORCEINLINE auto ENABLE_VEHICLE_EXHAUST_POPS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xB37F7EC8F0694F4D, 0xA702E4>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_BOOST_ACTIVE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x8A85315947DF6C94, 0xA769C8>(vehicle, toggle);
	}

	FORCEINLINE auto SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x27EC3EC3B245C5CC, 0xA7646C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_SCRIPT_UPDATE_DOOR_AUDIO(Hash doorHash, BOOL toggle)
	{
		return invoker::invoke<void, 0x60F1DCFB89B4F353, 0xA766F8>(doorHash, toggle);
	}

	FORCEINLINE auto PLAY_VEHICLE_DOOR_OPEN_SOUND(Vehicle vehicle, int doorId)
	{
		return invoker::invoke<void, 0x8093F3812E836BCF, 0xA7439C>(vehicle, doorId);
	}

	FORCEINLINE auto PLAY_VEHICLE_DOOR_CLOSE_SOUND(Vehicle vehicle, int doorId)
	{
		return invoker::invoke<void, 0xDCC6C00DE6C4A799, 0xA7438C>(vehicle, doorId);
	}

	FORCEINLINE auto ENABLE_STALL_WARNING_SOUNDS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xEC62EF361B6CB976, 0xA702C8>(vehicle, toggle);
	}

	FORCEINLINE auto _ENABLE_DRAG_RACE_STATIONARY_WARNING_SOUNDS(Vehicle vehicle, BOOL enable)
	{
		return invoker::invoke<void, 0xBEFB80290414FD4F, 0xA7025C>(vehicle, enable);
	}

	FORCEINLINE auto IS_GAME_IN_CONTROL_OF_MUSIC()
	{
		return invoker::invoke<BOOL, 0x7104198E063B41C7, 0xA73778>();
	}

	FORCEINLINE auto SET_GPS_ACTIVE(BOOL active)
	{
		return invoker::invoke<void, 0xAA3A5AD85A475137, 0xA75FC4>(active);
	}

	FORCEINLINE auto PLAY_MISSION_COMPLETE_AUDIO(const char* audioName)
	{
		return invoker::invoke<void, 0xFAE22BD3C12AEFB4, 0xA74084>(audioName);
	}

	FORCEINLINE auto IS_MISSION_COMPLETE_PLAYING()
	{
		return invoker::invoke<BOOL, 0xB7A02BE66E44058F, 0xA73814>();
	}

	FORCEINLINE auto IS_MISSION_COMPLETE_READY_FOR_UI()
	{
		return invoker::invoke<BOOL, 0x1FC87F78B679BE3D, 0xA73838>();
	}

	FORCEINLINE auto BLOCK_DEATH_JINGLE(BOOL toggle)
	{
		return invoker::invoke<void, 0x22FC2EACDDD3CB2, 0xA6E954>(toggle);
	}

	FORCEINLINE auto START_AUDIO_SCENE(const char* scene)
	{
		return invoker::invoke<BOOL, 0xCAC4020CCF361AC8, 0xA76BD8>(scene);
	}

	FORCEINLINE auto STOP_AUDIO_SCENE(const char* scene)
	{
		return invoker::invoke<void, 0xB43467C43086A6A1, 0xA76F64>(scene);
	}

	FORCEINLINE auto STOP_AUDIO_SCENES()
	{
		return invoker::invoke<void, 0x3C6BB574B1895B94, 0xA76F88>();
	}

	FORCEINLINE auto IS_AUDIO_SCENE_ACTIVE(const char* scene)
	{
		return invoker::invoke<BOOL, 0xBC2EE32DE886BD08, 0xA72D68>(scene);
	}

	FORCEINLINE auto SET_AUDIO_SCENE_VARIABLE(const char* scene, const char* variable, float value)
	{
		return invoker::invoke<void, 0x82E0064E4F27AFC, 0xA74E5C>(scene, variable, value);
	}

	FORCEINLINE auto SET_AUDIO_SCRIPT_CLEANUP_TIME(int time)
	{
		return invoker::invoke<void, 0xD7BAEA1C3D6BDB6, 0xA74E7C>(time);
	}

	FORCEINLINE auto ADD_ENTITY_TO_AUDIO_MIX_GROUP(Entity entity, const char* groupName, float p2)
	{
		return invoker::invoke<void, 0x616C2EAE947E6027, 0xA6E0FC>(entity, groupName, p2);
	}

	FORCEINLINE auto REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(Entity entity, float p1)
	{
		return invoker::invoke<void, 0x1B008A010F2FE6, 0xA747A8>(entity, p1);
	}

	FORCEINLINE auto AUDIO_IS_MUSIC_PLAYING()
	{
		return invoker::invoke<BOOL, 0x4FAAAB99FFA2702C, 0xA6E7C8>();
	}

	FORCEINLINE auto AUDIO_IS_SCRIPTED_MUSIC_PLAYING()
	{
		return invoker::invoke<BOOL, 0x7507A74A3D963966, 0xA6E7C8>();
	}

	FORCEINLINE auto PREPARE_MUSIC_EVENT(const char* eventName)
	{
		return invoker::invoke<BOOL, 0x16088CC55E7F218A, 0xA744AC>(eventName);
	}

	FORCEINLINE auto CANCEL_MUSIC_EVENT(const char* eventName)
	{
		return invoker::invoke<BOOL, 0x2C7FEB8222C29D99, 0xA6EA8C>(eventName);
	}

	FORCEINLINE auto TRIGGER_MUSIC_EVENT(const char* eventName)
	{
		return invoker::invoke<BOOL, 0x86A2BC11844DEEB3, 0xA772F8>(eventName);
	}

	FORCEINLINE auto IS_MUSIC_ONESHOT_PLAYING()
	{
		return invoker::invoke<BOOL, 0xFB9CF6B99A98306F, 0xA738D0>();
	}

	FORCEINLINE auto GET_MUSIC_PLAYTIME()
	{
		return invoker::invoke<int, 0x1304366BC7BE185B, 0xA719C8>();
	}

	FORCEINLINE auto SET_GLOBAL_RADIO_SIGNAL_LEVEL(Any p0)
	{
		return invoker::invoke<void, 0x5F3ABB7227973CB8, 0xA75FB0>(p0);
	}

	FORCEINLINE auto RECORD_BROKEN_GLASS(float x, float y, float z, float radius)
	{
		return invoker::invoke<void, 0xCD8CCE6C07790657, 0xA74648>(x, y, z, radius);
	}

	FORCEINLINE auto CLEAR_ALL_BROKEN_GLASS()
	{
		return invoker::invoke<void, 0xC22A1D86EFB5A8CA, 0xA6ECD8>();
	}

	FORCEINLINE auto SCRIPT_OVERRIDES_WIND_ELEVATION(BOOL p0, Any p1)
	{
		return invoker::invoke<void, 0x2995BB5B3AA97FE6, 0xA74B94>(p0, p1);
	}

	FORCEINLINE auto SET_PED_WALLA_DENSITY(float p0, float p1)
	{
		return invoker::invoke<void, 0x30CC8BA35211A422, 0xA76400>(p0, p1);
	}

	FORCEINLINE auto SET_PED_INTERIOR_WALLA_DENSITY(float p0, float p1)
	{
		return invoker::invoke<void, 0x728E3CDB3B64DE89, 0xA76390>(p0, p1);
	}

	FORCEINLINE auto FORCE_PED_PANIC_WALLA()
	{
		return invoker::invoke<void, 0xABB26A8481225EDC, 0xA7048C>();
	}

	FORCEINLINE auto PREPARE_ALARM(const char* alarmName)
	{
		return invoker::invoke<BOOL, 0xC876A2D0F41B79C, 0xA74480>(alarmName);
	}

	FORCEINLINE auto START_ALARM(const char* alarmName, BOOL p2)
	{
		return invoker::invoke<void, 0x4C6BF3BC14C6F6D6, 0xA76BBC>(alarmName, p2);
	}

	FORCEINLINE auto STOP_ALARM(const char* alarmName, BOOL toggle)
	{
		return invoker::invoke<void, 0xA6274B757A008184, 0xA76F30>(alarmName, toggle);
	}

	FORCEINLINE auto STOP_ALL_ALARMS(BOOL stop)
	{
		return invoker::invoke<void, 0xFAE67C69C14B564A, 0xA76F4C>(stop);
	}

	FORCEINLINE auto IS_ALARM_PLAYING(const char* alarmName)
	{
		return invoker::invoke<BOOL, 0x65CB233333D99E11, 0xA72C3C>(alarmName);
	}

	FORCEINLINE auto GET_VEHICLE_DEFAULT_HORN(Vehicle vehicle)
	{
		return invoker::invoke<Hash, 0xCDF8A102C63845CC, 0xA7244C>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(Vehicle vehicle)
	{
		return invoker::invoke<Hash, 0x46B7259FABD90750, 0xA7246C>(vehicle);
	}

	FORCEINLINE auto RESET_PED_AUDIO_FLAGS(Ped ped)
	{
		return invoker::invoke<void, 0x4E7D42A9AC9E71EB, 0xA74AAC>(ped);
	}

	FORCEINLINE auto SET_PED_FOOTSTEPS_EVENTS_ENABLED(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xD3709D521B87D7B8, 0xA76368>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_CLOTH_EVENTS_ENABLED(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xAD4EECE226A86F5, 0xA76354>(ped, toggle);
	}

	FORCEINLINE auto OVERRIDE_PLAYER_GROUND_MATERIAL(Hash hash, BOOL toggle)
	{
		return invoker::invoke<void, 0x1E0388A9E6A3BF5B, 0xA73E8C>(hash, toggle);
	}

	FORCEINLINE auto USE_FOOTSTEP_SCRIPT_SWEETENERS(Ped ped, BOOL p1, Hash hash)
	{
		return invoker::invoke<void, 0x1E8AEBD23A5C1511, 0xA776B4>(ped, p1, hash);
	}

	FORCEINLINE auto OVERRIDE_MICROPHONE_SETTINGS(Hash hash, BOOL toggle)
	{
		return invoker::invoke<void, 0x2F0605DFDF7593AB, 0xA73E3C>(hash, toggle);
	}

	FORCEINLINE auto FREEZE_MICROPHONE()
	{
		return invoker::invoke<void, 0xA7047BB729F81596, 0xA70520>();
	}

	FORCEINLINE auto DISTANT_COP_CAR_SIRENS(BOOL value)
	{
		return invoker::invoke<void, 0xEA602FA4CD3530B8, 0xA6FA88>(value);
	}

	FORCEINLINE auto SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x60D61C2E8F5D9601, 0xA76730>(vehicle, p1);
	}

	FORCEINLINE auto ENABLE_STUNT_JUMP_AUDIO()
	{
		return invoker::invoke<void, 0xA9C10BD85DD34D7E, 0xA702DC>();
	}

	FORCEINLINE auto SET_AUDIO_FLAG(const char* flagName, BOOL toggle)
	{
		return invoker::invoke<void, 0xCFBD89D2F1F18961, 0xA74E48>(flagName, toggle);
	}

	FORCEINLINE auto PREPARE_SYNCHRONIZED_AUDIO_EVENT(const char* audioEvent, Any p1)
	{
		return invoker::invoke<BOOL, 0xA8327B614CA7628F, 0xA744D0>(audioEvent, p1);
	}

	FORCEINLINE auto PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(int sceneID, const char* audioEvent)
	{
		return invoker::invoke<BOOL, 0x20279DB6A8C883E5, 0xA744F4>(sceneID, audioEvent);
	}

	FORCEINLINE auto PLAY_SYNCHRONIZED_AUDIO_EVENT(int sceneID)
	{
		return invoker::invoke<BOOL, 0x9DE3D932AA2B055C, 0xA742CC>(sceneID);
	}

	FORCEINLINE auto STOP_SYNCHRONIZED_AUDIO_EVENT(int sceneID)
	{
		return invoker::invoke<BOOL, 0x32FA1FA41E0D63D1, 0xA77198>(sceneID);
	}

	FORCEINLINE auto INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(const char* audioEvent, float x, float y, float z)
	{
		return invoker::invoke<void, 0xB94570412D3EB8C2, 0xA72B28>(audioEvent, x, y, z);
	}

	FORCEINLINE auto INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(const char* audioEvent, Entity entity)
	{
		return invoker::invoke<void, 0x4FE00B5CFB97782B, 0xA72B18>(audioEvent, entity);
	}

	FORCEINLINE auto SET_AUDIO_SPECIAL_EFFECT_MODE(int mode)
	{
		return invoker::invoke<void, 0xC5EE3F8EC7822462, 0xA74E90>(mode);
	}

	FORCEINLINE auto SET_PORTAL_SETTINGS_OVERRIDE(const char* p0, const char* p1)
	{
		return invoker::invoke<void, 0xC73D0514D61174D1, 0xA76480>(p0, p1);
	}

	FORCEINLINE auto REMOVE_PORTAL_SETTINGS_OVERRIDE(const char* p0)
	{
		return invoker::invoke<void, 0xFAF6BF5476CB00A8, 0xA74844>(p0);
	}

	FORCEINLINE auto STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS()
	{
		return invoker::invoke<void, 0x57BCB62796BFF290, 0xA7717C>();
	}

	FORCEINLINE auto GET_MUSIC_VOL_SLIDER()
	{
		return invoker::invoke<int, 0xC7E97C503E2ACEE9, 0xA719DC>();
	}

	FORCEINLINE auto REQUEST_TENNIS_BANKS(Ped ped)
	{
		return invoker::invoke<void, 0x8E29D89D4C88997, 0xA74A3C>(ped);
	}

	FORCEINLINE auto UNREQUEST_TENNIS_BANKS()
	{
		return invoker::invoke<void, 0xD1E84FD28D4A7B38, 0xA77650>();
	}

	FORCEINLINE auto SET_SKIP_MINIGUN_SPIN_UP_AUDIO(BOOL p0)
	{
		return invoker::invoke<void, 0xE9B1F35A218F1FC7, 0xA76768>(p0);
	}

	FORCEINLINE auto STOP_CUTSCENE_AUDIO()
	{
		return invoker::invoke<void, 0x583A32C5EA5495CD, 0xA77028>();
	}

	FORCEINLINE auto HAS_LOADED_MP_DATA_SET()
	{
		return invoker::invoke<BOOL, 0x12E01CD1D5C72213, 0xA7298C>();
	}

	FORCEINLINE auto HAS_LOADED_SP_DATA_SET()
	{
		return invoker::invoke<BOOL, 0x369A4B2B92F12461, 0xA729A0>();
	}

	FORCEINLINE auto GET_VEHICLE_HORN_SOUND_INDEX(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xEEDADE9115768A64, 0xA7248C>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_HORN_SOUND_INDEX(Vehicle vehicle, int value)
	{
		return invoker::invoke<void, 0x315A149C242011DE, 0xA76A3C>(vehicle, value);
	}

}
namespace SOCIALCLUB
{
	FORCEINLINE auto SC_INBOX_GET_TOTAL_NUM_MESSAGES()
	{
		return invoker::invoke<int, 0x2CA28CCB7CECACE7, 0xD685B4>();
	}

	FORCEINLINE auto SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(int msgIndex)
	{
		return invoker::invoke<Hash, 0x544DCD3126D76335, 0xD68588>(msgIndex);
	}

	FORCEINLINE auto SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(int msgIndex)
	{
		return invoker::invoke<BOOL, 0xFA6FA5156AD5C8D, 0xD6855C>(msgIndex);
	}

	FORCEINLINE auto SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(int msgIndex)
	{
		return invoker::invoke<BOOL, 0x2FB38A412252BDF6, 0xD686EC>(msgIndex);
	}

	FORCEINLINE auto SC_INBOX_MESSAGE_GET_DATA_INT(int p0, const char* context, int* out)
	{
		return invoker::invoke<BOOL, 0x58103281724A16DE, 0xD6861C>(p0, context, out);
	}

	FORCEINLINE auto SC_INBOX_MESSAGE_GET_DATA_BOOL(int p0, const char* p1)
	{
		return invoker::invoke<BOOL, 0x584EEB682A158C47, 0xD685F4>(p0, p1);
	}

	FORCEINLINE auto SC_INBOX_MESSAGE_GET_DATA_STRING(int p0, const char* context, char* out)
	{
		return invoker::invoke<BOOL, 0xC7B4A5CCCF31FA28, 0xD68650>(p0, context, out);
	}

	FORCEINLINE auto SC_INBOX_MESSAGE_DO_APPLY(int p0)
	{
		return invoker::invoke<BOOL, 0x895C996CADF26E19, 0xD685C8>(p0);
	}

	FORCEINLINE auto SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(int p0)
	{
		return invoker::invoke<const char*, 0x45A989529B3F2C25, 0xD6868C>(p0);
	}

	FORCEINLINE auto SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(Any* gamerHandle)
	{
		return invoker::invoke<void, 0x693B9B4C2F3B9312, 0xD686D4>(gamerHandle);
	}

	FORCEINLINE auto SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(Any* data)
	{
		return invoker::invoke<void, 0x78587F1408317CE, 0xD686E0>(data);
	}

	FORCEINLINE auto SC_INBOX_MESSAGE_GET_UGCDATA(int p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0xD6C8EFC46788359, 0xD686AC>(p0, p1);
	}

	FORCEINLINE auto SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(int index, Any* outData)
	{
		return invoker::invoke<BOOL, 0x67B3687F7C69B969, 0xD68534>(index, outData);
	}

	FORCEINLINE auto SC_EMAIL_RETRIEVE_EMAILS(int offset, int limit)
	{
		return invoker::invoke<void, 0x9286D4F3BBB483D0, 0xD68378>(offset, limit);
	}

	FORCEINLINE auto SC_EMAIL_GET_RETRIEVAL_STATUS()
	{
		return invoker::invoke<int, 0x80CA040BF6D2FA31, 0xD68328>();
	}

	FORCEINLINE auto SC_EMAIL_GET_NUM_RETRIEVED_EMAILS()
	{
		return invoker::invoke<int, 0x6109CAB6F2F7BB46, 0xD68300>();
	}

	FORCEINLINE auto SC_EMAIL_GET_EMAIL_AT_INDEX(int p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0xEC552A25287441B8, 0xD682D8>(p0, p1);
	}

	FORCEINLINE auto _SC_EMAIL_MARKETING_EMAIL_OPENED(int index)
	{
		return invoker::invoke<void, 0x69AA35F3F391CDBA, 0xD68354>(index);
	}

	FORCEINLINE auto SC_EMAIL_DELETE_EMAILS(Any* p0, Any p1)
	{
		return invoker::invoke<void, 0x44DD5E8545C5376F, 0xD682C8>(p0, p1);
	}

	FORCEINLINE auto SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(Any* gamerHandle)
	{
		return invoker::invoke<void, 0xCF62A74234A425DB, 0xD6836C>(gamerHandle);
	}

	FORCEINLINE auto SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST()
	{
		return invoker::invoke<void, 0xAEFE34E8C6A5734B, 0xD68360>();
	}

	FORCEINLINE auto SC_EMAIL_SEND_EMAIL(const char* p0)
	{
		return invoker::invoke<void, 0x14F6AFFEDAA326C3, 0xD68388>(p0);
	}

	FORCEINLINE auto SC_EMAIL_SET_CURRENT_EMAIL_TAG(Any p0)
	{
		return invoker::invoke<BOOL, 0xED8D0AF79CFA040D, 0xD68394>(p0);
	}

	FORCEINLINE auto SC_CACHE_NEW_ROCKSTAR_MSGS(BOOL toggle)
	{
		return invoker::invoke<void, 0x865FD8AC99AF6852, 0xD67FC4>(toggle);
	}

	FORCEINLINE auto SC_HAS_NEW_ROCKSTAR_MSG()
	{
		return invoker::invoke<BOOL, 0xDAE47D07294589FC, 0xD68524>();
	}

	FORCEINLINE auto SC_GET_NEW_ROCKSTAR_MSG()
	{
		return invoker::invoke<const char*, 0x6E9A5327B5FDB44C, 0xD684CC>();
	}

	FORCEINLINE auto SC_PRESENCE_ATTR_SET_INT(Hash attrHash, int value)
	{
		return invoker::invoke<BOOL, 0x1A84C6BBF1FCC329, 0xD689FC>(attrHash, value);
	}

	FORCEINLINE auto SC_PRESENCE_ATTR_SET_FLOAT(Hash attrHash, float value)
	{
		return invoker::invoke<BOOL, 0x8D862F78BA8A0C4C, 0xD689CC>(attrHash, value);
	}

	FORCEINLINE auto SC_PRESENCE_ATTR_SET_STRING(Hash attrHash, const char* value)
	{
		return invoker::invoke<BOOL, 0xB20280920F18CE68, 0xD68A2C>(attrHash, value);
	}

	FORCEINLINE auto SC_PRESENCE_SET_ACTIVITY_RATING(Any p0, float p1)
	{
		return invoker::invoke<BOOL, 0xB88224D7000C5E8B, 0xD68A5C>(p0, p1);
	}

	FORCEINLINE auto SC_GAMERDATA_GET_INT(const char* name, int* value)
	{
		return invoker::invoke<BOOL, 0x1B6B8B2C731B0C3B, 0xD68460>(name, value);
	}

	FORCEINLINE auto SC_GAMERDATA_GET_FLOAT(const char* name, float* value)
	{
		return invoker::invoke<BOOL, 0x974E385E2B593AD0, 0xD6841C>(name, value);
	}

	FORCEINLINE auto SC_GAMERDATA_GET_BOOL(const char* name)
	{
		return invoker::invoke<BOOL, 0x65395D04908A6F78, 0xD683F8>(name);
	}

	FORCEINLINE auto SC_GAMERDATA_GET_STRING(const char* name, char* value)
	{
		return invoker::invoke<BOOL, 0xA11E96BAF56824EE, 0xD684A4>(name, value);
	}

	FORCEINLINE auto SC_GAMERDATA_GET_ACTIVE_XP_BONUS(float* value)
	{
		return invoker::invoke<BOOL, 0x7497E3ECE98A291B, 0xD683CC>(value);
	}

	FORCEINLINE auto SC_PROFANITY_CHECK_STRING(const char* string, int* token)
	{
		return invoker::invoke<BOOL, 0x9586B50628529A63, 0xD68A8C>(string, token);
	}

	FORCEINLINE auto SC_PROFANITY_CHECK_STRING_UGC(const char* string, int* token)
	{
		return invoker::invoke<BOOL, 0xE2E0A9E99F465D83, 0xD68AB4>(string, token);
	}

	FORCEINLINE auto SC_PROFANITY_GET_CHECK_IS_VALID(int token)
	{
		return invoker::invoke<BOOL, 0x3D1C2138A70E7348, 0xD68B10>(token);
	}

	FORCEINLINE auto SC_PROFANITY_GET_CHECK_IS_PENDING(int token)
	{
		return invoker::invoke<BOOL, 0x11A87C58414E6C46, 0xD68ADC>(token);
	}

	FORCEINLINE auto SC_PROFANITY_GET_STRING_PASSED(int token)
	{
		return invoker::invoke<BOOL, 0x7A6F7DFA98599242, 0xD68B6C>(token);
	}

	FORCEINLINE auto SC_PROFANITY_GET_STRING_STATUS(int token)
	{
		return invoker::invoke<int, 0xAE6BE5940D835FA, 0xD68BA0>(token);
	}

	FORCEINLINE auto SC_PROFANITY_GET_PROFANE_WORD(int token, char* outProfaneWord)
	{
		return invoker::invoke<BOOL, 0x75CC8931A11128C9, 0xD68B44>(token, outProfaneWord);
	}

	FORCEINLINE auto SC_LICENSEPLATE_CHECK_STRING(const char* p0, int* p1)
	{
		return invoker::invoke<BOOL, 0x4FB031EC3F28B77C, 0xD68744>(p0, p1);
	}

	FORCEINLINE auto SC_LICENSEPLATE_GET_CHECK_IS_VALID(Any p0)
	{
		return invoker::invoke<BOOL, 0x95CCC9C5DC3BBF2, 0xD687F4>(p0);
	}

	FORCEINLINE auto SC_LICENSEPLATE_GET_CHECK_IS_PENDING(Any p0)
	{
		return invoker::invoke<BOOL, 0xF7A6291F5AE831D1, 0xD687C4>(p0);
	}

	FORCEINLINE auto SC_LICENSEPLATE_GET_COUNT(int token)
	{
		return invoker::invoke<int, 0xD635755A3659101C, 0xD68824>(token);
	}

	FORCEINLINE auto SC_LICENSEPLATE_GET_PLATE(int token, int plateIndex)
	{
		return invoker::invoke<const char*, 0x649D7167E25976C9, 0xD688A4>(token, plateIndex);
	}

	FORCEINLINE auto SC_LICENSEPLATE_GET_PLATE_DATA(int token, int plateIndex)
	{
		return invoker::invoke<const char*, 0xA71470E61CE061AE, 0xD688DC>(token, plateIndex);
	}

	FORCEINLINE auto SC_LICENSEPLATE_SET_PLATE_DATA(const char* oldPlateText, const char* newPlateText, Any* plateData)
	{
		return invoker::invoke<BOOL, 0x3892A85343809530, 0xD6893C>(oldPlateText, newPlateText, plateData);
	}

	FORCEINLINE auto SC_LICENSEPLATE_ADD(const char* plateText, Any* plateData, int* token)
	{
		return invoker::invoke<BOOL, 0x54B88AF600DB0C95, 0xD68718>(plateText, plateData, token);
	}

	FORCEINLINE auto SC_LICENSEPLATE_GET_ADD_IS_PENDING(int token)
	{
		return invoker::invoke<BOOL, 0xF504C9571E86CF76, 0xD6876C>(token);
	}

	FORCEINLINE auto SC_LICENSEPLATE_GET_ADD_STATUS(int token)
	{
		return invoker::invoke<int, 0x2A1E3EE300513E84, 0xD6879C>(token);
	}

	FORCEINLINE auto SC_LICENSEPLATE_ISVALID(const char* plateText, int* token)
	{
		return invoker::invoke<BOOL, 0x271FD9228830C5F4, 0xD68914>(plateText, token);
	}

	FORCEINLINE auto SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(int token)
	{
		return invoker::invoke<BOOL, 0x78BF797A07B0C7C, 0xD6884C>(token);
	}

	FORCEINLINE auto SC_LICENSEPLATE_GET_ISVALID_STATUS(int token)
	{
		return invoker::invoke<int, 0x9B55331B5F9C67C8, 0xD6887C>(token);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_IS_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x23AB41CD7BD481B9, 0xD68230>();
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EVENT_ID()
	{
		return invoker::invoke<int, 0xB84E5B0DD408418E, 0xD6804C>();
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(const char* p0, int* p1)
	{
		return invoker::invoke<BOOL, 0xDBAD1B5E0100936B, 0xD68128>(p0, p1);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(const char* p0, float* p1)
	{
		return invoker::invoke<BOOL, 0x8D59CDA8F573220D, 0xD680A4>(p0, p1);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(const char* p0, char* p1)
	{
		return invoker::invoke<BOOL, 0xC337674BFF27442B, 0xD681AC>(p0, p1);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(char* p0)
	{
		return invoker::invoke<BOOL, 0xD0333868D1D47D97, 0xD67FD4>(p0);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(const char* p0)
	{
		return invoker::invoke<BOOL, 0x80AD0C08672402C2, 0xD68290>(p0);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(const char* p0)
	{
		return invoker::invoke<int, 0xC9892FE6CC695923, 0xD68070>(p0);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(const char* p0, int* p1, const char* p2)
	{
		return invoker::invoke<BOOL, 0xFF6EC8172B647C9E, 0xD68180>(p0, p1, p2);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(const char* p0, float* p1, const char* p2)
	{
		return invoker::invoke<BOOL, 0x69A1136FA3794E40, 0xD680FC>(p0, p1, p2);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(const char* p0, char* p1, const char* p2)
	{
		return invoker::invoke<BOOL, 0xD777171FC10DBDA, 0xD68204>(p0, p1, p2);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(char* p0, const char* p1)
	{
		return invoker::invoke<BOOL, 0xD078F914C227CF7B, 0xD68024>(p0, p1);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(int p0)
	{
		return invoker::invoke<BOOL, 0xDA41896C7810BBB, 0xD68258>(p0);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(int p0, const char* p1, int* p2)
	{
		return invoker::invoke<BOOL, 0x72930FB68F9B4179, 0xD68154>(p0, p1, p2);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(int p0, const char* p1, float* p2)
	{
		return invoker::invoke<BOOL, 0x80C6F609D860930C, 0xD680D0>(p0, p1, p2);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(int p0, const char* p1, char* p2)
	{
		return invoker::invoke<BOOL, 0x59632E3312C5FFDF, 0xD681D8>(p0, p1, p2);
	}

	FORCEINLINE auto SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(int p0, char* p1)
	{
		return invoker::invoke<BOOL, 0xF5EB76164CE420A5, 0xD67FFC>(p0, p1);
	}

	FORCEINLINE auto SC_TRANSITION_NEWS_SHOW(Any p0)
	{
		return invoker::invoke<BOOL, 0x414AC8390B655576, 0xD68C30>(p0);
	}

	FORCEINLINE auto SC_TRANSITION_NEWS_SHOW_TIMED(Any p0, Any p1)
	{
		return invoker::invoke<BOOL, 0xB5F751D7204D8B1A, 0xD68C7C>(p0, p1);
	}

	FORCEINLINE auto SC_TRANSITION_NEWS_SHOW_NEXT_ITEM()
	{
		return invoker::invoke<BOOL, 0x529DE110B096B460, 0xD68C58>();
	}

	FORCEINLINE auto SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU()
	{
		return invoker::invoke<BOOL, 0x16A1E7B3E8F85EB9, 0xD68C0C>();
	}

	FORCEINLINE auto SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(const char* p0, int* p1)
	{
		return invoker::invoke<BOOL, 0xACB8B29F6BEB8B58, 0xD68BE4>(p0, p1);
	}

	FORCEINLINE auto SC_TRANSITION_NEWS_END()
	{
		return invoker::invoke<void, 0x318195DFBDDB6FFA, 0xD68BCC>();
	}

	FORCEINLINE auto SC_PAUSE_NEWS_INIT_STARTER_PACK(Any p0)
	{
		return invoker::invoke<BOOL, 0xDF0800F98C6064FB, 0xD6898C>(p0);
	}

	FORCEINLINE auto SC_PAUSE_NEWS_GET_PENDING_STORY(Any p0)
	{
		return invoker::invoke<BOOL, 0xAB564B6E85995DBB, 0xD68968>(p0);
	}

	FORCEINLINE auto SC_PAUSE_NEWS_SHUTDOWN()
	{
		return invoker::invoke<void, 0x88600576EDB50BD2, 0xD689B4>();
	}

	FORCEINLINE auto SC_ACCOUNT_INFO_GET_NICKNAME()
	{
		return invoker::invoke<const char*, 0xE5546772B54C0EEE, 0xD67F84>();
	}

	FORCEINLINE auto SC_ACHIEVEMENT_INFO_STATUS(int* p0)
	{
		return invoker::invoke<BOOL, 0x616C54D34FFE092C, 0xD67FA0>(p0);
	}

	FORCEINLINE auto SC_HAS_ACHIEVEMENT_BEEN_PASSED(int achievementId)
	{
		return invoker::invoke<BOOL, 0xF841B04B93D27BA9, 0xD684F4>(achievementId);
	}

}
namespace MOBILE
{
	FORCEINLINE auto CREATE_MOBILE_PHONE(int phoneType)
	{
		return invoker::invoke<void, 0x531FF8BCC6FFD9E3, 0xCCD640>(phoneType);
	}

	FORCEINLINE auto DESTROY_MOBILE_PHONE()
	{
		return invoker::invoke<void, 0x5F2E2CEDE90F627E, 0xCCDA14>();
	}

	FORCEINLINE auto SET_MOBILE_PHONE_SCALE(float scale)
	{
		return invoker::invoke<void, 0xBA290C9390813C9F, 0xCD8610>(scale);
	}

	FORCEINLINE auto SET_MOBILE_PHONE_ROTATION(float rotX, float rotY, float rotZ, Any p3)
	{
		return invoker::invoke<void, 0xA0382000AA987093, 0xCD85B0>(rotX, rotY, rotZ, p3);
	}

	FORCEINLINE auto GET_MOBILE_PHONE_ROTATION(Vector3* rotation, Vehicle p1)
	{
		return invoker::invoke<void, 0x3CA646A848A5F334, 0xCCEA64>(rotation, p1);
	}

	FORCEINLINE auto SET_MOBILE_PHONE_POSITION(float posX, float posY, float posZ)
	{
		return invoker::invoke<void, 0x6B7EA0158D00C600, 0xCD85A4>(posX, posY, posZ);
	}

	FORCEINLINE auto GET_MOBILE_PHONE_POSITION(Vector3* position)
	{
		return invoker::invoke<void, 0x78C4EBB0251847E2, 0xCCEA0C>(position);
	}

	FORCEINLINE auto SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(BOOL toggle)
	{
		return invoker::invoke<void, 0xFC75D88023832ED9, 0xCD7C28>(toggle);
	}

	FORCEINLINE auto CAN_PHONE_BE_SEEN_ON_SCREEN()
	{
		return invoker::invoke<BOOL, 0xE2EDC80BDB9A514F, 0xD1F814>();
	}

	FORCEINLINE auto SET_MOBILE_PHONE_DOF_STATE(BOOL toggle)
	{
		return invoker::invoke<void, 0x453DA8CFCDA69D26, 0xCD8594>(toggle);
	}

	FORCEINLINE auto CELL_SET_INPUT(int direction)
	{
		return invoker::invoke<void, 0xBF3F90E670404C44, 0xCCD0D0>(direction);
	}

	FORCEINLINE auto CELL_HORIZONTAL_MODE_TOGGLE(BOOL toggle)
	{
		return invoker::invoke<void, 0xF3D5C578ED6C7528, 0xCCD0C0>(toggle);
	}

	FORCEINLINE auto CELL_CAM_ACTIVATE(BOOL p0, BOOL p1)
	{
		return invoker::invoke<void, 0xFF7028E54EB0EA84, 0xCCCFE4>(p0, p1);
	}

	FORCEINLINE auto CELL_CAM_ACTIVATE_SELFIE_MODE(BOOL toggle)
	{
		return invoker::invoke<void, 0x9764C9C63439A2D9, 0xCCCFFC>(toggle);
	}

	FORCEINLINE auto CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(BOOL toggle)
	{
		return invoker::invoke<void, 0x20B0BCFBA94C4732, 0xCCD00C>(toggle);
	}

	FORCEINLINE auto CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(float p0)
	{
		return invoker::invoke<void, 0xD974CD3A050559FE, 0xCCD0A0>(p0);
	}

	FORCEINLINE auto CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(float horizontalPan)
	{
		return invoker::invoke<void, 0xCF33DB366A4071FB, 0xCCD080>(horizontalPan);
	}

	FORCEINLINE auto CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(float vertPan)
	{
		return invoker::invoke<void, 0x289AEE012C9C5F5D, 0xCCD0B0>(vertPan);
	}

	FORCEINLINE auto CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(float roll)
	{
		return invoker::invoke<void, 0x263FA094C828FD3E, 0xCCD090>(roll);
	}

	FORCEINLINE auto CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(float distanceScaling)
	{
		return invoker::invoke<void, 0x6DE386DA26D363D5, 0xCCD040>(distanceScaling);
	}

	FORCEINLINE auto CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(float yaw)
	{
		return invoker::invoke<void, 0x48BDE4C1BEB65AD4, 0xCCD070>(yaw);
	}

	FORCEINLINE auto CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(float roll)
	{
		return invoker::invoke<void, 0xDEC275C3811D6AD8, 0xCCD060>(roll);
	}

	FORCEINLINE auto CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(float pitch)
	{
		return invoker::invoke<void, 0xFA6A3ED1D3AA4BD4, 0xCCD050>(pitch);
	}

	FORCEINLINE auto CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(Entity entity)
	{
		return invoker::invoke<BOOL, 0xA637EDD71DA667DB, 0xCCD01C>(entity);
	}

	FORCEINLINE auto GET_MOBILE_PHONE_RENDER_ID(int* renderId)
	{
		return invoker::invoke<void, 0x90D1A8814E85B166, 0xCCEA58>(renderId);
	}

}
namespace PATHFIND
{
	FORCEINLINE auto SET_ROADS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL nodeEnabled, BOOL unknown2)
	{
		return invoker::invoke<void, 0xD1B0AF388B711EBC, 0xCDA3B0>(x1, y1, z1, x2, y2, z2, nodeEnabled, unknown2);
	}

	FORCEINLINE auto SET_ROADS_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, BOOL unknown1, BOOL unknown2, BOOL unknown3)
	{
		return invoker::invoke<void, 0x5E08BBBF87BC4886, 0xCDA374>(x1, y1, z1, x2, y2, z2, width, unknown1, unknown2, unknown3);
	}

	FORCEINLINE auto SET_PED_PATHS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL p6, Any p7)
	{
		return invoker::invoke<void, 0x79CA429D8B4B057A, 0xCD9528>(x1, y1, z1, x2, y2, z2, p6, p7);
	}

	FORCEINLINE auto GET_SAFE_COORD_FOR_PED(float x, float y, float z, BOOL onGround, Vector3* outPosition, int flags)
	{
		return invoker::invoke<BOOL, 0xC0EEE6A2207F3CB8, 0xCCFE04>(x, y, z, onGround, outPosition, flags);
	}

	FORCEINLINE auto GET_CLOSEST_VEHICLE_NODE(float x, float y, float z, Vector3* outPosition, int nodeFlags, float p5, float p6)
	{
		return invoker::invoke<BOOL, 0x3875519517101875, 0xCCE3C8>(x, y, z, outPosition, nodeFlags, p5, p6);
	}

	FORCEINLINE auto GET_CLOSEST_MAJOR_VEHICLE_NODE(float x, float y, float z, Vector3* outPosition, float unknown1, float unknown2)
	{
		return invoker::invoke<BOOL, 0x8E942EABE97448C2, 0xCCE308>(x, y, z, outPosition, unknown1, unknown2);
	}

	FORCEINLINE auto GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(float x, float y, float z, Vector3* outPosition, float* outHeading, int nodeType, float p6, float p7)
	{
		return invoker::invoke<BOOL, 0x813ADF2A2A03F440, 0xCCE3D8>(x, y, z, outPosition, outHeading, nodeType, p6, p7);
	}

	FORCEINLINE auto GET_NTH_CLOSEST_VEHICLE_NODE(float x, float y, float z, int nthClosest, Vector3* outPosition, int nodeFlags, float unknown1, float unknown2)
	{
		return invoker::invoke<BOOL, 0x8B777C12D64DF209, 0xCCEB58>(x, y, z, nthClosest, outPosition, nodeFlags, unknown1, unknown2);
	}

	FORCEINLINE auto GET_NTH_CLOSEST_VEHICLE_NODE_ID(float x, float y, float z, int nth, int nodeFlags, float p5, float p6)
	{
		return invoker::invoke<int, 0x97C50CC028477E0D, 0xCCEB78>(x, y, z, nth, nodeFlags, p5, p6);
	}

	FORCEINLINE auto GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(float x, float y, float z, int nthClosest, Vector3* outPosition, float* outHeading, int* outNumLanes, int nodeFlags, float unknown3, float unknown4)
	{
		return invoker::invoke<BOOL, 0x6009FBA2EAAA60BE, 0xCCEBF4>(x, y, z, nthClosest, outPosition, outHeading, outNumLanes, nodeFlags, unknown3, unknown4);
	}

	FORCEINLINE auto GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(float x, float y, float z, int nthClosest, Vector3* outPosition, float* outHeading, int nodeFlags, float p7, float p8)
	{
		return invoker::invoke<int, 0x990DA6AEDBBBA89A, 0xCCEBAC>(x, y, z, nthClosest, outPosition, outHeading, nodeFlags, p7, p8);
	}

	FORCEINLINE auto GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(float x, float y, float z, float desiredX, float desiredY, float desiredZ, int nthClosest, Vector3* outPosition, float* outHeading, int nodeFlags, float p10, float p11)
	{
		return invoker::invoke<BOOL, 0x7F8B389881024657, 0xCCEB68>(x, y, z, desiredX, desiredY, desiredZ, nthClosest, outPosition, outHeading, nodeFlags, p10, p11);
	}

	FORCEINLINE auto GET_VEHICLE_NODE_PROPERTIES(float x, float y, float z, int* density, int* flags)
	{
		return invoker::invoke<BOOL, 0x99FBD9356770254E, 0xCD0170>(x, y, z, density, flags);
	}

	FORCEINLINE auto IS_VEHICLE_NODE_ID_VALID(int vehicleNodeId)
	{
		return invoker::invoke<BOOL, 0x2EE1ADDFD32F7C35, 0xCD2404>(vehicleNodeId);
	}

	FORCEINLINE auto GET_VEHICLE_NODE_POSITION(int nodeId, Vector3* outPosition)
	{
		return invoker::invoke<void, 0xAAB540AD076E01F8, 0xCD013C>(nodeId, outPosition);
	}

	FORCEINLINE auto GET_VEHICLE_NODE_IS_GPS_ALLOWED(int nodeID)
	{
		return invoker::invoke<BOOL, 0x8D4953B2FFED058B, 0xCD00F4>(nodeID);
	}

	FORCEINLINE auto GET_VEHICLE_NODE_IS_SWITCHED_OFF(int nodeID)
	{
		return invoker::invoke<BOOL, 0xD2507ABB3A05C571, 0xCD0118>(nodeID);
	}

	FORCEINLINE auto GET_CLOSEST_ROAD(float x, float y, float z, float p3, int p4, Vector3* p5, Vector3* p6, Any* p7, Any* p8, float* p9, BOOL p10)
	{
		return invoker::invoke<BOOL, 0x748728E3BFD8E371, 0xCCE3B8>(x, y, z, p3, p4, p5, p6, p7, p8, p9, p10);
	}

	FORCEINLINE auto LOAD_ALL_PATH_NODES(BOOL set)
	{
		return invoker::invoke<BOOL, 0x10564B8977071406, 0xCD248C>(set);
	}

	FORCEINLINE auto SET_ALLOW_STREAM_PROLOGUE_NODES(BOOL toggle)
	{
		return invoker::invoke<void, 0x14B872A3D2879E35, 0xCD7CD8>(toggle);
	}

	FORCEINLINE auto SET_ALLOW_STREAM_HEIST_ISLAND_NODES(int type)
	{
		return invoker::invoke<void, 0x6FAD8BFDFFCEDD65, 0xCD7CC8>(type);
	}

	FORCEINLINE auto ARE_NODES_LOADED_FOR_AREA(float x1, float y1, float x2, float y2)
	{
		return invoker::invoke<BOOL, 0xFFEB5F24B372DFF6, 0xCCCB98>(x1, y1, x2, y2);
	}

	FORCEINLINE auto REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(float x1, float y1, float x2, float y2)
	{
		return invoker::invoke<BOOL, 0x693ACD1AA0BDB375, 0xCD7814>(x1, y1, x2, y2);
	}

	FORCEINLINE auto SET_ROADS_BACK_TO_ORIGINAL(float p0, float p1, float p2, float p3, float p4, float p5, Any p6)
	{
		return invoker::invoke<void, 0x33B6B083EA6305A5, 0xCDA340>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, Any p7)
	{
		return invoker::invoke<void, 0x2AF2D6F164BD6F5A, 0xCDA358>(x1, y1, z1, x2, y2, z2, width, p7);
	}

	FORCEINLINE auto SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(float multiplier)
	{
		return invoker::invoke<void, 0xF9372EC61E6191AF, 0xCD7D8C>(multiplier);
	}

	FORCEINLINE auto ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
	{
		return invoker::invoke<void, 0xBAC712AB83AFA8CC, 0xCCC930>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto SET_PED_PATHS_BACK_TO_ORIGINAL(float x1, float y1, float z1, float x2, float y2, float z2, Any p6)
	{
		return invoker::invoke<void, 0xE649818AF72843C4, 0xCD9510>(x1, y1, z1, x2, y2, z2, p6);
	}

	FORCEINLINE auto GET_RANDOM_VEHICLE_NODE(float x, float y, float z, float radius, BOOL p4, BOOL p5, BOOL p6, Vector3* outPosition, int* nodeId)
	{
		return invoker::invoke<BOOL, 0x771D4899F0EDF3E, 0xCCFC34>(x, y, z, radius, p4, p5, p6, outPosition, nodeId);
	}

	FORCEINLINE auto GET_SPAWN_COORDS_FOR_VEHICLE_NODE(int nodeAddress, float towardsCoorsX, float towardsCoorsY, float towardsCoorsZ, Vector3* centrePoint, float* heading)
	{
		return invoker::invoke<Vector3, 0x809549AFC7AEC597, 0xCCFE84>(nodeAddress, towardsCoorsX, towardsCoorsY, towardsCoorsZ, centrePoint, heading);
	}

	FORCEINLINE auto GET_STREET_NAME_AT_COORD(float x, float y, float z, Hash* streetName, Hash* crossingRoad)
	{
		return invoker::invoke<void, 0x77BCD89051F77C43, 0xCCFEEC>(x, y, z, streetName, crossingRoad);
	}

	FORCEINLINE auto GENERATE_DIRECTIONS_TO_COORD(float x, float y, float z, BOOL p3, int* direction, float* p5, float* distToNxJunction)
	{
		return invoker::invoke<int, 0x766E7B4FEF97CFDE, 0xCCE11C>(x, y, z, p3, direction, p5, distToNxJunction);
	}

	FORCEINLINE auto SET_IGNORE_NO_GPS_FLAG(BOOL toggle)
	{
		return invoker::invoke<void, 0xAD69CF046AA50E85, 0xCD836C>(toggle);
	}

	FORCEINLINE auto SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(BOOL toggle)
	{
		return invoker::invoke<void, 0x7A0DF3CEAF912D48, 0xCD837C>(toggle);
	}

	FORCEINLINE auto SET_GPS_DISABLED_ZONE(float x1, float y1, float z1, float x2, float y2, float z3)
	{
		return invoker::invoke<void, 0x4F30C4E212ACCAAA, 0xCD8274>(x1, y1, z1, x2, y2, z3);
	}

	FORCEINLINE auto GET_GPS_BLIP_ROUTE_LENGTH()
	{
		return invoker::invoke<int, 0x715F5EED76FCDE9, 0xCCE788>();
	}

	FORCEINLINE auto GET_POS_ALONG_GPS_TYPE_ROUTE(Vector3* result, BOOL p1, float p2, int p3)
	{
		return invoker::invoke<BOOL, 0x4AF7AA151DA57A33, 0xCCFBEC>(result, p1, p2, p3);
	}

	FORCEINLINE auto GET_GPS_BLIP_ROUTE_FOUND()
	{
		return invoker::invoke<BOOL, 0x1A9014F37459E83F, 0xCCE760>();
	}

	FORCEINLINE auto GET_ROAD_BOUNDARY_USING_HEADING(float x, float y, float z, float heading, Vector3* outPosition)
	{
		return invoker::invoke<BOOL, 0x5053D36357207FD6, 0xCCFD04>(x, y, z, heading, outPosition);
	}

	FORCEINLINE auto GET_POSITION_BY_SIDE_OF_ROAD(float x, float y, float z, int p3, Vector3* outPosition)
	{
		return invoker::invoke<BOOL, 0x2DFF53C2897C7990, 0xCCFB94>(x, y, z, p3, outPosition);
	}

	FORCEINLINE auto IS_POINT_ON_ROAD(float x, float y, float z, Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x1F32EC7CE9CC63A2, 0xCD1FC0>(x, y, z, vehicle);
	}

	FORCEINLINE auto GET_NEXT_GPS_DISABLED_ZONE_INDEX()
	{
		return invoker::invoke<int, 0x278706F2D0A8F29B, 0xCCEB38>();
	}

	FORCEINLINE auto SET_GPS_DISABLED_ZONE_AT_INDEX(float x1, float y1, float z1, float x2, float y2, float z2, int index)
	{
		return invoker::invoke<void, 0xAAD42D6F976511F9, 0xCD8284>(x1, y1, z1, x2, y2, z2, index);
	}

	FORCEINLINE auto CLEAR_GPS_DISABLED_ZONE_AT_INDEX(int index)
	{
		return invoker::invoke<void, 0x887AF6FA4371E08, 0xCCD170>(index);
	}

	FORCEINLINE auto ADD_NAVMESH_REQUIRED_REGION(float x, float y, float radius)
	{
		return invoker::invoke<void, 0x8998A86E45C5155C, 0xCCC86C>(x, y, radius);
	}

	FORCEINLINE auto REMOVE_NAVMESH_REQUIRED_REGIONS()
	{
		return invoker::invoke<void, 0x81F9331288182129, 0xCD7684>();
	}

	FORCEINLINE auto IS_NAVMESH_REQUIRED_REGION_IN_USE()
	{
		return invoker::invoke<BOOL, 0x53F38E2C8579B2AA, 0xCD0B78>();
	}

	FORCEINLINE auto DISABLE_NAVMESH_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL toggle)
	{
		return invoker::invoke<void, 0xA8C09F16998DFD28, 0xCCDAB4>(x1, y1, z1, x2, y2, z2, toggle);
	}

	FORCEINLINE auto ARE_ALL_NAVMESH_REGIONS_LOADED()
	{
		return invoker::invoke<BOOL, 0xD33AE43EA8DC1C58, 0xCCCB24>();
	}

	FORCEINLINE auto IS_NAVMESH_LOADED_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<BOOL, 0x75A7B7B3DF681621, 0xCD0B54>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto GET_NUM_NAVMESHES_EXISTING_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<int, 0x758F97A0C79EEFBF, 0xCCED5C>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto ADD_NAVMESH_BLOCKING_OBJECT(float p0, float p1, float p2, float p3, float p4, float p5, float p6, BOOL p7, Any p8)
	{
		return invoker::invoke<int, 0x8CC50AC10D8037C7, 0xCCC834>(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto UPDATE_NAVMESH_BLOCKING_OBJECT(Any p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, Any p8)
	{
		return invoker::invoke<void, 0xD9ECC9BB146EA4A4, 0xCDB930>(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto REMOVE_NAVMESH_BLOCKING_OBJECT(Any p0)
	{
		return invoker::invoke<void, 0x8E99C7AF6C6639AB, 0xCD7664>(p0);
	}

	FORCEINLINE auto DOES_NAVMESH_BLOCKING_OBJECT_EXIST(Any p0)
	{
		return invoker::invoke<BOOL, 0xF935563454D3B338, 0xCCDB7C>(p0);
	}

	FORCEINLINE auto GET_APPROX_HEIGHT_FOR_POINT(float x, float y)
	{
		return invoker::invoke<float, 0x54D01A0F98391D5B, 0xCCE248>(x, y);
	}

	FORCEINLINE auto GET_APPROX_HEIGHT_FOR_AREA(float x1, float y1, float x2, float y2)
	{
		return invoker::invoke<float, 0x2093CB9E0E9B985F, 0xCCE214>(x1, y1, x2, y2);
	}

	FORCEINLINE auto GET_APPROX_FLOOR_FOR_POINT(float x, float y)
	{
		return invoker::invoke<float, 0xFAF53F2F65D5EE26, 0xCCE1EC>(x, y);
	}

	FORCEINLINE auto GET_APPROX_FLOOR_FOR_AREA(float x1, float y1, float x2, float y2)
	{
		return invoker::invoke<float, 0x5DB7284C236A9DE, 0xCCE1B8>(x1, y1, x2, y2);
	}

	FORCEINLINE auto CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<float, 0x1287CC087A5CE000, 0xCCCD28>(x1, y1, z1, x2, y2, z2);
	}

}
namespace DATAFILE
{
	FORCEINLINE auto DATAFILE_WATCH_REQUEST_ID(int requestId)
	{
		return invoker::invoke<void, 0xAF6DC1461CCA36F8, 0xA6F6C4>(requestId);
	}

	FORCEINLINE auto DATAFILE_CLEAR_WATCH_LIST()
	{
		return invoker::invoke<void, 0x6CB3106C584382B9, 0xA6F428>();
	}

	FORCEINLINE auto DATAFILE_IS_VALID_REQUEST_ID(int index)
	{
		return invoker::invoke<BOOL, 0xF224222A0E09BF20, 0xA6F524>(index);
	}

	FORCEINLINE auto DATAFILE_HAS_LOADED_FILE_DATA(int requestId)
	{
		return invoker::invoke<BOOL, 0xDC01725421245C5C, 0xA6F4C8>(requestId);
	}

	FORCEINLINE auto DATAFILE_HAS_VALID_FILE_DATA(int requestId)
	{
		return invoker::invoke<BOOL, 0x5661708D0BBCF4DC, 0xA6F4EC>(requestId);
	}

	FORCEINLINE auto DATAFILE_SELECT_ACTIVE_FILE(int requestId, Any p1)
	{
		return invoker::invoke<BOOL, 0x8CE598AF9875FE1C, 0xA6F59C>(requestId, p1);
	}

	FORCEINLINE auto DATAFILE_DELETE_REQUESTED_FILE(int requestId)
	{
		return invoker::invoke<BOOL, 0xD1BF9B570A0EBA3A, 0xA6F458>(requestId);
	}

	FORCEINLINE auto UGC_CREATE_CONTENT(Any* data, int dataCount, const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName, BOOL publish, Any p7)
	{
		return invoker::invoke<BOOL, 0x58977C73F104C1B2, 0xA77394>(data, dataCount, contentName, description, tagsCsv, contentTypeName, publish, p7);
	}

	FORCEINLINE auto UGC_CREATE_MISSION(const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName, BOOL publish, Any p5)
	{
		return invoker::invoke<BOOL, 0xF3AB7B665999602E, 0xA773F4>(contentName, description, tagsCsv, contentTypeName, publish, p5);
	}

	FORCEINLINE auto UGC_UPDATE_CONTENT(const char* contentId, Any* data, int dataCount, const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName, Any p7)
	{
		return invoker::invoke<BOOL, 0xC87EAB233B259C6E, 0xA7746C>(contentId, data, dataCount, contentName, description, tagsCsv, contentTypeName, p7);
	}

	FORCEINLINE auto UGC_UPDATE_MISSION(const char* contentId, const char* contentName, const char* description, const char* tagsCsv, const char* contentTypeName, Any p5)
	{
		return invoker::invoke<BOOL, 0x605AAC6915C9EFC7, 0xA774C8>(contentId, contentName, description, tagsCsv, contentTypeName, p5);
	}

	FORCEINLINE auto UGC_SET_PLAYER_DATA(const char* contentId, float rating, const char* contentTypeName, Any p3)
	{
		return invoker::invoke<BOOL, 0x18EEF6291DBCAC51, 0xA7743C>(contentId, rating, contentTypeName, p3);
	}

	FORCEINLINE auto DATAFILE_SELECT_UGC_DATA(int p0, Any p1)
	{
		return invoker::invoke<BOOL, 0x7C54D010A8B19CEC, 0xA6F5EC>(p0, p1);
	}

	FORCEINLINE auto DATAFILE_SELECT_UGC_STATS(int p0, BOOL p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x91052312822C7C59, 0xA6F63C>(p0, p1, p2);
	}

	FORCEINLINE auto DATAFILE_SELECT_UGC_PLAYER_DATA(int p0, Any p1)
	{
		return invoker::invoke<BOOL, 0x71CC7FE2C69822E1, 0xA6F614>(p0, p1);
	}

	FORCEINLINE auto DATAFILE_SELECT_CREATOR_STATS(int p0, Any p1)
	{
		return invoker::invoke<BOOL, 0x5B82DD87BDF8750F, 0xA6F5C4>(p0, p1);
	}

	FORCEINLINE auto DATAFILE_LOAD_OFFLINE_UGC(const char* filename, Any p1)
	{
		return invoker::invoke<BOOL, 0x571A025B07823518, 0xA6F548>(filename, p1);
	}

	FORCEINLINE auto DATAFILE_CREATE(int p0)
	{
		return invoker::invoke<void, 0x87BA8B7277ED162C, 0xA6F430>(p0);
	}

	FORCEINLINE auto DATAFILE_DELETE(int p0)
	{
		return invoker::invoke<void, 0x27DEA4A6845A22BC, 0xA6F43C>(p0);
	}

	FORCEINLINE auto DATAFILE_STORE_MISSION_HEADER(int p0)
	{
		return invoker::invoke<void, 0x16AC7DBD0702DC76, 0xA6F694>(p0);
	}

	FORCEINLINE auto DATAFILE_FLUSH_MISSION_HEADER()
	{
		return invoker::invoke<void, 0x7D2CE2417CB2FE19, 0xA6F47C>();
	}

	FORCEINLINE auto DATAFILE_GET_FILE_DICT(int p0)
	{
		return invoker::invoke<Any*, 0x6C99356A4D3C7B09, 0xA6F484>(p0);
	}

	FORCEINLINE auto DATAFILE_START_SAVE_TO_CLOUD(const char* filename, Any p1)
	{
		return invoker::invoke<BOOL, 0xA8F33BC779C28BFB, 0xA6F66C>(filename, p1);
	}

	FORCEINLINE auto DATAFILE_UPDATE_SAVE_TO_CLOUD(BOOL* p0)
	{
		return invoker::invoke<BOOL, 0x3CBCE367459737AD, 0xA6F6A0>(p0);
	}

	FORCEINLINE auto DATAFILE_IS_SAVE_PENDING()
	{
		return invoker::invoke<BOOL, 0xB00920C3C99A34C5, 0xA6F510>();
	}

	FORCEINLINE auto DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(Any p0, Any p1)
	{
		return invoker::invoke<BOOL, 0xCCCB75189BBBA6DE, 0xA6F570>(p0, p1);
	}

	FORCEINLINE auto DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(Any p0)
	{
		return invoker::invoke<void, 0xEFE2DF6B67066118, 0xA6F448>(p0);
	}

	FORCEINLINE auto DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(Any p0)
	{
		return invoker::invoke<Any*, 0xDC393E3CE8A00E9D, 0xA6F4A4>(p0);
	}

	FORCEINLINE auto DATADICT_SET_BOOL(Any* objectData, const char* key, BOOL value)
	{
		return invoker::invoke<void, 0xC98890A6BBB9A0D4, 0xA6F3BC>(objectData, key, value);
	}

	FORCEINLINE auto DATADICT_SET_INT(Any* objectData, const char* key, int value)
	{
		return invoker::invoke<void, 0xCBF0312D1370143F, 0xA6F3EC>(objectData, key, value);
	}

	FORCEINLINE auto DATADICT_SET_FLOAT(Any* objectData, const char* key, float value)
	{
		return invoker::invoke<void, 0xEA11FA8AE2EB4025, 0xA6F3D4>(objectData, key, value);
	}

	FORCEINLINE auto DATADICT_SET_STRING(Any* objectData, const char* key, const char* value)
	{
		return invoker::invoke<void, 0xA47FC2B828F55E4D, 0xA6F400>(objectData, key, value);
	}

	FORCEINLINE auto DATADICT_SET_VECTOR(Any* objectData, const char* key, float valueX, float valueY, float valueZ)
	{
		return invoker::invoke<void, 0xD0DC0D28BA9FD4AD, 0xA6F414>(objectData, key, valueX, valueY, valueZ);
	}

	FORCEINLINE auto DATADICT_CREATE_DICT(Any* objectData, const char* key)
	{
		return invoker::invoke<Any*, 0x5E298CFB85D1AEE8, 0xA6F224>(objectData, key);
	}

	FORCEINLINE auto DATADICT_CREATE_ARRAY(Any* objectData, const char* key)
	{
		return invoker::invoke<Any*, 0xC24FD04ED00751BC, 0xA6F1FC>(objectData, key);
	}

	FORCEINLINE auto DATADICT_GET_BOOL(Any* objectData, const char* key)
	{
		return invoker::invoke<BOOL, 0x9F0EF572EFEE0A9C, 0xA6F274>(objectData, key);
	}

	FORCEINLINE auto DATADICT_GET_INT(Any* objectData, const char* key)
	{
		return invoker::invoke<int, 0x81A9ADA13F72AEDD, 0xA6F2F4>(objectData, key);
	}

	FORCEINLINE auto DATADICT_GET_FLOAT(Any* objectData, const char* key)
	{
		return invoker::invoke<float, 0xA481424344CBC893, 0xA6F2C8>(objectData, key);
	}

	FORCEINLINE auto DATADICT_GET_STRING(Any* objectData, const char* key)
	{
		return invoker::invoke<const char*, 0xC2ED3920E9296F36, 0xA6F31C>(objectData, key);
	}

	FORCEINLINE auto DATADICT_GET_VECTOR(Any* objectData, const char* key)
	{
		return invoker::invoke<Vector3, 0xEF1E4460FF33D01E, 0xA6F36C>(objectData, key);
	}

	FORCEINLINE auto DATADICT_GET_DICT(Any* objectData, const char* key)
	{
		return invoker::invoke<Any*, 0x6BDE656A2A2932FC, 0xA6F2A0>(objectData, key);
	}

	FORCEINLINE auto DATADICT_GET_ARRAY(Any* objectData, const char* key)
	{
		return invoker::invoke<Any*, 0x8FBF3E1A58A9D798, 0xA6F24C>(objectData, key);
	}

	FORCEINLINE auto DATADICT_GET_TYPE(Any* objectData, const char* key)
	{
		return invoker::invoke<int, 0xA8F96580C10C5F9E, 0xA6F348>(objectData, key);
	}

	FORCEINLINE auto DATAARRAY_ADD_BOOL(Any* arrayData, BOOL value)
	{
		return invoker::invoke<void, 0xDE4827405E9BE9A9, 0xA6EFC4>(arrayData, value);
	}

	FORCEINLINE auto DATAARRAY_ADD_INT(Any* arrayData, int value)
	{
		return invoker::invoke<void, 0x4BEA39F9F6950599, 0xA6F02C>(arrayData, value);
	}

	FORCEINLINE auto DATAARRAY_ADD_FLOAT(Any* arrayData, float value)
	{
		return invoker::invoke<void, 0xF24467993708BCC, 0xA6F00C>(arrayData, value);
	}

	FORCEINLINE auto DATAARRAY_ADD_STRING(Any* arrayData, const char* value)
	{
		return invoker::invoke<void, 0xABC288F63B017656, 0xA6F04C>(arrayData, value);
	}

	FORCEINLINE auto DATAARRAY_ADD_VECTOR(Any* arrayData, float valueX, float valueY, float valueZ)
	{
		return invoker::invoke<void, 0xB8DA6C44772DBE30, 0xA6F06C>(arrayData, valueX, valueY, valueZ);
	}

	FORCEINLINE auto DATAARRAY_ADD_DICT(Any* arrayData)
	{
		return invoker::invoke<Any*, 0xFA8B98F1023E7B3E, 0xA6EFE8>(arrayData);
	}

	FORCEINLINE auto DATAARRAY_GET_BOOL(Any* arrayData, int arrayIndex)
	{
		return invoker::invoke<BOOL, 0x2150C2FC641364CC, 0xA6F07C>(arrayData, arrayIndex);
	}

	FORCEINLINE auto DATAARRAY_GET_INT(Any* arrayData, int arrayIndex)
	{
		return invoker::invoke<int, 0xB64F599E8DBD9678, 0xA6F110>(arrayData, arrayIndex);
	}

	FORCEINLINE auto DATAARRAY_GET_FLOAT(Any* arrayData, int arrayIndex)
	{
		return invoker::invoke<float, 0xCEBBA737179CE3D0, 0xA6F0E8>(arrayData, arrayIndex);
	}

	FORCEINLINE auto DATAARRAY_GET_STRING(Any* arrayData, int arrayIndex)
	{
		return invoker::invoke<const char*, 0x446BB52C35DB68A0, 0xA6F138>(arrayData, arrayIndex);
	}

	FORCEINLINE auto DATAARRAY_GET_VECTOR(Any* arrayData, int arrayIndex)
	{
		return invoker::invoke<Vector3, 0x83D3CBA972660C58, 0xA6F1AC>(arrayData, arrayIndex);
	}

	FORCEINLINE auto DATAARRAY_GET_DICT(Any* arrayData, int arrayIndex)
	{
		return invoker::invoke<Any*, 0x5B54BD7ACF637593, 0xA6F0C4>(arrayData, arrayIndex);
	}

	FORCEINLINE auto DATAARRAY_GET_COUNT(Any* arrayData)
	{
		return invoker::invoke<int, 0x2A32420E04AE5787, 0xA6F0A8>(arrayData);
	}

	FORCEINLINE auto DATAARRAY_GET_TYPE(Any* arrayData, int arrayIndex)
	{
		return invoker::invoke<int, 0x939FE19A2CFC3266, 0xA6F164>(arrayData, arrayIndex);
	}

}
namespace CUTSCENE
{
	FORCEINLINE auto REQUEST_CUTSCENE(const char* cutsceneName, int flags)
	{
		return invoker::invoke<void, 0x839AD252B0708F35, 0xA74960>(cutsceneName, flags);
	}

	FORCEINLINE auto REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(const char* cutsceneName, int playbackFlags, int flags)
	{
		return invoker::invoke<void, 0x46FF102DCE74A94, 0xA74970>(cutsceneName, playbackFlags, flags);
	}

	FORCEINLINE auto REMOVE_CUTSCENE()
	{
		return invoker::invoke<void, 0xDD291722ADDCBD60, 0xA74750>();
	}

	FORCEINLINE auto HAS_CUTSCENE_LOADED()
	{
		return invoker::invoke<BOOL, 0xDDDD9D153BCF51F, 0xA727D8>();
	}

	FORCEINLINE auto HAS_THIS_CUTSCENE_LOADED(const char* cutsceneName)
	{
		return invoker::invoke<BOOL, 0xC4ADACBD3FE3F266, 0xA72A98>(cutsceneName);
	}

	FORCEINLINE auto SET_SCRIPT_CAN_START_CUTSCENE(int threadId)
	{
		return invoker::invoke<void, 0xA82578E07F14DD90, 0xA76660>(threadId);
	}

	FORCEINLINE auto CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY()
	{
		return invoker::invoke<BOOL, 0xB3FA103AA6383C28, 0xA6EAC0>();
	}

	FORCEINLINE auto IS_CUTSCENE_PLAYBACK_FLAG_SET(int flag)
	{
		return invoker::invoke<BOOL, 0xFE2EB239B608CDF9, 0xA72FD8>(flag);
	}

	FORCEINLINE auto SET_CUTSCENE_ENTITY_STREAMING_FLAGS(const char* cutsceneEntName, int p1, int p2)
	{
		return invoker::invoke<void, 0x7901DE0AC779EB29, 0xA75450>(cutsceneEntName, p1, p2);
	}

	FORCEINLINE auto REQUEST_CUT_FILE(const char* cutsceneName)
	{
		return invoker::invoke<void, 0x25D5067F6C88E193, 0xA74984>(cutsceneName);
	}

	FORCEINLINE auto HAS_CUT_FILE_LOADED(const char* cutsceneName)
	{
		return invoker::invoke<BOOL, 0xC0E9475F48788356, 0xA727F8>(cutsceneName);
	}

	FORCEINLINE auto REMOVE_CUT_FILE(const char* cutsceneName)
	{
		return invoker::invoke<void, 0x80933F349127EBB9, 0xA74758>(cutsceneName);
	}

	FORCEINLINE auto GET_CUT_FILE_CONCAT_COUNT(const char* cutsceneName)
	{
		return invoker::invoke<int, 0xF4D7464FFDD56FE3, 0xA70AD4>(cutsceneName);
	}

	FORCEINLINE auto START_CUTSCENE(int flags)
	{
		return invoker::invoke<void, 0xED65412F8B26ED99, 0xA76C0C>(flags);
	}

	FORCEINLINE auto START_CUTSCENE_AT_COORDS(float x, float y, float z, int flags)
	{
		return invoker::invoke<void, 0x9B3A50426C952520, 0xA76C18>(x, y, z, flags);
	}

	FORCEINLINE auto STOP_CUTSCENE(BOOL p0)
	{
		return invoker::invoke<void, 0xB479965CBAA3EAE1, 0xA77018>(p0);
	}

	FORCEINLINE auto STOP_CUTSCENE_IMMEDIATELY()
	{
		return invoker::invoke<void, 0xA7E4AA8D29D3DAC1, 0xA77058>();
	}

	FORCEINLINE auto SET_CUTSCENE_ORIGIN(float x, float y, float z, float p3, int p4)
	{
		return invoker::invoke<void, 0x20D6C2B867DA2FCA, 0xA754CC>(x, y, z, p3, p4);
	}

	FORCEINLINE auto SET_CUTSCENE_ORIGIN_AND_ORIENTATION(float x1, float y1, float z1, float x2, float y2, float z2, int p6)
	{
		return invoker::invoke<void, 0xB638C6C35B6CA9DF, 0xA754E0>(x1, y1, z1, x2, y2, z2, p6);
	}

	FORCEINLINE auto GET_CUTSCENE_TIME()
	{
		return invoker::invoke<int, 0x15EF8F22A719BE5E, 0xA70A9C>();
	}

	FORCEINLINE auto GET_CUTSCENE_PLAY_TIME()
	{
		return invoker::invoke<int, 0x710286BC5EF4D6E1, 0xA70A60>();
	}

	FORCEINLINE auto GET_CUTSCENE_TOTAL_DURATION()
	{
		return invoker::invoke<int, 0xA4A6A6336888604F, 0xA70AB8>();
	}

	FORCEINLINE auto GET_CUTSCENE_END_TIME()
	{
		return invoker::invoke<int, 0xE805BBAA9779838, 0xA70A28>();
	}

	FORCEINLINE auto GET_CUTSCENE_PLAY_DURATION()
	{
		return invoker::invoke<int, 0xC418F430F1F93AEE, 0xA70A44>();
	}

	FORCEINLINE auto WAS_CUTSCENE_SKIPPED()
	{
		return invoker::invoke<BOOL, 0xD9E3F021F9D8CEF9, 0xA77774>();
	}

	FORCEINLINE auto HAS_CUTSCENE_FINISHED()
	{
		return invoker::invoke<BOOL, 0xC9BA6D804FA4FAAA, 0xA727AC>();
	}

	FORCEINLINE auto IS_CUTSCENE_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xCB7695268A7F50F, 0xA72FB8>();
	}

	FORCEINLINE auto IS_CUTSCENE_PLAYING()
	{
		return invoker::invoke<BOOL, 0xFD216000DC314A92, 0xA72FFC>();
	}

	FORCEINLINE auto GET_CUTSCENE_SECTION_PLAYING()
	{
		return invoker::invoke<int, 0xF9B18AB51CBCDF5C, 0xA70A7C>();
	}

	FORCEINLINE auto GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(const char* cutsceneEntName, Hash modelHash)
	{
		return invoker::invoke<Entity, 0xD461826371A3782B, 0xA71088>(cutsceneEntName, modelHash);
	}

	FORCEINLINE auto GET_CUTSCENE_CONCAT_SECTION_PLAYING()
	{
		return invoker::invoke<int, 0x6BC87CF59151C630, 0xA70A0C>();
	}

	FORCEINLINE auto IS_CUTSCENE_AUTHORIZED(const char* cutsceneName)
	{
		return invoker::invoke<BOOL, 0xAEF10EAFB97F5540, 0xD1F814>(cutsceneName);
	}

	FORCEINLINE auto DOES_CUTSCENE_HANDLE_EXIST(int cutsceneHandle)
	{
		return invoker::invoke<int, 0x9AF94A69465A9B87, 0xA6FB6C>(cutsceneHandle);
	}

	FORCEINLINE auto REGISTER_ENTITY_FOR_CUTSCENE(Ped cutscenePed, const char* cutsceneEntName, int p2, Hash modelHash, int p4)
	{
		return invoker::invoke<void, 0xF293D66D4452C854, 0xA74664>(cutscenePed, cutsceneEntName, p2, modelHash, p4);
	}

	FORCEINLINE auto GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(const char* cutsceneEntName, Hash modelHash)
	{
		return invoker::invoke<Entity, 0x4240B5D04F91480C, 0xA710AC>(cutsceneEntName, modelHash);
	}

	FORCEINLINE auto SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(Hash modelHash)
	{
		return invoker::invoke<void, 0x256C30FDAB915E2B, 0xA76A60>(modelHash);
	}

	FORCEINLINE auto SET_CUTSCENE_TRIGGER_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<void, 0x9B8E842C8055B05, 0xA75560>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(const char* cutsceneEntName, Hash modelHash)
	{
		return invoker::invoke<BOOL, 0x18C8A35E0901C0E2, 0xA6EADC>(cutsceneEntName, modelHash);
	}

	FORCEINLINE auto CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(const char* cutsceneEntName, Hash modelHash)
	{
		return invoker::invoke<BOOL, 0xD8FC13DA1BA1DBA2, 0xA6EB40>(cutsceneEntName, modelHash);
	}

	FORCEINLINE auto CAN_SET_EXIT_STATE_FOR_CAMERA(BOOL p0)
	{
		return invoker::invoke<BOOL, 0x2B60F53D06BC6971, 0xA6EB04>(p0);
	}

	FORCEINLINE auto SET_PAD_CAN_SHAKE_DURING_CUTSCENE(BOOL toggle)
	{
		return invoker::invoke<void, 0x9C22AADBAF330B36, 0xA76170>(toggle);
	}

	FORCEINLINE auto SET_CUTSCENE_FADE_VALUES(BOOL p0, BOOL p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x1837D912F4EDCA95, 0xA75464>(p0, p1, p2, p3);
	}

	FORCEINLINE auto SET_CUTSCENE_MULTIHEAD_FADE(BOOL p0, BOOL p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x7882946B06ED216B, 0xA75490>(p0, p1, p2, p3);
	}

	FORCEINLINE auto SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(BOOL p0)
	{
		return invoker::invoke<void, 0x1231218F0BB0653E, 0xA754BC>(p0);
	}

	FORCEINLINE auto IS_MULTIHEAD_FADE_UP()
	{
		return invoker::invoke<BOOL, 0x4A0B7E53EBC937D5, 0xA738A8>();
	}

	FORCEINLINE auto NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(BOOL p0)
	{
		return invoker::invoke<void, 0xF74640C4B28C71BD, 0xA73DAC>(p0);
	}

	FORCEINLINE auto SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(BOOL p0)
	{
		return invoker::invoke<void, 0xD0860FF81E162052, 0xA7524C>(p0);
	}

	FORCEINLINE auto CAN_USE_MOBILE_PHONE_DURING_CUTSCENE()
	{
		return invoker::invoke<BOOL, 0xAF078BC665CCACB9, 0xA6EB68>();
	}

	FORCEINLINE auto SET_CUTSCENE_CAN_BE_SKIPPED(BOOL p0)
	{
		return invoker::invoke<void, 0xEB234554CFDE9162, 0xA75440>(p0);
	}

	FORCEINLINE auto SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xFABF472ADCE66A1E, 0xA75244>();
	}

	FORCEINLINE auto SET_CUTSCENE_PED_COMPONENT_VARIATION(const char* cutsceneEntName, int componentId, int drawableId, int textureId, Hash modelHash)
	{
		return invoker::invoke<void, 0xFE61105198EA3496, 0xA754F4>(cutsceneEntName, componentId, drawableId, textureId, modelHash);
	}

	FORCEINLINE auto SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(const char* cutsceneEntName, Ped ped, Hash modelHash)
	{
		return invoker::invoke<void, 0x2F19C4305F0B8DA7, 0xA75520>(cutsceneEntName, ped, modelHash);
	}

	FORCEINLINE auto DOES_CUTSCENE_ENTITY_EXIST(const char* cutsceneEntName, Hash modelHash)
	{
		return invoker::invoke<BOOL, 0x24CAD023099769B1, 0xA6FB44>(cutsceneEntName, modelHash);
	}

	FORCEINLINE auto SET_CUTSCENE_PED_PROP_VARIATION(const char* cutsceneEntName, int componentId, int drawableId, int textureId, Hash modelHash)
	{
		return invoker::invoke<void, 0x60A0A4CD710160D5, 0xA75534>(cutsceneEntName, componentId, drawableId, textureId, modelHash);
	}

	FORCEINLINE auto HAS_CUTSCENE_CUT_THIS_FRAME()
	{
		return invoker::invoke<BOOL, 0xF1FEB57E542C41F1, 0xA7277C>();
	}

}
namespace STATS
{
	FORCEINLINE auto STAT_CLEAR_SLOT_FOR_RELOAD(int statSlot)
	{
		return invoker::invoke<BOOL, 0xF253153116210E81, 0xD6BC08>(statSlot);
	}

	FORCEINLINE auto STAT_LOAD(int statSlot)
	{
		return invoker::invoke<BOOL, 0x2D1E9C333C5B2D4B, 0xD6C0A4>(statSlot);
	}

	FORCEINLINE auto STAT_SAVE(int p0, BOOL p1, int p2, BOOL p3)
	{
		return invoker::invoke<BOOL, 0x3AADA29651BD7786, 0xD6C148>(p0, p1, p2, p3);
	}

	FORCEINLINE auto STAT_SET_OPEN_SAVETYPE_IN_JOB(int p0)
	{
		return invoker::invoke<void, 0x2A3AA41B5A7E92FA, 0xD6C384>(p0);
	}

	FORCEINLINE auto STAT_LOAD_PENDING(int statSlot)
	{
		return invoker::invoke<BOOL, 0x944042019AAAD145, 0xD6C0E4>(statSlot);
	}

	FORCEINLINE auto STAT_SAVE_PENDING()
	{
		return invoker::invoke<BOOL, 0xA0BF4C723F7D0831, 0xD6C17C>();
	}

	FORCEINLINE auto STAT_SAVE_PENDING_OR_REQUESTED()
	{
		return invoker::invoke<BOOL, 0xFF94E450D8F794CD, 0xD6C198>();
	}

	FORCEINLINE auto STAT_DELETE_SLOT(int p0)
	{
		return invoker::invoke<BOOL, 0xD808EAD42CF65DA5, 0xD6BCD4>(p0);
	}

	FORCEINLINE auto STAT_SLOT_IS_LOADED(int statSlot)
	{
		return invoker::invoke<BOOL, 0x7A207DD1AEF9D26E, 0xD6C450>(statSlot);
	}

	FORCEINLINE auto STAT_CLOUD_SLOT_LOAD_FAILED(int p0)
	{
		return invoker::invoke<BOOL, 0x219ED949271099BA, 0xD6BC14>(p0);
	}

	FORCEINLINE auto STAT_CLOUD_SLOT_LOAD_FAILED_CODE(Any p0)
	{
		return invoker::invoke<int, 0x2F2F3B8D58302682, 0xD6BC38>(p0);
	}

	FORCEINLINE auto STAT_SET_BLOCK_SAVES(BOOL toggle)
	{
		return invoker::invoke<void, 0xC88945F4DD99D7E0, 0xD6C1B4>(toggle);
	}

	FORCEINLINE auto STAT_GET_BLOCK_SAVES()
	{
		return invoker::invoke<BOOL, 0x5927F0EB6A8C0001, 0xD6BCF0>();
	}

	FORCEINLINE auto STAT_CLOUD_SLOT_SAVE_FAILED(Any p0)
	{
		return invoker::invoke<BOOL, 0x64F5ED1652910707, 0xD6BC58>(p0);
	}

	FORCEINLINE auto STAT_CLEAR_PENDING_SAVES(Any p0)
	{
		return invoker::invoke<void, 0x2CB53B9DB9AB03C1, 0xD6BBFC>(p0);
	}

	FORCEINLINE auto STAT_LOAD_DIRTY_READ_DETECTED()
	{
		return invoker::invoke<BOOL, 0x31AE99BF71F99FDF, 0xD6C0C8>();
	}

	FORCEINLINE auto STAT_CLEAR_DIRTY_READ_DETECTED()
	{
		return invoker::invoke<void, 0xF05E12C1DE78B9F2, 0xD6BBE0>();
	}

	FORCEINLINE auto STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP()
	{
		return invoker::invoke<BOOL, 0xDD07F250CCC73F1A, 0xD6BEB0>();
	}

	FORCEINLINE auto _GET_STAT_HASH_FOR_CHARACTER_STAT(int dataType, int statIndex, int charSlot)
	{
		return invoker::invoke<Hash, 0xD69CE161FE614531, 0xD63824>(dataType, statIndex, charSlot);
	}

	FORCEINLINE auto STAT_SET_INT(Hash statName, int value, BOOL save)
	{
		return invoker::invoke<BOOL, 0x1164A75E490C27B6, 0xD6C2F0>(statName, value, save);
	}

	FORCEINLINE auto STAT_SET_FLOAT(Hash statName, float value, BOOL save)
	{
		return invoker::invoke<BOOL, 0x4F8678C02360C3D2, 0xD6C290>(statName, value, save);
	}

	FORCEINLINE auto STAT_SET_BOOL(Hash statName, BOOL value, BOOL save)
	{
		return invoker::invoke<BOOL, 0xF1D0B0CE940F620D, 0xD6C1E0>(statName, value, save);
	}

	FORCEINLINE auto STAT_SET_GXT_LABEL(Hash statName, const char* value, BOOL save)
	{
		return invoker::invoke<BOOL, 0xFE0BEB152470B0B8, 0xD6C2C0>(statName, value, save);
	}

	FORCEINLINE auto STAT_SET_DATE(Hash statName, Any* value, int numFields, BOOL save)
	{
		return invoker::invoke<BOOL, 0x8FDC19B6566720CA, 0xD6C25C>(statName, value, numFields, save);
	}

	FORCEINLINE auto STAT_SET_STRING(Hash statName, const char* value, BOOL save)
	{
		return invoker::invoke<BOOL, 0x1A43F9BE4B6AAB67, 0xD6C3F0>(statName, value, save);
	}

	FORCEINLINE auto STAT_SET_POS(Hash statName, float x, float y, float z, BOOL save)
	{
		return invoker::invoke<BOOL, 0x2936060DABE3BC7C, 0xD6C3A4>(statName, x, y, z, save);
	}

	FORCEINLINE auto STAT_SET_MASKED_INT(Hash statName, int p1, int p2, int p3, BOOL save)
	{
		return invoker::invoke<BOOL, 0xCC11C02D491BBBBB, 0xD6C348>(statName, p1, p2, p3, save);
	}

	FORCEINLINE auto STAT_SET_USER_ID(Hash statName, const char* value, BOOL save)
	{
		return invoker::invoke<BOOL, 0xD13EF24D43A8E864, 0xD6C420>(statName, value, save);
	}

	FORCEINLINE auto STAT_SET_CURRENT_POSIX_TIME(Hash statName, BOOL p1)
	{
		return invoker::invoke<BOOL, 0x465DA23A52B88B07, 0xD6C230>(statName, p1);
	}

	FORCEINLINE auto STAT_GET_INT(Hash statHash, int* outValue, int p2)
	{
		return invoker::invoke<BOOL, 0xDF7F16323520B858, 0xD6BE64>(statHash, outValue, p2);
	}

	FORCEINLINE auto STAT_GET_FLOAT(Hash statHash, float* outValue, Any p2)
	{
		return invoker::invoke<BOOL, 0x2F0966A034F5ADC6, 0xD6BE14>(statHash, outValue, p2);
	}

	FORCEINLINE auto STAT_GET_BOOL(Hash statHash, BOOL* outValue, Any p2)
	{
		return invoker::invoke<BOOL, 0xF249567F2E83E093, 0xD6BD0C>(statHash, outValue, p2);
	}

	FORCEINLINE auto STAT_GET_DATE(Hash statHash, Any* outValue, int numFields, Any p3)
	{
		return invoker::invoke<BOOL, 0x22F25CEE5BAA4944, 0xD6BDE4>(statHash, outValue, numFields, p3);
	}

	FORCEINLINE auto STAT_GET_STRING(Hash statHash, int p1)
	{
		return invoker::invoke<const char*, 0xCEA81DACD6DA3ADB, 0xD6BFEC>(statHash, p1);
	}

	FORCEINLINE auto STAT_GET_POS(Hash statName, float* outX, float* outY, float* outZ, Any p4)
	{
		return invoker::invoke<BOOL, 0xB738B2E1369125F6, 0xD6BF84>(statName, outX, outY, outZ, p4);
	}

	FORCEINLINE auto STAT_GET_MASKED_INT(Hash statHash, int* outValue, int p2, int p3, Any p4)
	{
		return invoker::invoke<BOOL, 0x1F1450A1F4852E10, 0xD6BECC>(statHash, outValue, p2, p3, p4);
	}

	FORCEINLINE auto STAT_GET_USER_ID(Hash statHash)
	{
		return invoker::invoke<const char*, 0xD8DECC82BA81E8D9, 0xD6C010>(statHash);
	}

	FORCEINLINE auto STAT_GET_LICENSE_PLATE(Hash statName)
	{
		return invoker::invoke<const char*, 0x586035D0F620ADEE, 0xD6BE90>(statName);
	}

	FORCEINLINE auto STAT_SET_LICENSE_PLATE(Hash statName, const char* str)
	{
		return invoker::invoke<BOOL, 0x9E1D4641E6A5C2F0, 0xD6C320>(statName, str);
	}

	FORCEINLINE auto STAT_INCREMENT(Hash statName, float value)
	{
		return invoker::invoke<void, 0x3CAC0DB32E69B1B8, 0xD6C040>(statName, value);
	}

	FORCEINLINE auto STAT_COMMUNITY_START_SYNCH()
	{
		return invoker::invoke<BOOL, 0x4B995F8441EAC13B, 0xD6BCB0>();
	}

	FORCEINLINE auto STAT_COMMUNITY_SYNCH_IS_PENDING()
	{
		return invoker::invoke<BOOL, 0xB8581B151258A47D, 0xCCE8A8>();
	}

	FORCEINLINE auto STAT_COMMUNITY_GET_HISTORY(Hash statName, int p1, float* outValue)
	{
		return invoker::invoke<BOOL, 0x3BD9AF4ED006CA00, 0xD6BC7C>(statName, p1, outValue);
	}

	FORCEINLINE auto STAT_RESET_ALL_ONLINE_CHARACTER_STATS(int p0)
	{
		return invoker::invoke<void, 0xC4FBBBC915C04DF9, 0xD6C13C>(p0);
	}

	FORCEINLINE auto STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(int p0)
	{
		return invoker::invoke<void, 0xB9BE1957DDE28FC8, 0xD6C108>(p0);
	}

	FORCEINLINE auto STAT_GET_NUMBER_OF_DAYS(Hash statName)
	{
		return invoker::invoke<int, 0x4F256B9F00ACB695, 0xD6BF04>(statName);
	}

	FORCEINLINE auto STAT_GET_NUMBER_OF_HOURS(Hash statName)
	{
		return invoker::invoke<int, 0xDF21396D0886D8F7, 0xD6BF24>(statName);
	}

	FORCEINLINE auto STAT_GET_NUMBER_OF_MINUTES(Hash statName)
	{
		return invoker::invoke<int, 0xE44C8536D6F264FC, 0xD6BF44>(statName);
	}

	FORCEINLINE auto STAT_GET_NUMBER_OF_SECONDS(Hash statName)
	{
		return invoker::invoke<int, 0x77A7B5685F038D01, 0xD6BF64>(statName);
	}

	FORCEINLINE auto STAT_SET_PROFILE_SETTING_VALUE(int profileSetting, int value)
	{
		return invoker::invoke<void, 0x7743BAF85DF35E38, 0xD6C3E0>(profileSetting, value);
	}

	FORCEINLINE auto STATS_COMPLETED_CHARACTER_CREATION(Any p0)
	{
		return invoker::invoke<void, 0xCD2B99375CA577C6, 0x81A1C0>(p0);
	}

	FORCEINLINE auto PACKED_STAT_GET_INT_STAT_INDEX(int p0)
	{
		return invoker::invoke<int, 0xC24FF3ECDBA75CAC, 0xD669DC>(p0);
	}

	FORCEINLINE auto GET_PACKED_INT_STAT_KEY(int index, BOOL spStat, BOOL charStat, int character)
	{
		return invoker::invoke<Hash, 0xC80B42F8AEC90782, 0xD63120>(index, spStat, charStat, character);
	}

	FORCEINLINE auto GET_PACKED_TU_INT_STAT_KEY(int index, BOOL spStat, BOOL charStat, int character)
	{
		return invoker::invoke<Hash, 0x443206C9783C69F1, 0xD631E0>(index, spStat, charStat, character);
	}

	FORCEINLINE auto GET_PACKED_NG_INT_STAT_KEY(int index, BOOL spStat, BOOL charStat, int character, const char* section)
	{
		return invoker::invoke<Hash, 0x6B604293CA9BF4E0, 0xD63154>(index, spStat, charStat, character, section);
	}

	FORCEINLINE auto GET_PACKED_STAT_BOOL_CODE(int index, int characterSlot)
	{
		return invoker::invoke<BOOL, 0xA6D3C21763E25496, 0xD63194>(index, characterSlot);
	}

	FORCEINLINE auto GET_PACKED_STAT_INT_CODE(int index, int characterSlot)
	{
		return invoker::invoke<int, 0x3CFFD51CE515454, 0xD631BC>(index, characterSlot);
	}

	FORCEINLINE auto SET_PACKED_STAT_BOOL_CODE(int index, BOOL value, int characterSlot)
	{
		return invoker::invoke<void, 0xA595AA1819B05EA0, 0xD69B04>(index, value, characterSlot);
	}

	FORCEINLINE auto SET_PACKED_STAT_INT_CODE(int index, int value, int characterSlot)
	{
		return invoker::invoke<void, 0xF575D68F532124C, 0xD69B1C>(index, value, characterSlot);
	}

	FORCEINLINE auto PLAYSTATS_BACKGROUND_SCRIPT_ACTION(const char* action, int value)
	{
		return invoker::invoke<void, 0xF62AFE29E168F6E0, 0xD66BC4>(action, value);
	}

	FORCEINLINE auto _PLAYSTATS_FLOW_LOW(float posX, float posY, float posZ, const char* action, BOOL p4, int p5)
	{
		return invoker::invoke<void, 0xE6A27CDA42887F93, 0xD67004>(posX, posY, posZ, action, p4, p5);
	}

	FORCEINLINE auto _PLAYSTATS_FLOW_MEDIUM(float posX, float posY, float posZ, const char* action, BOOL p4, int p5)
	{
		return invoker::invoke<void, 0xC4493521BAA12CCE, 0xD67020>(posX, posY, posZ, action, p4, p5);
	}

	FORCEINLINE auto _PLAYSTATS_FLOW_HIGH(float posX, float posY, float posZ, const char* action, BOOL p4, int p5)
	{
		return invoker::invoke<void, 0xCFB0E9C3456319EA, 0xD66FE8>(posX, posY, posZ, action, p4, p5);
	}

	FORCEINLINE auto PLAYSTATS_NPC_INVITE(const char* p0)
	{
		return invoker::invoke<void, 0x7BF080B6E9DA59BA, 0xD67540>(p0);
	}

	FORCEINLINE auto PLAYSTATS_AWARD_XP(int amount, Hash type, Hash category)
	{
		return invoker::invoke<void, 0xF509A0F327DF0ADD, 0xD66BB0>(amount, type, category);
	}

	FORCEINLINE auto PLAYSTATS_RANK_UP(int rank)
	{
		return invoker::invoke<void, 0xC9F6D856F39266AF, 0xD67664>(rank);
	}

	FORCEINLINE auto PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE()
	{
		return invoker::invoke<void, 0xA8F0E4FAD3A68800, 0xD6777C>();
	}

	FORCEINLINE auto PLAYSTATS_ACTIVITY_DONE(int p0, int activityId, Any p2)
	{
		return invoker::invoke<void, 0x53F0C32557EF5D43, 0xD66AC4>(p0, activityId, p2);
	}

	FORCEINLINE auto PLAYSTATS_LEAVE_JOB_CHAIN(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x7B6C12F588333BA9, 0xD67304>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_MISSION_STARTED(const char* p0, Any p1, Any p2, BOOL p3)
	{
		return invoker::invoke<void, 0x48963DA591ECAAF, 0xD674C0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_MISSION_OVER(const char* p0, Any p1, Any p2, BOOL p3, BOOL p4, BOOL p5)
	{
		return invoker::invoke<void, 0x1A6EB10909EB6840, 0xD67480>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto PLAYSTATS_MISSION_CHECKPOINT(const char* p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x375B1B37EF136A49, 0xD67448>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_RANDOM_MISSION_DONE(const char* name, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x3AF124228E3EAF07, 0xD67638>(name, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_ROS_BET(int amount, int act, Player player, float cm)
	{
		return invoker::invoke<void, 0x1C55C6E8F7E0027C, 0xD676B0>(amount, act, player, cm);
	}

	FORCEINLINE auto PLAYSTATS_RACE_CHECKPOINT(Vehicle p0, Any p1, int p2, int p3, Any p4)
	{
		return invoker::invoke<void, 0x8316C9B9D1E7C6F9, 0xD675E0>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(int* playerAccountId, int* posixTime)
	{
		return invoker::invoke<BOOL, 0x189E96FAC892B16, 0xD66F10>(playerAccountId, posixTime);
	}

	FORCEINLINE auto PLAYSTATS_MATCH_STARTED(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x6DA5DF2F00E56237, 0xD67348>(p0, p1, p2);
	}

	FORCEINLINE auto PLAYSTATS_SHOP_ITEM(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0xE72DE3350869DA0C, 0xD676E0>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_CRATE_DROP_MISSION_DONE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
	{
		return invoker::invoke<void, 0x781030C356161426, 0xD66EC8>(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	FORCEINLINE auto PLAYSTATS_CRATE_CREATED(float p0, float p1, float p2)
	{
		return invoker::invoke<void, 0x840F7B4124045541, 0xD66E9C>(p0, p1, p2);
	}

	FORCEINLINE auto PLAYSTATS_HOLD_UP_MISSION_DONE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xF1A3507F1CCB5AB2, 0xD671F0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x3A6A8B40F4CEF984, 0xD6725C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_RACE_TO_POINT_MISSION_DONE(int p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xC93D3E846508BAF3, 0xD67614>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(Any p0)
	{
		return invoker::invoke<void, 0x4E84B27CF8AA616F, 0xD66AB8>(p0);
	}

	FORCEINLINE auto PLAYSTATS_WEBSITE_VISITED(Hash scaleformHash, int p1)
	{
		return invoker::invoke<void, 0x60C742268AC666E4, 0xD67850>(scaleformHash, p1);
	}

	FORCEINLINE auto PLAYSTATS_FRIEND_ACTIVITY(int p0, BOOL p1)
	{
		return invoker::invoke<void, 0x52BD224DF16926E9, 0xD67108>(p0, p1);
	}

	FORCEINLINE auto PLAYSTATS_ODDJOB_DONE(int totalTimeMs, int p1, BOOL p2)
	{
		return invoker::invoke<void, 0x60642EDE690B1018, 0x81A1C0>(totalTimeMs, p1, p2);
	}

	FORCEINLINE auto PLAYSTATS_PROP_CHANGE(Ped p0, int p1, int p2, int p3)
	{
		return invoker::invoke<void, 0xC55C44E111865A0F, 0xD67588>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_CLOTH_CHANGE(Ped p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x940BFADAD95A939F, 0xD66E24>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_WEAPON_MODE_CHANGE(Hash weaponHash, Hash componentHashTo, Hash componentHashFrom)
	{
		return invoker::invoke<void, 0xA634868C7A532A58, 0xD6783C>(weaponHash, componentHashTo, componentHashFrom);
	}

	FORCEINLINE auto PLAYSTATS_CHEAT_APPLIED(const char* cheat)
	{
		return invoker::invoke<void, 0xDB98FB9902F6B17C, 0xD66E00>(cheat);
	}

	FORCEINLINE auto PLAYSTATS_JOB_ACTIVITY_END(Any* p0, Any* p1, Any* p2, Any* p3)
	{
		return invoker::invoke<void, 0x7701647A03967883, 0xD672A4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_JOB_BEND(Any* p0, Any* p1, Any* p2, Any* p3)
	{
		return invoker::invoke<void, 0x791C60FDE763B02C, 0xD672BC>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_JOB_LTS_END(Any* p0, Any* p1, Any* p2, Any* p3)
	{
		return invoker::invoke<void, 0xA65F85EADA8FCE58, 0xD672D4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_JOB_LTS_ROUND_END(Any* p0, Any* p1, Any* p2, Any* p3)
	{
		return invoker::invoke<void, 0x8B363F1214B75578, 0xD672EC>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_QUICKFIX_TOOL(int element, const char* item)
	{
		return invoker::invoke<void, 0x93270A4C77D1DCB1, 0xD675A0>(element, item);
	}

	FORCEINLINE auto PLAYSTATS_IDLE_KICK(int msStoodIdle)
	{
		return invoker::invoke<void, 0xA3DDD8C7699A4B48, 0xD67244>(msStoodIdle);
	}

	FORCEINLINE auto PLAYSTATS_SET_JOIN_TYPE(int joinType)
	{
		return invoker::invoke<void, 0x11E6F76C331CFCE, 0xD676D4>(joinType);
	}

	FORCEINLINE auto PLAYSTATS_HEIST_SAVE_CHEAT(Hash hash, int p1)
	{
		return invoker::invoke<void, 0x1D287C5DA2285371, 0xD671D4>(hash, p1);
	}

	FORCEINLINE auto PLAYSTATS_APPEND_DIRECTOR_METRIC(Any* p0)
	{
		return invoker::invoke<void, 0x38D116A5A4F69C5B, 0xD66AE4>(p0);
	}

	FORCEINLINE auto PLAYSTATS_AWARD_BAD_SPORT(int id)
	{
		return invoker::invoke<void, 0xF03BD9D28197A400, 0xD66B8C>(id);
	}

	FORCEINLINE auto PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(Hash modelHash)
	{
		return invoker::invoke<void, 0xC08C0C34ECB97688, 0xD67558>(modelHash);
	}

	FORCEINLINE auto _PLAYSTATS_SHOPMENU_NAV(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xB56CE5A91FCC8552, 0xD67714>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_CHALLENGES(Any p0)
	{
		return invoker::invoke<void, 0x2D37C46EADE98E63, 0xD67048>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_VEHICLETARGET(Any p0)
	{
		return invoker::invoke<void, 0x32E12CCFF254D37A, 0xD670CC>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_URBANWARFARE(Any p0)
	{
		return invoker::invoke<void, 0x2825919430010B91, 0xD670C0>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(Any p0)
	{
		return invoker::invoke<void, 0x173E12E4AAA563A1, 0xD67054>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_ATOB(Any p0)
	{
		return invoker::invoke<void, 0xD2041B451EDC1C66, 0xD6703C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_PENNEDIN(Any p0)
	{
		return invoker::invoke<void, 0xC98FBB17B1EC9BA1, 0xD670B4>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_PASSTHEPARCEL(Any p0)
	{
		return invoker::invoke<void, 0x4C70DC8FBB218E4E, 0xD670A8>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_HOTPROPERTY(Any p0)
	{
		return invoker::invoke<void, 0xEBB6A19519CEBE34, 0xD67084>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_DEADDROP(Any p0)
	{
		return invoker::invoke<void, 0x41A58057D21172EA, 0xD67078>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(Any p0)
	{
		return invoker::invoke<void, 0xE8BC7181CB760A3, 0xD6709C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(Any p0)
	{
		return invoker::invoke<void, 0x842F188EE807AF8B, 0xD6706C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(Any p0)
	{
		return invoker::invoke<void, 0xEC859204FA292EDF, 0xD67060>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_EVENT_HUNTBEAST(Any p0)
	{
		return invoker::invoke<void, 0x5FBB9E5C4B211A4, 0xD67090>(p0);
	}

	FORCEINLINE auto PLAYSTATS_PIMENU_HIDE_OPTIONS(Any* data)
	{
		return invoker::invoke<void, 0x608D1A3E3DEAEBAF, 0xD67564>(data);
	}

	FORCEINLINE auto _PLAYSTATS_NAMED_USER_CONTENT(BOOL isBoss, int bossType, int bossId1, int bossId2, int textType, const char* textString, int textSource)
	{
		return invoker::invoke<void, 0xAA434D7D0A89A95C, 0xD674E8>(isBoss, bossType, bossId1, bossId2, textType, textString, textSource);
	}

	FORCEINLINE auto LEADERBOARDS_GET_NUMBER_OF_COLUMNS(int p0, Any p1)
	{
		return invoker::invoke<int, 0x6D2024112D9A9660, 0xD666C4>(p0, p1);
	}

	FORCEINLINE auto LEADERBOARDS_GET_COLUMN_ID(int p0, int p1, int p2)
	{
		return invoker::invoke<int, 0x54F72D02D777FBCB, 0xD66674>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS_GET_COLUMN_TYPE(int p0, Any p1, Any p2)
	{
		return invoker::invoke<int, 0x3C041FAC0ACE6A45, 0xD6669C>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS_READ_CLEAR_ALL()
	{
		return invoker::invoke<int, 0xB3740C450B9A06AE, 0xD66730>();
	}

	FORCEINLINE auto LEADERBOARDS_READ_CLEAR(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<int, 0x92E48B0F5D4E76F2, 0xD6671C>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS_READ_PENDING(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x2F700943A3341959, 0xD66738>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS_READ_ANY_PENDING()
	{
		return invoker::invoke<BOOL, 0x5824DB463E853B3E, 0xD66700>();
	}

	FORCEINLINE auto LEADERBOARDS_READ_SUCCESSFUL(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x7BBF11C251338D41, 0xD66764>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_FRIENDS_BY_ROW(Any* p0, Any* p1, Any p2, BOOL p3, Any p4, Any p5)
	{
		return invoker::invoke<BOOL, 0x918B101666F9CB83, 0xD6643C>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_BY_HANDLE(Any* p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0xFAFBA6521BA828B9, 0xD66338>(p0, p1);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_BY_RANK(Any* p0, Any p1, Any p2)
	{
		return invoker::invoke<BOOL, 0xCB7FE0F272C209AB, 0xD663B8>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_BY_RADIUS(Any* p0, Any p1, Any* p2)
	{
		return invoker::invoke<BOOL, 0x15A7798AEEFAC562, 0xD6638C>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_BY_SCORE_INT(Any* p0, Any p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x9A9BC0C3D955A625, 0xD66410>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_BY_SCORE_FLOAT(Any* p0, float p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x40ED52FB5B42D9FB, 0xD663E4>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_RANK_PREDICTION(Any* p0, Any* p1, Any* p2)
	{
		return invoker::invoke<BOOL, 0xAB3A622E50A5CCE2, 0xD6651C>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_BY_PLAFORM(Any* p0, const char* gamerHandleCsv, const char* platformName)
	{
		return invoker::invoke<BOOL, 0x86A2F61D43CBFF3E, 0xD66360>(p0, gamerHandleCsv, platformName);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_GET_ROW_DATA_START(Any* p0)
	{
		return invoker::invoke<BOOL, 0xF685596DB2F81084, 0xD664F8>(p0);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_GET_ROW_DATA_END()
	{
		return invoker::invoke<void, 0x612EE6D9325A3B16, 0xD66480>();
	}

	FORCEINLINE auto LEADERBOARDS2_READ_GET_ROW_DATA_INFO(Any p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0xA8236CAFF38CEF7C, 0xD664AC>(p0, p1);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_GET_ROW_DATA_INT(Any p0, Any p1)
	{
		return invoker::invoke<int, 0x575A7688415EEE2A, 0xD664D4>(p0, p1);
	}

	FORCEINLINE auto LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(Any p0, Any p1)
	{
		return invoker::invoke<float, 0xFF7C26AC7D71757C, 0xD66488>(p0, p1);
	}

	FORCEINLINE auto LEADERBOARDS2_WRITE_DATA(Any* p0)
	{
		return invoker::invoke<BOOL, 0x41B592D7008A639E, 0xD66548>(p0);
	}

	FORCEINLINE auto LEADERBOARDS_WRITE_ADD_COLUMN(Any p0, Any p1, float p2)
	{
		return invoker::invoke<void, 0x3573EC2255786C32, 0xD66790>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS_WRITE_ADD_COLUMN_LONG(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x4D9375FB05743625, 0xD667A4>(p0, p1, p2);
	}

	FORCEINLINE auto LEADERBOARDS_CACHE_DATA_ROW(Any* p0)
	{
		return invoker::invoke<BOOL, 0x6353C1BD2A5E7EA9, 0xD66598>(p0);
	}

	FORCEINLINE auto LEADERBOARDS_CLEAR_CACHE_DATA()
	{
		return invoker::invoke<void, 0xB83DA0A55841C11A, 0xD665BC>();
	}

	FORCEINLINE auto LEADERBOARDS_CLEAR_CACHE_DATA_ID(Any p0)
	{
		return invoker::invoke<void, 0xEB551BF55D9D9721, 0xD665CC>(p0);
	}

	FORCEINLINE auto LEADERBOARDS_GET_CACHE_EXISTS(Any p0)
	{
		return invoker::invoke<BOOL, 0xC0967BD19C389A28, 0xD66610>(p0);
	}

	FORCEINLINE auto LEADERBOARDS_GET_CACHE_TIME(Any p0)
	{
		return invoker::invoke<int, 0x992FDA8495111E7E, 0xD66654>(p0);
	}

	FORCEINLINE auto LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(Any p0)
	{
		return invoker::invoke<int, 0xEDF2663D6A2097BD, 0xD66634>(p0);
	}

	FORCEINLINE auto LEADERBOARDS_GET_CACHE_DATA_ROW(Any p0, Any p1, Any* p2)
	{
		return invoker::invoke<BOOL, 0x4B9EEFBC1906C36A, 0xD665E4>(p0, p1, p2);
	}

	FORCEINLINE auto PRESENCE_EVENT_UPDATESTAT_INT(Hash statHash, int value, int p2)
	{
		return invoker::invoke<void, 0x8DD7F37773EBD5B9, 0xD67928>(statHash, value, p2);
	}

	FORCEINLINE auto PRESENCE_EVENT_UPDATESTAT_FLOAT(Hash statHash, float value, int p2)
	{
		return invoker::invoke<void, 0xE9694EE166E27C86, 0xD678F8>(statHash, value, p2);
	}

	FORCEINLINE auto PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(Hash statHash, int value, int p2, const char* string)
	{
		return invoker::invoke<void, 0xE6887182A0B2C89, 0xD67954>(statHash, value, p2, string);
	}

	FORCEINLINE auto GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES()
	{
		return invoker::invoke<BOOL, 0xCA63545216190A04, 0xD63498>();
	}

	FORCEINLINE auto SET_HAS_POSTED_ALL_VEHICLES_DRIVEN()
	{
		return invoker::invoke<void, 0x8E4CE3E418A4A18A, 0xD69740>();
	}

	FORCEINLINE auto SET_PROFILE_SETTING_PROLOGUE_COMPLETE()
	{
		return invoker::invoke<void, 0xDA9DD27943055A8D, 0xD69FCC>();
	}

	FORCEINLINE auto SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE()
	{
		return invoker::invoke<void, 0x3B2E94EC82DA9C40, 0xD69FD4>();
	}

	FORCEINLINE auto SET_PROFILE_SETTING_CREATOR_RACES_DONE(int value)
	{
		return invoker::invoke<void, 0xEFE7FA2B8F97F8BF, 0xD69FC0>(value);
	}

	FORCEINLINE auto SET_PROFILE_SETTING_CREATOR_DM_DONE(int value)
	{
		return invoker::invoke<void, 0x524ADF7DCA7AB2FD, 0xD69FB4>(value);
	}

	FORCEINLINE auto SET_PROFILE_SETTING_CREATOR_CTF_DONE(int value)
	{
		return invoker::invoke<void, 0x6424B1392993B4E8, 0xD69FA8>(value);
	}

	FORCEINLINE auto SET_JOB_ACTIVITY_ID_STARTED(Any p0, int characterSlot)
	{
		return invoker::invoke<void, 0x91F6DFBE57E45538, 0xD69934>(p0, characterSlot);
	}

	FORCEINLINE auto SET_FREEMODE_PROLOGUE_DONE(Any p0, int characterSlot)
	{
		return invoker::invoke<void, 0x1A169A00A9C3A74E, 0xD696A8>(p0, characterSlot);
	}

	FORCEINLINE auto SET_FREEMODE_STRAND_PROGRESSION_STATUS(int profileSetting, int settingValue)
	{
		return invoker::invoke<void, 0x6CDC48346A1C4FCF, 0xD696B8>(profileSetting, settingValue);
	}

	FORCEINLINE auto STAT_NETWORK_INCREMENT_ON_SUICIDE(Any p0, float p1)
	{
		return invoker::invoke<void, 0x4BE1DC2DE96B1199, 0xD6C12C>(p0, p1);
	}

	FORCEINLINE auto STAT_SET_CHEAT_IS_ACTIVE()
	{
		return invoker::invoke<void, 0xB2C27348224E729C, 0xD6C214>();
	}

	FORCEINLINE auto LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(Any* p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0xFFC169CFE58B4AE2, 0xD66570>(p0, p1);
	}

	FORCEINLINE auto FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE()
	{
		return invoker::invoke<void, 0xFFD62C221C935ADB, 0xD62388>();
	}

	FORCEINLINE auto STAT_MIGRATE_CLEAR_FOR_RESTART()
	{
		return invoker::invoke<void, 0xA1C98227D7D82333, 0x81A1C0>();
	}

	FORCEINLINE auto STAT_MIGRATE_SAVEGAME_START(const char* platformName)
	{
		return invoker::invoke<BOOL, 0x38BED19EB5C34B41, 0xD1F814>(platformName);
	}

	FORCEINLINE auto STAT_MIGRATE_SAVEGAME_GET_STATUS()
	{
		return invoker::invoke<int, 0x8F9CF4C6161EB431, 0xD6C120>();
	}

	FORCEINLINE auto STAT_MIGRATE_CHECK_ALREADY_DONE()
	{
		return invoker::invoke<BOOL, 0xB4BB3DD3A6D3F304, 0xD1F814>();
	}

	FORCEINLINE auto STAT_MIGRATE_CHECK_START()
	{
		return invoker::invoke<BOOL, 0xA7CF0480510EE046, 0xD1F814>();
	}

	FORCEINLINE auto STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(int p0)
	{
		return invoker::invoke<int, 0xE76F74E4C982A0D4, 0xD6C114>(p0);
	}

	FORCEINLINE auto STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(int p0, Any* p1)
	{
		return invoker::invoke<int, 0xFE2E7ACE70D240E, 0xCCE8A8>(p0, p1);
	}

	FORCEINLINE auto STAT_GET_SAVE_MIGRATION_STATUS(Any* data)
	{
		return invoker::invoke<int, 0xF55F8AA504635B5C, 0xD6BFE0>(data);
	}

	FORCEINLINE auto STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION()
	{
		return invoker::invoke<BOOL, 0x439313DFB58CA8B9, 0xD1F814>();
	}

	FORCEINLINE auto STAT_GET_CANCEL_SAVE_MIGRATION_STATUS()
	{
		return invoker::invoke<int, 0x8D48140414CDD574, 0xD6BFE0>();
	}

	FORCEINLINE auto STAT_SAVE_MIGRATION_CONSUME_CONTENT(Hash contentId, const char* srcPlatform, const char* srcGamerHandle)
	{
		return invoker::invoke<BOOL, 0x7D12DEAC5A3B4E6, 0xD1F814>(contentId, srcPlatform, srcGamerHandle);
	}

	FORCEINLINE auto STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(int* p0)
	{
		return invoker::invoke<int, 0x40F27244ED9B5A6, 0xD6BFE0>(p0);
	}

	FORCEINLINE auto STAT_ENABLE_STATS_TRACKING()
	{
		return invoker::invoke<void, 0x1E132C341165F83E, 0xD6BCE8>();
	}

	FORCEINLINE auto STAT_DISABLE_STATS_TRACKING()
	{
		return invoker::invoke<void, 0x7D809DF9CCA503F0, 0xD6BCE0>();
	}

	FORCEINLINE auto STAT_IS_STATS_TRACKING_ENABLED()
	{
		return invoker::invoke<BOOL, 0x672D6F3E8E916DB5, 0xD6C088>();
	}

	FORCEINLINE auto STAT_START_RECORD_STAT(int statType, int valueType)
	{
		return invoker::invoke<BOOL, 0xD007674D8A581D71, 0xD6C478>(statType, valueType);
	}

	FORCEINLINE auto STAT_STOP_RECORD_STAT()
	{
		return invoker::invoke<BOOL, 0x77DAA17F34FDE49D, 0xD6C4A0>();
	}

	FORCEINLINE auto STAT_GET_RECORDED_VALUE(float* value)
	{
		return invoker::invoke<BOOL, 0x6975D53533891910, 0xD6BFBC>(value);
	}

	FORCEINLINE auto STAT_IS_RECORDING_STAT()
	{
		return invoker::invoke<BOOL, 0xC3051E9423297E5C, 0xD6C06C>();
	}

	FORCEINLINE auto STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE()
	{
		return invoker::invoke<int, 0xDA0C268B09050750, 0xD6BD98>();
	}

	FORCEINLINE auto STAT_GET_CURRENT_REAR_WHEEL_DISTANCE()
	{
		return invoker::invoke<float, 0x91F40F276617074F, 0xD6BDA4>();
	}

	FORCEINLINE auto STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE()
	{
		return invoker::invoke<float, 0xFF41A17ED9059E7D, 0xD6BD68>();
	}

	FORCEINLINE auto STAT_GET_CURRENT_JUMP_DISTANCE()
	{
		return invoker::invoke<float, 0x143EE419E5A537E6, 0xD6BD88>();
	}

	FORCEINLINE auto STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE()
	{
		return invoker::invoke<float, 0x24B36D1854339214, 0xD6BD48>();
	}

	FORCEINLINE auto STAT_GET_CURRENT_SPEED()
	{
		return invoker::invoke<float, 0xC5EF85C408571EAF, 0xD6BDD4>();
	}

	FORCEINLINE auto STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE()
	{
		return invoker::invoke<float, 0xEAE605592B9C789F, 0xD6BD58>();
	}

	FORCEINLINE auto STAT_GET_CURRENT_SKYDIVING_DISTANCE()
	{
		return invoker::invoke<float, 0xA318B59A6358E821, 0xD6BDC4>();
	}

	FORCEINLINE auto STAT_GET_CHALLENGE_FLYING_DIST()
	{
		return invoker::invoke<float, 0x3D70C45F9F077E0A, 0xD6BD38>();
	}

	FORCEINLINE auto STAT_GET_FLYING_ALTITUDE(float* outValue)
	{
		return invoker::invoke<BOOL, 0x2B2ABCEBD9B1F36F, 0xD6BE40>(outValue);
	}

	FORCEINLINE auto STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN()
	{
		return invoker::invoke<BOOL, 0xF03AFB81ECD7494E, 0xD6C050>();
	}

	FORCEINLINE auto STAT_GET_VEHICLE_BAIL_DISTANCE()
	{
		return invoker::invoke<float, 0x282230B7F0E52D56, 0xD6C030>();
	}

	FORCEINLINE auto STAT_ROLLBACK_SAVE_MIGRATION()
	{
		return invoker::invoke<BOOL, 0xD5F980C0F4DE6597, 0xD1F814>();
	}

	FORCEINLINE auto SET_HAS_SPECIALEDITION_CONTENT(int value)
	{
		return invoker::invoke<void, 0xED11291F7127888E, 0xD69748>(value);
	}

	FORCEINLINE auto SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(int transactionId)
	{
		return invoker::invoke<void, 0x100D89BF365E1356, 0xD6A0C8>(transactionId);
	}

	FORCEINLINE auto GET_BOSS_GOON_UUID(int characterSlot, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xB91B042AE29D1DC0, 0xD62580>(characterSlot, p1, p2);
	}

	FORCEINLINE auto PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(Any p0)
	{
		return invoker::invoke<void, 0x80D4C93EC30B0786, 0xD66C7C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BW_YATCHATTACK(Any p0)
	{
		return invoker::invoke<void, 0x9CEB2AC24E291FE5, 0xD66CB8>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BW_HUNT_THE_BOSS(Any p0)
	{
		return invoker::invoke<void, 0x70FD47FAC8200A49, 0xD66CA0>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BW_SIGHTSEER(Any p0)
	{
		return invoker::invoke<void, 0x6FA1E0B637DED988, 0xD66CAC>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BW_ASSAULT(Any p0)
	{
		return invoker::invoke<void, 0x9ADE63CF2AA5FA61, 0xD66C64>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BW_BELLY_OF_THE_BEAST(Any p0)
	{
		return invoker::invoke<void, 0x14C70C346E2865FB, 0xD66C70>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BW_HEAD_HUNTER(Any p0)
	{
		return invoker::invoke<void, 0xC1538E7E522A1807, 0xD66C94>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BW_FRAGILE_GOODS(Any p0)
	{
		return invoker::invoke<void, 0xEA483A47960FF65E, 0xD66C88>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BW_AIR_FREIGHT(Any p0)
	{
		return invoker::invoke<void, 0xF3621FB07D69B631, 0xD66C58>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BC_CAR_JACKING(Any p0)
	{
		return invoker::invoke<void, 0xAC598BA78ED25971, 0xD66BE0>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BC_SMASH_AND_GRAB(Any p0)
	{
		return invoker::invoke<void, 0xE71905B28E3F819A, 0xD66C34>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BC_PROTECTION_RACKET(Any p0)
	{
		return invoker::invoke<void, 0xA2FA391998A5CA4F, 0xD66C1C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BC_MOST_WANTED(Any p0)
	{
		return invoker::invoke<void, 0x3FCF9BCA6FB938F2, 0xD66C04>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BC_FINDERS_KEEPERS(Any p0)
	{
		return invoker::invoke<void, 0x719970758F252DBF, 0xD66BF8>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BC_POINT_TO_POINT(Any p0)
	{
		return invoker::invoke<void, 0x508F3011A3378766, 0xD66C10>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BC_CASHING(Any p0)
	{
		return invoker::invoke<void, 0x350AD43F9C3F2454, 0xD66BEC>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BC_SALVAGE(Any p0)
	{
		return invoker::invoke<void, 0x760C934FF448A9F0, 0xD66C28>(p0);
	}

	FORCEINLINE auto PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(int amount)
	{
		return invoker::invoke<void, 0x90D02DA0EBE3D2A2, 0xD67758>(amount);
	}

	FORCEINLINE auto PLAYSTATS_BUY_CONTRABAND_MISSION(Any* data)
	{
		return invoker::invoke<void, 0x630EFF47222F5E1D, 0xD66C4C>(data);
	}

	FORCEINLINE auto PLAYSTATS_SELL_CONTRABAND_MISSION(Any* data)
	{
		return invoker::invoke<void, 0xEB54AA925E801335, 0xD676C8>(data);
	}

	FORCEINLINE auto PLAYSTATS_DEFEND_CONTRABAND_MISSION(Any* data)
	{
		return invoker::invoke<void, 0x72940F2C0631BBEB, 0xD66F44>(data);
	}

	FORCEINLINE auto PLAYSTATS_RECOVER_CONTRABAND_MISSION(Any* data)
	{
		return invoker::invoke<void, 0xC769CAC3FD631439, 0xD67670>(data);
	}

	FORCEINLINE auto PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(Any p0)
	{
		return invoker::invoke<void, 0xAE494703C93629A7, 0xD671E4>(p0);
	}

	FORCEINLINE auto START_BEING_BOSS(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xE6523AD46828A3F6, 0xD6B968>(p0, p1, p2);
	}

	FORCEINLINE auto START_BEING_GOON(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x221F00BDB6FE967E, 0xD6B97C>(p0, p1, p2);
	}

	FORCEINLINE auto END_BEING_BOSS(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xD9ADAE64ED7472C8, 0xD62244>(p0, p1, p2);
	}

	FORCEINLINE auto END_BEING_GOON(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x548C5E01E1FF757E, 0xD62258>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto HIRED_LIMO(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x67269D2788D6D1B2, 0xD650B8>(p0, p1);
	}

	FORCEINLINE auto ORDER_BOSS_VEHICLE(Any p0, Any p1, Hash vehicleHash)
	{
		return invoker::invoke<void, 0xF285480DF661C3D, 0xD66974>(p0, p1, vehicleHash);
	}

	FORCEINLINE auto CHANGE_UNIFORM(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xEDE8FBBC2E485227, 0xD61AE4>(p0, p1, p2);
	}

	FORCEINLINE auto CHANGE_GOON_LOOKING_FOR_WORK(Any p0)
	{
		return invoker::invoke<void, 0x941DD7AC53C9EC22, 0xD61AD4>(p0);
	}

	FORCEINLINE auto SEND_METRIC_GHOSTING_TO_PLAYER(Any p0)
	{
		return invoker::invoke<void, 0x1B045571F6FA298C, 0xD68CA8>(p0);
	}

	FORCEINLINE auto SEND_METRIC_VIP_POACH(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x329713E68B100498, 0xD68CC0>(p0, p1, p2);
	}

	FORCEINLINE auto SEND_METRIC_PUNISH_BODYGUARD(Any p0)
	{
		return invoker::invoke<void, 0x88D5C9BF47388E35, 0xD68CB4>(p0);
	}

	FORCEINLINE auto PLAYSTATS_START_TRACKING_STUNTS()
	{
		return invoker::invoke<void, 0x4C7D89621410F77E, 0xD67784>();
	}

	FORCEINLINE auto PLAYSTATS_STOP_TRACKING_STUNTS()
	{
		return invoker::invoke<void, 0x50BF6070C8D9F49F, 0xD67798>();
	}

	FORCEINLINE auto PLAYSTATS_MISSION_ENDED(Any p0)
	{
		return invoker::invoke<void, 0x1CF82FBB85DD6ABB, 0xD67474>(p0);
	}

	FORCEINLINE auto PLAYSTATS_IMPEXP_MISSION_ENDED(Any p0)
	{
		return invoker::invoke<void, 0xA186CBB04F0BBCFE, 0xD67250>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CHANGE_MC_ROLE(Any p0, Any p1, Any p2, Any p3, int role, int p5, Any p6)
	{
		return invoker::invoke<void, 0xCA4490F4B172921A, 0xD66DC4>(p0, p1, p2, p3, role, p5, p6);
	}

	FORCEINLINE auto PLAYSTATS_CHANGE_MC_OUTFIT(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x4A3EF58902440342, 0xD66D98>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_SWITCH_MC_EMBLEM(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x659F4E947AD2B02A, 0xD677BC>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_MC_REQUEST_BIKE(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x50F77CF468D67786, 0xD67408>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x9FA5724BA444B78F, 0xD673DC>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_ABANDONED_MC(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x386D5FB82562D9A7, 0xD66A74>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_EARNED_MC_POINTS(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<void, 0x38FC0304403CC66, 0xD66F8C>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto PLAYSTATS_MC_FORMATION_ENDS(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
	{
		return invoker::invoke<void, 0xAAEAC50F94519B77, 0xD673A0>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
	{
		return invoker::invoke<void, 0x9C9F041189C7B5E6, 0xD6735C>(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	FORCEINLINE auto PLAYSTATS_RIVAL_BEHAVIOR(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
	{
		return invoker::invoke<void, 0xFAB208D4EE01DCE, 0xD67688>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	FORCEINLINE auto PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
	{
		return invoker::invoke<void, 0x51223729D9AEA4FF, 0xD66E60>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto PLAYSTATS_DUPE_DETECTED(Any* data)
	{
		return invoker::invoke<void, 0x1A863223E987A73F, 0xD66F80>(data);
	}

	FORCEINLINE auto PLAYSTATS_BAN_ALERT(int p0)
	{
		return invoker::invoke<void, 0x89CB07C992FD7482, 0xD66BD4>(p0);
	}

	FORCEINLINE auto PLAYSTATS_GUNRUNNING_MISSION_ENDED(Any* data)
	{
		return invoker::invoke<void, 0xCF78529B9B88C73E, 0xD67118>(data);
	}

	FORCEINLINE auto PLAYSTATS_GUNRUNNING_RND(Any p0)
	{
		return invoker::invoke<void, 0xDBDCE53A650E5E77, 0xD67124>(p0);
	}

	FORCEINLINE auto PLAYSTATS_BUSINESS_BATTLE_ENDED(Any p0)
	{
		return invoker::invoke<void, 0x9F37D3068C21188B, 0xD66C40>(p0);
	}

	FORCEINLINE auto PLAYSTATS_WAREHOUSE_MISSION_ENDED(Any p0)
	{
		return invoker::invoke<void, 0x3CC95BC25EF390A3, 0xD67830>(p0);
	}

	FORCEINLINE auto PLAYSTATS_NIGHTCLUB_MISSION_ENDED(Any p0)
	{
		return invoker::invoke<void, 0xA96F57BEEBDCD7FD, 0xD67528>(p0);
	}

	FORCEINLINE auto PLAYSTATS_DJ_USAGE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x7FCBCE6EE93B0340, 0xD66F5C>(p0, p1);
	}

	FORCEINLINE auto PLAYSTATS_MINIGAME_USAGE(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xF8C98B298DDC5D32, 0xD67434>(p0, p1, p2);
	}

	FORCEINLINE auto PLAYSTATS_STONE_HATCHET_ENDED(Any* data)
	{
		return invoker::invoke<void, 0xF0B9CB44987DE499, 0xD6778C>(data);
	}

	FORCEINLINE auto PLAYSTATS_SMUGGLER_MISSION_ENDED(Any* data)
	{
		return invoker::invoke<void, 0x1325E9C90489B378, 0xD6774C>(data);
	}

	FORCEINLINE auto PLAYSTATS_FM_HEIST_PREP_ENDED(Any* data)
	{
		return invoker::invoke<void, 0x99328D758CDC23F7, 0xD670D8>(data);
	}

	FORCEINLINE auto PLAYSTATS_INSTANCED_HEIST_ENDED(Any* data, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x371A8C274440C46A, 0xD67274>(data, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_DAR_CHECKPOINT(Any* data)
	{
		return invoker::invoke<void, 0xB47B9148D14503E5, 0xD66F38>(data);
	}

	FORCEINLINE auto PLAYSTATS_ENTER_SESSION_PACK(Any* data)
	{
		return invoker::invoke<void, 0x684BD5689373BE09, 0xD66FC0>(data);
	}

	FORCEINLINE auto PLAYSTATS_DRONE_USAGE(int p0, int p1, int p2)
	{
		return invoker::invoke<void, 0x4836A505A59A567B, 0xD66F6C>(p0, p1, p2);
	}

	FORCEINLINE auto PLAYSTATS_SPIN_WHEEL(int p0, int p1, int p2, int p3)
	{
		return invoker::invoke<void, 0xEFB96B0F8AFC55E7, 0xD67764>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_ARENA_WARS_SPECTATOR(int p0, int p1, int p2, int p3, int p4)
	{
		return invoker::invoke<void, 0x2630B46C64BCAAE2, 0xD66B54>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_ARENA_WARS_ENDED(Any* data)
	{
		return invoker::invoke<void, 0xF215BF4F28EC3017, 0xD66B48>(data);
	}

	FORCEINLINE auto PLAYSTATS_SWITCH_PASSIVE_MODE(BOOL p0, int p1, int p2, int p3)
	{
		return invoker::invoke<void, 0xD3ABBB1A96756065, 0xD677E8>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_COLLECTIBLE_PICKED_UP(int p0, Hash objectHash, Any p2, Any p3, int moneyAmount, int rpAmount, int chipsAmount, Any p7, int p8, Any p9, Any p10)
	{
		return invoker::invoke<void, 0xF68338683C568951, 0xD66E50>(p0, objectHash, p2, p3, moneyAmount, rpAmount, chipsAmount, p7, p8, p9, p10);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_STORY_MISSION_ENDED(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x46A8E0CD89EA583B, 0xD66D70>(p0, p1);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_CHIP(Any p0)
	{
		return invoker::invoke<void, 0x3537BA3FCD2A039A, 0xD66D10>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_ROULETTE(Any p0)
	{
		return invoker::invoke<void, 0xED43EEB7E19CF2E3, 0xD66D40>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_BLACKJACK(Any p0)
	{
		return invoker::invoke<void, 0xD2C8AF03369DD71B, 0xD66CF8>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_THREE_CARD_POKER(Any p0)
	{
		return invoker::invoke<void, 0x5B04C6D6A21F6BDE, 0xD66D80>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_SLOT_MACHINE(Any p0)
	{
		return invoker::invoke<void, 0x4625293E9A8A8039, 0xD66D58>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_INSIDE_TRACK(Any p0)
	{
		return invoker::invoke<void, 0x4BD15CBD0A9222DD, 0xD66D1C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_LUCKY_SEVEN(Any p0)
	{
		return invoker::invoke<void, 0xCDD1396DEA43BDA8, 0xD66D34>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_ROULETTE_LIGHT(Any p0)
	{
		return invoker::invoke<void, 0x7B03AA631D3DC516, 0xD66D4C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_BLACKJACK_LIGHT(Any p0)
	{
		return invoker::invoke<void, 0xD905BB02623EB466, 0xD66D04>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(Any p0)
	{
		return invoker::invoke<void, 0x9908830BDC036C61, 0xD66D8C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(Any p0)
	{
		return invoker::invoke<void, 0x6D9B2D5FF44B7412, 0xD66D64>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(Any p0)
	{
		return invoker::invoke<void, 0x7B2248C7C15BE57A, 0xD66D28>(p0);
	}

	FORCEINLINE auto PLAYSTATS_ARCADE_GAME(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
	{
		return invoker::invoke<void, 0x7F9682CABF083921, 0xD66AFC>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto PLAYSTATS_ARCADE_LOVE_MATCH(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x82BF0C9FB824099C, 0xD66B38>(p0, p1);
	}

	FORCEINLINE auto PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(Any* data)
	{
		return invoker::invoke<void, 0x4D301F952E820ABF, 0xD670FC>(data);
	}

	FORCEINLINE auto PLAYSTATS_HEIST3_DRONE(Any p0)
	{
		return invoker::invoke<void, 0xF13CC26EA89AA7F8, 0xD67130>(p0);
	}

	FORCEINLINE auto PLAYSTATS_HEIST3_HACK(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<void, 0x675E746FC2A4FB77, 0xD67148>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto PLAYSTATS_NPC_PHONE(Any* p0)
	{
		return invoker::invoke<void, 0x7114D68882DD5DFB, 0xD6754C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_ARCADE_CABINET(Any p0)
	{
		return invoker::invoke<void, 0x2970B68950960A6C, 0xD66AF0>(p0);
	}

	FORCEINLINE auto PLAYSTATS_HEIST3_FINALE(Any p0)
	{
		return invoker::invoke<void, 0xB48B26002E1AA60A, 0xD6713C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_HEIST3_PREP(Any p0)
	{
		return invoker::invoke<void, 0x40072633F87B9108, 0xD67180>(p0);
	}

	FORCEINLINE auto PLAYSTATS_MASTER_CONTROL(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xA95EC1B907F29ED9, 0xD67330>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_QUIT_MODE(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x41D32B3516729590, 0xD675B0>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_MISSION_VOTE(Any p0)
	{
		return invoker::invoke<void, 0x81A3B28FEE8BC3E2, 0xD674DC>(p0);
	}

	FORCEINLINE auto PLAYSTATS_NJVS_VOTE(Any p0)
	{
		return invoker::invoke<void, 0x339EF7B9AE008FA8, 0xD67534>(p0);
	}

	FORCEINLINE auto PLAYSTATS_FM_MISSION_END(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xA40024641239312A, 0xD670E4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_HEIST4_PREP(Any p0)
	{
		return invoker::invoke<void, 0xB0BAD388315F2608, 0xD671C8>(p0);
	}

	FORCEINLINE auto PLAYSTATS_HEIST4_FINALE(Any p0)
	{
		return invoker::invoke<void, 0xBA1BC83D99F914EB, 0xD6718C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_HEIST4_HACK(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0xCAA6345ABFF6EA75, 0xD67198>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto PLAYSTATS_SUB_WEAP(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xC155FF33EAAF8C90, 0xD677A0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_FAST_TRVL(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
	{
		return invoker::invoke<void, 0xEA2F05FA7C5B9D4, 0xD66FD8>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
	}

	FORCEINLINE auto PLAYSTATS_HUB_ENTRY(Any p0)
	{
		return invoker::invoke<void, 0xD7F11E9496A00370, 0xD67218>(p0);
	}

	FORCEINLINE auto PLAYSTATS_DJ_MISSION_ENDED(Any p0)
	{
		return invoker::invoke<void, 0x7C1CE15F51FA4860, 0xD66F50>(p0);
	}

	FORCEINLINE auto PLAYSTATS_ROBBERY_PREP(Any p0)
	{
		return invoker::invoke<void, 0xBD30FDBCFA1FA6FE, 0xD676A4>(p0);
	}

	FORCEINLINE auto PLAYSTATS_ROBBERY_FINALE(Any p0)
	{
		return invoker::invoke<void, 0xD3DAE430946FA2C0, 0xD67698>(p0);
	}

	FORCEINLINE auto PLAYSTATS_EXTRA_EVENT(Any p0)
	{
		return invoker::invoke<void, 0xF629F308639591F4, 0xD66FCC>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CARCLUB_POINTS(Any p0)
	{
		return invoker::invoke<void, 0x1F6CBC74AC659452, 0xD66CDC>(p0);
	}

	FORCEINLINE auto PLAYSTATS_CARCLUB_CHALLENGE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xCC5FFCD1D8510D21, 0xD66CC4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_CARCLUB_PRIZE(int p0, Hash vehicleModel)
	{
		return invoker::invoke<void, 0x492808CC0E1DB266, 0xD66CE8>(p0, vehicleModel);
	}

	FORCEINLINE auto PLAYSTATS_AWARD_NAV(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xA6B31A9A2BC308B5, 0xD66B98>(p0, p1, p2, p3);
	}

	FORCEINLINE auto PLAYSTATS_INST_MISSION_END(Any p0)
	{
		return invoker::invoke<void, 0xC11595E99C048D43, 0xD6728C>(p0);
	}

	FORCEINLINE auto PLAYSTATS_HUB_EXIT(Any p0)
	{
		return invoker::invoke<void, 0x2F3C05A368B66B3, 0xD67224>(p0);
	}

	FORCEINLINE auto PLAYSTATS_VEH_DEL(int bossId1, int bossId2, int bossType, int vehicleID, int reason)
	{
		return invoker::invoke<void, 0x10A691F5756416D0, 0xD67804>(bossId1, bossId2, bossType, vehicleID, reason);
	}

	FORCEINLINE auto PLAYSTATS_INVENTORY(Any p0)
	{
		return invoker::invoke<void, 0x68F94159C38F25F8, 0xD67298>(p0);
	}

	FORCEINLINE auto _PLAYSTATS_ACID_MISSION_END(Any p0)
	{
		return invoker::invoke<void, 0x11FD0D892567AF52, 0xD66AA0>(p0);
	}

	FORCEINLINE auto _PLAYSTATS_ACID_RND(Any p0)
	{
		return invoker::invoke<void, 0xCE650C981E786BEB, 0xD66AAC>(p0);
	}

	FORCEINLINE auto _PLAYSTATS_IDLE(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x410BD6C72A6CE17A, 0xD67230>(p0, p1, p2);
	}

	FORCEINLINE auto _PLAYSTATS_PLAYER_STYLE(Any p0)
	{
		return invoker::invoke<void, 0x9E495BCF3E7FA74, 0xD6757C>(p0);
	}

	FORCEINLINE auto _PLAYSTATS_RANDOM_EVENT(Any p0)
	{
		return invoker::invoke<void, 0x7EA06F970F999394, 0xD6762C>(p0);
	}

	FORCEINLINE auto _PLAYSTATS_ALERT(Any* data)
	{
		return invoker::invoke<void, 0x5649CA22AF74E019, 0xD66AD8>(data);
	}

	FORCEINLINE auto _PLAYSTATS_ATTRITION_STAGE_END(Any p0)
	{
		return invoker::invoke<void, 0xBD642335A732F1A8, 0xD66B80>(p0);
	}

	FORCEINLINE auto _PLAYSTATS_SHOWROOM_NAV(Any p0, Any p1, Hash entity)
	{
		return invoker::invoke<void, 0x961D4157B9B428DB, 0xD6772C>(p0, p1, entity);
	}

	FORCEINLINE auto _PLAYSTATS_SHOWROOM_OVERVIEW(Any* data)
	{
		return invoker::invoke<void, 0x151D6C04C9E2742F, 0xD67740>(data);
	}

	FORCEINLINE auto _PLAYSTATS_PIMENU_NAV(Any* data)
	{
		return invoker::invoke<void, 0xE6D323A5E9EFFB76, 0xD67570>(data);
	}

	FORCEINLINE auto _PLAYSTATS_RECOVER_VEHICLE(Any* data)
	{
		return invoker::invoke<void, 0xBEB0D930B3CCE4D5, 0xD6767C>(data);
	}

}
namespace CAM
{
	FORCEINLINE auto RENDER_SCRIPT_CAMS(BOOL render, BOOL ease, int easeTime, BOOL p3, BOOL p4, Any p5)
	{
		return invoker::invoke<void, 0xE37AF9002E782BA0, 0xA748A8>(render, ease, easeTime, p3, p4, p5);
	}

	FORCEINLINE auto STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(BOOL render, float p1, int p2, Any p3)
	{
		return invoker::invoke<void, 0xC289B882CEF4CAC9, 0xA77110>(render, p1, p2, p3);
	}

	FORCEINLINE auto CREATE_CAM(const char* camName, BOOL p1)
	{
		return invoker::invoke<Cam, 0x69D23632E4288DBD, 0xA6EDFC>(camName, p1);
	}

	FORCEINLINE auto CREATE_CAM_WITH_PARAMS(const char* camName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, BOOL p8, int p9)
	{
		return invoker::invoke<Cam, 0x2CB6AB601EB7D2D9, 0xA6EE90>(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
	}

	FORCEINLINE auto CREATE_CAMERA(Hash camHash, BOOL p1)
	{
		return invoker::invoke<Cam, 0xBB209150C6081BBE, 0xA6EE24>(camHash, p1);
	}

	FORCEINLINE auto CREATE_CAMERA_WITH_PARAMS(Hash camHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, BOOL p8, Any p9)
	{
		return invoker::invoke<Cam, 0x96A32328480B485C, 0xA6EE4C>(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
	}

	FORCEINLINE auto DESTROY_CAM(Cam cam, BOOL bScriptHostCam)
	{
		return invoker::invoke<void, 0x85E6A1E36B5E2E4D, 0xA6F8BC>(cam, bScriptHostCam);
	}

	FORCEINLINE auto DESTROY_ALL_CAMS(BOOL bScriptHostCam)
	{
		return invoker::invoke<void, 0x3AA8CFEBC938A945, 0xA6F8AC>(bScriptHostCam);
	}

	FORCEINLINE auto DOES_CAM_EXIST(Cam cam)
	{
		return invoker::invoke<BOOL, 0x78411E34CF90EA8C, 0xA6FA98>(cam);
	}

	FORCEINLINE auto SET_CAM_ACTIVE(Cam cam, BOOL active)
	{
		return invoker::invoke<void, 0x4CBC5D1BC117616B, 0xA74F24>(cam, active);
	}

	FORCEINLINE auto IS_CAM_ACTIVE(Cam cam)
	{
		return invoker::invoke<BOOL, 0xBC886554B5888A64, 0xA72DB4>(cam);
	}

	FORCEINLINE auto IS_CAM_RENDERING(Cam cam)
	{
		return invoker::invoke<BOOL, 0x8DE2438443E6A145, 0xA72E28>(cam);
	}

	FORCEINLINE auto GET_RENDERING_CAM()
	{
		return invoker::invoke<Cam, 0xFCB6553111578B2F, 0xA71D80>();
	}

	FORCEINLINE auto GET_CAM_COORD(Cam cam)
	{
		return invoker::invoke<Vector3, 0xA452B06E281A9014, 0xA70680>(cam);
	}

	FORCEINLINE auto GET_CAM_ROT(Cam cam, int rotationOrder)
	{
		return invoker::invoke<Vector3, 0x9DDBEF363FADFA4C, 0xA707A0>(cam, rotationOrder);
	}

	FORCEINLINE auto GET_CAM_FOV(Cam cam)
	{
		return invoker::invoke<float, 0x4A1D1AB55229AAF0, 0xA70734>(cam);
	}

	FORCEINLINE auto GET_CAM_NEAR_CLIP(Cam cam)
	{
		return invoker::invoke<float, 0x97410F245819ED32, 0xA70758>(cam);
	}

	FORCEINLINE auto GET_CAM_FAR_CLIP(Cam cam)
	{
		return invoker::invoke<float, 0xEF763079652110C0, 0xA706EC>(cam);
	}

	FORCEINLINE auto GET_CAM_NEAR_DOF(Cam cam)
	{
		return invoker::invoke<float, 0x4329E0C9A71DAF53, 0xA7077C>(cam);
	}

	FORCEINLINE auto GET_CAM_FAR_DOF(Cam cam)
	{
		return invoker::invoke<float, 0x2221B1FEFEE35449, 0xA70710>(cam);
	}

	FORCEINLINE auto GET_CAM_DOF_STRENGTH(Cam cam)
	{
		return invoker::invoke<float, 0xEDDF0C80A9EEE28A, 0xA706C8>(cam);
	}

	FORCEINLINE auto SET_CAM_PARAMS(Cam cam, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fieldOfView, Any p8, int p9, int p10, int p11)
	{
		return invoker::invoke<void, 0xA3774254665BAA82, 0xA7511C>(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11);
	}

	FORCEINLINE auto SET_CAM_COORD(Cam cam, float posX, float posY, float posZ)
	{
		return invoker::invoke<void, 0x1761457F86AD0EE2, 0xA74F9C>(cam, posX, posY, posZ);
	}

	FORCEINLINE auto SET_CAM_ROT(Cam cam, float rotX, float rotY, float rotZ, int rotationOrder)
	{
		return invoker::invoke<void, 0x5E5CEC33463AD803, 0xA75164>(cam, rotX, rotY, rotZ, rotationOrder);
	}

	FORCEINLINE auto SET_CAM_FOV(Cam cam, float fieldOfView)
	{
		return invoker::invoke<void, 0x58BDA5D9262F5D30, 0xA750B8>(cam, fieldOfView);
	}

	FORCEINLINE auto SET_CAM_NEAR_CLIP(Cam cam, float nearClip)
	{
		return invoker::invoke<void, 0x3AAB5D3F3D4028CC, 0xA750FC>(cam, nearClip);
	}

	FORCEINLINE auto SET_CAM_FAR_CLIP(Cam cam, float farClip)
	{
		return invoker::invoke<void, 0x8397B3389E13A5E5, 0xA75098>(cam, farClip);
	}

	FORCEINLINE auto FORCE_CAM_FAR_CLIP(Cam cam, float p1)
	{
		return invoker::invoke<void, 0xFA4389643D1609AE, 0xA70418>(cam, p1);
	}

	FORCEINLINE auto SET_CAM_MOTION_BLUR_STRENGTH(Cam cam, float strength)
	{
		return invoker::invoke<void, 0x687E31348D8E19AD, 0xA750EC>(cam, strength);
	}

	FORCEINLINE auto SET_CAM_NEAR_DOF(Cam cam, float nearDOF)
	{
		return invoker::invoke<void, 0x1991568378B6C0D0, 0xA7510C>(cam, nearDOF);
	}

	FORCEINLINE auto SET_CAM_FAR_DOF(Cam cam, float farDOF)
	{
		return invoker::invoke<void, 0x12DA57732DE5D8BB, 0xA750A8>(cam, farDOF);
	}

	FORCEINLINE auto SET_CAM_DOF_STRENGTH(Cam cam, float dofStrength)
	{
		return invoker::invoke<void, 0x4396EEBF487EDFB1, 0xA75088>(cam, dofStrength);
	}

	FORCEINLINE auto SET_CAM_DOF_PLANES(Cam cam, float p1, float p2, float p3, float p4)
	{
		return invoker::invoke<void, 0x75C0D0B8F3E221F1, 0xA75028>(cam, p1, p2, p3, p4);
	}

	FORCEINLINE auto SET_CAM_USE_SHALLOW_DOF_MODE(Cam cam, BOOL toggle)
	{
		return invoker::invoke<void, 0x3089A583C66DAC0E, 0xA751F8>(cam, toggle);
	}

	FORCEINLINE auto SET_USE_HI_DOF()
	{
		return invoker::invoke<void, 0xB6387DEFC12580A6, 0xA76914>();
	}

	FORCEINLINE auto SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xB6D9A8668A9B769C, 0xA7692C>();
	}

	FORCEINLINE auto SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(Cam camera, float p1)
	{
		return invoker::invoke<void, 0x530423D35DCB5139, 0xA75008>(camera, p1);
	}

	FORCEINLINE auto SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(Any p0, float p1)
	{
		return invoker::invoke<void, 0xA1A2D94E99309CF1, 0xA75018>(p0, p1);
	}

	FORCEINLINE auto SET_CAM_DOF_FNUMBER_OF_LENS(Cam camera, float p1)
	{
		return invoker::invoke<void, 0xC316A4E0AF22543B, 0xA74FB8>(camera, p1);
	}

	FORCEINLINE auto SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(Cam camera, float multiplier)
	{
		return invoker::invoke<void, 0x880E454F39FC7F42, 0xA74FC8>(camera, multiplier);
	}

	FORCEINLINE auto SET_CAM_DOF_FOCUS_DISTANCE_BIAS(Cam camera, float p1)
	{
		return invoker::invoke<void, 0xB44FCE2D38FDEDFE, 0xA74FD8>(camera, p1);
	}

	FORCEINLINE auto SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(Cam camera, float p1)
	{
		return invoker::invoke<void, 0x365C28B73347797E, 0xA74FE8>(camera, p1);
	}

	FORCEINLINE auto SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(Cam camera, float p1)
	{
		return invoker::invoke<void, 0xF94FC0634C750884, 0xA74FF8>(camera, p1);
	}

	FORCEINLINE auto SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS(Cam camera, BOOL state)
	{
		return invoker::invoke<void, 0x7CF3AF51DCFE4108, 0xA75058>(camera, state);
	}

	FORCEINLINE auto ATTACH_CAM_TO_ENTITY(Cam cam, Entity entity, float xOffset, float yOffset, float zOffset, BOOL isRelative)
	{
		return invoker::invoke<void, 0x3F10D56CCA2C055, 0xA6E694>(cam, entity, xOffset, yOffset, zOffset, isRelative);
	}

	FORCEINLINE auto ATTACH_CAM_TO_PED_BONE(Cam cam, Ped ped, int boneIndex, float x, float y, float z, BOOL heading)
	{
		return invoker::invoke<void, 0x19DB71A72065EFB0, 0xA6E6B0>(cam, ped, boneIndex, x, y, z, heading);
	}

	FORCEINLINE auto HARD_ATTACH_CAM_TO_PED_BONE(Cam cam, Ped ped, int boneIndex, float p3, float p4, float p5, float p6, float p7, float p8, BOOL p9)
	{
		return invoker::invoke<void, 0xF81BE163E469E944, 0xA726E8>(cam, ped, boneIndex, p3, p4, p5, p6, p7, p8, p9);
	}

	FORCEINLINE auto HARD_ATTACH_CAM_TO_ENTITY(Cam cam, Entity entity, float xRot, float yRot, float zRot, float xOffset, float yOffset, float zOffset, BOOL isRelative)
	{
		return invoker::invoke<void, 0xD5706D462271DC4, 0xA726BC>(cam, entity, xRot, yRot, zRot, xOffset, yOffset, zOffset, isRelative);
	}

	FORCEINLINE auto ATTACH_CAM_TO_VEHICLE_BONE(Cam cam, Vehicle vehicle, int boneIndex, BOOL relativeRotation, float rotX, float rotY, float rotZ, float offsetX, float offsetY, float offsetZ, BOOL fixedDirection)
	{
		return invoker::invoke<void, 0x52013BF2765685F4, 0xA6E6DC>(cam, vehicle, boneIndex, relativeRotation, rotX, rotY, rotZ, offsetX, offsetY, offsetZ, fixedDirection);
	}

	FORCEINLINE auto DETACH_CAM(Cam cam)
	{
		return invoker::invoke<void, 0x9BC35A57CAC5458D, 0xA6F8E8>(cam);
	}

	FORCEINLINE auto SET_CAM_INHERIT_ROLL_VEHICLE(Cam cam, BOOL p1)
	{
		return invoker::invoke<void, 0xE2B6CB928D598CBD, 0xA750C8>(cam, p1);
	}

	FORCEINLINE auto POINT_CAM_AT_COORD(Cam cam, float x, float y, float z)
	{
		return invoker::invoke<void, 0x2ABEBC4952CA3C7F, 0xA743AC>(cam, x, y, z);
	}

	FORCEINLINE auto POINT_CAM_AT_ENTITY(Cam cam, Entity entity, float p2, float p3, float p4, BOOL p5)
	{
		return invoker::invoke<void, 0xD6B4D02A102485DC, 0xA743BC>(cam, entity, p2, p3, p4, p5);
	}

	FORCEINLINE auto POINT_CAM_AT_PED_BONE(Cam cam, Ped ped, int boneIndex, float x, float y, float z, BOOL p6)
	{
		return invoker::invoke<void, 0xA327B87671869834, 0xA743D8>(cam, ped, boneIndex, x, y, z, p6);
	}

	FORCEINLINE auto STOP_CAM_POINTING(Cam cam)
	{
		return invoker::invoke<void, 0xFC8624DF7EBA74FB, 0xA76FA0>(cam);
	}

	FORCEINLINE auto SET_CAM_AFFECTS_AIMING(Cam cam, BOOL toggle)
	{
		return invoker::invoke<void, 0xD49F2340555F9E5D, 0xA74F64>(cam, toggle);
	}

	FORCEINLINE auto SET_CAM_CONTROLS_MINI_MAP_HEADING(Cam cam, BOOL toggle)
	{
		return invoker::invoke<void, 0x29BBAB7031C36984, 0xA74F88>(cam, toggle);
	}

	FORCEINLINE auto SET_CAM_IS_INSIDE_VEHICLE(Cam cam, BOOL toggle)
	{
		return invoker::invoke<void, 0x2F0877034716FB33, 0xA750D8>(cam, toggle);
	}

	FORCEINLINE auto ALLOW_MOTION_BLUR_DECAY(Any p0, BOOL p1)
	{
		return invoker::invoke<void, 0x958B9F165A08995A, 0xA6E34C>(p0, p1);
	}

	FORCEINLINE auto SET_CAM_DEBUG_NAME(Cam camera, const char* name)
	{
		return invoker::invoke<void, 0xDAC1F4368A8FB625, 0x81A1C0>(camera, name);
	}

	FORCEINLINE auto GET_DEBUG_CAM()
	{
		return invoker::invoke<Cam, 0x2BBDA4E1DFD52204, 0xA70AF4>();
	}

	FORCEINLINE auto ADD_CAM_SPLINE_NODE(Cam camera, float x, float y, float z, float xRot, float yRot, float zRot, int length, int smoothingStyle, int rotationOrder)
	{
		return invoker::invoke<void, 0xC606B0B9BA3D6036, 0xA6E050>(camera, x, y, z, xRot, yRot, zRot, length, smoothingStyle, rotationOrder);
	}

	FORCEINLINE auto ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(Cam cam, Cam cam2, int length, int p3)
	{
		return invoker::invoke<void, 0x327198ED493608E0, 0xA6E09C>(cam, cam2, length, p3);
	}

	FORCEINLINE auto ADD_CAM_SPLINE_NODE_USING_CAMERA(Cam cam, Cam cam2, int length, int p3)
	{
		return invoker::invoke<void, 0xF5317F0839442D94, 0xA6E084>(cam, cam2, length, p3);
	}

	FORCEINLINE auto ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(Cam cam, int length, int p2)
	{
		return invoker::invoke<void, 0x471C8924B79628DE, 0xA6E0B4>(cam, length, p2);
	}

	FORCEINLINE auto SET_CAM_SPLINE_PHASE(Cam cam, float p1)
	{
		return invoker::invoke<void, 0x59EFC8EF65356E09, 0xA751D8>(cam, p1);
	}

	FORCEINLINE auto GET_CAM_SPLINE_PHASE(Cam cam)
	{
		return invoker::invoke<float, 0x37831F682BE7F41E, 0xA70830>(cam);
	}

	FORCEINLINE auto GET_CAM_SPLINE_NODE_PHASE(Cam cam)
	{
		return invoker::invoke<float, 0x5B4403BBB70E3566, 0xA7080C>(cam);
	}

	FORCEINLINE auto SET_CAM_SPLINE_DURATION(Cam cam, int timeDuration)
	{
		return invoker::invoke<void, 0x82C9F945AF12EC9F, 0xA75188>(cam, timeDuration);
	}

	FORCEINLINE auto SET_CAM_SPLINE_SMOOTHING_STYLE(Cam cam, int smoothingStyle)
	{
		return invoker::invoke<void, 0x859FFC7F5DEC29DE, 0xA751E8>(cam, smoothingStyle);
	}

	FORCEINLINE auto GET_CAM_SPLINE_NODE_INDEX(Cam cam)
	{
		return invoker::invoke<int, 0x9A48A1707E9DECA8, 0xA707EC>(cam);
	}

	FORCEINLINE auto SET_CAM_SPLINE_NODE_EASE(Cam cam, int easingFunction, int p2, float p3)
	{
		return invoker::invoke<void, 0xA054197DA0CA8B1B, 0xA75198>(cam, easingFunction, p2, p3);
	}

	FORCEINLINE auto SET_CAM_SPLINE_NODE_VELOCITY_SCALE(Cam cam, int p1, float scale)
	{
		return invoker::invoke<void, 0x4BEFD5824C6D529A, 0xA751C4>(cam, p1, scale);
	}

	FORCEINLINE auto OVERRIDE_CAM_SPLINE_VELOCITY(Cam cam, int p1, float p2, float p3)
	{
		return invoker::invoke<void, 0x59CBB7FD3D159D45, 0xA73DE4>(cam, p1, p2, p3);
	}

	FORCEINLINE auto OVERRIDE_CAM_SPLINE_MOTION_BLUR(Cam cam, int p1, float p2, float p3)
	{
		return invoker::invoke<void, 0x11BE263E767EF5C3, 0xA73DCC>(cam, p1, p2, p3);
	}

	FORCEINLINE auto SET_CAM_SPLINE_NODE_EXTRA_FLAGS(Cam cam, int p1, int flags)
	{
		return invoker::invoke<void, 0x9DE997C45267314A, 0xA751B0>(cam, p1, flags);
	}

	FORCEINLINE auto IS_CAM_SPLINE_PAUSED(Cam cam)
	{
		return invoker::invoke<BOOL, 0x948A3D156F2E0E3A, 0xA72E70>(cam);
	}

	FORCEINLINE auto _INTERPOLATE_CAM_WITH_PARAMS(Cam camera, float camPosX, float camPosY, float camPosZ, float camRotX, float camRotY, float camRotZ, float fov, int duration, int posCurveType, int rotCurveType, int rotOrder, int fovCurveType)
	{
		return invoker::invoke<void, 0xDDA77EE33C005AAF, 0xA72B38>(camera, camPosX, camPosY, camPosZ, camRotX, camRotY, camRotZ, fov, duration, posCurveType, rotCurveType, rotOrder, fovCurveType);
	}

	FORCEINLINE auto _ACTIVATE_CAM_WITH_INTERP_AND_FOV_CURVE(Cam camTo, Cam camFrom, int duration, int easeLocation, int easeRotation, int easeFov)
	{
		return invoker::invoke<void, 0x34CFC4C2A38E83E3, 0xA6E01C>(camTo, camFrom, duration, easeLocation, easeRotation, easeFov);
	}

	FORCEINLINE auto SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, int easeLocation, int easeRotation)
	{
		return invoker::invoke<void, 0xB56F35D8A770F80F, 0xA74F38>(camTo, camFrom, duration, easeLocation, easeRotation);
	}

	FORCEINLINE auto IS_CAM_INTERPOLATING(Cam cam)
	{
		return invoker::invoke<BOOL, 0x323C4A67159DAD02, 0xA72DD8>(cam);
	}

	FORCEINLINE auto SHAKE_CAM(Cam cam, const char* type, float amplitude)
	{
		return invoker::invoke<void, 0x2A09425009DAD0F5, 0xA76B60>(cam, type, amplitude);
	}

	FORCEINLINE auto ANIMATED_SHAKE_CAM(Cam cam, const char* p1, const char* p2, const char* p3, float amplitude)
	{
		return invoker::invoke<void, 0x9EFC1351343A6835, 0xA6E360>(cam, p1, p2, p3, amplitude);
	}

	FORCEINLINE auto IS_CAM_SHAKING(Cam cam)
	{
		return invoker::invoke<BOOL, 0xDD87838D03B64B0A, 0xA72E4C>(cam);
	}

	FORCEINLINE auto SET_CAM_SHAKE_AMPLITUDE(Cam cam, float amplitude)
	{
		return invoker::invoke<void, 0x17F06E9D89A05855, 0xA75178>(cam, amplitude);
	}

	FORCEINLINE auto STOP_CAM_SHAKING(Cam cam, BOOL p1)
	{
		return invoker::invoke<void, 0x584EE85BE0BFA70E, 0xA76FAC>(cam, p1);
	}

	FORCEINLINE auto SHAKE_SCRIPT_GLOBAL(const char* p0, float p1)
	{
		return invoker::invoke<void, 0xC62E5824404F8836, 0xA76B9C>(p0, p1);
	}

	FORCEINLINE auto ANIMATED_SHAKE_SCRIPT_GLOBAL(const char* p0, const char* p1, const char* p2, float p3)
	{
		return invoker::invoke<void, 0xAEA3DA36109D1029, 0xA6E390>(p0, p1, p2, p3);
	}

	FORCEINLINE auto IS_SCRIPT_GLOBAL_SHAKING()
	{
		return invoker::invoke<BOOL, 0x12B42434831D668E, 0xA73B4C>();
	}

	FORCEINLINE auto STOP_SCRIPT_GLOBAL_SHAKING(BOOL p0)
	{
		return invoker::invoke<void, 0xB9AB3B8920F1AA69, 0xA77158>(p0);
	}

	FORCEINLINE auto TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(Vehicle vehicle, int p1, float p2)
	{
		return invoker::invoke<void, 0xB3F5D7C1E9A4A589, 0xA77380>(vehicle, p1, p2);
	}

	FORCEINLINE auto PLAY_CAM_ANIM(Cam cam, const char* animName, const char* animDictionary, float x, float y, float z, float xRot, float yRot, float zRot, BOOL p9, int p10)
	{
		return invoker::invoke<BOOL, 0x73D04EA6A13117B7, 0xA74000>(cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10);
	}

	FORCEINLINE auto IS_CAM_PLAYING_ANIM(Cam cam, const char* animName, const char* animDictionary)
	{
		return invoker::invoke<BOOL, 0x444069759E788ECD, 0xA72DFC>(cam, animName, animDictionary);
	}

	FORCEINLINE auto SET_CAM_ANIM_CURRENT_PHASE(Cam cam, float phase)
	{
		return invoker::invoke<void, 0xFEA88ACF99028CEA, 0xA74F78>(cam, phase);
	}

	FORCEINLINE auto GET_CAM_ANIM_CURRENT_PHASE(Cam cam)
	{
		return invoker::invoke<float, 0x2D34ECA1A2A76C38, 0xA7065C>(cam);
	}

	FORCEINLINE auto PLAY_SYNCHRONIZED_CAM_ANIM(Any p0, Any p1, const char* animName, const char* animDictionary)
	{
		return invoker::invoke<BOOL, 0xF9B66DAE101B699C, 0xA742F0>(p0, p1, animName, animDictionary);
	}

	FORCEINLINE auto SET_FLY_CAM_HORIZONTAL_RESPONSE(Cam cam, float p1, float p2, float p3)
	{
		return invoker::invoke<void, 0xB07CF0F23305413E, 0xA75C58>(cam, p1, p2, p3);
	}

	FORCEINLINE auto SET_FLY_CAM_VERTICAL_RESPONSE(Cam cam, float p1, float p2, float p3)
	{
		return invoker::invoke<void, 0xD141E0743BFCF358, 0xA75C90>(cam, p1, p2, p3);
	}

	FORCEINLINE auto SET_FLY_CAM_MAX_HEIGHT(Cam cam, float height)
	{
		return invoker::invoke<void, 0x4D66F5C6B248BB2A, 0xA75C74>(cam, height);
	}

	FORCEINLINE auto SET_FLY_CAM_COORD_AND_CONSTRAIN(Cam cam, float x, float y, float z)
	{
		return invoker::invoke<void, 0xD09DCA9E9F147F36, 0xA75C48>(cam, x, y, z);
	}

	FORCEINLINE auto SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(Cam cam)
	{
		return invoker::invoke<void, 0xDB27323F0C5EE8D9, 0xA75C84>(cam);
	}

	FORCEINLINE auto WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(Cam cam)
	{
		return invoker::invoke<BOOL, 0xD5CED097A266DCE, 0xA77794>(cam);
	}

	FORCEINLINE auto IS_SCREEN_FADED_OUT()
	{
		return invoker::invoke<BOOL, 0x15CCE8886267624F, 0xA73A94>();
	}

	FORCEINLINE auto IS_SCREEN_FADED_IN()
	{
		return invoker::invoke<BOOL, 0x9390801B06EE998F, 0xA73A78>();
	}

	FORCEINLINE auto IS_SCREEN_FADING_OUT()
	{
		return invoker::invoke<BOOL, 0x78ABC1D11B34F324, 0xA73ACC>();
	}

	FORCEINLINE auto IS_SCREEN_FADING_IN()
	{
		return invoker::invoke<BOOL, 0xDDED2C93E8FD5B69, 0xA73AB0>();
	}

	FORCEINLINE auto DO_SCREEN_FADE_IN(int duration)
	{
		return invoker::invoke<void, 0x10B228D2FDB7AF16, 0xA6FD48>(duration);
	}

	FORCEINLINE auto DO_SCREEN_FADE_OUT(int duration)
	{
		return invoker::invoke<void, 0x8F72AF14CE5AACE4, 0xA6FD54>(duration);
	}

	FORCEINLINE auto SET_WIDESCREEN_BORDERS(BOOL p0, int p1)
	{
		return invoker::invoke<void, 0xD7C0EA10993D3214, 0xA76B44>(p0, p1);
	}

	FORCEINLINE auto ARE_WIDESCREEN_BORDERS_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xE7BF6BF496713374, 0xA6E684>();
	}

	FORCEINLINE auto GET_GAMEPLAY_CAM_COORD()
	{
		return invoker::invoke<Vector3, 0xCF141FCD0940B0A3, 0xA716DC>();
	}

	FORCEINLINE auto GET_GAMEPLAY_CAM_ROT(int rotationOrder)
	{
		return invoker::invoke<Vector3, 0xD84A545408A3099A, 0xA71798>(rotationOrder);
	}

	FORCEINLINE auto GET_GAMEPLAY_CAM_FOV()
	{
		return invoker::invoke<float, 0x9FA6E15C7A998E4F, 0xA71720>();
	}

	FORCEINLINE auto SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(float p0)
	{
		return invoker::invoke<void, 0x9B669C0440D2AB57, 0xA75DEC>(p0);
	}

	FORCEINLINE auto SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(float p0)
	{
		return invoker::invoke<void, 0xC30B691CAD767629, 0xA75DDC>(p0);
	}

	FORCEINLINE auto GET_GAMEPLAY_CAM_RELATIVE_HEADING()
	{
		return invoker::invoke<float, 0x3FAFDC4C824A6C54, 0xA71740>();
	}

	FORCEINLINE auto SET_GAMEPLAY_CAM_RELATIVE_HEADING(float heading)
	{
		return invoker::invoke<void, 0x64BB72494B9DF6DC, 0xA75DFC>(heading);
	}

	FORCEINLINE auto GET_GAMEPLAY_CAM_RELATIVE_PITCH()
	{
		return invoker::invoke<float, 0x98F0D28A64EC7D5D, 0xA7176C>();
	}

	FORCEINLINE auto SET_GAMEPLAY_CAM_RELATIVE_PITCH(float angle, float scalingFactor)
	{
		return invoker::invoke<void, 0xD815D4BD1AE9E85A, 0xA75E0C>(angle, scalingFactor);
	}

	FORCEINLINE auto RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER()
	{
		return invoker::invoke<void, 0xD7C2A6E5CF33E328, 0xA74A74>();
	}

	FORCEINLINE auto FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(float roll, float pitch, float yaw)
	{
		return invoker::invoke<void, 0xF42836467278195A, 0xA70400>(roll, pitch, yaw);
	}

	FORCEINLINE auto FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(float p0, float p1)
	{
		return invoker::invoke<void, 0xED7A3604521A9F67, 0xA703EC>(p0, p1);
	}

	FORCEINLINE auto SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(float yaw)
	{
		return invoker::invoke<void, 0xE0A23567157E9B5E, 0xA75BD8>(yaw);
	}

	FORCEINLINE auto SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(float pitch)
	{
		return invoker::invoke<void, 0x7E08E86FBA713FE8, 0xA75BE8>(pitch);
	}

	FORCEINLINE auto SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(BOOL p0)
	{
		return invoker::invoke<void, 0x2AFB778D9C7EA690, 0xA76650>(p0);
	}

	FORCEINLINE auto SHAKE_GAMEPLAY_CAM(const char* shakeName, float intensity)
	{
		return invoker::invoke<void, 0xD5681045964A2975, 0xA76B88>(shakeName, intensity);
	}

	FORCEINLINE auto IS_GAMEPLAY_CAM_SHAKING()
	{
		return invoker::invoke<BOOL, 0x7F2356076C3D052D, 0xA73738>();
	}

	FORCEINLINE auto SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(float amplitude)
	{
		return invoker::invoke<void, 0xB3CAD109683148E3, 0xA75E20>(amplitude);
	}

	FORCEINLINE auto STOP_GAMEPLAY_CAM_SHAKING(BOOL p0)
	{
		return invoker::invoke<void, 0x9AFEC71EEA2F7754, 0xA77094>(p0);
	}

	FORCEINLINE auto SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(Ped ped)
	{
		return invoker::invoke<void, 0x2C81A7FECD78FF20, 0xA75DC4>(ped);
	}

	FORCEINLINE auto IS_GAMEPLAY_CAM_RENDERING()
	{
		return invoker::invoke<BOOL, 0x174DBD3C5DB3557B, 0xA73714>();
	}

	FORCEINLINE auto IS_INTERPOLATING_FROM_SCRIPT_CAMS()
	{
		return invoker::invoke<BOOL, 0xE976C85F4B1CF1A2, 0xA737C0>();
	}

	FORCEINLINE auto IS_INTERPOLATING_TO_SCRIPT_CAMS()
	{
		return invoker::invoke<BOOL, 0xB2A95909624C195B, 0xA737DC>();
	}

	FORCEINLINE auto SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(BOOL p0)
	{
		return invoker::invoke<void, 0xA927617A11A54503, 0xA75D94>(p0);
	}

	FORCEINLINE auto DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xCCCACE17B42F77EC, 0xA6F9AC>();
	}

	FORCEINLINE auto IS_GAMEPLAY_CAM_LOOKING_BEHIND()
	{
		return invoker::invoke<BOOL, 0xDD851254D8C7D338, 0xA736F0>();
	}

	FORCEINLINE auto SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(Entity entity)
	{
		return invoker::invoke<void, 0x159356D054E19158, 0xA75DD0>(entity);
	}

	FORCEINLINE auto DISABLE_CAM_COLLISION_FOR_OBJECT(Entity entity)
	{
		return invoker::invoke<void, 0x148A0A307698B29B, 0xA6F918>(entity);
	}

	FORCEINLINE auto BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xB785349D98C90E5A, 0xA6E9A8>();
	}

	FORCEINLINE auto SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(Entity entity)
	{
		return invoker::invoke<void, 0xFE751F9213345C58, 0xA75DB8>(entity);
	}

	FORCEINLINE auto DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xFFFF1D7E51F1970B, 0xA6F98C>();
	}

	FORCEINLINE auto SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE()
	{
		return invoker::invoke<void, 0x29F41DB9F1B4728A, 0xA75CAC>();
	}

	FORCEINLINE auto IS_SPHERE_VISIBLE(float x, float y, float z, float radius)
	{
		return invoker::invoke<BOOL, 0x7B780C491DEC834E, 0xA73B9C>(x, y, z, radius);
	}

	FORCEINLINE auto IS_FOLLOW_PED_CAM_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xE1259D809F0A778, 0xA73698>();
	}

	FORCEINLINE auto SET_FOLLOW_PED_CAM_THIS_UPDATE(const char* camName, int p1)
	{
		return invoker::invoke<BOOL, 0x3A7305BBF26DBF65, 0xA75CCC>(camName, p1);
	}

	FORCEINLINE auto USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(BOOL p0, BOOL p1)
	{
		return invoker::invoke<void, 0x68DE54738FFB5584, 0xA776EC>(p0, p1);
	}

	FORCEINLINE auto SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xEF5DC41D990F8FD2, 0xA75CC4>();
	}

	FORCEINLINE auto SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(float minimum, float maximum)
	{
		return invoker::invoke<void, 0x19D0C4621093F82B, 0xA76808>(minimum, maximum);
	}

	FORCEINLINE auto SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(float minimum, float maximum)
	{
		return invoker::invoke<void, 0xE4C00EFAE138F020, 0xA7681C>(minimum, maximum);
	}

	FORCEINLINE auto SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(float p0, float distance)
	{
		return invoker::invoke<void, 0xE3270F1A682CF48C, 0xA767F4>(p0, distance);
	}

	FORCEINLINE auto _GET_THIRD_PERSON_CAM_MIN_ORBIT_DISTANCE_SPRING()
	{
		return invoker::invoke<float, 0xBC456FB703431785, 0xA72290>();
	}

	FORCEINLINE auto _GET_THIRD_PERSON_CAM_MAX_ORBIT_DISTANCE_SPRING()
	{
		return invoker::invoke<float, 0xD4592A16D36673ED, 0xA72274>();
	}

	FORCEINLINE auto SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(Vehicle p0, int p1)
	{
		return invoker::invoke<void, 0x349F973598822727, 0xA76068>(p0, p1);
	}

	FORCEINLINE auto DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE()
	{
		return invoker::invoke<void, 0x3968AF3046718EAC, 0xA6FA00>();
	}

	FORCEINLINE auto DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE()
	{
		return invoker::invoke<void, 0x5FD79E92E62966FB, 0xA6F9A4>();
	}

	FORCEINLINE auto BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xE71B1E03F658C30C, 0xA6E990>();
	}

	FORCEINLINE auto GET_FOLLOW_PED_CAM_ZOOM_LEVEL()
	{
		return invoker::invoke<int, 0xE63C16EA2171C883, 0xA71630>();
	}

	FORCEINLINE auto GET_FOLLOW_PED_CAM_VIEW_MODE()
	{
		return invoker::invoke<int, 0x3B5989D5DB08A155, 0xA71630>();
	}

	FORCEINLINE auto SET_FOLLOW_PED_CAM_VIEW_MODE(int viewMode)
	{
		return invoker::invoke<void, 0xF20AB5C13902BB8A, 0xA75CF4>(viewMode);
	}

	FORCEINLINE auto IS_FOLLOW_VEHICLE_CAM_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x77CDF75A783A0B04, 0xA736C4>();
	}

	FORCEINLINE auto SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(BOOL p0)
	{
		return invoker::invoke<void, 0x82C5BFD25578F440, 0xA75D1C>(p0);
	}

	FORCEINLINE auto SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(BOOL p0, BOOL p1)
	{
		return invoker::invoke<void, 0x2C57A63E92CDBDF1, 0xA75D04>(p0, p1);
	}

	FORCEINLINE auto SET_TABLE_GAMES_CAMERA_THIS_UPDATE(Hash hash)
	{
		return invoker::invoke<BOOL, 0xC1AAF981A4F50898, 0xA767B0>(hash);
	}

	FORCEINLINE auto GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL()
	{
		return invoker::invoke<int, 0xD511F6B5FB8D3854, 0xA7164C>();
	}

	FORCEINLINE auto SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(int zoomLevel)
	{
		return invoker::invoke<void, 0x872D985A4B3A9EEF, 0xA75D64>(zoomLevel);
	}

	FORCEINLINE auto GET_FOLLOW_VEHICLE_CAM_VIEW_MODE()
	{
		return invoker::invoke<int, 0x655E58062EC2D269, 0xA7164C>();
	}

	FORCEINLINE auto SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(int viewMode)
	{
		return invoker::invoke<void, 0x43CE6FFCF2F6963, 0xA75D64>(viewMode);
	}

	FORCEINLINE auto GET_CAM_VIEW_MODE_FOR_CONTEXT(int context)
	{
		return invoker::invoke<int, 0xBCF87EE3DC296C2A, 0xA70854>(context);
	}

	FORCEINLINE auto SET_CAM_VIEW_MODE_FOR_CONTEXT(int context, int viewMode)
	{
		return invoker::invoke<void, 0x7938654FF332D78, 0xA7520C>(context, viewMode);
	}

	FORCEINLINE auto GET_CAM_ACTIVE_VIEW_MODE_CONTEXT()
	{
		return invoker::invoke<int, 0xBF03D0685ADC793B, 0xA70638>();
	}

	FORCEINLINE auto USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()
	{
		return invoker::invoke<void, 0x108CB90C10285373, 0xA77738>();
	}

	FORCEINLINE auto USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(const char* camName)
	{
		return invoker::invoke<void, 0x8AD0D4D95EF3CE16, 0xA77690>(camName);
	}

	FORCEINLINE auto FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xF66C0552C82638D5, 0xA704E0>();
	}

	FORCEINLINE auto SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(int seatIndex)
	{
		return invoker::invoke<void, 0xA9B49F91B35D536, 0xA75D44>(seatIndex);
	}

	FORCEINLINE auto IS_AIM_CAM_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x196704C916969409, 0xA72C04>();
	}

	FORCEINLINE auto IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE()
	{
		return invoker::invoke<BOOL, 0xD7582282E517A590, 0xA72C20>();
	}

	FORCEINLINE auto IS_FIRST_PERSON_AIM_CAM_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x5EA7A06A1491D450, 0xA7366C>();
	}

	FORCEINLINE auto DISABLE_AIM_CAM_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xDEE33C748704EC49, 0xA6F910>();
	}

	FORCEINLINE auto GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR()
	{
		return invoker::invoke<float, 0x9B92BDBE805E7967, 0xA715B8>();
	}

	FORCEINLINE auto SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(float zoomFactor)
	{
		return invoker::invoke<void, 0xF37AC65898011B1C, 0xA75B64>(zoomFactor);
	}

	FORCEINLINE auto SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(float p0, float p1)
	{
		return invoker::invoke<void, 0x40C52C6E7C5DE51B, 0xA75B78>(p0, p1);
	}

	FORCEINLINE auto SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(float p0, float p1)
	{
		return invoker::invoke<void, 0xBB76112874174E25, 0xA75B3C>(p0, p1);
	}

	FORCEINLINE auto SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(float p0, float p1)
	{
		return invoker::invoke<void, 0x5842BDBDE92FEEB1, 0xA75B50>(p0, p1);
	}

	FORCEINLINE auto SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(float p0)
	{
		return invoker::invoke<void, 0x668D3078E78F67B0, 0xA75B2C>(p0);
	}

	FORCEINLINE auto SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(float p0)
	{
		return invoker::invoke<void, 0x9696D418BC147507, 0xA767E4>(p0);
	}

	FORCEINLINE auto SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(BOOL p0)
	{
		return invoker::invoke<void, 0x5EED3D1AFFDEF57E, 0xA74D40>(p0);
	}

	FORCEINLINE auto FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xF009B83B5567CD93, 0xA704B8>();
	}

	FORCEINLINE auto GET_FINAL_RENDERED_CAM_COORD()
	{
		return invoker::invoke<Vector3, 0x2AF3EA0F67D2329, 0xA71414>();
	}

	FORCEINLINE auto GET_FINAL_RENDERED_CAM_ROT(int rotationOrder)
	{
		return invoker::invoke<Vector3, 0x958849BB56EC0F07, 0xA71500>(rotationOrder);
	}

	FORCEINLINE auto GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(Player player, int rotationOrder)
	{
		return invoker::invoke<Vector3, 0xBF807E7C66B0BF4B, 0xA7156C>(player, rotationOrder);
	}

	FORCEINLINE auto GET_FINAL_RENDERED_CAM_FOV()
	{
		return invoker::invoke<float, 0xB99978989A0F4E57, 0xA71490>();
	}

	FORCEINLINE auto GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(Player player)
	{
		return invoker::invoke<float, 0x6A709291E23386B1, 0xA71548>(player);
	}

	FORCEINLINE auto GET_FINAL_RENDERED_CAM_NEAR_CLIP()
	{
		return invoker::invoke<float, 0x8AB042CB33EAECD2, 0xA714C8>();
	}

	FORCEINLINE auto GET_FINAL_RENDERED_CAM_FAR_CLIP()
	{
		return invoker::invoke<float, 0xD787990C7B67C7F0, 0xA71458>();
	}

	FORCEINLINE auto GET_FINAL_RENDERED_CAM_NEAR_DOF()
	{
		return invoker::invoke<float, 0x806E1CB52BAD45A2, 0xA714E4>();
	}

	FORCEINLINE auto GET_FINAL_RENDERED_CAM_FAR_DOF()
	{
		return invoker::invoke<float, 0xBAAC16D46CDF2FFE, 0xA71474>();
	}

	FORCEINLINE auto GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH()
	{
		return invoker::invoke<float, 0xB75F36052800046D, 0xA714AC>();
	}

	FORCEINLINE auto SET_GAMEPLAY_COORD_HINT(float x, float y, float z, int duration, int blendOutDuration, int blendInDuration, int p6)
	{
		return invoker::invoke<void, 0x861EAB644E1BBA7A, 0xA75E30>(x, y, z, duration, blendOutDuration, blendInDuration, p6);
	}

	FORCEINLINE auto SET_GAMEPLAY_PED_HINT(Ped ped, float x1, float y1, float z1, BOOL p4, int duration, int blendOutDuration, int blendInDuration)
	{
		return invoker::invoke<void, 0x388E6B6F47D9ECC1, 0xA75F40>(ped, x1, y1, z1, p4, duration, blendOutDuration, blendInDuration);
	}

	FORCEINLINE auto SET_GAMEPLAY_VEHICLE_HINT(Vehicle vehicle, float offsetX, float offsetY, float offsetZ, BOOL p4, int time, int easeInTime, int easeOutTime)
	{
		return invoker::invoke<void, 0xB2BB7DF97FC211F9, 0xA75F78>(vehicle, offsetX, offsetY, offsetZ, p4, time, easeInTime, easeOutTime);
	}

	FORCEINLINE auto SET_GAMEPLAY_OBJECT_HINT(Object object, float xOffset, float yOffset, float zOffset, BOOL p4, int time, int easeInTime, int easeOutTime)
	{
		return invoker::invoke<void, 0x95AFFEA5EB27D2B9, 0xA75F08>(object, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime);
	}

	FORCEINLINE auto SET_GAMEPLAY_ENTITY_HINT(Entity entity, float xOffset, float yOffset, float zOffset, BOOL p4, int time, int easeInTime, int easeOutTime, int p8)
	{
		return invoker::invoke<void, 0x190BA0A3BB48F7FD, 0xA75E54>(entity, xOffset, yOffset, zOffset, p4, time, easeInTime, easeOutTime, p8);
	}

	FORCEINLINE auto IS_GAMEPLAY_HINT_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xE37AC296E66C33AF, 0xA7375C>();
	}

	FORCEINLINE auto STOP_GAMEPLAY_HINT(BOOL p0)
	{
		return invoker::invoke<void, 0x3C44EF9027A21847, 0xA770B8>(p0);
	}

	FORCEINLINE auto STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(BOOL p0)
	{
		return invoker::invoke<void, 0xB0325D55FDB2DD7C, 0x81A1C0>(p0);
	}

	FORCEINLINE auto STOP_CODE_GAMEPLAY_HINT(BOOL p0)
	{
		return invoker::invoke<void, 0x2515D479F116B7AA, 0xA76FF0>(p0);
	}

	FORCEINLINE auto IS_CODE_GAMEPLAY_HINT_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xD4CCFE5409D13C37, 0xA72F6C>();
	}

	FORCEINLINE auto SET_GAMEPLAY_HINT_FOV(float FOV)
	{
		return invoker::invoke<void, 0x4F5BF7798505A667, 0xA75EF8>(FOV);
	}

	FORCEINLINE auto SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(float value)
	{
		return invoker::invoke<void, 0x39723B4B969CC059, 0xA75EE8>(value);
	}

	FORCEINLINE auto SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(float value)
	{
		return invoker::invoke<void, 0x6CD2A2994586D388, 0xA75E94>(value);
	}

	FORCEINLINE auto SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(float xOffset)
	{
		return invoker::invoke<void, 0x4302C09C88CF5356, 0xA75EC8>(xOffset);
	}

	FORCEINLINE auto SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(float yOffset)
	{
		return invoker::invoke<void, 0x640D5D2C8DE912A2, 0xA75ED8>(yOffset);
	}

	FORCEINLINE auto SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(BOOL toggle)
	{
		return invoker::invoke<void, 0xD5864F7F5BC214FF, 0xA75EA4>(toggle);
	}

	FORCEINLINE auto SET_CINEMATIC_BUTTON_ACTIVE(BOOL p0)
	{
		return invoker::invoke<void, 0xA0A06C514052E80, 0xA75338>(p0);
	}

	FORCEINLINE auto IS_CINEMATIC_CAM_RENDERING()
	{
		return invoker::invoke<BOOL, 0x968E8340FCAD4826, 0xA72EB0>();
	}

	FORCEINLINE auto SHAKE_CINEMATIC_CAM(const char* shakeType, float amount)
	{
		return invoker::invoke<void, 0xE31C735DEE2BF705, 0xA76B74>(shakeType, amount);
	}

	FORCEINLINE auto IS_CINEMATIC_CAM_SHAKING()
	{
		return invoker::invoke<BOOL, 0xE9A1CE27A31950D, 0xA72ED4>();
	}

	FORCEINLINE auto SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(float p0)
	{
		return invoker::invoke<void, 0xAD0E20104A60B568, 0xA75348>(p0);
	}

	FORCEINLINE auto STOP_CINEMATIC_CAM_SHAKING(BOOL p0)
	{
		return invoker::invoke<void, 0xDB37962FDFC63FD7, 0xA76FC0>(p0);
	}

	FORCEINLINE auto DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE()
	{
		return invoker::invoke<void, 0x48392085C5B52584, 0xA6F924>();
	}

	FORCEINLINE auto DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE()
	{
		return invoker::invoke<void, 0x59ABC1F373CE1F5B, 0xA6F954>();
	}

	FORCEINLINE auto INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE()
	{
		return invoker::invoke<void, 0x9136D50973A71229, 0xA72BB0>();
	}

	FORCEINLINE auto INVALIDATE_IDLE_CAM()
	{
		return invoker::invoke<void, 0x513E63C787EE96A7, 0xA72BC8>();
	}

	FORCEINLINE auto IS_CINEMATIC_IDLE_CAM_RENDERING()
	{
		return invoker::invoke<BOOL, 0xD96CB44D490C047, 0xA72F20>();
	}

	FORCEINLINE auto IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING()
	{
		return invoker::invoke<BOOL, 0x9CA0AFAD60564183, 0xA72EF8>();
	}

	FORCEINLINE auto CREATE_CINEMATIC_SHOT(Hash p0, int time, BOOL p2, Entity entity)
	{
		return invoker::invoke<void, 0x18FB9B483F8E71AB, 0xA6EEE4>(p0, time, p2, entity);
	}

	FORCEINLINE auto IS_CINEMATIC_SHOT_ACTIVE(Hash p0)
	{
		return invoker::invoke<BOOL, 0xF52DD7BA03015AB4, 0xA72F48>(p0);
	}

	FORCEINLINE auto STOP_CINEMATIC_SHOT(Hash p0)
	{
		return invoker::invoke<void, 0x20A207437491322B, 0xA76FE4>(p0);
	}

	FORCEINLINE auto FORCE_CINEMATIC_RENDERING_THIS_UPDATE(BOOL toggle)
	{
		return invoker::invoke<void, 0x48032DB198A2A820, 0xA70428>(toggle);
	}

	FORCEINLINE auto SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xAA4406787205E928, 0xA75368>();
	}

	FORCEINLINE auto SET_CINEMATIC_MODE_ACTIVE(BOOL toggle)
	{
		return invoker::invoke<void, 0xEC81A0FB4911A2C2, 0xA75358>(toggle);
	}

	FORCEINLINE auto IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING()
	{
		return invoker::invoke<BOOL, 0x5F0F4F152FB7156C, 0xA737F8>();
	}

	FORCEINLINE auto DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE()
	{
		return invoker::invoke<BOOL, 0x1C74A3A76F738D39, 0xA6F93C>();
	}

	FORCEINLINE auto IS_BONNET_CINEMATIC_CAM_RENDERING()
	{
		return invoker::invoke<BOOL, 0xE30A5640D9F46CF2, 0xA72D8C>();
	}

	FORCEINLINE auto IS_CINEMATIC_CAM_INPUT_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x6633B158164DCD88, 0xA72E94>();
	}

	FORCEINLINE auto IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE()
	{
		return invoker::invoke<void, 0x54B59CE258DA9A4D, 0xA72ADC>();
	}

	FORCEINLINE auto BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xD20491305F26874C, 0xA6E9B0>();
	}

	FORCEINLINE auto STOP_CUTSCENE_CAM_SHAKING(Any p0)
	{
		return invoker::invoke<void, 0x4358D2A8023C82D3, 0xA77034>(p0);
	}

	FORCEINLINE auto SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(float p0)
	{
		return invoker::invoke<void, 0xF5EF5C15CE92F236, 0xA75430>(p0);
	}

	FORCEINLINE auto GET_FOCUS_PED_ON_SCREEN(float p0, int p1, float p2, float p3, float p4, float p5, float p6, int p7, int p8)
	{
		return invoker::invoke<Ped, 0x926C3C4443B915, 0xA715C8>(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE()
	{
		return invoker::invoke<void, 0x2BDEB13CCCC78384, 0xA6F9F0>();
	}

	FORCEINLINE auto SET_CAM_DEATH_FAIL_EFFECT_STATE(int p0)
	{
		return invoker::invoke<void, 0x735D248F6CA672AE, 0xA74FAC>(p0);
	}

	FORCEINLINE auto SET_FIRST_PERSON_FLASH_EFFECT_TYPE(Any p0)
	{
		return invoker::invoke<void, 0x39137FB8EE05456C, 0xA75B8C>(p0);
	}

	FORCEINLINE auto SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(const char* vehicleName)
	{
		return invoker::invoke<void, 0x3835E455014EE7B6, 0xA75BCC>(vehicleName);
	}

	FORCEINLINE auto SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(Hash vehicleModel)
	{
		return invoker::invoke<void, 0xFED7E3E3F45F22A4, 0xA75BAC>(vehicleModel);
	}

	FORCEINLINE auto IS_ALLOWED_INDEPENDENT_CAMERA_MODES()
	{
		return invoker::invoke<BOOL, 0x22B1B0E4CDB95977, 0xA72C60>();
	}

	FORCEINLINE auto CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE()
	{
		return invoker::invoke<void, 0xF2BADB0BD95BDD7D, 0xA6EA68>();
	}

	FORCEINLINE auto REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER()
	{
		return invoker::invoke<float, 0x37A742571A01BD01, 0xA748FC>();
	}

}
namespace VEHICLE
{
	FORCEINLINE auto CREATE_VEHICLE(Hash modelHash, float x, float y, float z, float heading, BOOL isNetwork, BOOL bScriptHostVeh, BOOL p7)
	{
		return invoker::invoke<Vehicle, 0x5779387E956077A6, 0xD61D3C>(modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, p7);
	}

	FORCEINLINE auto DELETE_VEHICLE(Vehicle* vehicle)
	{
		return invoker::invoke<void, 0x8C1F7D7A31B2A38E, 0xD61E10>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(Vehicle vehicle, BOOL toggle, BOOL p2)
	{
		return invoker::invoke<void, 0xECB40F3CD8E09468, 0xD6A5B0>(vehicle, toggle, p2);
	}

	FORCEINLINE auto SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(Vehicle vehicle, BOOL canBeLockedOn, BOOL p2)
	{
		return invoker::invoke<void, 0xF5706A3E4A060916, 0xD6A5CC>(vehicle, canBeLockedOn, p2);
	}

	FORCEINLINE auto SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(Vehicle veh, BOOL toggle)
	{
		return invoker::invoke<void, 0x730536B32F041BA6, 0xD6A5E8>(veh, toggle);
	}

	FORCEINLINE auto GET_VEHICLE_HOMING_LOCKON_STATE(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x3E3B4978082BB93C, 0xD64114>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_HOMING_LOCKEDONTO_STATE(Any p0)
	{
		return invoker::invoke<int, 0x52C90C5E23EB961A, 0xD640E8>(p0);
	}

	FORCEINLINE auto SET_VEHICLE_HOMING_LOCKEDONTO_STATE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xD501B0D4146A6A30, 0xD6AEDC>(p0, p1);
	}

	FORCEINLINE auto IS_VEHICLE_MODEL(Vehicle vehicle, Hash model)
	{
		return invoker::invoke<BOOL, 0x2E6A27037F1DC473, 0xD65FB0>(vehicle, model);
	}

	FORCEINLINE auto DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(int vehicleGenerator)
	{
		return invoker::invoke<BOOL, 0x9173EE00A72DCA49, 0xD620C4>(vehicleGenerator);
	}

	FORCEINLINE auto CREATE_SCRIPT_VEHICLE_GENERATOR(float x, float y, float z, float heading, float p4, float p5, Hash modelHash, int p7, int p8, int p9, int p10, BOOL p11, BOOL p12, BOOL p13, BOOL p14, BOOL p15, int p16)
	{
		return invoker::invoke<int, 0x7E711C5CE9160738, 0xD61D2C>(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16);
	}

	FORCEINLINE auto DELETE_SCRIPT_VEHICLE_GENERATOR(int vehicleGenerator)
	{
		return invoker::invoke<void, 0xD1F59EC6D37A7EE, 0xD61E04>(vehicleGenerator);
	}

	FORCEINLINE auto SET_SCRIPT_VEHICLE_GENERATOR(int vehicleGenerator, BOOL enabled)
	{
		return invoker::invoke<void, 0x36B6F306570BAA3F, 0xD6A164>(vehicleGenerator, enabled);
	}

	FORCEINLINE auto SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, BOOL toggle, BOOL p7)
	{
		return invoker::invoke<void, 0xA63572E348CC4CFB, 0xD68D94>(x1, y1, z1, x2, y2, z2, toggle, p7);
	}

	FORCEINLINE auto SET_ALL_VEHICLE_GENERATORS_ACTIVE()
	{
		return invoker::invoke<void, 0x5A65DF56B098A5F1, 0xD68D8C>();
	}

	FORCEINLINE auto SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(BOOL active)
	{
		return invoker::invoke<void, 0xEFAF1ADDE0F583C3, 0xD68D78>(active);
	}

	FORCEINLINE auto SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(float x, float y, float z, float radius)
	{
		return invoker::invoke<void, 0x5519F1C3752E3A90, 0xD6ADA4>(x, y, z, radius);
	}

	FORCEINLINE auto CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST()
	{
		return invoker::invoke<void, 0x6317659BFF055A5F, 0xD61BC8>();
	}

	FORCEINLINE auto SET_VEHICLE_ON_GROUND_PROPERLY(Vehicle vehicle, float p1)
	{
		return invoker::invoke<BOOL, 0x1DE99C193C7EC64B, 0xD6B2B4>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(Vehicle p0, BOOL p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<BOOL, 0xD735FEDB86CA06C6, 0xD6B654>(p0, p1, p2, p3);
	}

	FORCEINLINE auto IS_VEHICLE_STUCK_ON_ROOF(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x413E19AD37DE3A4C, 0xD661B8>(vehicle);
	}

	FORCEINLINE auto ADD_VEHICLE_UPSIDEDOWN_CHECK(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x306C263AAEC4A988, 0xD61680>(vehicle);
	}

	FORCEINLINE auto REMOVE_VEHICLE_UPSIDEDOWN_CHECK(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xD27458C016741B0C, 0xD67C1C>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_STOPPED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x1CE980E99A2A6FB6, 0xD66170>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_NUMBER_OF_PASSENGERS(Vehicle vehicle, BOOL includeDriver, BOOL includeDeadOccupants)
	{
		return invoker::invoke<int, 0xDE3B10768F6103AD, 0xD64628>(vehicle, includeDriver, includeDeadOccupants);
	}

	FORCEINLINE auto GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x2EEC0612337D20CE, 0xD64310>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_MODEL_NUMBER_OF_SEATS(Hash modelHash)
	{
		return invoker::invoke<int, 0xDC1AA2FE20EEB2E9, 0xD64460>(modelHash);
	}

	FORCEINLINE auto IS_SEAT_WARP_ONLY(Vehicle vehicle, int seatIndex)
	{
		return invoker::invoke<BOOL, 0x22007BC82AF0074B, 0xD659F8>(vehicle, seatIndex);
	}

	FORCEINLINE auto IS_TURRET_SEAT(Vehicle vehicle, int seatIndex)
	{
		return invoker::invoke<BOOL, 0x333A2A6253C809D2, 0xD65CEC>(vehicle, seatIndex);
	}

	FORCEINLINE auto DOES_VEHICLE_ALLOW_RAPPEL(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xEE6C44D4C8883EC4, 0xD6210C>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
	{
		return invoker::invoke<void, 0xA0265306DFF63938, 0xD6A9B8>(multiplier);
	}

	FORCEINLINE auto SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
	{
		return invoker::invoke<void, 0x23D563236A543309, 0xD6A010>(multiplier);
	}

	FORCEINLINE auto SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier)
	{
		return invoker::invoke<void, 0x40C1C94D5A5157C5, 0xD69B50>(multiplier);
	}

	FORCEINLINE auto SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(BOOL toggle)
	{
		return invoker::invoke<void, 0x3F4A190062FF9E09, 0xD693A8>(toggle);
	}

	FORCEINLINE auto SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(float value)
	{
		return invoker::invoke<void, 0x5D50773C51925144, 0xD68DC4>(value);
	}

	FORCEINLINE auto SET_FAR_DRAW_VEHICLES(BOOL toggle)
	{
		return invoker::invoke<void, 0xAB2F24F67F293F, 0xD695BC>(toggle);
	}

	FORCEINLINE auto SET_NUMBER_OF_PARKED_VEHICLES(int value)
	{
		return invoker::invoke<void, 0xECDFDC2E8AC2D613, 0xD69A54>(value);
	}

	FORCEINLINE auto SET_VEHICLE_DOORS_LOCKED(Vehicle vehicle, int doorLockStatus)
	{
		return invoker::invoke<void, 0xB74F181ADFC39BF, 0xD6AA20>(vehicle, doorLockStatus);
	}

	FORCEINLINE auto SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(Vehicle vehicle, int doorId, int doorLockStatus)
	{
		return invoker::invoke<void, 0x1F4C790D1AC5AFF9, 0xD6AF48>(vehicle, doorId, doorLockStatus);
	}

	FORCEINLINE auto SET_VEHICLE_HAS_MUTED_SIRENS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xBC5009F300C00558, 0xD6AE70>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Vehicle vehicle, Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x60C8432F4C0BDD68, 0xD6AA88>(vehicle, player, toggle);
	}

	FORCEINLINE auto GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Vehicle vehicle, Player player)
	{
		return invoker::invoke<BOOL, 0x75B56675BF83B3BC, 0xD63E70>(vehicle, player);
	}

	FORCEINLINE auto SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x7A673862D5A46F24, 0xD6AA4C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xB1BCFB3741AF8B2, 0xD6AA74>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(Vehicle vehicle, int team, BOOL toggle)
	{
		return invoker::invoke<void, 0xBF60B9A0E651D89B, 0xD6AAA0>(vehicle, team, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xA7AD7AB3035B02EA, 0xD6AA60>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x827FC1D24FC3CD95, 0xD6AA14>(vehicle);
	}

	FORCEINLINE auto _SET_VEHICLE_MAX_LAUNCH_ENGINE_REVS(Vehicle vehicle, float modifier)
	{
		return invoker::invoke<void, 0x5AE614ECA5FDD423, 0xD6B0D4>(vehicle, modifier);
	}

	FORCEINLINE auto _GET_VEHICLE_THROTTLE(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x92D96892FC06AF22, 0xD6479C>(vehicle);
	}

	FORCEINLINE auto EXPLODE_VEHICLE(Vehicle vehicle, BOOL isAudible, BOOL isInvisible)
	{
		return invoker::invoke<void, 0xAE89444B15234CCE, 0xD622A8>(vehicle, isAudible, isInvisible);
	}

	FORCEINLINE auto SET_VEHICLE_OUT_OF_CONTROL(Vehicle vehicle, BOOL killDriver, BOOL explodeOnImpact)
	{
		return invoker::invoke<void, 0xE251D2995353C61E, 0xD6B2DC>(vehicle, killDriver, explodeOnImpact);
	}

	FORCEINLINE auto SET_VEHICLE_TIMED_EXPLOSION(Vehicle vehicle, Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x9EBBAB4F81D0BDAC, 0xD6B500>(vehicle, ped, toggle);
	}

	FORCEINLINE auto ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xD213EC7C7B81BCEE, 0xD61608>(vehicle);
	}

	FORCEINLINE auto CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
	{
		return invoker::invoke<void, 0x9E4B8D8CF051F6DC, 0xD61BE8>();
	}

	FORCEINLINE auto HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
	{
		return invoker::invoke<BOOL, 0xA648CE821FEF3C51, 0xD64F90>();
	}

	FORCEINLINE auto DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE()
	{
		return invoker::invoke<void, 0x235C228FDD040462, 0xD61EAC>();
	}

	FORCEINLINE auto HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x6B407F2525E93644, 0xD65044>(vehicle);
	}

	FORCEINLINE auto SET_TAXI_LIGHTS(Vehicle vehicle, BOOL state)
	{
		return invoker::invoke<void, 0xB29D0B41AC20799, 0xD6A3A0>(vehicle, state);
	}

	FORCEINLINE auto IS_TAXI_LIGHT_ON(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xB5A36B0C5D6C2884, 0xD65AE0>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_IN_GARAGE_AREA(const char* garageName, Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xFE448E8C2209CA31, 0xD65F64>(garageName, vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_COLOURS(Vehicle vehicle, int colorPrimary, int colorSecondary)
	{
		return invoker::invoke<void, 0xD133EF7430EDCD09, 0xD6A868>(vehicle, colorPrimary, colorSecondary);
	}

	FORCEINLINE auto SET_VEHICLE_FULLBEAM(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x2F12C305B28C6C59, 0xD6AD7C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_IS_RACING(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xDA87162A83051958, 0xD6AFAC>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle, int r, int g, int b)
	{
		return invoker::invoke<void, 0x84F5FD9CD27457EE, 0xD6A8CC>(vehicle, r, g, b);
	}

	FORCEINLINE auto GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle, int* r, int* g, int* b)
	{
		return invoker::invoke<void, 0xD9B9D4D1CCED7CA6, 0xD63D7C>(vehicle, r, g, b);
	}

	FORCEINLINE auto CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x963D9A7202C06F65, 0xD61BB0>(vehicle);
	}

	FORCEINLINE auto GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xA9D64A14804D119B, 0xD62C84>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle, int r, int g, int b)
	{
		return invoker::invoke<void, 0x593A3115B8AE759B, 0xD6A8E4>(vehicle, r, g, b);
	}

	FORCEINLINE auto GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle, int* r, int* g, int* b)
	{
		return invoker::invoke<void, 0x4434FA56DED5500, 0xD63D94>(vehicle, r, g, b);
	}

	FORCEINLINE auto CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x588D8FDC61F7CFAD, 0xD61BBC>(vehicle);
	}

	FORCEINLINE auto GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x2C0B2BB7913E8DBA, 0xD62CA8>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_ENVEFF_SCALE(Vehicle vehicle, float fade)
	{
		return invoker::invoke<void, 0x4DC7FAAC148F9B2F, 0xD6ABE0>(vehicle, fade);
	}

	FORCEINLINE auto GET_VEHICLE_ENVEFF_SCALE(Vehicle vehicle)
	{
		return invoker::invoke<float, 0xD1DBD3830272ECAA, 0xD63F18>(vehicle);
	}

	FORCEINLINE auto SET_CAN_RESPRAY_VEHICLE(Vehicle vehicle, BOOL state)
	{
		return invoker::invoke<void, 0x8F0EA4C49C452445, 0xD68FEC>(vehicle, state);
	}

	FORCEINLINE auto SET_GOON_BOSS_VEHICLE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x2041F0CA908ABAC2, 0xD6971C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_OPEN_REAR_DOORS_ON_EXPLOSION(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x367040C40E6A5A3A, 0xD69A64>(vehicle, toggle);
	}

	FORCEINLINE auto FORCE_SUBMARINE_SURFACE_MODE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xCE1294F698971209, 0xD623B4>(vehicle, toggle);
	}

	FORCEINLINE auto FORCE_SUBMARINE_NEURTAL_BUOYANCY(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xBADC5521D958DD40, 0xD623A4>(p0, p1);
	}

	FORCEINLINE auto SET_SUBMARINE_CRUSH_DEPTHS(Vehicle vehicle, BOOL p1, float depth1, float depth2, float depth3)
	{
		return invoker::invoke<void, 0xA324C32992621FA4, 0xD6A2BC>(vehicle, p1, depth1, depth2, depth3);
	}

	FORCEINLINE auto GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(Vehicle submarine)
	{
		return invoker::invoke<BOOL, 0x6DBA6A508811E851, 0xD6384C>(submarine);
	}

	FORCEINLINE auto GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(Vehicle submarine)
	{
		return invoker::invoke<int, 0x2D7690E0BF110B40, 0xD63870>(submarine);
	}

	FORCEINLINE auto SET_BOAT_IGNORE_LAND_PROBES(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x435687668B2C6D06, 0xD68F30>(p0, p1);
	}

	FORCEINLINE auto _SET_BOUNDS_AFFECT_WATER_PROBES(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x7B92F87655ED3C29, 0xD68F88>(vehicle, toggle);
	}

	FORCEINLINE auto SET_BOAT_ANCHOR(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x3E29597A27D861B2, 0xD68F08>(vehicle, toggle);
	}

	FORCEINLINE auto CAN_ANCHOR_BOAT_HERE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x138421810ACE4B5D, 0xD61A18>(vehicle);
	}

	FORCEINLINE auto CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x1E9361E60B23497B, 0xD61A3C>(vehicle);
	}

	FORCEINLINE auto SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x3CA987D2B3498078, 0xD68F54>(vehicle, toggle);
	}

	FORCEINLINE auto SET_FORCE_LOW_LOD_ANCHOR_MODE(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0xB79D107D2E0D7E43, 0xD6965C>(vehicle, p1);
	}

	FORCEINLINE auto SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(Vehicle vehicle, float value)
	{
		return invoker::invoke<void, 0xBA1F8721D3730F2B, 0xD68F44>(vehicle, value);
	}

	FORCEINLINE auto IS_BOAT_ANCHORED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x2B45F7B39143EEA, 0xD65214>(vehicle);
	}

	FORCEINLINE auto SET_BOAT_SINKS_WHEN_WRECKED(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xF1FCF5569978D854, 0xD68F68>(vehicle, toggle);
	}

	FORCEINLINE auto SET_BOAT_WRECKED(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xBA929B36B8BB08EB, 0xD68F7C>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_SIREN(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x4539850624F18A9E, 0xD6B404>(vehicle, toggle);
	}

	FORCEINLINE auto IS_VEHICLE_SIREN_ON(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xE101D58DA98B6070, 0xD660F4>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_SIREN_AUDIO_ON(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xE21E573B1795892D, 0xD660D0>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_STRONG(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xD05AF216D970F274, 0xD6B4A4>(vehicle, toggle);
	}

	FORCEINLINE auto REMOVE_VEHICLE_STUCK_CHECK(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xB7BDF91BE073DCFB, 0xD67C08>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_COLOURS(Vehicle vehicle, int* colorPrimary, int* colorSecondary)
	{
		return invoker::invoke<void, 0xFF4B16F297D9CB3E, 0xD63C70>(vehicle, colorPrimary, colorSecondary);
	}

	FORCEINLINE auto IS_VEHICLE_SEAT_FREE(Vehicle vehicle, int seatIndex, BOOL isTaskRunning)
	{
		return invoker::invoke<BOOL, 0xC39AE5D390581AD5, 0xD660A0>(vehicle, seatIndex, isTaskRunning);
	}

	FORCEINLINE auto GET_PED_IN_VEHICLE_SEAT(Vehicle vehicle, int seatIndex, BOOL p2)
	{
		return invoker::invoke<Ped, 0xFD5C5BBD1FE92BB7, 0xD632BC>(vehicle, seatIndex, p2);
	}

	FORCEINLINE auto GET_LAST_PED_IN_VEHICLE_SEAT(Vehicle vehicle, int seatIndex)
	{
		return invoker::invoke<Ped, 0x6B854773972E76E4, 0xD62D74>(vehicle, seatIndex);
	}

	FORCEINLINE auto GET_VEHICLE_LIGHTS_STATE(Vehicle vehicle, BOOL* lightsOn, BOOL* highbeamsOn)
	{
		return invoker::invoke<BOOL, 0x9FFEA38DBCE391EC, 0xD641DC>(vehicle, lightsOn, highbeamsOn);
	}

	FORCEINLINE auto IS_VEHICLE_TYRE_BURST(Vehicle vehicle, int wheelID, BOOL completely)
	{
		return invoker::invoke<BOOL, 0x548F6F43A7CB6F45, 0xD66208>(vehicle, wheelID, completely);
	}

	FORCEINLINE auto SET_VEHICLE_FORWARD_SPEED(Vehicle vehicle, float speed)
	{
		return invoker::invoke<void, 0x93C337B66C95C99B, 0xD6AD2C>(vehicle, speed);
	}

	FORCEINLINE auto SET_VEHICLE_FORWARD_SPEED_XY(Vehicle vehicle, float speed)
	{
		return invoker::invoke<void, 0xFF4296DC08BAEC71, 0xD6AD3C>(vehicle, speed);
	}

	FORCEINLINE auto BRING_VEHICLE_TO_HALT(Vehicle vehicle, float distance, int duration, BOOL p3)
	{
		return invoker::invoke<void, 0xE5EE5C9DDF05D925, 0xD619FC>(vehicle, distance, duration, p3);
	}

	FORCEINLINE auto SET_VEHICLE_STEER_FOR_BUILDINGS(Vehicle vehicle, Any p1)
	{
		return invoker::invoke<void, 0xE02B4E5EE15725CC, 0xD6B47C>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_CAUSES_SWERVING(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x52A6C42AB95EADB7, 0xD6A814>(vehicle, toggle);
	}

	FORCEINLINE auto SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x1A1E025C1EDC00AB, 0xD698A0>(p0, p1);
	}

	FORCEINLINE auto STOP_BRINGING_VEHICLE_TO_HALT(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xF5B09CD26D48D446, 0xD6C504>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_BEING_BROUGHT_TO_HALT(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xAB6C098FE20C23A, 0xD65DD8>(vehicle);
	}

	FORCEINLINE auto LOWER_FORKLIFT_FORKS(Vehicle forklift)
	{
		return invoker::invoke<void, 0x306E268B106D3D0D, 0xD6682C>(forklift);
	}

	FORCEINLINE auto SET_FORKLIFT_FORK_HEIGHT(Vehicle vehicle, float height)
	{
		return invoker::invoke<void, 0xD0DE7C657057F36, 0xD69684>(vehicle, height);
	}

	FORCEINLINE auto IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(Vehicle vehicle, Entity entity)
	{
		return invoker::invoke<BOOL, 0x1DB196628F3A0BD8, 0xD652A4>(vehicle, entity);
	}

	FORCEINLINE auto IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x43F2D662C7522C93, 0xD65170>(vehicle);
	}

	FORCEINLINE auto FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(Entity entity)
	{
		return invoker::invoke<Vehicle, 0x4218094D251842BD, 0xD622D8>(entity);
	}

	FORCEINLINE auto IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(Vehicle vehicle, Entity entity)
	{
		return invoker::invoke<BOOL, 0x6A5E9E4AC5B61452, 0xD65378>(vehicle, entity);
	}

	FORCEINLINE auto ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(Vehicle vehicle, Entity entity)
	{
		return invoker::invoke<void, 0xBD3D97A93EBB67B3, 0xD6185C>(vehicle, entity);
	}

	FORCEINLINE auto DETACH_CONTAINER_FROM_HANDLER_FRAME(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x7AA69E5CE0F1C51A, 0xD61E1C>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0xC43B78AD4315F7FA, 0xD6A9EC>(vehicle, p1);
	}

	FORCEINLINE auto SET_BOAT_DISABLE_AVOIDANCE(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x1E11F329546909B8, 0xD68F1C>(vehicle, p1);
	}

	FORCEINLINE auto IS_HELI_LANDING_AREA_BLOCKED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xB1A8644CC087A079, 0xD653A0>(vehicle);
	}

	FORCEINLINE auto SET_SHORT_SLOWDOWN_FOR_LANDING(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x91CEBBEA3A7FB79A, 0xD6A190>(vehicle);
	}

	FORCEINLINE auto SET_HELI_TURBULENCE_SCALAR(Vehicle vehicle, float p1)
	{
		return invoker::invoke<void, 0x9647565D7FAB305A, 0xD69804>(vehicle, p1);
	}

	FORCEINLINE auto SET_CAR_BOOT_OPEN(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x8E18C9CFBC30C9FF, 0xD69138>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_TYRE_BURST(Vehicle vehicle, int index, BOOL onRim, float p3)
	{
		return invoker::invoke<void, 0xE488FDAA43A181AE, 0xD6B564>(vehicle, index, onRim, p3);
	}

	FORCEINLINE auto SET_VEHICLE_DOORS_SHUT(Vehicle vehicle, BOOL closeInstantly)
	{
		return invoker::invoke<void, 0xC3680B85B2D7086A, 0xD6AAB8>(vehicle, closeInstantly);
	}

	FORCEINLINE auto SET_VEHICLE_TYRES_CAN_BURST(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x439C904840715871, 0xD6B550>(vehicle, toggle);
	}

	FORCEINLINE auto GET_VEHICLE_TYRES_CAN_BURST(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xE6BE8A525BA6BD44, 0xD64808>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_WHEELS_CAN_BREAK(Vehicle vehicle, BOOL enabled)
	{
		return invoker::invoke<void, 0x72241E9BCAEB0F8B, 0xD6B738>(vehicle, enabled);
	}

	FORCEINLINE auto SET_VEHICLE_DOOR_OPEN(Vehicle vehicle, int doorId, BOOL loose, BOOL openInstantly)
	{
		return invoker::invoke<void, 0xBFE60A5CC0C835D8, 0xD6AB4C>(vehicle, doorId, loose, openInstantly);
	}

	FORCEINLINE auto SET_VEHICLE_DOOR_AUTO_LOCK(Vehicle vehicle, int doorId, BOOL toggle)
	{
		return invoker::invoke<void, 0xBC123B7E0667E87D, 0xD6AACC>(vehicle, doorId, toggle);
	}

	FORCEINLINE auto SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(Any p0)
	{
		return invoker::invoke<void, 0xEB13A0B02F8676C8, 0xD695F8>(p0);
	}

	FORCEINLINE auto REMOVE_VEHICLE_WINDOW(Vehicle vehicle, int windowIndex)
	{
		return invoker::invoke<void, 0x8E470D78FC866126, 0xD67C30>(vehicle, windowIndex);
	}

	FORCEINLINE auto ROLL_DOWN_WINDOWS(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xD3694FA8930DED3C, 0xD67E64>(vehicle);
	}

	FORCEINLINE auto ROLL_DOWN_WINDOW(Vehicle vehicle, int windowIndex)
	{
		return invoker::invoke<void, 0x260EEEEBF5F35F72, 0xD67E54>(vehicle, windowIndex);
	}

	FORCEINLINE auto ROLL_UP_WINDOW(Vehicle vehicle, int windowIndex)
	{
		return invoker::invoke<void, 0x9303D5873A8A413A, 0xD67E70>(vehicle, windowIndex);
	}

	FORCEINLINE auto SMASH_VEHICLE_WINDOW(Vehicle vehicle, int windowIndex)
	{
		return invoker::invoke<void, 0x62DFD44586348C12, 0xD6B944>(vehicle, windowIndex);
	}

	FORCEINLINE auto FIX_VEHICLE_WINDOW(Vehicle vehicle, int windowIndex)
	{
		return invoker::invoke<void, 0x3BFC7329EC766FED, 0xD62350>(vehicle, windowIndex);
	}

	FORCEINLINE auto POP_OUT_VEHICLE_WINDSCREEN(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x4CF78EBCA2CD7E9E, 0xD678C0>(vehicle);
	}

	FORCEINLINE auto POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(Vehicle vehicle, float x, float y, float z)
	{
		return invoker::invoke<void, 0x362D577C98803D6D, 0xD678B0>(vehicle, x, y, z);
	}

	FORCEINLINE auto SET_VEHICLE_LIGHTS(Vehicle vehicle, int state)
	{
		return invoker::invoke<void, 0xBA3C1A9AA7FD9616, 0xD6B030>(vehicle, state);
	}

	FORCEINLINE auto SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xAAF00640D5573DA0, 0xD6B69C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_HEADLIGHT_SHADOWS(Vehicle vehicle, int p1)
	{
		return invoker::invoke<void, 0xAA2BF5C4E3F250C0, 0xD6AECC>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_ALARM(Vehicle vehicle, BOOL state)
	{
		return invoker::invoke<void, 0xD45558BDBDE86734, 0xD6A59C>(vehicle, state);
	}

	FORCEINLINE auto START_VEHICLE_ALARM(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x495F6DB2481DBAEE, 0xD6BBA0>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_ALARM_ACTIVATED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xF1298707777A950B, 0xD65D14>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_INTERIORLIGHT(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xEC6A9F16D3F15978, 0xD6AF70>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_FORCE_INTERIORLIGHT(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xA5498338B4203373, 0xD6AD18>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_LIGHT_MULTIPLIER(Vehicle vehicle, float multiplier)
	{
		return invoker::invoke<void, 0x3B69BFF3173EC703, 0xD6B040>(vehicle, multiplier);
	}

	FORCEINLINE auto ATTACH_VEHICLE_TO_TRAILER(Vehicle vehicle, Vehicle trailer, float radius)
	{
		return invoker::invoke<void, 0xF89624E52FCBE454, 0xD618EC>(vehicle, trailer, radius);
	}

	FORCEINLINE auto ATTACH_VEHICLE_ON_TO_TRAILER(Vehicle vehicle, Vehicle trailer, float offsetX, float offsetY, float offsetZ, float coordsX, float coordsY, float coordsZ, float rotationX, float rotationY, float rotationZ, float disableCollisions)
	{
		return invoker::invoke<void, 0x9E132DB7E05C6EAB, 0xD61884>(vehicle, trailer, offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions);
	}

	FORCEINLINE auto STABILISE_ENTITY_ATTACHED_TO_HELI(Vehicle vehicle, Entity entity, float p2)
	{
		return invoker::invoke<void, 0x8FB959083319E145, 0xD6B954>(vehicle, entity, p2);
	}

	FORCEINLINE auto DETACH_VEHICLE_FROM_TRAILER(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x157D966854AABDA6, 0xD61EA0>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_ATTACHED_TO_TRAILER(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xA6D8AF5A058A75F0, 0xD65D88>(vehicle);
	}

	FORCEINLINE auto SET_TRAILER_INVERSE_MASS_SCALE(Vehicle vehicle, float p1)
	{
		return invoker::invoke<void, 0x82A7EF211E6B06C9, 0xD6A3E8>(vehicle, p1);
	}

	FORCEINLINE auto SET_TRAILER_LEGS_RAISED(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x632030977D1CE430, 0xD6A404>(vehicle);
	}

	FORCEINLINE auto SET_TRAILER_LEGS_LOWERED(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xBAF583E9A667F5FB, 0xD6A3F8>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_TYRE_FIXED(Vehicle vehicle, int tyreIndex)
	{
		return invoker::invoke<void, 0xF516E954BCB89C18, 0xD6B580>(vehicle, tyreIndex);
	}

	FORCEINLINE auto SET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle vehicle, const char* plateText)
	{
		return invoker::invoke<void, 0x3FEAE59CDE6D3946, 0xD6B248>(vehicle, plateText);
	}

	FORCEINLINE auto GET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle vehicle)
	{
		return invoker::invoke<const char*, 0xCA7159F2C5FF745A, 0xD64658>(vehicle);
	}

	FORCEINLINE auto GET_NUMBER_OF_VEHICLE_NUMBER_PLATES()
	{
		return invoker::invoke<int, 0x20DE4C1439E0FC92, 0xD63054>();
	}

	FORCEINLINE auto SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Vehicle vehicle, int plateIndex)
	{
		return invoker::invoke<void, 0x5D3F682DDA06C20, 0xD6B258>(vehicle, plateIndex);
	}

	FORCEINLINE auto GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x4F06416A18248EA0, 0xD64678>(vehicle);
	}

	FORCEINLINE auto SET_RANDOM_TRAINS(BOOL toggle)
	{
		return invoker::invoke<void, 0xAE03F542B985A69E, 0xD69FFC>(toggle);
	}

	FORCEINLINE auto CREATE_MISSION_TRAIN(int variation, float x, float y, float z, BOOL direction, Any p5, Any p6)
	{
		return invoker::invoke<Vehicle, 0x767956351E028F74, 0xD61CCC>(variation, x, y, z, direction, p5, p6);
	}

	FORCEINLINE auto SWITCH_TRAIN_TRACK(int trackId, BOOL state)
	{
		return invoker::invoke<void, 0x43C8A7F0D458B663, 0xD6C67C>(trackId, state);
	}

	FORCEINLINE auto SET_TRAIN_TRACK_SPAWN_FREQUENCY(int trackIndex, int frequency)
	{
		return invoker::invoke<void, 0xB24E78BD1D1F9F3F, 0xD6A430>(trackIndex, frequency);
	}

	FORCEINLINE auto ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(Any p0)
	{
		return invoker::invoke<void, 0x1A6B031C358F6071, 0xD616AC>(p0);
	}

	FORCEINLINE auto DELETE_ALL_TRAINS()
	{
		return invoker::invoke<void, 0x47931C69C0D75B43, 0xD61DE4>();
	}

	FORCEINLINE auto SET_TRAIN_SPEED(Vehicle train, float speed)
	{
		return invoker::invoke<void, 0x492EE2B9C9BD33C6, 0xD6A420>(train, speed);
	}

	FORCEINLINE auto SET_TRAIN_CRUISE_SPEED(Vehicle train, float speed)
	{
		return invoker::invoke<void, 0xCD56231706809D19, 0xD6A410>(train, speed);
	}

	FORCEINLINE auto SET_RANDOM_BOATS(BOOL toggle)
	{
		return invoker::invoke<void, 0xBB7BF0D30DB04384, 0xD69FDC>(toggle);
	}

	FORCEINLINE auto SET_RANDOM_BOATS_MP(BOOL toggle)
	{
		return invoker::invoke<void, 0xDB7CCABFFA928C83, 0xD69FEC>(toggle);
	}

	FORCEINLINE auto SET_GARBAGE_TRUCKS(BOOL toggle)
	{
		return invoker::invoke<void, 0x474491073FE815A8, 0xD696D8>(toggle);
	}

	FORCEINLINE auto DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x67AC1AE8A2697D67, 0xD62198>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_RECORDING_ID(int recording, const char* script)
	{
		return invoker::invoke<int, 0x95610E68DFCFC225, 0xD6471C>(recording, script);
	}

	FORCEINLINE auto REQUEST_VEHICLE_RECORDING(int recording, const char* script)
	{
		return invoker::invoke<void, 0xD772E6694B8472A6, 0xD67DA0>(recording, script);
	}

	FORCEINLINE auto HAS_VEHICLE_RECORDING_BEEN_LOADED(int recording, const char* script)
	{
		return invoker::invoke<BOOL, 0x266D9DB5FCE4003B, 0xD64FAC>(recording, script);
	}

	FORCEINLINE auto REMOVE_VEHICLE_RECORDING(int recording, const char* script)
	{
		return invoker::invoke<void, 0x7821F942CAEEBEE1, 0xD67BF8>(recording, script);
	}

	FORCEINLINE auto GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(int id, float time)
	{
		return invoker::invoke<Vector3, 0x763EEC52E292B5A0, 0xD6359C>(id, time);
	}

	FORCEINLINE auto GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(int recording, float time, const char* script)
	{
		return invoker::invoke<Vector3, 0x2A03585144C38A2A, 0xD63548>(recording, time, script);
	}

	FORCEINLINE auto GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(int id, float time)
	{
		return invoker::invoke<Vector3, 0x32D675332B7BEAC5, 0xD63708>(id, time);
	}

	FORCEINLINE auto GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(int recording, float time, const char* script)
	{
		return invoker::invoke<Vector3, 0x83DB438E821B084, 0xD636B4>(recording, time, script);
	}

	FORCEINLINE auto GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(int id)
	{
		return invoker::invoke<float, 0x1F921E74406AE806, 0xD639C8>(id);
	}

	FORCEINLINE auto GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(int recording, const char* script)
	{
		return invoker::invoke<float, 0xE2E30D829A6B8F9E, 0xD63990>(recording, script);
	}

	FORCEINLINE auto GET_POSITION_IN_RECORDING(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x942B90900E176BD7, 0xD63524>(vehicle);
	}

	FORCEINLINE auto GET_TIME_POSITION_IN_RECORDING(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x157F3D5A4AAB2C50, 0xD6396C>(vehicle);
	}

	FORCEINLINE auto START_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle, int recording, const char* script, BOOL p3)
	{
		return invoker::invoke<void, 0x88556DA0593A0748, 0xD6B9C0>(vehicle, recording, script, p3);
	}

	FORCEINLINE auto START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(Vehicle vehicle, int recording, const char* script, int flags, int time, int drivingStyle)
	{
		return invoker::invoke<void, 0x9CCFFF877AB82ACA, 0xD6BA08>(vehicle, recording, script, flags, time, drivingStyle);
	}

	FORCEINLINE auto FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x44A13535A15C20E0, 0xD62390>(vehicle, p1);
	}

	FORCEINLINE auto STOP_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x1D2DAF2A41FFC4A0, 0xD6C510>(vehicle);
	}

	FORCEINLINE auto PAUSE_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x36D3AD4491CD32BA, 0xD66A2C>(vehicle);
	}

	FORCEINLINE auto UNPAUSE_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x937DE6A451B47D92, 0xD6DD38>(vehicle);
	}

	FORCEINLINE auto IS_PLAYBACK_GOING_ON_FOR_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x50D073F91C5243C, 0xD658A0>(vehicle);
	}

	FORCEINLINE auto IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xD99C77F6466B9C48, 0xD658D4>(vehicle);
	}

	FORCEINLINE auto GET_CURRENT_PLAYBACK_FOR_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x8A5B9B95FED93, 0xD62720>(vehicle);
	}

	FORCEINLINE auto SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x948DDF2EBE37571B, 0xD6B920>(vehicle);
	}

	FORCEINLINE auto SET_PLAYBACK_SPEED(Vehicle vehicle, float speed)
	{
		return invoker::invoke<void, 0x206AB1458FD9522F, 0xD69EA8>(vehicle, speed);
	}

	FORCEINLINE auto START_PLAYBACK_RECORDED_VEHICLE_USING_AI(Vehicle vehicle, int recording, const char* script, float speed, int drivingStyle)
	{
		return invoker::invoke<void, 0x3EF00C934572535B, 0xD6B9DC>(vehicle, recording, script, speed, drivingStyle);
	}

	FORCEINLINE auto SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle, float time)
	{
		return invoker::invoke<void, 0x8BCD7C11D27FB9A1, 0xD6B910>(vehicle, time);
	}

	FORCEINLINE auto SET_PLAYBACK_TO_USE_AI(Vehicle vehicle, int drivingStyle)
	{
		return invoker::invoke<void, 0x642B7FD807FF696, 0xD69EB8>(vehicle, drivingStyle);
	}

	FORCEINLINE auto SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(Vehicle vehicle, int time, int drivingStyle, BOOL p3)
	{
		return invoker::invoke<void, 0xD9CBCF1C9EAC9D15, 0xD69EE8>(vehicle, time, drivingStyle, p3);
	}

	FORCEINLINE auto SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(Vehicle vehicle, float x, float y, float z, Any p4)
	{
		return invoker::invoke<void, 0x3245F0B28999D460, 0xD68D04>(vehicle, x, y, z, p4);
	}

	FORCEINLINE auto SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(Vehicle vehicle, float x, float y, float z)
	{
		return invoker::invoke<void, 0x6E859E04BDE20D6E, 0xD69F98>(vehicle, x, y, z);
	}

	FORCEINLINE auto SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(Vehicle vehicle, float x, float y, float z)
	{
		return invoker::invoke<void, 0x55498986DC9E53BB, 0xD6970C>(vehicle, x, y, z);
	}

	FORCEINLINE auto SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x5D18C448B64290DB, 0xD6A19C>(vehicle, p1);
	}

	FORCEINLINE auto EXPLODE_VEHICLE_IN_CUTSCENE(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x1D937F8481AB64F0, 0xD622C4>(vehicle, p1);
	}

	FORCEINLINE auto ADD_VEHICLE_STUCK_CHECK_WITH_WARP(Any p0, float p1, Any p2, BOOL p3, BOOL p4, BOOL p5, Any p6)
	{
		return invoker::invoke<void, 0x177C21F54C9A6E9E, 0xD61614>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto SET_VEHICLE_MODEL_IS_SUPPRESSED(Hash model, BOOL suppressed)
	{
		return invoker::invoke<void, 0xCCA6D8A84EE8C88A, 0xD6B164>(model, suppressed);
	}

	FORCEINLINE auto GET_RANDOM_VEHICLE_IN_SPHERE(float x, float y, float z, float radius, Hash modelHash, int flags)
	{
		return invoker::invoke<Vehicle, 0x66D94742BB3D032F, 0xD63654>(x, y, z, radius, modelHash, flags);
	}

	FORCEINLINE auto GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(float p0, float p1, float p2, float p3, int p4, int p5, int p6)
	{
		return invoker::invoke<Vehicle, 0xCE29C0EA93335BD3, 0xD63620>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(float p0, float p1, float p2, float p3, int p4, int p5, int p6)
	{
		return invoker::invoke<Vehicle, 0x1C4D3AE530899DF2, 0xD635EC>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto GET_CLOSEST_VEHICLE(float x, float y, float z, float radius, Hash modelHash, int flags)
	{
		return invoker::invoke<Vehicle, 0xF0CA45A211FFDCD9, 0xD62644>(x, y, z, radius, modelHash, flags);
	}

	FORCEINLINE auto GET_TRAIN_CARRIAGE(Vehicle train, int trailerNumber)
	{
		return invoker::invoke<Vehicle, 0xB5C59FDCC14C2F22, 0xD639EC>(train, trailerNumber);
	}

	FORCEINLINE auto IS_MISSION_TRAIN(Vehicle train)
	{
		return invoker::invoke<BOOL, 0xF2A5706EAF041CB1, 0xD65420>(train);
	}

	FORCEINLINE auto DELETE_MISSION_TRAIN(Vehicle* train)
	{
		return invoker::invoke<void, 0x903908AA21114D72, 0xD61DEC>(train);
	}

	FORCEINLINE auto SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(Vehicle* train, BOOL p1)
	{
		return invoker::invoke<void, 0xC4929897EF5CADC2, 0xD699B8>(train, p1);
	}

	FORCEINLINE auto SET_MISSION_TRAIN_COORDS(Vehicle train, float x, float y, float z)
	{
		return invoker::invoke<void, 0xFCE057EE79E33FA, 0xD699C8>(train, x, y, z);
	}

	FORCEINLINE auto IS_THIS_MODEL_A_BOAT(Hash model)
	{
		return invoker::invoke<BOOL, 0xEA4F815FDC353FEF, 0xD65B94>(model);
	}

	FORCEINLINE auto IS_THIS_MODEL_A_JETSKI(Hash model)
	{
		return invoker::invoke<BOOL, 0xA71279EFEE0ACEB2, 0xD65C00>(model);
	}

	FORCEINLINE auto IS_THIS_MODEL_A_PLANE(Hash model)
	{
		return invoker::invoke<BOOL, 0xC6FDED3EB75117, 0xD65C24>(model);
	}

	FORCEINLINE auto IS_THIS_MODEL_A_HELI(Hash model)
	{
		return invoker::invoke<BOOL, 0xBA16CD57E37AC32A, 0xD65BDC>(model);
	}

	FORCEINLINE auto IS_THIS_MODEL_A_CAR(Hash model)
	{
		return invoker::invoke<BOOL, 0xD3CE8D1E6564B011, 0xD65BB8>(model);
	}

	FORCEINLINE auto IS_THIS_MODEL_A_TRAIN(Hash model)
	{
		return invoker::invoke<BOOL, 0xAE447CBB33B40CA3, 0xD65C6C>(model);
	}

	FORCEINLINE auto IS_THIS_MODEL_A_BIKE(Hash model)
	{
		return invoker::invoke<BOOL, 0x78B050AFBA6D1517, 0xD65B70>(model);
	}

	FORCEINLINE auto IS_THIS_MODEL_A_BICYCLE(Hash model)
	{
		return invoker::invoke<BOOL, 0x3801E353091A2E42, 0xD65B4C>(model);
	}

	FORCEINLINE auto IS_THIS_MODEL_A_QUADBIKE(Hash model)
	{
		return invoker::invoke<BOOL, 0x9910CD0D8626AA28, 0xD65C48>(model);
	}

	FORCEINLINE auto IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(Hash model)
	{
		return invoker::invoke<BOOL, 0xD9BDDEAC04BC910C, 0xD65B04>(model);
	}

	FORCEINLINE auto IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(Hash model)
	{
		return invoker::invoke<BOOL, 0xC43345D94C3E22E, 0xD65B28>(model);
	}

	FORCEINLINE auto SET_HELI_BLADES_FULL_SPEED(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xA9F7300B498DDED7, 0xD69764>(vehicle);
	}

	FORCEINLINE auto SET_HELI_BLADES_SPEED(Vehicle vehicle, float speed)
	{
		return invoker::invoke<void, 0xA83EE494110BC566, 0xD69778>(vehicle, speed);
	}

	FORCEINLINE auto FORCE_SUB_THROTTLE_FOR_TIME(Vehicle vehicle, float p1, float p2)
	{
		return invoker::invoke<void, 0x241E64B7BFB90488, 0xD623C8>(vehicle, p1, p2);
	}

	FORCEINLINE auto SET_VEHICLE_CAN_BE_TARGETTED(Vehicle vehicle, BOOL state)
	{
		return invoker::invoke<void, 0xCF9C21E54DB720B8, 0xD6A734>(vehicle, state);
	}

	FORCEINLINE auto SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x89E19F9D79DDCA80, 0xD6949C>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(Vehicle vehicle, BOOL state)
	{
		return invoker::invoke<void, 0x6BFFBDE3C98A828E, 0xD6A75C>(vehicle, state);
	}

	FORCEINLINE auto SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x680C862D9FC0F4BC, 0xD6AE98>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0xB2CA6639924FA111, 0xD6B3AC>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xEFEFBD4EA86918AE, 0xD6A798>(p0, p1);
	}

	FORCEINLINE auto GET_VEHICLE_DIRT_LEVEL(Vehicle vehicle)
	{
		return invoker::invoke<float, 0xF04E476AE02C4646, 0xD63E3C>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_DIRT_LEVEL(Vehicle vehicle, float dirtLevel)
	{
		return invoker::invoke<void, 0x9452FE4900245259, 0xD6A9C8>(vehicle, dirtLevel);
	}

	FORCEINLINE auto GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xB69AE16F62A14003, 0xD6277C>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_DOOR_FULLY_OPEN(Vehicle vehicle, int doorId)
	{
		return invoker::invoke<BOOL, 0x6B0915C0DDD2954F, 0xD65E7C>(vehicle, doorId);
	}

	FORCEINLINE auto SET_VEHICLE_ENGINE_ON(Vehicle vehicle, BOOL value, BOOL instantly, BOOL disableAutoStart)
	{
		return invoker::invoke<void, 0xC229299217554C78, 0xD6ABBC>(vehicle, value, instantly, disableAutoStart);
	}

	FORCEINLINE auto SET_VEHICLE_UNDRIVEABLE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xBE144113897EE678, 0xD6B5A8>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_PROVIDES_COVER(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x248EA593ACD1C87, 0xD6B348>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_DOOR_CONTROL(Vehicle vehicle, int doorId, int speed, float angle)
	{
		return invoker::invoke<void, 0x3E13A302AA0F06BF, 0xD6AAFC>(vehicle, doorId, speed, angle);
	}

	FORCEINLINE auto SET_VEHICLE_DOOR_LATCHED(Vehicle vehicle, int doorId, BOOL p2, BOOL p3, BOOL p4)
	{
		return invoker::invoke<void, 0xC1FE4FCB32785633, 0xD6AB14>(vehicle, doorId, p2, p3, p4);
	}

	FORCEINLINE auto GET_VEHICLE_DOOR_ANGLE_RATIO(Vehicle vehicle, int doorId)
	{
		return invoker::invoke<float, 0x7BFB76C576628F3D, 0xD63E98>(vehicle, doorId);
	}

	FORCEINLINE auto GET_PED_USING_VEHICLE_DOOR(Vehicle vehicle, int doord)
	{
		return invoker::invoke<Ped, 0x11AEF334072BBF99, 0xD63354>(vehicle, doord);
	}

	FORCEINLINE auto SET_VEHICLE_DOOR_SHUT(Vehicle vehicle, int doorId, BOOL closeInstantly)
	{
		return invoker::invoke<void, 0x6515021478088FBC, 0xD6AB6C>(vehicle, doorId, closeInstantly);
	}

	FORCEINLINE auto SET_VEHICLE_DOOR_BROKEN(Vehicle vehicle, int doorId, BOOL deleteDoor)
	{
		return invoker::invoke<void, 0x89E9F387C190061F, 0xD6AAE4>(vehicle, doorId, deleteDoor);
	}

	FORCEINLINE auto SET_VEHICLE_CAN_BREAK(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xD2F21CFC29C914AE, 0xD6A770>(vehicle, toggle);
	}

	FORCEINLINE auto DOES_VEHICLE_HAVE_ROOF(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x9DB4F102351D5D9E, 0xD62150>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(Any p0)
	{
		return invoker::invoke<void, 0x4EB5C166706C0781, 0xD6B3A0>(p0);
	}

	FORCEINLINE auto SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(Any p0)
	{
		return invoker::invoke<void, 0x49A1FC25BB73AC77, 0xD6A618>(p0);
	}

	FORCEINLINE auto SET_CARJACK_MISSION_REMOVAL_PARAMETERS(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x424A62A3138EF2F6, 0xD6911C>(p0, p1);
	}

	FORCEINLINE auto IS_BIG_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x9E20DC08879FF3FC, 0xD651E0>(vehicle);
	}

	FORCEINLINE auto GET_NUMBER_OF_VEHICLE_COLOURS(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x6645B56AACA6C57C, 0xD63008>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_COLOUR_COMBINATION(Vehicle vehicle, int colorCombination)
	{
		return invoker::invoke<void, 0x20DD46D27530FAC7, 0xD6A87C>(vehicle, colorCombination);
	}

	FORCEINLINE auto GET_VEHICLE_COLOUR_COMBINATION(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x507EE8EDD1D75E9, 0xD63CA4>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(Vehicle vehicle, int colorIndex)
	{
		return invoker::invoke<void, 0x89D1FDCA3735A1E0, 0xD6B7E4>(vehicle, colorIndex);
	}

	FORCEINLINE auto GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xD6BA8C57BDF9DEB9, 0xD648FC>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xF04751F8E604D487, 0xD6AF98>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x40891A689350468D, 0xD6B790>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0xA29F097488D811A6, 0xD6A540>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0xE296500BDAD8807A, 0xD6B688>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x9D756F14B232B644, 0xD6B134>(vehicle, p1);
	}

	FORCEINLINE auto GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(BOOL p0, Hash* modelHash, int* successIndicator)
	{
		return invoker::invoke<void, 0xA50C5A6FC93D3B49, 0x81A1C0>(p0, modelHash, successIndicator);
	}

	FORCEINLINE auto GET_VEHICLE_DOOR_LOCK_STATUS(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x38A100E16C95161B, 0xD63EBC>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(Vehicle vehicle, int doorId)
	{
		return invoker::invoke<int, 0x405766A9221AFD99, 0xD64140>(vehicle, doorId);
	}

	FORCEINLINE auto IS_VEHICLE_DOOR_DAMAGED(Vehicle veh, int doorID)
	{
		return invoker::invoke<BOOL, 0xAD830DCD82C63F31, 0xD65E54>(veh, doorID);
	}

	FORCEINLINE auto SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(Vehicle vehicle, int doorId, BOOL isBreakable)
	{
		return invoker::invoke<void, 0xBDE75E2FCBF91A6C, 0xD694DC>(vehicle, doorId, isBreakable);
	}

	FORCEINLINE auto IS_VEHICLE_BUMPER_BOUNCING(Vehicle vehicle, BOOL frontBumper)
	{
		return invoker::invoke<BOOL, 0x8545B773982EAE2B, 0xD65DFC>(vehicle, frontBumper);
	}

	FORCEINLINE auto IS_VEHICLE_BUMPER_BROKEN_OFF(Vehicle vehicle, BOOL frontBumper)
	{
		return invoker::invoke<BOOL, 0x2495CCF0BF303C19, 0xD65E28>(vehicle, frontBumper);
	}

	FORCEINLINE auto IS_COP_VEHICLE_IN_AREA_3D(float x1, float x2, float y1, float y2, float z1, float z2)
	{
		return invoker::invoke<BOOL, 0xCC36CA06DD06AD, 0xD6525C>(x1, x2, y1, y2, z1, z2);
	}

	FORCEINLINE auto IS_VEHICLE_ON_ALL_WHEELS(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xD2A0543EC400E1A5, 0xD66004>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_MODEL_VALUE(Hash vehicleModel)
	{
		return invoker::invoke<int, 0x6C6E46A097D62A34, 0xD644A0>(vehicleModel);
	}

	FORCEINLINE auto GET_VEHICLE_LAYOUT_HASH(Vehicle vehicle)
	{
		return invoker::invoke<Hash, 0x58428BC502F48C75, 0xD641AC>(vehicle);
	}

	FORCEINLINE auto GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(Vehicle vehicle, int p1)
	{
		return invoker::invoke<Hash, 0xD9DD012396E375D8, 0xD62AF0>(vehicle, p1);
	}

	FORCEINLINE auto SET_RENDER_TRAIN_AS_DERAILED(Vehicle train, BOOL toggle)
	{
		return invoker::invoke<void, 0xF66F8D9F1877E201, 0xD6A084>(train, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_EXTRA_COLOURS(Vehicle vehicle, int pearlescentColor, int wheelColor)
	{
		return invoker::invoke<void, 0xBB361D7264AC4FD8, 0xD6ACA4>(vehicle, pearlescentColor, wheelColor);
	}

	FORCEINLINE auto GET_VEHICLE_EXTRA_COLOURS(Vehicle vehicle, int* pearlescentColor, int* wheelColor)
	{
		return invoker::invoke<void, 0x741D9B0685E67684, 0xD63F90>(vehicle, pearlescentColor, wheelColor);
	}

	FORCEINLINE auto SET_VEHICLE_EXTRA_COLOUR_5(Vehicle vehicle, int color)
	{
		return invoker::invoke<void, 0xC0C8E6AAA00F1A58, 0xD6ACB8>(vehicle, color);
	}

	FORCEINLINE auto GET_VEHICLE_EXTRA_COLOUR_5(Vehicle vehicle, int* color)
	{
		return invoker::invoke<void, 0xE10BD9712D7B0CBF, 0xD63FA4>(vehicle, color);
	}

	FORCEINLINE auto SET_VEHICLE_EXTRA_COLOUR_6(Vehicle vehicle, int color)
	{
		return invoker::invoke<void, 0x77B012A683295B6E, 0xD6ACC8>(vehicle, color);
	}

	FORCEINLINE auto GET_VEHICLE_EXTRA_COLOUR_6(Vehicle vehicle, int* color)
	{
		return invoker::invoke<void, 0x4C5611B5008205EB, 0xD63FD4>(vehicle, color);
	}

	FORCEINLINE auto STOP_ALL_GARAGE_ACTIVITY()
	{
		return invoker::invoke<void, 0x7C450B28DDDE0513, 0xD6C4CC>();
	}

	FORCEINLINE auto SET_VEHICLE_FIXED(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xF698038C13845696, 0xD6ACD8>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_DEFORMATION_FIXED(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x1D1124C855316790, 0xD6A990>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_CAN_ENGINE_MISSFIRE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x76A218B79DCF8962, 0xD6A7C4>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_CAN_LEAK_OIL(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x3DACC5F7E5335AC, 0xD6A7D8>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_CAN_LEAK_PETROL(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x515A606E0E38355D, 0xD6A7EC>(vehicle, toggle);
	}

	FORCEINLINE auto SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xA6175150F92EE83B, 0xD69424>(vehicle, toggle);
	}

	FORCEINLINE auto SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x8DB4917AFAD347BC, 0xD69410>(vehicle, toggle);
	}

	FORCEINLINE auto SET_DISABLE_VEHICLE_ENGINE_FIRES(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x64134834C866AE60, 0xD693EC>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x3F413690B5A371F4, 0xD6B070>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xCA609B4171C43CE1, 0xD6B490>(vehicle, toggle);
	}

	FORCEINLINE auto SET_DISABLE_PRETEND_OCCUPANTS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xA80E7D11DB73C8BA, 0xD69394>(vehicle, toggle);
	}

	FORCEINLINE auto REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, Any p6)
	{
		return invoker::invoke<void, 0xC4BCE90F7242F354, 0xD67B98>(x1, y1, z1, x2, y2, z2, p6);
	}

	FORCEINLINE auto SET_VEHICLE_STEER_BIAS(Vehicle vehicle, float value)
	{
		return invoker::invoke<void, 0xDEABDA7736297FEB, 0xD6B44C>(vehicle, value);
	}

	FORCEINLINE auto IS_VEHICLE_EXTRA_TURNED_ON(Vehicle vehicle, int extraId)
	{
		return invoker::invoke<BOOL, 0x5318DF85BEB6B95F, 0xD65ED0>(vehicle, extraId);
	}

	FORCEINLINE auto SET_VEHICLE_EXTRA(Vehicle vehicle, int extraId, BOOL disable)
	{
		return invoker::invoke<void, 0xD772F6AA66750D2B, 0xD6AC8C>(vehicle, extraId, disable);
	}

	FORCEINLINE auto DOES_EXTRA_EXIST(Vehicle vehicle, int extraId)
	{
		return invoker::invoke<BOOL, 0x579FA5568DE0C2A0, 0xD61FC0>(vehicle, extraId);
	}

	FORCEINLINE auto IS_EXTRA_BROKEN_OFF(Vehicle vehicle, int extraId)
	{
		return invoker::invoke<BOOL, 0xFCFC8401A76A332D, 0xD6532C>(vehicle, extraId);
	}

	FORCEINLINE auto SET_CONVERTIBLE_ROOF(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0xAB2F41AC28DDBAAE, 0xD691B8>(vehicle, p1);
	}

	FORCEINLINE auto LOWER_CONVERTIBLE_ROOF(Vehicle vehicle, BOOL instantlyLower)
	{
		return invoker::invoke<void, 0x232B023FE4D977E2, 0xD667FC>(vehicle, instantlyLower);
	}

	FORCEINLINE auto RAISE_CONVERTIBLE_ROOF(Vehicle vehicle, BOOL instantlyRaise)
	{
		return invoker::invoke<void, 0xD6B15DF382A594C7, 0xD67994>(vehicle, instantlyRaise);
	}

	FORCEINLINE auto GET_CONVERTIBLE_ROOF_STATE(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x54DA32C15F7A6ABA, 0xD62670>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_A_CONVERTIBLE(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<BOOL, 0x7943BD10E2A03FAC, 0xD65DAC>(vehicle, p1);
	}

	FORCEINLINE auto TRANSFORM_TO_SUBMARINE(Vehicle vehicle, BOOL noAnimation)
	{
		return invoker::invoke<BOOL, 0x1F75BC85F714AC5A, 0xD6DCE4>(vehicle, noAnimation);
	}

	FORCEINLINE auto TRANSFORM_TO_CAR(Vehicle vehicle, BOOL noAnimation)
	{
		return invoker::invoke<void, 0x2915C7D9A225A148, 0xD6DCB4>(vehicle, noAnimation);
	}

	FORCEINLINE auto IS_VEHICLE_IN_SUBMARINE_MODE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x17556069075B5519, 0xD65F8C>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xC182FBFDE4682BA3, 0xD66194>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_DAMAGE(Vehicle vehicle, float xOffset, float yOffset, float zOffset, float damage, float radius, BOOL focusOnModel)
	{
		return invoker::invoke<void, 0x2BDD547718FF1F1A, 0xD6A8FC>(vehicle, xOffset, yOffset, zOffset, damage, radius, focusOnModel);
	}

	FORCEINLINE auto SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xF38E42DE1E8071, 0xD6B288>(vehicle, toggle);
	}

	FORCEINLINE auto GET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x4C7724D572378B05, 0xD63EF4>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle, float health)
	{
		return invoker::invoke<void, 0x2AEBE39F6BF7D6BC, 0xD6ABAC>(vehicle, health);
	}

	FORCEINLINE auto SET_PLANE_ENGINE_HEALTH(Vehicle vehicle, float health)
	{
		return invoker::invoke<void, 0x31D57F4EF7BE9F0B, 0xD69E50>(vehicle, health);
	}

	FORCEINLINE auto GET_VEHICLE_PETROL_TANK_HEALTH(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x31B58D7972181BFA, 0xD646D8>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_PETROL_TANK_HEALTH(Vehicle vehicle, float health)
	{
		return invoker::invoke<void, 0xDF9DC0584881B7AF, 0xD6B2F8>(vehicle, health);
	}

	FORCEINLINE auto IS_VEHICLE_STUCK_TIMER_UP(Vehicle vehicle, int p1, int ms)
	{
		return invoker::invoke<BOOL, 0xA24B9FF9863A909D, 0xD661DC>(vehicle, p1, ms);
	}

	FORCEINLINE auto RESET_VEHICLE_STUCK_TIMER(Vehicle vehicle, int nullAttributes)
	{
		return invoker::invoke<void, 0x3CA4868519920C8D, 0xD67E10>(vehicle, nullAttributes);
	}

	FORCEINLINE auto IS_VEHICLE_DRIVEABLE(Vehicle vehicle, BOOL isOnFireCheck)
	{
		return invoker::invoke<BOOL, 0xD9F5E1FEFD1329E4, 0xD65EA4>(vehicle, isOnFireCheck);
	}

	FORCEINLINE auto SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(Vehicle vehicle, BOOL owned)
	{
		return invoker::invoke<void, 0x983B8E72C35B01F2, 0xD6AE5C>(vehicle, owned);
	}

	FORCEINLINE auto SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x2165BE2A3E719A31, 0xD6B1B4>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x4058D9ECF3B8E2FC, 0xD6A624>(vehicle, p1);
	}

	FORCEINLINE auto SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x869AEF17062BE178, 0xD69F84>(vehicle, toggle);
	}

	FORCEINLINE auto START_VEHICLE_HORN(Vehicle vehicle, int duration, Hash mode, BOOL forever)
	{
		return invoker::invoke<void, 0xAA8884A4BB5B0167, 0xD6BBC4>(vehicle, duration, mode, forever);
	}

	FORCEINLINE auto SET_VEHICLE_IN_CAR_MOD_SHOP(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x20DA3970E29472BE, 0xD6AF84>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_HAS_STRONG_AXLES(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x5FE0938FDE9B0958, 0xD6AE84>(vehicle, toggle);
	}

	FORCEINLINE auto GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(Hash modelHash)
	{
		return invoker::invoke<const char*, 0x93E7527CFECC7CD8, 0xD6275C>(modelHash);
	}

	FORCEINLINE auto GET_MAKE_NAME_FROM_VEHICLE_MODEL(Hash modelHash)
	{
		return invoker::invoke<const char*, 0xF7AF4F159FF99F97, 0xD62E10>(modelHash);
	}

	FORCEINLINE auto GET_VEHICLE_DEFORMATION_AT_POS(Vehicle vehicle, float offsetX, float offsetY, float offsetZ)
	{
		return invoker::invoke<Vector3, 0x5A904F31991BA49, 0xD63DAC>(vehicle, offsetX, offsetY, offsetZ);
	}

	FORCEINLINE auto SET_VEHICLE_LIVERY(Vehicle vehicle, int livery)
	{
		return invoker::invoke<void, 0xA1C03303EC67320B, 0xD6B094>(vehicle, livery);
	}

	FORCEINLINE auto GET_VEHICLE_LIVERY(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xA089B04A208DBD0B, 0xD64248>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_LIVERY_COUNT(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xBA3ECE95D3094B0F, 0xD64268>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_LIVERY2(Vehicle vehicle, int livery)
	{
		return invoker::invoke<void, 0x5081B6C697A334D4, 0xD6B084>(vehicle, livery);
	}

	FORCEINLINE auto GET_VEHICLE_LIVERY2(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xE423A13CB489E307, 0xD64208>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_LIVERY2_COUNT(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xCB19A1CF94809167, 0xD64228>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_WINDOW_INTACT(Vehicle vehicle, int windowIndex)
	{
		return invoker::invoke<BOOL, 0x1D37530E5C420F5, 0xD66288>(vehicle, windowIndex);
	}

	FORCEINLINE auto ARE_ALL_VEHICLE_WINDOWS_INTACT(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xFC954C8C860FAB80, 0xD616DC>(vehicle);
	}

	FORCEINLINE auto ARE_ANY_VEHICLE_SEATS_FREE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x9C0E5FA1EBC1D84, 0xD6171C>(vehicle);
	}

	FORCEINLINE auto RESET_VEHICLE_WHEELS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xD0BABF27A11D215A, 0xD67E40>(vehicle, toggle);
	}

	FORCEINLINE auto IS_HELI_PART_BROKEN(Vehicle vehicle, BOOL p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<BOOL, 0x151B89DBEF140C19, 0xD653C4>(vehicle, p1, p2, p3);
	}

	FORCEINLINE auto GET_HELI_MAIN_ROTOR_HEALTH(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x22E252733390A9A9, 0xD62A20>(vehicle);
	}

	FORCEINLINE auto GET_HELI_TAIL_ROTOR_HEALTH(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x1F46B2A1DBF8BD25, 0xD62A68>(vehicle);
	}

	FORCEINLINE auto GET_HELI_TAIL_BOOM_HEALTH(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x4177E9034F7CFE38, 0xD62A44>(vehicle);
	}

	FORCEINLINE auto SET_HELI_MAIN_ROTOR_HEALTH(Vehicle vehicle, float health)
	{
		return invoker::invoke<void, 0x5EE5180C78E4990, 0xD697BC>(vehicle, health);
	}

	FORCEINLINE auto SET_HELI_TAIL_ROTOR_HEALTH(Vehicle vehicle, float health)
	{
		return invoker::invoke<void, 0xE0002557891C8D8C, 0xD697F4>(vehicle, health);
	}

	FORCEINLINE auto SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<BOOL, 0xF8190C7705154D4D, 0xD697E0>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_NAME_DEBUG(Vehicle vehicle, const char* name)
	{
		return invoker::invoke<void, 0xD1ED03B26BD64F6C, 0x81A1C0>(vehicle, name);
	}

	FORCEINLINE auto SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xB57A96BF24464D21, 0xD6AC30>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xA964B154E331B3E9, 0xD6AC04>(vehicle, toggle);
	}

	FORCEINLINE auto SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xB7A736A17908838D, 0xD68D64>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_DISABLE_TOWING(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x3B1F6012B676860B, 0xD6AA00>(vehicle, toggle);
	}

	FORCEINLINE auto GET_VEHICLE_HAS_LANDING_GEAR(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x8EC15ED9ECD1E9D0, 0xD6404C>(vehicle);
	}

	FORCEINLINE auto CONTROL_LANDING_GEAR(Vehicle vehicle, int state)
	{
		return invoker::invoke<void, 0xC2A036647DD761E4, 0xD61C28>(vehicle, state);
	}

	FORCEINLINE auto GET_LANDING_GEAR_STATE(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x68F7F7C5DF6717F8, 0xD62D38>(vehicle);
	}

	FORCEINLINE auto IS_ANY_VEHICLE_NEAR_POINT(float x, float y, float z, float radius)
	{
		return invoker::invoke<BOOL, 0x913602ADD2D86A7A, 0xD651B8>(x, y, z, radius);
	}

	FORCEINLINE auto REQUEST_VEHICLE_HIGH_DETAIL_MODEL(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x53152C1272227778, 0xD67D80>(vehicle);
	}

	FORCEINLINE auto _GET_VEHICLE_MODEL_NUM_DRIVE_GEARS(Hash vehicleModel)
	{
		return invoker::invoke<int, 0x61F02E4E9A7A61EA, 0xD64480>(vehicleModel);
	}

	FORCEINLINE auto _GET_VEHICLE_MAX_DRIVE_GEAR_COUNT(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x24910C3D66BA770D, 0xD642E0>(vehicle);
	}

	FORCEINLINE auto _GET_IS_VEHICLE_ELECTRIC(Hash vehicleModel)
	{
		return invoker::invoke<BOOL, 0x1FCB07FE230B6639, 0xD62C28>(vehicleModel);
	}

	FORCEINLINE auto _GET_VEHICLE_DRIVETRAIN_TYPE(Hash vehicleModel)
	{
		return invoker::invoke<int, 0x1423725069EE1D14, 0xD63E1C>(vehicleModel);
	}

	FORCEINLINE auto _GET_VEHICLE_CURRENT_DRIVE_GEAR(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x56185A25D45A0DCD, 0xD63CF4>(vehicle);
	}

	FORCEINLINE auto _GET_VEHICLE_CURRENT_REV_RATIO(Vehicle vehicle)
	{
		return invoker::invoke<float, 0xF9DDA40BC293A61E, 0xD63D24>(vehicle);
	}

	FORCEINLINE auto REMOVE_VEHICLE_HIGH_DETAIL_MODEL(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x25F4808C787100D3, 0xD67BC8>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_HIGH_DETAIL(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xB3F63B683EB1995A, 0xD65F1C>(vehicle);
	}

	FORCEINLINE auto REQUEST_VEHICLE_ASSET(Hash vehicleHash, int vehicleAsset)
	{
		return invoker::invoke<void, 0x7991957B46F22F47, 0xD67D4C>(vehicleHash, vehicleAsset);
	}

	FORCEINLINE auto HAS_VEHICLE_ASSET_LOADED(int vehicleAsset)
	{
		return invoker::invoke<BOOL, 0x16CFE70936BA84C7, 0xD64F14>(vehicleAsset);
	}

	FORCEINLINE auto REMOVE_VEHICLE_ASSET(int vehicleAsset)
	{
		return invoker::invoke<void, 0xCE41CD0179F8640B, 0xD67BB0>(vehicleAsset);
	}

	FORCEINLINE auto SET_VEHICLE_TOW_TRUCK_ARM_POSITION(Vehicle vehicle, float position)
	{
		return invoker::invoke<void, 0xF20C964ED62BD3A7, 0xD6B514>(vehicle, position);
	}

	FORCEINLINE auto _SET_ATTACHED_VEHICLE_TO_TOW_TRUCK_ARM(Vehicle towTruck, Vehicle vehicle)
	{
		return invoker::invoke<void, 0x48BD57D0DD17786A, 0xD68EB4>(towTruck, vehicle);
	}

	FORCEINLINE auto ATTACH_VEHICLE_TO_TOW_TRUCK(Vehicle towTruck, Vehicle vehicle, BOOL rear, float hookOffsetX, float hookOffsetY, float hookOffsetZ)
	{
		return invoker::invoke<void, 0xA86C8A254D6B6F40, 0xD618D4>(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ);
	}

	FORCEINLINE auto DETACH_VEHICLE_FROM_TOW_TRUCK(Vehicle towTruck, Vehicle vehicle)
	{
		return invoker::invoke<void, 0xD4BC322888F79B7E, 0xD61E90>(towTruck, vehicle);
	}

	FORCEINLINE auto DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x1750AA417BEDD270, 0xD61E5C>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(Vehicle towTruck, Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x4A64AADF9B40D2AF, 0xD65D60>(towTruck, vehicle);
	}

	FORCEINLINE auto GET_ENTITY_ATTACHED_TO_TOW_TRUCK(Vehicle towTruck)
	{
		return invoker::invoke<Entity, 0x314C37CF34534BCB, 0xD62820>(towTruck);
	}

	FORCEINLINE auto SET_VEHICLE_AUTOMATICALLY_ATTACHES(Vehicle vehicle, BOOL p1, Any p2)
	{
		return invoker::invoke<Entity, 0xDD38B2935A3EAC56, 0xD6A5FC>(vehicle, p1, p2);
	}

	FORCEINLINE auto SET_VEHICLE_BULLDOZER_ARM_POSITION(Vehicle vehicle, float position, BOOL p2)
	{
		return invoker::invoke<void, 0x741EDDC25DCDC64D, 0xD6A700>(vehicle, position, p2);
	}

	FORCEINLINE auto SET_VEHICLE_TANK_TURRET_POSITION(Vehicle vehicle, float position, BOOL p2)
	{
		return invoker::invoke<void, 0x8C3B2540B29146AA, 0xD6B4E0>(vehicle, position, p2);
	}

	FORCEINLINE auto SET_VEHICLE_TURRET_TARGET(Vehicle vehicle, BOOL p1, float x, float y, float z, BOOL p5)
	{
		return invoker::invoke<void, 0xAD263B112A654D47, 0xD6B534>(vehicle, p1, x, y, z, p5);
	}

	FORCEINLINE auto SET_VEHICLE_TANK_STATIONARY(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x9636B030D6DE5C35, 0xD6B4CC>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_TURRET_SPEED_THIS_FRAME(Vehicle vehicle, float speed)
	{
		return invoker::invoke<void, 0x17AB03DCC210B35D, 0xD6B524>(vehicle, speed);
	}

	FORCEINLINE auto DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x9A81B26B3D3B37C7, 0xD61F04>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_FLIGHT_NOZZLE_POSITION(Vehicle vehicle, float angleRatio)
	{
		return invoker::invoke<void, 0x2808DFFEC5749CCF, 0xD6ACE4>(vehicle, angleRatio);
	}

	FORCEINLINE auto SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(Vehicle vehicle, float angle)
	{
		return invoker::invoke<void, 0x33D71CD5D987771E, 0xD6ACF4>(vehicle, angle);
	}

	FORCEINLINE auto GET_VEHICLE_FLIGHT_NOZZLE_POSITION(Vehicle plane)
	{
		return invoker::invoke<float, 0xCEE6D67EEF78C2D7, 0xD64004>(plane);
	}

	FORCEINLINE auto SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xF9FC9D29B8DD92DF, 0xD69438>(vehicle, toggle);
	}

	FORCEINLINE auto GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(Vector3* outVec, Any p1, Vector3* outVec1, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
	{
		return invoker::invoke<BOOL, 0x8D6ED2284F9E6186, 0xD62404>(outVec, p1, outVec1, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto SET_VEHICLE_BURNOUT(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xDD76094F9005AA09, 0xD6A720>(vehicle, toggle);
	}

	FORCEINLINE auto IS_VEHICLE_IN_BURNOUT(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x379AF4B11FE63CAF, 0xD65F40>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_REDUCE_GRIP(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xF8EC8E90E8D24CA7, 0xD6B37C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_REDUCE_GRIP_LEVEL(Vehicle vehicle, int val)
	{
		return invoker::invoke<void, 0xFCF78891ECB409E9, 0xD6B390>(vehicle, val);
	}

	FORCEINLINE auto SET_VEHICLE_INDICATOR_LIGHTS(Vehicle vehicle, int turnSignal, BOOL toggle)
	{
		return invoker::invoke<void, 0x78004905636369DF, 0xD6AF2C>(vehicle, turnSignal, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_BRAKE_LIGHTS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xE456FB21FF21AE99, 0xD6A6B8>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_TAIL_LIGHTS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x76FD0E61CB6D5162, 0xD6B4B8>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_HANDBRAKE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xB2FD24D644A68449, 0xD6AE08>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_BRAKE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x9F571FBA7F9412D5, 0xD6A6A4>(vehicle, toggle);
	}

	FORCEINLINE auto INSTANTLY_FILL_VEHICLE_POPULATION()
	{
		return invoker::invoke<void, 0x6874AA782954505E, 0xD650D0>();
	}

	FORCEINLINE auto HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED()
	{
		return invoker::invoke<BOOL, 0xEA02634993F717CE, 0xD64DA4>();
	}

	FORCEINLINE auto NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(BOOL toggle)
	{
		return invoker::invoke<void, 0x71052C5B6562E5BD, 0xD66898>(toggle);
	}

	FORCEINLINE auto NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(int p0)
	{
		return invoker::invoke<void, 0xA4109B4CEC071346, 0xD66888>(p0);
	}

	FORCEINLINE auto GET_VEHICLE_TRAILER_VEHICLE(Vehicle vehicle, Vehicle* trailer)
	{
		return invoker::invoke<BOOL, 0x20974C28142EB370, 0xD647E0>(vehicle, trailer);
	}

	FORCEINLINE auto _GET_VEHICLE_TRAILER_PARENT_VEHICLE(Vehicle trailer)
	{
		return invoker::invoke<Vehicle, 0x5FC7CC4DB8966A85, 0xD647C0>(trailer);
	}

	FORCEINLINE auto SET_VEHICLE_USES_LARGE_REAR_RAMP(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xF651C20D31115698, 0xD6B5F0>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_RUDDER_BROKEN(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x8A86075A9E1BF05A, 0xD6B3C0>(vehicle, toggle);
	}

	FORCEINLINE auto SET_CONVERTIBLE_ROOF_LATCH_STATE(Vehicle vehicle, BOOL state)
	{
		return invoker::invoke<void, 0xC48C7879875CFB60, 0xD691CC>(vehicle, state);
	}

	FORCEINLINE auto GET_VEHICLE_ESTIMATED_MAX_SPEED(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x66C1D6E6DBF7AC9B, 0xD63F3C>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_MAX_BRAKING(Vehicle vehicle)
	{
		return invoker::invoke<float, 0xCDAF96205BABA4DC, 0xD642B0>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_MAX_TRACTION(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x122F64C5BECB5454, 0xD64340>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_ACCELERATION(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x7FAB20829167D06E, 0xD63A74>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(Hash modelHash)
	{
		return invoker::invoke<float, 0xCF85F9C6CDF5D68E, 0xD643D0>(modelHash);
	}

	FORCEINLINE auto GET_VEHICLE_MODEL_MAX_BRAKING(Hash modelHash)
	{
		return invoker::invoke<float, 0xB617B59F8F888D2A, 0xD643F4>(modelHash);
	}

	FORCEINLINE auto GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(Hash modelHash)
	{
		return invoker::invoke<float, 0xB245818227933E3A, 0xD64418>(modelHash);
	}

	FORCEINLINE auto GET_VEHICLE_MODEL_MAX_TRACTION(Hash modelHash)
	{
		return invoker::invoke<float, 0x859EED8E8B695F08, 0xD6443C>(modelHash);
	}

	FORCEINLINE auto GET_VEHICLE_MODEL_ACCELERATION(Hash modelHash)
	{
		return invoker::invoke<float, 0x1C6BE134527C543C, 0xD64388>(modelHash);
	}

	FORCEINLINE auto GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(Hash modelHash)
	{
		return invoker::invoke<float, 0xD92F8845433585F0, 0xD643AC>(modelHash);
	}

	FORCEINLINE auto GET_FLYING_VEHICLE_MODEL_AGILITY(Hash modelHash)
	{
		return invoker::invoke<float, 0x4978F96428784EA4, 0xD62924>(modelHash);
	}

	FORCEINLINE auto GET_BOAT_VEHICLE_MODEL_AGILITY(Hash modelHash)
	{
		return invoker::invoke<float, 0x25C4079E4C1D71E8, 0xD6255C>(modelHash);
	}

	FORCEINLINE auto GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(int vehicleClass)
	{
		return invoker::invoke<float, 0xF5997120A0F53CD2, 0xD63B7C>(vehicleClass);
	}

	FORCEINLINE auto GET_VEHICLE_CLASS_MAX_TRACTION(int vehicleClass)
	{
		return invoker::invoke<float, 0x2525977066141996, 0xD63C34>(vehicleClass);
	}

	FORCEINLINE auto GET_VEHICLE_CLASS_MAX_AGILITY(int vehicleClass)
	{
		return invoker::invoke<float, 0x3EFC9FBA218CD076, 0xD63BEC>(vehicleClass);
	}

	FORCEINLINE auto GET_VEHICLE_CLASS_MAX_ACCELERATION(int vehicleClass)
	{
		return invoker::invoke<float, 0x47F48D6E64EE2C11, 0xD63BC8>(vehicleClass);
	}

	FORCEINLINE auto GET_VEHICLE_CLASS_MAX_BRAKING(int vehicleClass)
	{
		return invoker::invoke<float, 0x16C1ECD6E377277D, 0xD63C10>(vehicleClass);
	}

	FORCEINLINE auto ADD_ROAD_NODE_SPEED_ZONE(float x, float y, float z, float radius, float speed, BOOL p5)
	{
		return invoker::invoke<int, 0x44589DAC2564FF02, 0xD615A0>(x, y, z, radius, speed, p5);
	}

	FORCEINLINE auto REMOVE_ROAD_NODE_SPEED_ZONE(int speedzone)
	{
		return invoker::invoke<BOOL, 0x1B3217FCFCCC3FCF, 0xD67B38>(speedzone);
	}

	FORCEINLINE auto OPEN_BOMB_BAY_DOORS(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xE2F63CAB8DDA4016, 0xD66948>(vehicle);
	}

	FORCEINLINE auto CLOSE_BOMB_BAY_DOORS(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x248319A8E9EA4DA3, 0xD61BFC>(vehicle);
	}

	FORCEINLINE auto GET_ARE_BOMB_BAY_DOORS_OPEN(Vehicle aircraft)
	{
		return invoker::invoke<BOOL, 0x94F61A08FC26ECDF, 0xD624A4>(aircraft);
	}

	FORCEINLINE auto IS_VEHICLE_SEARCHLIGHT_ON(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xC536067E456DED6C, 0xD6607C>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_SEARCHLIGHT(Vehicle heli, BOOL toggle, BOOL canBeUsedByAI)
	{
		return invoker::invoke<void, 0x130DC0384195C42E, 0xD6B3D4>(heli, toggle, canBeUsedByAI);
	}

	FORCEINLINE auto DOES_VEHICLE_HAVE_SEARCHLIGHT(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x8B8BD77BD5CC1D17, 0xD62174>(vehicle);
	}

	FORCEINLINE auto IS_ENTRY_POINT_FOR_SEAT_CLEAR(Ped ped, Vehicle vehicle, int seatIndex, BOOL side, BOOL onEnter)
	{
		return invoker::invoke<BOOL, 0x848DE0A81098ECCB, 0xD652F0>(ped, vehicle, seatIndex, side, onEnter);
	}

	FORCEINLINE auto GET_ENTRY_POINT_POSITION(Vehicle vehicle, int doorId)
	{
		return invoker::invoke<Vector3, 0x7902AD09BBD23276, 0xD62840>(vehicle, doorId);
	}

	FORCEINLINE auto CAN_SHUFFLE_SEAT(Vehicle vehicle, int seatIndex)
	{
		return invoker::invoke<BOOL, 0x2955FC7A22330E7F, 0xD61A88>(vehicle, seatIndex);
	}

	FORCEINLINE auto GET_NUM_MOD_KITS(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x90E3EAFF8AAA1A42, 0xD63090>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_MOD_KIT(Vehicle vehicle, int modKit)
	{
		return invoker::invoke<void, 0xB5AD06DDA85E2E8F, 0xD6B1A4>(vehicle, modKit);
	}

	FORCEINLINE auto GET_VEHICLE_MOD_KIT(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xA9DFDFED12311CA7, 0xD6455C>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_MOD_KIT_TYPE(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xB79F51ED32ADD424, 0xD6457C>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_WHEEL_TYPE(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x6A375D21624F9187, 0xD648BC>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_WHEEL_TYPE(Vehicle vehicle, int WheelType)
	{
		return invoker::invoke<void, 0xE33678A9AE50A01B, 0xD6B780>(vehicle, WheelType);
	}

	FORCEINLINE auto GET_NUM_MOD_COLORS(int paintType, BOOL p1)
	{
		return invoker::invoke<int, 0x2A2B5BAE280E2FFA, 0xD63068>(paintType, p1);
	}

	FORCEINLINE auto SET_VEHICLE_MOD_COLOR_1(Vehicle vehicle, int paintType, int color, int pearlescentColor)
	{
		return invoker::invoke<void, 0xA5277ECCD081FCC1, 0xD6B178>(vehicle, paintType, color, pearlescentColor);
	}

	FORCEINLINE auto SET_VEHICLE_MOD_COLOR_2(Vehicle vehicle, int paintType, int color)
	{
		return invoker::invoke<void, 0x941B1F179D6AE19A, 0xD6B190>(vehicle, paintType, color);
	}

	FORCEINLINE auto GET_VEHICLE_MOD_COLOR_1(Vehicle vehicle, int* paintType, int* color, int* pearlescentColor)
	{
		return invoker::invoke<void, 0xB8090FC59766A88C, 0xD644C0>(vehicle, paintType, color, pearlescentColor);
	}

	FORCEINLINE auto GET_VEHICLE_MOD_COLOR_2(Vehicle vehicle, int* paintType, int* color)
	{
		return invoker::invoke<void, 0x7AE5F5D5A7D0936, 0xD64500>(vehicle, paintType, color);
	}

	FORCEINLINE auto GET_VEHICLE_MOD_COLOR_1_NAME(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<const char*, 0x74CB4C4C883007E5, 0xD644D8>(vehicle, p1);
	}

	FORCEINLINE auto GET_VEHICLE_MOD_COLOR_2_NAME(Vehicle vehicle)
	{
		return invoker::invoke<const char*, 0x598200EB0DCC8A9D, 0xD64514>(vehicle);
	}

	FORCEINLINE auto HAVE_VEHICLE_MODS_STREAMED_IN(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xA7A8B7E924089F0A, 0xD65020>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_MOD_GEN9_EXCLUSIVE(Vehicle vehicle, int modType, int modIndex)
	{
		return invoker::invoke<BOOL, 0xAF82FE1B3E949337, 0xD65FD8>(vehicle, modType, modIndex);
	}

	FORCEINLINE auto SET_VEHICLE_MOD(Vehicle vehicle, int modType, int modIndex, BOOL customTires)
	{
		return invoker::invoke<void, 0x8450270DC5896D39, 0xD6B148>(vehicle, modType, modIndex, customTires);
	}

	FORCEINLINE auto GET_VEHICLE_MOD(Vehicle vehicle, int modType)
	{
		return invoker::invoke<int, 0x94C9CD3D66808551, 0xD64364>(vehicle, modType);
	}

	FORCEINLINE auto GET_VEHICLE_MOD_VARIATION(Vehicle vehicle, int modType)
	{
		return invoker::invoke<int, 0xEFDD8C5443F6C9E4, 0xD645C4>(vehicle, modType);
	}

	FORCEINLINE auto GET_NUM_VEHICLE_MODS(Vehicle vehicle, int modType)
	{
		return invoker::invoke<int, 0x5B59C12A02157D00, 0xD630C4>(vehicle, modType);
	}

	FORCEINLINE auto REMOVE_VEHICLE_MOD(Vehicle vehicle, int modType)
	{
		return invoker::invoke<void, 0xC87E4FAD00AEDD4B, 0xD67BE8>(vehicle, modType);
	}

	FORCEINLINE auto TOGGLE_VEHICLE_MOD(Vehicle vehicle, int modType, BOOL toggle)
	{
		return invoker::invoke<void, 0xF5501FF9869DAC7C, 0xD6DC78>(vehicle, modType, toggle);
	}

	FORCEINLINE auto IS_TOGGLE_MOD_ON(Vehicle vehicle, int modType)
	{
		return invoker::invoke<BOOL, 0x1D5A665629D417A7, 0xD65CC4>(vehicle, modType);
	}

	FORCEINLINE auto GET_MOD_TEXT_LABEL(Vehicle vehicle, int modType, int modValue)
	{
		return invoker::invoke<const char*, 0x1340575A0EEE0622, 0xD62EFC>(vehicle, modType, modValue);
	}

	FORCEINLINE auto GET_MOD_SLOT_NAME(Vehicle vehicle, int modType)
	{
		return invoker::invoke<const char*, 0x4A81F937A270775, 0xD62ED8>(vehicle, modType);
	}

	FORCEINLINE auto GET_LIVERY_NAME(Vehicle vehicle, int liveryIndex)
	{
		return invoker::invoke<const char*, 0x48C57B247498FD02, 0xD62DB8>(vehicle, liveryIndex);
	}

	FORCEINLINE auto GET_VEHICLE_MOD_MODIFIER_VALUE(Vehicle vehicle, int modType, int modIndex)
	{
		return invoker::invoke<int, 0x648F2586F927249D, 0xD6459C>(vehicle, modType, modIndex);
	}

	FORCEINLINE auto GET_VEHICLE_MOD_IDENTIFIER_HASH(Vehicle vehicle, int modType, int modIndex)
	{
		return invoker::invoke<Hash, 0xC90C649EB3EB4B1B, 0xD64534>(vehicle, modType, modIndex);
	}

	FORCEINLINE auto PRELOAD_VEHICLE_MOD(Vehicle vehicle, int modType, int modIndex)
	{
		return invoker::invoke<void, 0x714EDA9C467D9D0A, 0xD678E4>(vehicle, modType, modIndex);
	}

	FORCEINLINE auto HAS_PRELOAD_MODS_FINISHED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x3AACF4E05C1E40E0, 0xD64E8C>(vehicle);
	}

	FORCEINLINE auto RELEASE_PRELOAD_MODS(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xFB54FC989415871E, 0xD67A18>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_TYRE_SMOKE_COLOR(Vehicle vehicle, int r, int g, int b)
	{
		return invoker::invoke<void, 0x5DA0536AEAD1FF31, 0xD6B590>(vehicle, r, g, b);
	}

	FORCEINLINE auto GET_VEHICLE_TYRE_SMOKE_COLOR(Vehicle vehicle, int* r, int* g, int* b)
	{
		return invoker::invoke<void, 0x9D35AABAEE206518, 0xD6482C>(vehicle, r, g, b);
	}

	FORCEINLINE auto SET_VEHICLE_WINDOW_TINT(Vehicle vehicle, int tint)
	{
		return invoker::invoke<void, 0xFE620ED8E0A3C209, 0xD6B7B8>(vehicle, tint);
	}

	FORCEINLINE auto GET_VEHICLE_WINDOW_TINT(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xDA63CE76F9AAB439, 0xD648DC>(vehicle);
	}

	FORCEINLINE auto GET_NUM_VEHICLE_WINDOW_TINTS()
	{
		return invoker::invoke<int, 0xAC574D1AAC70DD29, 0xD630E8>();
	}

	FORCEINLINE auto GET_VEHICLE_COLOR(Vehicle vehicle, int* r, int* g, int* b)
	{
		return invoker::invoke<void, 0x8D3F11438EEDD7D2, 0xD63C58>(vehicle, r, g, b);
	}

	FORCEINLINE auto GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xEEBEB450F9417D7F, 0xD63C84>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_CAUSE_OF_DESTRUCTION(Vehicle vehicle)
	{
		return invoker::invoke<Hash, 0xC713B16D0F5FBF9D, 0xD63B30>(vehicle);
	}

	FORCEINLINE auto OVERRIDE_PLANE_DAMAGE_THREHSOLD(Vehicle vehicle, float health)
	{
		return invoker::invoke<void, 0x9DBF1E37DC1A1F46, 0xD6699C>(vehicle, health);
	}

	FORCEINLINE auto _SET_TRANSMISSION_REDUCED_GEAR_RATIO(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x337EF33DA3DDB990, 0xD6A464>(vehicle, toggle);
	}

	FORCEINLINE auto _GET_VEHICLE_DESIRED_DRIVE_GEAR(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xFD8CE53356B5D745, 0xD63DFC>(vehicle);
	}

	FORCEINLINE auto GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xB4A09397270CB974, 0xD62B60>(vehicle);
	}

	FORCEINLINE auto GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x8046513BC06BFBC, 0xD62BAC>(vehicle);
	}

	FORCEINLINE auto GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xADBCF06C9348EEF5, 0xD62594>(vehicle);
	}

	FORCEINLINE auto MODIFY_VEHICLE_TOP_SPEED(Vehicle vehicle, float value)
	{
		return invoker::invoke<void, 0xAC89BB42FE09CC80, 0xD6685C>(vehicle, value);
	}

	FORCEINLINE auto SET_VEHICLE_MAX_SPEED(Vehicle vehicle, float speed)
	{
		return invoker::invoke<void, 0x8E9B5F00B41A9F8C, 0xD6B104>(vehicle, speed);
	}

	FORCEINLINE auto SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x336AED9579B3D098, 0xD6B428>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x30415B9FFAC70D2C, 0xD6A574>(vehicle, p1);
	}

	FORCEINLINE auto SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(Vehicle vehicle, BOOL toggle, float p2)
	{
		return invoker::invoke<void, 0x61D3E6830FEE218E, 0xD69B70>(vehicle, toggle, p2);
	}

	FORCEINLINE auto ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6)
	{
		return invoker::invoke<int, 0x6C3C28979C693FF6, 0xD615E0>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(int p0)
	{
		return invoker::invoke<void, 0x2C2F55254DC331B0, 0xD67BBC>(p0);
	}

	FORCEINLINE auto IS_ANY_PED_RAPPELLING_FROM_HELI(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x7B94DA9EDB63B904, 0xD65194>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_CHEAT_POWER_INCREASE(Vehicle vehicle, float value)
	{
		return invoker::invoke<void, 0xF1C985BBEC6B6321, 0xD6A838>(vehicle, value);
	}

	FORCEINLINE auto SET_VEHICLE_INFLUENCES_WANTED_LEVEL(Any p0, BOOL p1)
	{
		return invoker::invoke<void, 0xAA588DD56719AE3A, 0xD6AF5C>(p0, p1);
	}

	FORCEINLINE auto SET_VEHICLE_IS_WANTED(Vehicle vehicle, BOOL state)
	{
		return invoker::invoke<void, 0xDC05A8A020E60C86, 0xD6AFF4>(vehicle, state);
	}

	FORCEINLINE auto SWING_BOAT_BOOM_TO_RATIO(Vehicle vehicle, float ratio)
	{
		return invoker::invoke<void, 0x53E0C0174C1459B3, 0xD6C64C>(vehicle, ratio);
	}

	FORCEINLINE auto SWING_BOAT_BOOM_FREELY(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x501C6124BE36E301, 0xD6C638>(vehicle, toggle);
	}

	FORCEINLINE auto ALLOW_BOAT_BOOM_TO_ANIMATE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x76D20C5FEC8EC7F1, 0xD6C638>(vehicle, toggle);
	}

	FORCEINLINE auto GET_BOAT_BOOM_POSITION_RATIO(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x57C35460B8069979, 0xD62538>(vehicle);
	}

	FORCEINLINE auto DISABLE_PLANE_AILERON(Vehicle vehicle, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xEB808E35861B8782, 0xD61EC4>(vehicle, p1, p2);
	}

	FORCEINLINE auto GET_IS_VEHICLE_ENGINE_RUNNING(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x182BD9AD1675B5DE, 0xD62C4C>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_USE_ALTERNATE_HANDLING(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x6E97FD533F10FC5C, 0xD6B630>(vehicle, toggle);
	}

	FORCEINLINE auto SET_BIKE_ON_STAND(Vehicle vehicle, float x, float y)
	{
		return invoker::invoke<void, 0xD3B9FE5F9C40C8B5, 0xD68EF0>(vehicle, x, y);
	}

	FORCEINLINE auto SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x9BC299A7D57D7CAA, 0xD6B208>(vehicle, p1);
	}

	FORCEINLINE auto LOCK_DOORS_WHEN_NO_LONGER_NEEDED(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x5A78FA8C86A9587A, 0xD667F0>(vehicle);
	}

	FORCEINLINE auto SET_LAST_DRIVEN_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xC9BBB26582F3058A, 0xD69944>(vehicle);
	}

	FORCEINLINE auto GET_LAST_DRIVEN_VEHICLE()
	{
		return invoker::invoke<Vehicle, 0x1D25F777D0165BF3, 0xD62D58>();
	}

	FORCEINLINE auto CLEAR_LAST_DRIVEN_VEHICLE()
	{
		return invoker::invoke<void, 0x5314C41B6FA61336, 0xD61B24>();
	}

	FORCEINLINE auto SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xE8EF17ECD68C900D, 0xD6AE48>(vehicle, toggle);
	}

	FORCEINLINE auto SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(Vehicle plane, int height)
	{
		return invoker::invoke<void, 0x1B8AC60684718568, 0xD6A390>(plane, height);
	}

	FORCEINLINE auto SET_VEHICLE_LOD_MULTIPLIER(Vehicle vehicle, float multiplier)
	{
		return invoker::invoke<void, 0xB344489A3C5FFBBB, 0xD6B0A4>(vehicle, multiplier);
	}

	FORCEINLINE auto SET_VEHICLE_CAN_SAVE_IN_GARAGE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xC13B5C4CC421EA79, 0xD6A800>(vehicle, toggle);
	}

	FORCEINLINE auto GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x4FD9D8C197FF8A52, 0xD646B8>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xD5AA1C942B6D68DD, 0xD64698>(vehicle);
	}

	FORCEINLINE auto SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(Any p0, BOOL p1)
	{
		return invoker::invoke<void, 0xA7C024F5E73C2EE0, 0xD69670>(p0, p1);
	}

	FORCEINLINE auto SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x6A59D337CB7DD7E0, 0xD6AD90>(vehicle, toggle);
	}

	FORCEINLINE auto COPY_VEHICLE_DAMAGES(Vehicle sourceVehicle, Vehicle targetVehicle)
	{
		return invoker::invoke<void, 0xF9639F1B33AF0EF8, 0xD61C5C>(sourceVehicle, targetVehicle);
	}

	FORCEINLINE auto DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS()
	{
		return invoker::invoke<void, 0x5CB3E2A3FC6B7543, 0xD61EFC>();
	}

	FORCEINLINE auto SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(float distance)
	{
		return invoker::invoke<void, 0x1BE70491AADA5F80, 0xD69968>(distance);
	}

	FORCEINLINE auto SET_VEHICLE_SHOOT_AT_TARGET(Ped driver, Entity entity, float xTarget, float yTarget, float zTarget)
	{
		return invoker::invoke<void, 0xD2A388162B1121E3, 0xD6B3F0>(driver, entity, xTarget, yTarget, zTarget);
	}

	FORCEINLINE auto GET_VEHICLE_LOCK_ON_TARGET(Vehicle vehicle, Entity* entity)
	{
		return invoker::invoke<BOOL, 0xE5EF4685EE5EF675, 0xD64288>(vehicle, entity);
	}

	FORCEINLINE auto SET_FORCE_HD_VEHICLE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x2814BEDF5E0AF4C0, 0xD69648>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(Vehicle vehicle, float p1)
	{
		return invoker::invoke<void, 0x5D97A268AAF6B6AB, 0xD6A8BC>(vehicle, p1);
	}

	FORCEINLINE auto GET_VEHICLE_PLATE_TYPE(Vehicle vehicle)
	{
		return invoker::invoke<int, 0xA42AC01E0317ED99, 0xD646FC>(vehicle);
	}

	FORCEINLINE auto TRACK_VEHICLE_VISIBILITY(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x8FBF79AC214E3747, 0xD6DC90>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_VISIBLE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x4F7C7E268667C7B3, 0xD66238>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_GRAVITY(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x666DF5A2D9B9C2DF, 0xD6ADF4>(vehicle, toggle);
	}

	FORCEINLINE auto SET_ENABLE_VEHICLE_SLIPSTREAMING(BOOL toggle)
	{
		return invoker::invoke<void, 0x312DFD78768FEAA0, 0xD69584>(toggle);
	}

	FORCEINLINE auto SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(BOOL toggle)
	{
		return invoker::invoke<void, 0xF5DE2508EEBD1684, 0xD6B418>(toggle);
	}

	FORCEINLINE auto GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x8A278879AFDDD37B, 0xD63D48>(vehicle);
	}

	FORCEINLINE auto IS_VEHICLE_PRODUCING_SLIP_STREAM(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x69347FDCD85BCA24, 0xD6604C>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_INACTIVE_DURING_PLAYBACK(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x905AE697A8F8A694, 0xD6AF18>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_ACTIVE_DURING_PLAYBACK(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xF2FCE3F2F4D0CB50, 0xD6A518>(vehicle, toggle);
	}

	FORCEINLINE auto IS_VEHICLE_SPRAYABLE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xE61689C28FFE2DAF, 0xD66118>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_ENGINE_CAN_DEGRADE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xF9DF73BCBDB93008, 0xD6AB98>(vehicle, toggle);
	}

	FORCEINLINE auto DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(Vehicle vehicle, int p1, int p2)
	{
		return invoker::invoke<void, 0xFB9F77A8FFB0897E, 0xD61EE8>(vehicle, p1, p2);
	}

	FORCEINLINE auto ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x43AF47D2A857D51A, 0xD62220>(vehicle);
	}

	FORCEINLINE auto IS_PLANE_LANDING_GEAR_INTACT(Vehicle plane)
	{
		return invoker::invoke<BOOL, 0x61F41693A4648B46, 0xD6587C>(plane);
	}

	FORCEINLINE auto ARE_PLANE_PROPELLERS_INTACT(Vehicle plane)
	{
		return invoker::invoke<BOOL, 0x7C1AFBB397B1066E, 0xD617B4>(plane);
	}

	FORCEINLINE auto SET_PLANE_PROPELLER_HEALTH(Vehicle plane, float health)
	{
		return invoker::invoke<BOOL, 0x6C0C380EEAAFA7E3, 0xD69E60>(plane, health);
	}

	FORCEINLINE auto SET_VEHICLE_CAN_DEFORM_WHEELS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x1E00EF437AE43BB8, 0xD6A784>(vehicle, toggle);
	}

	FORCEINLINE auto IS_VEHICLE_STOLEN(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xFDA2576D37032738, 0xD6613C>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_IS_STOLEN(Vehicle vehicle, BOOL isStolen)
	{
		return invoker::invoke<void, 0xD37CA6D6F8993BB9, 0xD6AFC0>(vehicle, isStolen);
	}

	FORCEINLINE auto SET_PLANE_TURBULENCE_MULTIPLIER(Vehicle vehicle, float multiplier)
	{
		return invoker::invoke<void, 0x540E1993D47EAF4B, 0xD69E98>(vehicle, multiplier);
	}

	FORCEINLINE auto ARE_WINGS_OF_PLANE_INTACT(Vehicle plane)
	{
		return invoker::invoke<BOOL, 0x287065449969E42F, 0xD617D8>(plane);
	}

	FORCEINLINE auto ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xCD01772CECE254A3, 0x81A1C0>(vehicle);
	}

	FORCEINLINE auto DETACH_VEHICLE_FROM_CARGOBOB(Vehicle vehicle, Vehicle cargobob)
	{
		return invoker::invoke<void, 0x84448CC61691D994, 0xD61E80>(vehicle, cargobob);
	}

	FORCEINLINE auto DETACH_VEHICLE_FROM_ANY_CARGOBOB(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x9A2C1A81F938D584, 0xD61E38>(vehicle);
	}

	FORCEINLINE auto DETACH_ENTITY_FROM_CARGOBOB(Vehicle cargobob, Entity entity)
	{
		return invoker::invoke<BOOL, 0x9CF923758A7DEF91, 0xD61E28>(cargobob, entity);
	}

	FORCEINLINE auto IS_VEHICLE_ATTACHED_TO_CARGOBOB(Vehicle cargobob, Vehicle vehicleAttached)
	{
		return invoker::invoke<BOOL, 0x4160C3716329E630, 0xD65D38>(cargobob, vehicleAttached);
	}

	FORCEINLINE auto GET_VEHICLE_ATTACHED_TO_CARGOBOB(Vehicle cargobob)
	{
		return invoker::invoke<Vehicle, 0x79FCDCFB75A2E31B, 0xD63A98>(cargobob);
	}

	FORCEINLINE auto GET_ENTITY_ATTACHED_TO_CARGOBOB(Any p0)
	{
		return invoker::invoke<Entity, 0xA60E0FC9E433408C, 0xD62800>(p0);
	}

	FORCEINLINE auto ATTACH_VEHICLE_TO_CARGOBOB(Vehicle cargobob, Vehicle vehicle, int p2, float x, float y, float z)
	{
		return invoker::invoke<void, 0x47B74B49AC74FAF4, 0xD618BC>(cargobob, vehicle, p2, x, y, z);
	}

	FORCEINLINE auto ATTACH_ENTITY_TO_CARGOBOB(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<void, 0x129361AA74CBB732, 0xD6186C>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(Vehicle cargobob, BOOL toggle)
	{
		return invoker::invoke<void, 0xA205F1BC1E1E70CF, 0xD69034>(cargobob, toggle);
	}

	FORCEINLINE auto SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x9E3907AACB2EE9A3, 0xD69014>(p0, p1);
	}

	FORCEINLINE auto CAN_CARGOBOB_PICK_UP_ENTITY(Any p0, Any p1)
	{
		return invoker::invoke<BOOL, 0xC7654AAAA57E8D28, 0xD61A60>(p0, p1);
	}

	FORCEINLINE auto GET_ATTACHED_PICK_UP_HOOK_POSITION(Vehicle cargobob)
	{
		return invoker::invoke<Vector3, 0xA22032FB8CF69F27, 0xD624C8>(cargobob);
	}

	FORCEINLINE auto DOES_CARGOBOB_HAVE_PICK_UP_ROPE(Vehicle cargobob)
	{
		return invoker::invoke<BOOL, 0x93EBA5A2C85D82E7, 0xD61F9C>(cargobob);
	}

	FORCEINLINE auto CREATE_PICK_UP_ROPE_FOR_CARGOBOB(Vehicle cargobob, int state)
	{
		return invoker::invoke<void, 0xD0E90E9B5A87913E, 0xD61D1C>(cargobob, state);
	}

	FORCEINLINE auto REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(Vehicle cargobob)
	{
		return invoker::invoke<void, 0x22697BCF9D7EB9FF, 0xD67B24>(cargobob);
	}

	FORCEINLINE auto SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(Vehicle cargobob, float length1, float length2, BOOL p3)
	{
		return invoker::invoke<void, 0x17B5AACACF266B6A, 0xD69E18>(cargobob, length1, length2, p3);
	}

	FORCEINLINE auto SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x907862D7EED879DE, 0xD69E38>(p0, p1, p2);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x88A79760AFFC278F, 0xD690FC>(p0, p1);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_ROPE_TYPE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xAA54E339BD273E82, 0xD6910C>(p0, p1);
	}

	FORCEINLINE auto DOES_CARGOBOB_HAVE_PICKUP_MAGNET(Vehicle cargobob)
	{
		return invoker::invoke<BOOL, 0x55250754D66E3652, 0xD61F78>(cargobob);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(Vehicle cargobob, BOOL isActive)
	{
		return invoker::invoke<void, 0x279E935A91EF72DA, 0xD69048>(cargobob, isActive);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(Vehicle cargobob, float strength)
	{
		return invoker::invoke<void, 0x8E7F0FC0E58A6331, 0xD690EC>(cargobob, strength);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(Vehicle cargobob, float p1)
	{
		return invoker::invoke<void, 0x24FDC1440EEAE053, 0xD69070>(cargobob, p1);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(Vehicle cargobob, float p1)
	{
		return invoker::invoke<void, 0xAF22CCA1763E6B1F, 0xD690B0>(cargobob, p1);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(Vehicle cargobob, float p1)
	{
		return invoker::invoke<void, 0xEBF4A581695418A5, 0xD690A0>(cargobob, p1);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(Vehicle cargobob, float p1)
	{
		return invoker::invoke<void, 0x99B282132C4AB6DA, 0xD69090>(cargobob, p1);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(Vehicle vehicle, float p1)
	{
		return invoker::invoke<void, 0x529A57C2E61B1345, 0xD69080>(vehicle, p1);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(Vehicle vehicle, Vehicle cargobob)
	{
		return invoker::invoke<void, 0x9E33FC86B0212DAB, 0xD690DC>(vehicle, cargobob);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(Vehicle vehicle, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x57F9AA96B2E7702A, 0xD690C0>(vehicle, p1, p2);
	}

	FORCEINLINE auto SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x220D7AA717CC835C, 0xD6905C>(vehicle, p1);
	}

	FORCEINLINE auto DOES_VEHICLE_HAVE_WEAPONS(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x3665875382B5AB69, 0xD621BC>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0xB0EBCEBA08F63848, 0xD6B7A4>(vehicle, p1);
	}

	FORCEINLINE auto DISABLE_VEHICLE_WEAPON(BOOL disabled, Hash weaponHash, Vehicle vehicle, Ped owner)
	{
		return invoker::invoke<void, 0x267A7225DAF1CD41, 0xD61F10>(disabled, weaponHash, vehicle, owner);
	}

	FORCEINLINE auto IS_VEHICLE_WEAPON_DISABLED(Hash weaponHash, Vehicle vehicle, Ped owner)
	{
		return invoker::invoke<BOOL, 0x27058ECA3C640709, 0xD6625C>(weaponHash, vehicle, owner);
	}

	FORCEINLINE auto SET_VEHICLE_USED_FOR_PILOT_SCHOOL(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x43176180326D6988, 0xD6B5BC>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x8AFDFB10F32CB1A8, 0xD6A52C>(vehicle, toggle);
	}

	FORCEINLINE auto GET_VEHICLE_CLASS(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x5506AFBD6056C05F, 0xD63B5C>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_CLASS_FROM_NAME(Hash modelHash)
	{
		return invoker::invoke<int, 0xE074F21A4084FD1F, 0xD63BA8>(modelHash);
	}

	FORCEINLINE auto SET_PLAYERS_LAST_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xE3A0299C9DEE59C8, 0xD69F04>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xD0794C48F637F16C, 0xD6A748>(vehicle, toggle);
	}

	FORCEINLINE auto SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(Vehicle vehicle, float p1)
	{
		return invoker::invoke<void, 0x97FB44DEA703EB10, 0xD68D2C>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x9E62B9416FD53EBA, 0xD6AB84>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xC0DB690A927487AE, 0xD6B008>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_IMPATIENCE_TIMER(Vehicle vehicle, Any p1)
	{
		return invoker::invoke<void, 0x740CB8455C25DD1C, 0xD6AEEC>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_HANDLING_OVERRIDE(Vehicle vehicle, Hash hash)
	{
		return invoker::invoke<void, 0x753758951C769A4A, 0xD6AE1C>(vehicle, hash);
	}

	FORCEINLINE auto SET_VEHICLE_EXTENDED_REMOVAL_RANGE(Vehicle vehicle, int range)
	{
		return invoker::invoke<void, 0x8C1172B230F4EB1A, 0xD6AC64>(vehicle, range);
	}

	FORCEINLINE auto SET_VEHICLE_STEERING_BIAS_SCALAR(Any p0, float p1)
	{
		return invoker::invoke<void, 0xDC3F37138B82ACCA, 0xD6B43C>(p0, p1);
	}

	FORCEINLINE auto SET_HELI_CONTROL_LAGGING_RATE_SCALAR(Vehicle helicopter, float multiplier)
	{
		return invoker::invoke<void, 0x348B16EB27AA1C60, 0xD697AC>(helicopter, multiplier);
	}

	FORCEINLINE auto SET_VEHICLE_FRICTION_OVERRIDE(Vehicle vehicle, float friction)
	{
		return invoker::invoke<void, 0xF5E7FBE3D9D9BC24, 0xD6AD4C>(vehicle, friction);
	}

	FORCEINLINE auto SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x7300EAE2F99BE3B7, 0xD6B74C>(vehicle, toggle);
	}

	FORCEINLINE auto ARE_PLANE_CONTROL_PANELS_INTACT(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<BOOL, 0xE5ECA5B21BBFA1E5, 0xD61788>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_CEILING_HEIGHT(Vehicle vehicle, float height)
	{
		return invoker::invoke<void, 0x5F7FDF6769E8DD84, 0xD6A828>(vehicle, height);
	}

	FORCEINLINE auto SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xDDBBC2472DA87217, 0xD6B21C>(vehicle, toggle);
	}

	FORCEINLINE auto CLEAR_VEHICLE_ROUTE_HISTORY(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xD2B08CD9D81655CE, 0xD61BF0>(vehicle);
	}

	FORCEINLINE auto DOES_VEHICLE_EXIST_WITH_DECORATOR(const char* decorator)
	{
		return invoker::invoke<Vehicle, 0x824A2D0AB16C9E1A, 0xD62130>(decorator);
	}

	FORCEINLINE auto SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x863A048DC4DBB2FE, 0xD6A588>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_EXCLUSIVE_DRIVER(Vehicle vehicle, Ped ped, int index)
	{
		return invoker::invoke<void, 0x630992D07A32281B, 0xD6ABF0>(vehicle, ped, index);
	}

	FORCEINLINE auto IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(Ped ped, Vehicle vehicle, int* outIndex)
	{
		return invoker::invoke<BOOL, 0x4877F2B0D2101BDE, 0xD6569C>(ped, vehicle, outIndex);
	}

	FORCEINLINE auto DISABLE_INDIVIDUAL_PLANE_PROPELLER(Vehicle vehicle, int propeller)
	{
		return invoker::invoke<void, 0x36746293A73925EB, 0xD61EB4>(vehicle, propeller);
	}

	FORCEINLINE auto SET_VEHICLE_FORCE_AFTERBURNER(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xA43283449133E803, 0xD6AD04>(vehicle, toggle);
	}

	FORCEINLINE auto SET_DONT_PROCESS_VEHICLE_GLASS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xE0ACB5BC9D603F02, 0xD694B0>(vehicle, toggle);
	}

	FORCEINLINE auto SET_DISABLE_WANTED_CONES_RESPONSE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xAEC7FB421829031C, 0xD6944C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xB6D03E3DBCAF727F, 0xD6A4E0>(vehicle, toggle);
	}

	FORCEINLINE auto SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(Vehicle vehicle, float p1)
	{
		return invoker::invoke<void, 0x8D12590141B620B3, 0xD68E84>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_READY_FOR_CLEANUP(Any p0)
	{
		return invoker::invoke<void, 0xDB3813D934CC6718, 0xD6B35C>(p0);
	}

	FORCEINLINE auto SET_DISTANT_CARS_ENABLED(BOOL toggle)
	{
		return invoker::invoke<void, 0x40124D3C22E7C332, 0xD69488>(toggle);
	}

	FORCEINLINE auto SET_VEHICLE_NEON_COLOUR(Vehicle vehicle, int r, int g, int b)
	{
		return invoker::invoke<void, 0xEAB8A43F6621850F, 0xD6B1C8>(vehicle, r, g, b);
	}

	FORCEINLINE auto SET_VEHICLE_NEON_INDEX_COLOUR(Vehicle vehicle, int index)
	{
		return invoker::invoke<void, 0x44612E772F9312E9, 0xD6B1F8>(vehicle, index);
	}

	FORCEINLINE auto GET_VEHICLE_NEON_COLOUR(Vehicle vehicle, int* r, int* g, int* b)
	{
		return invoker::invoke<void, 0x64FEACF0AD019F1F, 0xD645E8>(vehicle, r, g, b);
	}

	FORCEINLINE auto SET_VEHICLE_NEON_ENABLED(Vehicle vehicle, int index, BOOL toggle)
	{
		return invoker::invoke<void, 0xE62930EC6FAABCA5, 0xD6B1E0>(vehicle, index, toggle);
	}

	FORCEINLINE auto GET_VEHICLE_NEON_ENABLED(Vehicle vehicle, int index)
	{
		return invoker::invoke<BOOL, 0xF1B79038130E3C08, 0xD64600>(vehicle, index);
	}

	FORCEINLINE auto SET_AMBIENT_VEHICLE_NEON_ENABLED(BOOL p0)
	{
		return invoker::invoke<void, 0xCD06D7490DF9B6BA, 0xD68DB4>(p0);
	}

	FORCEINLINE auto SUPPRESS_NEONS_ON_VEHICLE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xBDCFCDA63931E498, 0xD6C60C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_DISABLE_SUPERDUMMY(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x1AA970FDD6C143E2, 0xD693C8>(vehicle, p1);
	}

	FORCEINLINE auto REQUEST_VEHICLE_DIAL(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x4C8F181F63537DD2, 0xD67D5C>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_BODY_HEALTH(Vehicle vehicle)
	{
		return invoker::invoke<float, 0x3B5692CB240DBC2F, 0xD63AB8>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_BODY_HEALTH(Vehicle vehicle, float value)
	{
		return invoker::invoke<void, 0x3E7E7AD923FD91A7, 0xD6A664>(vehicle, value);
	}

	FORCEINLINE auto GET_VEHICLE_SIZE(Vehicle vehicle, Vector3* out1, Vector3* out2)
	{
		return invoker::invoke<void, 0xB07407B3B153C760, 0xD64740>(vehicle, out1, out2);
	}

	FORCEINLINE auto GET_FAKE_SUSPENSION_LOWERING_AMOUNT(Vehicle vehicle)
	{
		return invoker::invoke<float, 0xF7553BA24C0AB0B2, 0xD62900>(vehicle);
	}

	FORCEINLINE auto SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(float multiplier)
	{
		return invoker::invoke<void, 0x3511D41891789DA6, 0xD69144>(multiplier);
	}

	FORCEINLINE auto GET_NUMBER_OF_VEHICLE_DOORS(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x860632F4716956DF, 0xD63028>(vehicle);
	}

	FORCEINLINE auto SET_HYDRAULICS_CONTROL(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x2B773DB19587707D, 0xD6983C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_CAN_ADJUST_GROUND_CLEARANCE(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x30825986EF0F9E48, 0xD68FAC>(vehicle, p1);
	}

	FORCEINLINE auto GET_VEHICLE_HEALTH_PERCENTAGE(Vehicle vehicle, float maxEngineHealth, float maxPetrolTankHealth, float maxBodyHealth, float maxMainRotorHealth, float maxTailRotorHealth, float maxUnkHealth)
	{
		return invoker::invoke<float, 0xA9EDF0DFAF70EAD4, 0xD64094>(vehicle, maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth);
	}

	FORCEINLINE auto GET_VEHICLE_IS_MERCENARY(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x97CDBE6B72277F6A, 0xD64188>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0xA7F7529CFB6F1EA7, 0xD6A6CC>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_KERS_ALLOWED(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xF629ED9089543196, 0xD6B01C>(vehicle, toggle);
	}

	FORCEINLINE auto GET_VEHICLE_HAS_KERS(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xF548473734CBB33B, 0xD64028>(vehicle);
	}

	FORCEINLINE auto SET_PLANE_RESIST_TO_EXPLOSION(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x3DCEE0B40D1FEC94, 0xD69E70>(vehicle, toggle);
	}

	FORCEINLINE auto SET_HELI_RESIST_TO_EXPLOSION(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xCA2403168E81B9CB, 0xD697CC>(vehicle, toggle);
	}

	FORCEINLINE auto SET_DISABLE_BMX_EXTRA_TRICK_FORCES(Any p0)
	{
		return invoker::invoke<void, 0xB65B0A6A52A484B5, 0xD692C4>(p0);
	}

	FORCEINLINE auto SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(Vehicle vehicle, int wheelId, float value)
	{
		return invoker::invoke<void, 0x987D0FA30D602B0, 0xD69850>(vehicle, wheelId, value);
	}

	FORCEINLINE auto GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(Vehicle vehicle, int wheelId)
	{
		return invoker::invoke<float, 0xB9E9F6A235CE5516, 0xD62A8C>(vehicle, wheelId);
	}

	FORCEINLINE auto SET_CAN_USE_HYDRAULICS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x6B64B565F7C0BE14, 0xD69000>(vehicle, toggle);
	}

	FORCEINLINE auto SET_HYDRAULIC_VEHICLE_STATE(Vehicle vehicle, int state)
	{
		return invoker::invoke<void, 0xA15CBF61198EE519, 0xD69864>(vehicle, state);
	}

	FORCEINLINE auto SET_HYDRAULIC_WHEEL_STATE(Vehicle vehicle, int wheelId, int state, float value, Any p4)
	{
		return invoker::invoke<void, 0x640BC0200CE90880, 0xD69874>(vehicle, wheelId, state, value, p4);
	}

	FORCEINLINE auto HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(Any p0, Any p1)
	{
		return invoker::invoke<BOOL, 0xB8E85A4A8536807D, 0xD64F68>(p0, p1);
	}

	FORCEINLINE auto CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x60D610F2649E805B, 0xD61BDC>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_BOBBLEHEAD_VELOCITY(float x, float y, float p2)
	{
		return invoker::invoke<void, 0x5F6C263433E7851E, 0xD6A658>(x, y, p2);
	}

	FORCEINLINE auto GET_VEHICLE_IS_DUMMY(Any p0)
	{
		return invoker::invoke<BOOL, 0x38779AA6147A1831, 0xD64164>(p0);
	}

	FORCEINLINE auto SET_VEHICLE_DAMAGE_SCALE(Vehicle vehicle, float p1)
	{
		return invoker::invoke<BOOL, 0x271D0AA5ADF266EA, 0xD6A930>(vehicle, p1);
	}

	FORCEINLINE auto SET_VEHICLE_WEAPON_DAMAGE_SCALE(Vehicle vehicle, float multiplier)
	{
		return invoker::invoke<BOOL, 0x7442AD74A851EC7B, 0xD6B6F4>(vehicle, multiplier);
	}

	FORCEINLINE auto SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(Any p0, Any p1)
	{
		return invoker::invoke<BOOL, 0x793D2505EE281DDD, 0xD692D4>(p0, p1);
	}

	FORCEINLINE auto SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xAF324DD73DD8C045, 0xD6B604>(p0, p1);
	}

	FORCEINLINE auto SET_BIKE_EASY_TO_LAND(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x77950FC099D3FB4D, 0xD68EC4>(vehicle, toggle);
	}

	FORCEINLINE auto SET_INVERT_VEHICLE_CONTROLS(Vehicle vehicle, BOOL state)
	{
		return invoker::invoke<void, 0x784F0E1BBD6301B6, 0xD698F4>(vehicle, state);
	}

	FORCEINLINE auto SET_SPEED_BOOST_EFFECT_DISABLED(BOOL disabled)
	{
		return invoker::invoke<void, 0x42B109962C4D43EC, 0xD6A228>(disabled);
	}

	FORCEINLINE auto SET_SLOW_DOWN_EFFECT_DISABLED(BOOL disabled)
	{
		return invoker::invoke<void, 0xA158DF97B623950, 0xD6A1E4>(disabled);
	}

	FORCEINLINE auto SET_FORMATION_LEADER(Vehicle vehicle, float x, float y, float z, float p4)
	{
		return invoker::invoke<void, 0x5E0F6A0ED51BB6A8, 0xD69694>(vehicle, x, y, z, p4);
	}

	FORCEINLINE auto RESET_FORMATION_LEADER()
	{
		return invoker::invoke<void, 0xDFF07C5495BDA6ED, 0xD67DEC>();
	}

	FORCEINLINE auto GET_IS_BOAT_CAPSIZED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x656463C707D8CCC9, 0xD62B14>(vehicle);
	}

	FORCEINLINE auto SET_ALLOW_RAMMING_SOOP_OR_RAMP(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xF977D20CFFFD341F, 0xD68D3C>(p0, p1);
	}

	FORCEINLINE auto SET_SCRIPT_RAMP_IMPULSE_SCALE(Vehicle vehicle, float impulseScale)
	{
		return invoker::invoke<void, 0xABCBEEA1CC0701DC, 0xD6A110>(vehicle, impulseScale);
	}

	FORCEINLINE auto GET_IS_DOOR_VALID(Vehicle vehicle, int doorId)
	{
		return invoker::invoke<BOOL, 0xB3E28598CA656061, 0xD62B38>(vehicle, doorId);
	}

	FORCEINLINE auto SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(Vehicle vehicle, float seconds)
	{
		return invoker::invoke<void, 0x3088D7B1F0BD8975, 0xD6A140>(vehicle, seconds);
	}

	FORCEINLINE auto GET_HAS_ROCKET_BOOST(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xA03728CC57F6DD36, 0xD629C8>(vehicle);
	}

	FORCEINLINE auto IS_ROCKET_BOOST_ACTIVE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x772683F12F46CE82, 0xD65940>(vehicle);
	}

	FORCEINLINE auto SET_ROCKET_BOOST_ACTIVE(Vehicle vehicle, BOOL active)
	{
		return invoker::invoke<void, 0x5B29AF88D03CEB7A, 0xD6A0A4>(vehicle, active);
	}

	FORCEINLINE auto GET_HAS_RETRACTABLE_WHEELS(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xBFDFDBE09E616B61, 0xD629A4>(vehicle);
	}

	FORCEINLINE auto GET_IS_WHEELS_RETRACTED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x7F90FF957E7FF50A, 0xD62D14>(vehicle);
	}

	FORCEINLINE auto SET_WHEELS_EXTENDED_INSTANTLY(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xAB4E52390141B4E7, 0xD6B8C4>(vehicle);
	}

	FORCEINLINE auto SET_WHEELS_RETRACTED_INSTANTLY(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xC61B49A4C6C60411, 0xD6B8D0>(vehicle);
	}

	FORCEINLINE auto GET_CAR_HAS_JUMP(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x9D019545E8C959C6, 0xD625F0>(vehicle);
	}

	FORCEINLINE auto SET_USE_HIGHER_CAR_JUMP(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x5191631D395FDE9C, 0xD6A504>(vehicle, toggle);
	}

	FORCEINLINE auto SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xA133EF296C37D6E6, 0xD6918C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_WEAPON_RESTRICTED_AMMO(Vehicle vehicle, int weaponIndex, int capacity)
	{
		return invoker::invoke<void, 0x5951A2AB1DF37E03, 0xD6B724>(vehicle, weaponIndex, capacity);
	}

	FORCEINLINE auto GET_VEHICLE_WEAPON_RESTRICTED_AMMO(Vehicle vehicle, int weaponIndex)
	{
		return invoker::invoke<int, 0x73C3D75DAC71F876, 0xD64898>(vehicle, weaponIndex);
	}

	FORCEINLINE auto GET_VEHICLE_HAS_PARACHUTE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x1A1A32EC5122B4F0, 0xD64070>(vehicle);
	}

	FORCEINLINE auto GET_VEHICLE_CAN_DEPLOY_PARACHUTE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x5B82466A71C4A9CD, 0xD63B0C>(vehicle);
	}

	FORCEINLINE auto VEHICLE_START_PARACHUTING(Vehicle vehicle, BOOL active)
	{
		return invoker::invoke<void, 0xDCD94B3260CB762C, 0xD6DE54>(vehicle, active);
	}

	FORCEINLINE auto IS_VEHICLE_PARACHUTE_DEPLOYED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x385CCC1DF7554BE9, 0xD66028>(vehicle);
	}

	FORCEINLINE auto VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x9F0B86B670233A83, 0xD6DE40>(vehicle, toggle);
	}

	FORCEINLINE auto VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x9CAB1193A04940AC, 0xD6DDFC>(p0, p1);
	}

	FORCEINLINE auto VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xDCCC8272AEA5EA2C, 0xD6DDE8>(p0, p1);
	}

	FORCEINLINE auto VEHICLE_SET_JET_WASH_FORCE_ENABLED(Any p0)
	{
		return invoker::invoke<void, 0x528A16ECF4B7B5A6, 0xD6DE10>(p0);
	}

	FORCEINLINE auto SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x1A144C0743BF5890, 0xD6B6C8>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(BOOL toggle)
	{
		return invoker::invoke<void, 0xBC4F3DBA48761D9A, 0xD6B644>(toggle);
	}

	FORCEINLINE auto _SET_VEHICLE_USE_HORN_BUTTON_FOR_NITROUS(BOOL toggle)
	{
		return invoker::invoke<void, 0x1980F68872CC2C3D, 0xD6B678>(toggle);
	}

	FORCEINLINE auto VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(Vehicle vehicle, Hash modelHash)
	{
		return invoker::invoke<void, 0x85F0DD9B2A310950, 0xD6DE20>(vehicle, modelHash);
	}

	FORCEINLINE auto VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(Vehicle vehicle, int textureVariation)
	{
		return invoker::invoke<void, 0xB51B6AC3785890FE, 0xD6DE30>(vehicle, textureVariation);
	}

	FORCEINLINE auto VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(Any p0, Any p1)
	{
		return invoker::invoke<int, 0x63CDE093822E42C4, 0xCCE8A8>(p0, p1);
	}

	FORCEINLINE auto VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(Any p0, Any p1)
	{
		return invoker::invoke<int, 0xB2EEF26FE11993BB, 0xCCE8A8>(p0, p1);
	}

	FORCEINLINE auto VEHICLE_SET_OVERRIDE_SIDE_RATIO(Any p0, Any p1)
	{
		return invoker::invoke<int, 0x8AF1D691BC007513, 0xCCE8A8>(p0, p1);
	}

	FORCEINLINE auto GET_ALL_VEHICLES(Any* vehsStruct)
	{
		return invoker::invoke<int, 0xD308D56EF4A935A, 0xD62434>(vehsStruct);
	}

	FORCEINLINE auto SET_CARGOBOB_EXTA_PICKUP_RANGE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x72BECCF4B829522E, 0xD69024>(p0, p1);
	}

	FORCEINLINE auto SET_OVERRIDE_VEHICLE_DOOR_TORQUE(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x66E3AAFACE2D1EB8, 0xD69AEC>(p0, p1, p2);
	}

	FORCEINLINE auto SET_WHEELIE_ENABLED(Vehicle vehicle, BOOL enabled)
	{
		return invoker::invoke<void, 0x1312DDD8385AEE4E, 0xD6B898>(vehicle, enabled);
	}

	FORCEINLINE auto SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xEDBC8405B3895CC9, 0xD69334>(p0, p1);
	}

	FORCEINLINE auto SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(Vehicle vehicle, float value)
	{
		return invoker::invoke<void, 0x26E13D440E7F6064, 0xD69300>(vehicle, value);
	}

	FORCEINLINE auto SET_TRAILER_ATTACHMENT_ENABLED(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x2FA2494B47FDD009, 0xD6A3B4>(p0, p1);
	}

	FORCEINLINE auto SET_ROCKET_BOOST_FILL(Vehicle vehicle, float percentage)
	{
		return invoker::invoke<void, 0xFEB2DDED3509562E, 0xD6A0B8>(vehicle, percentage);
	}

	FORCEINLINE auto SET_GLIDER_ACTIVE(Vehicle vehicle, BOOL state)
	{
		return invoker::invoke<void, 0x544996C0081ABDEB, 0xD696E8>(vehicle, state);
	}

	FORCEINLINE auto SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(Vehicle vehicle, BOOL shouldReset)
	{
		return invoker::invoke<void, 0x78CEEE41F49F421F, 0xD6A1D0>(vehicle, shouldReset);
	}

	FORCEINLINE auto SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(Vehicle vehicle, BOOL disable)
	{
		return invoker::invoke<void, 0xAF60E6A2936F982A, 0xD6A9D8>(vehicle, disable);
	}

	FORCEINLINE auto SET_GROUND_EFFECT_REDUCES_DRAG(BOOL toggle)
	{
		return invoker::invoke<void, 0x430A7631A84C9BE7, 0xD69730>(toggle);
	}

	FORCEINLINE auto SET_DISABLE_MAP_COLLISION(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x75627043C6AA90AD, 0xD6935C>(vehicle);
	}

	FORCEINLINE auto SET_DISABLE_PED_STAND_ON_TOP(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x8235F1BEAD557629, 0xD69368>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_DAMAGE_SCALES(Vehicle vehicle, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x9640E30A7F395E4B, 0xD6A960>(vehicle, p1, p2, p3, p4);
	}

	FORCEINLINE auto SET_PLANE_SECTION_DAMAGE_SCALE(Vehicle vehicle, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xBBB9A7A8FFE931B, 0xD69E84>(vehicle, p1, p2);
	}

	FORCEINLINE auto SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x94A68DA412C4007D, 0xD69788>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_BOMB_AMMO(Vehicle vehicle, int bombCount)
	{
		return invoker::invoke<void, 0x8955FB58835651A2, 0xD6A674>(vehicle, bombCount);
	}

	FORCEINLINE auto GET_VEHICLE_BOMB_AMMO(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x87CB58CAE436D6A5, 0xD63ADC>(vehicle);
	}

	FORCEINLINE auto SET_VEHICLE_COUNTERMEASURE_AMMO(Vehicle vehicle, int counterMeasureCount)
	{
		return invoker::invoke<void, 0xEC0CBF0E037FEEB0, 0xD6A88C>(vehicle, counterMeasureCount);
	}

	FORCEINLINE auto GET_VEHICLE_COUNTERMEASURE_AMMO(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x61B116A4C9C5B984, 0xD63CC4>(vehicle);
	}

	FORCEINLINE auto SET_HELI_COMBAT_OFFSET(Vehicle vehicle, float x, float y, float z)
	{
		return invoker::invoke<void, 0x57EE251558A8A187, 0xD6979C>(vehicle, x, y, z);
	}

	FORCEINLINE auto GET_CAN_VEHICLE_BE_PLACED_HERE(Vehicle vehicle, float x, float y, float z, float rotX, float rotY, float rotZ, int p7, Any p8)
	{
		return invoker::invoke<BOOL, 0x685A7D56318EFE6D, 0xD625B8>(vehicle, x, y, z, rotX, rotY, rotZ, p7, p8);
	}

	FORCEINLINE auto SET_DISABLE_AUTOMATIC_CRASH_TASK(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x3423BC61BC6BD401, 0xD692B0>(vehicle, toggle);
	}

	FORCEINLINE auto SET_SPECIAL_FLIGHT_MODE_RATIO(Vehicle vehicle, float ratio)
	{
		return invoker::invoke<void, 0xE70F79BDFCB8B4BC, 0xD6A208>(vehicle, ratio);
	}

	FORCEINLINE auto SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(Vehicle vehicle, float targetRatio)
	{
		return invoker::invoke<void, 0x7F3C8FDDAE1D6311, 0xD6A218>(vehicle, targetRatio);
	}

	FORCEINLINE auto SET_SPECIAL_FLIGHT_MODE_ALLOWED(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x16EB4EEDAA5416C4, 0xD6A1F4>(vehicle, toggle);
	}

	FORCEINLINE auto SET_DISABLE_HOVER_MODE_FLIGHT(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x2C97F1F248685957, 0xD69348>(vehicle, toggle);
	}

	FORCEINLINE auto GET_OUTRIGGERS_DEPLOYED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xCC986802D9AE877E, 0xD630FC>(vehicle);
	}

	FORCEINLINE auto FIND_SPAWN_COORDINATES_FOR_HELI(Ped ped)
	{
		return invoker::invoke<Vector3, 0x67896C7A4066E42E, 0xD622F8>(ped);
	}

	FORCEINLINE auto SET_DEPLOY_FOLDING_WINGS(Vehicle vehicle, BOOL deploy, BOOL p2)
	{
		return invoker::invoke<void, 0x89D51606F3FCA194, 0xD69230>(vehicle, deploy, p2);
	}

	FORCEINLINE auto ARE_FOLDING_WINGS_DEPLOYED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xA347DA69520FE64A, 0xD61740>(vehicle);
	}

	FORCEINLINE auto _SET_DEPLOY_MISSILE_BAYS(Vehicle vehicle, BOOL deploy)
	{
		return invoker::invoke<void, 0xC02468829E4AA65, 0xD6924C>(vehicle, deploy);
	}

	FORCEINLINE auto _ARE_MISSILE_BAYS_DEPLOYED(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xEA4743874D515F13, 0xD61764>(vehicle);
	}

	FORCEINLINE auto SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xD1E561A4621971E, 0xD6927C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_TURRET_HIDDEN(Vehicle vehicle, int index, BOOL toggle)
	{
		return invoker::invoke<void, 0x6405F9D3DF61E127, 0xD6A478>(vehicle, index, toggle);
	}

	FORCEINLINE auto SET_HOVER_MODE_WING_RATIO(Vehicle vehicle, float ratio)
	{
		return invoker::invoke<void, 0x3D82B1EAD5216876, 0xD6982C>(vehicle, ratio);
	}

	FORCEINLINE auto SET_DISABLE_TURRET_MOVEMENT(Vehicle vehicle, int turretId)
	{
		return invoker::invoke<void, 0xF2B6BC6177886AEF, 0xD693DC>(vehicle, turretId);
	}

	FORCEINLINE auto SET_FORCE_FIX_LINK_MATRICES(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xD7AF89E96BDD636E, 0xD69628>(vehicle);
	}

	FORCEINLINE auto SET_TRANSFORM_RATE_FOR_ANIMATION(Vehicle vehicle, float transformRate)
	{
		return invoker::invoke<void, 0xC2AA11D47F8C5153, 0xD6A440>(vehicle, transformRate);
	}

	FORCEINLINE auto SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xF2C91BA157882B97, 0xD6A450>(vehicle, toggle);
	}

	FORCEINLINE auto SET_VEHICLE_COMBAT_MODE(BOOL toggle)
	{
		return invoker::invoke<void, 0xBE2B7EEE635434FF, 0x81A1C0>(toggle);
	}

	FORCEINLINE auto SET_VEHICLE_DETONATION_MODE(BOOL toggle)
	{
		return invoker::invoke<void, 0xC9544020DFE34A9C, 0x81A1C0>(toggle);
	}

	FORCEINLINE auto SET_VEHICLE_SHUNT_ON_STICK(BOOL toggle)
	{
		return invoker::invoke<void, 0xBE32015EBE87354, 0x81A1C0>(toggle);
	}

	FORCEINLINE auto GET_IS_VEHICLE_SHUNTING(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0xF26071F4CBA82B4D, 0xD62CCC>(vehicle);
	}

	FORCEINLINE auto GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x57C7BFB65495FB1A, 0xD629FC>(vehicle);
	}

	FORCEINLINE auto GET_LAST_SHUNT_VEHICLE(Vehicle vehicle)
	{
		return invoker::invoke<Vehicle, 0xC4DBC6C793A97252, 0xD62D98>(vehicle);
	}

	FORCEINLINE auto SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(BOOL toggle)
	{
		return invoker::invoke<void, 0xB3AB0B43CABD4F3E, 0xD69400>(toggle);
	}

	FORCEINLINE auto SET_OVERRIDE_NITROUS_LEVEL(Vehicle vehicle, BOOL toggle, float level, float power, float rechargeTime, BOOL disableSound)
	{
		return invoker::invoke<void, 0x8D6D4EB2FFE77CB3, 0xD69A78>(vehicle, toggle, level, power, rechargeTime, disableSound);
	}

	FORCEINLINE auto SET_NITROUS_IS_ACTIVE(Vehicle vehicle, BOOL enabled)
	{
		return invoker::invoke<void, 0x465EEA70AF251045, 0xD69A18>(vehicle, enabled);
	}

	FORCEINLINE auto _SET_OVERRIDE_TRACTION_LOSS_MULTIPLIER(Vehicle vehicle, float modifier)
	{
		return invoker::invoke<void, 0xAFD262ACCA64479A, 0xD69ABC>(vehicle, modifier);
	}

	FORCEINLINE auto _SET_DRIFT_SLIP_ANGLE_LIMITS(Vehicle vehicle, float durationScalar, float amplitudeScalar, float slipAngleLimit)
	{
		return invoker::invoke<void, 0xDAF4C98C18AC6F06, 0xD694F4>(vehicle, durationScalar, amplitudeScalar, slipAngleLimit);
	}

	FORCEINLINE auto _SET_MINIMUM_TIME_BETWEEN_GEAR_SHIFTS(Vehicle vehicle, int time)
	{
		return invoker::invoke<void, 0x16CFBC5E7EB32861, 0xD69990>(vehicle, time);
	}

	FORCEINLINE auto FULLY_CHARGE_NITROUS(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x1A2BCC8C636F9226, 0xD623E0>(vehicle);
	}

	FORCEINLINE auto _GET_REMAINING_NITROUS_DURATION(Vehicle vehicle)
	{
		return invoker::invoke<float, 0xBEC4B8653462450E, 0xD63680>(vehicle);
	}

	FORCEINLINE auto IS_NITROUS_ACTIVE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x491E822B2C464FE4, 0xD655D4>(vehicle);
	}

	FORCEINLINE auto CLEAR_NITROUS(Vehicle vehicle)
	{
		return invoker::invoke<void, 0xC889AE921400E1ED, 0xD61B2C>(vehicle);
	}

	FORCEINLINE auto SET_INCREASE_WHEEL_CRUSH_DAMAGE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xEB7247ECF9313934, 0xD698B4>(vehicle, toggle);
	}

	FORCEINLINE auto SET_DISABLE_WEAPON_BLADE_FORCES(BOOL toggle)
	{
		return invoker::invoke<void, 0x4F80CD41C0C6F1E3, 0xD69478>(toggle);
	}

	FORCEINLINE auto SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(BOOL toggle)
	{
		return invoker::invoke<void, 0x7619E49E996C8A15, 0xD6A4F4>(toggle);
	}

	FORCEINLINE auto GET_DOES_VEHICLE_HAVE_TOMBSTONE(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x583536248E014455, 0xD627A0>(vehicle);
	}

	FORCEINLINE auto HIDE_TOMBSTONE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x8EA0917E9BF68ABF, 0xD65090>(vehicle, toggle);
	}

	FORCEINLINE auto APPLY_EMP_EFFECT(Vehicle vehicle)
	{
		return invoker::invoke<void, 0x249249D74F813EB2, 0xD616B8>(vehicle);
	}

	FORCEINLINE auto GET_IS_VEHICLE_DISABLED_BY_EMP(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x81A129E894BD7138, 0xD62BF8>(vehicle);
	}

	FORCEINLINE auto SET_DISABLE_RETRACTING_WEAPON_BLADES(BOOL toggle)
	{
		return invoker::invoke<void, 0x946CF11741899D4C, 0xD693B8>(toggle);
	}

	FORCEINLINE auto GET_TYRE_HEALTH(Vehicle vehicle, int wheelIndex)
	{
		return invoker::invoke<float, 0x2F800AD09C30EAFF, 0xD63A10>(vehicle, wheelIndex);
	}

	FORCEINLINE auto SET_TYRE_HEALTH(Vehicle vehicle, int wheelIndex, float health)
	{
		return invoker::invoke<void, 0x8110C3A5371AD12D, 0xD6A490>(vehicle, wheelIndex, health);
	}

	FORCEINLINE auto GET_TYRE_WEAR_RATE(Vehicle vehicle, int wheelIndex)
	{
		return invoker::invoke<float, 0xA62C98856A88DC66, 0xD63A34>(vehicle, wheelIndex);
	}

	FORCEINLINE auto SET_TYRE_WEAR_RATE(Vehicle vehicle, int wheelIndex, float multiplier)
	{
		return invoker::invoke<void, 0x10F7F8057FDFEF58, 0xD6A4B8>(vehicle, wheelIndex, multiplier);
	}

	FORCEINLINE auto SET_TYRE_WEAR_RATE_SCALE(Vehicle vehicle, int wheelIndex, float multiplier)
	{
		return invoker::invoke<void, 0x7FFAD424E930B802, 0xD6A4CC>(vehicle, wheelIndex, multiplier);
	}

	FORCEINLINE auto SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(Vehicle vehicle, int wheelIndex, float multiplier)
	{
		return invoker::invoke<void, 0x5442E3C4F8176CE7, 0xD6A4A4>(vehicle, wheelIndex, multiplier);
	}

	FORCEINLINE auto SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(Vehicle vehicle, int p1)
	{
		return invoker::invoke<void, 0xDA9A20F41B1D3C1B, 0xD68D18>(vehicle, p1);
	}

	FORCEINLINE auto SET_REDUCED_SUSPENSION_FORCE(Vehicle vehicle, BOOL enable)
	{
		return invoker::invoke<void, 0xCE2ADF354D3F97AE, 0xD6A030>(vehicle, enable);
	}

	FORCEINLINE auto SET_DRIFT_TYRES(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x519F76A38952BBD0, 0xD69510>(vehicle, toggle);
	}

	FORCEINLINE auto GET_DRIFT_TYRES_SET(Vehicle vehicle)
	{
		return invoker::invoke<BOOL, 0x4497678941C27E46, 0xD627D0>(vehicle);
	}

	FORCEINLINE auto NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0xB5FFFF9010AEF80, 0xD668CC>(vehicle, toggle);
	}

	FORCEINLINE auto SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(Vehicle vehicle, BOOL p1)
	{
		return invoker::invoke<void, 0x6A9E89C17033E79E, 0xD69158>(vehicle, p1);
	}

	FORCEINLINE auto _SET_ALLOW_COLLISION_WHEN_IN_VEHICLE(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x27D27223E8EF22ED, 0xD68D50>(vehicle, toggle);
	}

	FORCEINLINE auto _IS_VEHICLE_GEN9_EXCLUSIVE_MODEL(Hash vehicleModel)
	{
		return invoker::invoke<BOOL, 0x6638C0F19DE692FE, 0xD65EF8>(vehicleModel);
	}

	FORCEINLINE auto _GET_VEHICLE_MAX_EXHAUST_BONE_COUNT()
	{
		return invoker::invoke<int, 0x3EE18B00CD86C54F, 0xD642D4>();
	}

	FORCEINLINE auto _GET_VEHICLE_EXHAUST_BONE(Vehicle vehicle, int index, int* boneIndex, BOOL* axisX)
	{
		return invoker::invoke<BOOL, 0xE728F090D538CB18, 0xD63F60>(vehicle, index, boneIndex, axisX);
	}

}
namespace LOADINGSCREEN
{
	FORCEINLINE auto LOBBY_AUTO_MULTIPLAYER_MENU()
	{
		return invoker::invoke<BOOL, 0x8EE7901EEE84F67E, 0xCCE8A8>();
	}

	FORCEINLINE auto LOBBY_AUTO_MULTIPLAYER_FREEMODE()
	{
		return invoker::invoke<BOOL, 0xA7D416B098808337, 0xD1A8DC>();
	}

	FORCEINLINE auto LOBBY_SET_AUTO_MULTIPLAYER(BOOL toggle)
	{
		return invoker::invoke<void, 0xD0DC425AC19B966E, 0xD1A924>(toggle);
	}

	FORCEINLINE auto LOBBY_AUTO_MULTIPLAYER_EVENT()
	{
		return invoker::invoke<BOOL, 0x7B661ACC29FA795E, 0xD1A8C0>();
	}

	FORCEINLINE auto LOBBY_SET_AUTO_MULTIPLAYER_EVENT(BOOL toggle)
	{
		return invoker::invoke<void, 0x7F2A9FAB60E93DB0, 0xD1A934>(toggle);
	}

	FORCEINLINE auto LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB()
	{
		return invoker::invoke<BOOL, 0xE90EEDCA654B46A9, 0xD1A8F8>();
	}

	FORCEINLINE auto LOBBY_SET_AUTO_MP_RANDOM_JOB(BOOL toggle)
	{
		return invoker::invoke<void, 0x8191C51F9DD9189D, 0xD1A914>(toggle);
	}

	FORCEINLINE auto SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(BOOL toggle)
	{
		return invoker::invoke<void, 0x994B0E18137346ED, 0xD1F314>(toggle);
	}

}
namespace EVENT
{
	FORCEINLINE auto SET_DECISION_MAKER(Ped ped, Hash name)
	{
		return invoker::invoke<void, 0x26FA2603829F9CF9, 0xA75588>(ped, name);
	}

	FORCEINLINE auto CLEAR_DECISION_MAKER_EVENT_RESPONSE(Hash name, int eventType)
	{
		return invoker::invoke<void, 0xA0952DE8943B17C, 0xA6ED60>(name, eventType);
	}

	FORCEINLINE auto BLOCK_DECISION_MAKER_EVENT(Hash name, int eventType)
	{
		return invoker::invoke<void, 0x7A4EC4F532D19DFA, 0xA6E964>(name, eventType);
	}

	FORCEINLINE auto UNBLOCK_DECISION_MAKER_EVENT(Hash name, int eventType)
	{
		return invoker::invoke<void, 0x6E32AA16336291E4, 0xA775A0>(name, eventType);
	}

	FORCEINLINE auto ADD_SHOCKING_EVENT_AT_POSITION(int eventType, float x, float y, float z, float duration)
	{
		return invoker::invoke<int, 0x18B384412B836744, 0xA6E28C>(eventType, x, y, z, duration);
	}

	FORCEINLINE auto ADD_SHOCKING_EVENT_FOR_ENTITY(int eventType, Entity entity, float duration)
	{
		return invoker::invoke<int, 0x378DEB95883BFE01, 0xA6E2B4>(eventType, entity, duration);
	}

	FORCEINLINE auto IS_SHOCKING_EVENT_IN_SPHERE(int eventType, float x, float y, float z, float radius)
	{
		return invoker::invoke<BOOL, 0xD633AC6AD3D4D297, 0xA73B70>(eventType, x, y, z, radius);
	}

	FORCEINLINE auto REMOVE_SHOCKING_EVENT(ScrHandle event)
	{
		return invoker::invoke<BOOL, 0x6E8A7BB566D1F7AF, 0xA7486C>(event);
	}

	FORCEINLINE auto REMOVE_ALL_SHOCKING_EVENTS(BOOL p0)
	{
		return invoker::invoke<void, 0xEAFAA716662898B8, 0xA74738>(p0);
	}

	FORCEINLINE auto REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS()
	{
		return invoker::invoke<void, 0x8113594C36A951EF, 0xA74890>();
	}

	FORCEINLINE auto SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME()
	{
		return invoker::invoke<void, 0xE33015D5CE800786, 0xA77228>();
	}

	FORCEINLINE auto SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(int eventType)
	{
		return invoker::invoke<void, 0x75043178E34E4D3C, 0xA77230>(eventType);
	}

	FORCEINLINE auto SUPPRESS_AGITATION_EVENTS_NEXT_FRAME()
	{
		return invoker::invoke<void, 0x00, 0xA7721C>();
	}

}
namespace MONEY
{
	FORCEINLINE auto NETWORK_INITIALIZE_CASH(int wallet, int bank)
	{
		return invoker::invoke<void, 0x68E9DB185164504F, 0xD1BAD8>(wallet, bank);
	}

	FORCEINLINE auto NETWORK_DELETE_CHARACTER(int characterSlot, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x2147F6D06CE70F1B, 0xD1ADCC>(characterSlot, p1, p2);
	}

	FORCEINLINE auto NETWORK_MANUAL_DELETE_CHARACTER(int characterSlot)
	{
		return invoker::invoke<void, 0x17137CFD42927BA, 0xD1BAE8>(characterSlot);
	}

	FORCEINLINE auto NETWORK_GET_PLAYER_IS_HIGH_EARNER()
	{
		return invoker::invoke<BOOL, 0xFEC8CAEC2F9A60B5, 0xD1B99C>();
	}

	FORCEINLINE auto NETWORK_CLEAR_CHARACTER_WALLET(int characterSlot)
	{
		return invoker::invoke<void, 0x8DAD1FB87B248966, 0xD1AD78>(characterSlot);
	}

	FORCEINLINE auto NETWORK_GIVE_PLAYER_JOBSHARE_CASH(int amount, Any* gamerHandle)
	{
		return invoker::invoke<void, 0x463EA8B3DD0A6567, 0xD1BAC8>(amount, gamerHandle);
	}

	FORCEINLINE auto NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(int value, Any* gamerHandle)
	{
		return invoker::invoke<void, 0x648740220EDDB123, 0xD1BB64>(value, gamerHandle);
	}

	FORCEINLINE auto NETWORK_CAN_SHARE_JOB_CASH()
	{
		return invoker::invoke<BOOL, 0x411B5B7270967776, 0xD1ABE0>();
	}

	FORCEINLINE auto NETWORK_REFUND_CASH(int index, const char* context, const char* reason, BOOL p3)
	{
		return invoker::invoke<void, 0x9CBD6E7B088910A1, 0xD1BB74>(index, context, reason, p3);
	}

	FORCEINLINE auto NETWORK_DEDUCT_CASH(int amount, const char* p1, const char* p2, BOOL p3, BOOL p4, BOOL p5)
	{
		return invoker::invoke<void, 0x565823C8D4F7B64D, 0xD1AD8C>(amount, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto NETWORK_MONEY_CAN_BET(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x98F030F49971616, 0xD1BAF4>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_CAN_BET(int amount)
	{
		return invoker::invoke<BOOL, 0xB0490531FD3DC629, 0xD1AB6C>(amount);
	}

	FORCEINLINE auto NETWORK_CASINO_CAN_BET(Hash hash)
	{
		return invoker::invoke<BOOL, 0xA737C76A9908948A, 0xD1ACE0>(hash);
	}

	FORCEINLINE auto NETWORK_CASINO_CAN_BET_PVC()
	{
		return invoker::invoke<BOOL, 0xC585DDBDB453BF48, 0xD1AD28>();
	}

	FORCEINLINE auto NETWORK_CASINO_CAN_BET_AMOUNT(Any p0)
	{
		return invoker::invoke<BOOL, 0xA27607CE04D875E6, 0xD1AD04>(p0);
	}

	FORCEINLINE auto NETWORK_CASINO_CAN_BUY_CHIPS_PVC()
	{
		return invoker::invoke<BOOL, 0xDA91B00799F1223C, 0xD1AD28>();
	}

	FORCEINLINE auto NETWORK_CASINO_BUY_CHIPS(int p0, int p1)
	{
		return invoker::invoke<BOOL, 0x265D164F770DA9AB, 0xD1ACB8>(p0, p1);
	}

	FORCEINLINE auto NETWORK_CASINO_SELL_CHIPS(int p0, int p1)
	{
		return invoker::invoke<BOOL, 0x273A6B01207A9FE5, 0xD1AD50>(p0, p1);
	}

	FORCEINLINE auto NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE()
	{
		return invoker::invoke<void, 0xFC6FC18CC3214743, 0x81A1C0>();
	}

	FORCEINLINE auto CAN_PAY_AMOUNT_TO_BOSS(int p0, int p1, int amount, int* p3)
	{
		return invoker::invoke<BOOL, 0x6B3C9FC090DA905D, 0xD17958>(p0, p1, amount, p3);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_PICKUP(int amount)
	{
		return invoker::invoke<void, 0x1D8AF8B06B2F7D3A, 0xD1B438>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_CASHING_OUT(int amount)
	{
		return invoker::invoke<void, 0xD96CCBEFF9394523, 0xD1B290>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_GANGATTACK_PICKUP(int amount)
	{
		return invoker::invoke<void, 0xEAC14C370D2B9D5C, 0xD1B344>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_ASSASSINATE_TARGET_KILLED(int amount)
	{
		return invoker::invoke<void, 0xEEE7837FC8CEDEDF, 0xD1AEBC>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_ROB_ARMORED_CARS(int amount)
	{
		return invoker::invoke<void, 0xAA3D72C5CCFC8EF3, 0xD1B464>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_CRATE_DROP(int amount)
	{
		return invoker::invoke<void, 0xDB31E3DCD4EC4157, 0xD1B2D4>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_BETTING(int amount, const char* p1)
	{
		return invoker::invoke<void, 0xEEF9D0725B6BE1E9, 0xD1B230>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_JOB(int amount, const char* p1)
	{
		return invoker::invoke<void, 0x429D9B81D13F3456, 0xD1B38C>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_JOBX2(int amount, const char* p1)
	{
		return invoker::invoke<void, 0x1B850AB8481A78C9, 0xD1B39C>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_PREMIUM_JOB(int amount, const char* p1)
	{
		return invoker::invoke<void, 0xCFDC32D2EF467A52, 0xD1B444>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_BEND_JOB(int amount, const char* heistHash)
	{
		return invoker::invoke<void, 0x31F0EC70888E1490, 0xD1B220>(amount, heistHash);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_CHALLENGE_WIN(Any p0, Any* p1, BOOL p2)
	{
		return invoker::invoke<void, 0x736F26192289EEBB, 0xD1B29C>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_BOUNTY(int amount, Any* gamerHandle, Any* p2, Any p3)
	{
		return invoker::invoke<void, 0xFED8EC9FDD58021A, 0xD1B240>(amount, gamerHandle, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_IMPORT_EXPORT(int amount, Hash modelHash)
	{
		return invoker::invoke<void, 0x4D10D49AEE7C9AEA, 0xD1B36C>(amount, modelHash);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_HOLDUPS(int amount)
	{
		return invoker::invoke<void, 0xC972841F26BA2800, 0xD1B360>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_PROPERTY(int amount, Hash propertyName)
	{
		return invoker::invoke<void, 0x817A1EC3448E9FF1, 0xD1B454>(amount, propertyName);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_AI_TARGET_KILL(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x830CE9F43780AC92, 0xD1B1FC>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_NOT_BADSPORT(int amount)
	{
		return invoker::invoke<void, 0x190378368BE7EFF3, 0xD1B3D0>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_VEHICLE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7)
	{
		return invoker::invoke<void, 0xC547D1E965980C5, 0xD1B4B4>(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_PERSONAL_VEHICLE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8)
	{
		return invoker::invoke<void, 0xD374BF034B7E27F3, 0xD1B3DC>(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_DAILY_OBJECTIVES(int amount, const char* type, int characterSlot)
	{
		return invoker::invoke<void, 0xE36D9E1EDE0E76B4, 0xD1B304>(amount, type, characterSlot);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_AMBIENT_JOB(int p0, const char* p1, Any* p2)
	{
		return invoker::invoke<void, 0x237E99388DCA3CEF, 0xD1B20C>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_JOB_BONUS(Any p0, Any* p1, Any* p2)
	{
		return invoker::invoke<void, 0xFD5431F2DAC6AD75, 0xD1B3AC>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x30EE7ED666906E6A, 0xD1B2E0>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_HEIST_AWARD(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x2AF3C8E8D2120D10, 0xD1B5F0>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_FIRST_TIME_BONUS(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x4247915DE1F30269, 0xD1B18C>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_GOON(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x22A4F417AF7EDBB3, 0xD1B5C4>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_BOSS(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x1C3E529B167B0152, 0xD1AFF0>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_AGENCY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xB7FF64F7F3C11C73, 0xD1ADE8>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_WAREHOUSE(int amount, int id)
	{
		return invoker::invoke<void, 0xBA39DBB52E8B4335, 0xD1B514>(amount, id);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_CONTRABAND(int amount, Any p1)
	{
		return invoker::invoke<void, 0x183CC5B7D51F8C27, 0xD1B2C4>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_DESTROYING_CONTRABAND(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x95508E1DCDC31638, 0xD1B318>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_SMUGGLER_WORK(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<void, 0xB7CA0141AAE24858, 0xD1B480>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_HANGAR_TRADE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x543B2C1410A312F3, 0xD1B350>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_PURCHASE_CLUB_HOUSE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x94F7718638A3525D, 0xD1B6E0>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_BUSINESS_PRODUCT(int amount, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xF8E5B0C984357B72, 0xD1B278>(amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_VEHICLE_EXPORT(int amount, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x8692D3326B328B82, 0xD1B500>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_SMUGGLER_AGENCY(int amount, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xE1037BCF8C2FC81D, 0xD1B788>(amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_BOUNTY_HUNTER_REWARD(Any p0)
	{
		return invoker::invoke<void, 0xB1C4AF1EA46263A1, 0xD1B004>(p0);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_BUSINESS_BATTLE(Any p0)
	{
		return invoker::invoke<void, 0xFB341836D41663F, 0xD1B258>(p0);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(Any p0, int p1)
	{
		return invoker::invoke<void, 0xE57ED256E47D44C1, 0xD1B2B4>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(Any p0)
	{
		return invoker::invoke<void, 0x46A6A8998E3D8C20, 0xD1B338>(p0);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_BUSINESS_HUB_SELL(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xADDD87AAD0952829, 0xD1B264>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_FMBB_BOSS_WORK(Any p0)
	{
		return invoker::invoke<void, 0x9C94CA5701190287, 0xD1B32C>(p0);
	}

	FORCEINLINE auto NETWORK_EARN_FMBB_WAGE_BONUS(Any p0)
	{
		return invoker::invoke<void, 0x69071D15F1FDD00C, 0xD1B1D0>(p0);
	}

	FORCEINLINE auto NETWORK_CAN_SPEND_MONEY(Any p0, BOOL p1, BOOL p2, BOOL p3, Any p4, Any p5)
	{
		return invoker::invoke<BOOL, 0xAF5E4A6C74DC312, 0xD1AC5C>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto NETWORK_CAN_SPEND_MONEY2(Any p0, BOOL p1, BOOL p2, BOOL p3, Any* p4, Any p5, Any p6)
	{
		return invoker::invoke<BOOL, 0xF299749D63CC7167, 0xD1ABFC>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto NETWORK_BUY_ITEM(int amount, Hash item, Any p2, Any p3, BOOL p4, const char* item_name, Any p6, Any p7, Any p8, BOOL p9)
	{
		return invoker::invoke<void, 0x231BA68A82FF0316, 0xD1AB20>(amount, item, p2, p3, p4, item_name, p6, p7, p8, p9);
	}

	FORCEINLINE auto NETWORK_SPENT_TAXI(int amount, BOOL p1, BOOL p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x46B2ECD9DD5C325A, 0xD1D01C>(amount, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_PAY_EMPLOYEE_WAGE(Any p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xE2A7BB72F7220C7E, 0xD1BB28>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_PAY_MATCH_ENTRY_FEE(int amount, const char* matchId, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x1BF8BBFBF0066C79, 0xD1BB44>(amount, matchId, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_BETTING(int amount, int p1, const char* matchId, BOOL p3, BOOL p4)
	{
		return invoker::invoke<void, 0xEFA7F7BEF6727E05, 0xD1C640>(amount, p1, matchId, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPENT_WAGER(Any p0, Any p1, int amount)
	{
		return invoker::invoke<void, 0x6409DA98EAB29EF9, 0xD1D354>(p0, p1, amount);
	}

	FORCEINLINE auto NETWORK_SPENT_IN_STRIPCLUB(Any p0, BOOL p1, Any p2, BOOL p3)
	{
		return invoker::invoke<void, 0x5B01531ADF19BFE7, 0xD1CA80>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_BUY_HEALTHCARE(int cost, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x872D579FE9A001C0, 0xD1AAE4>(cost, p1, p2);
	}

	FORCEINLINE auto NETWORK_BUY_AIRSTRIKE(int cost, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0xE712829A13AA007C, 0xD1AA04>(cost, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_BUY_BACKUP_GANG(int p0, int p1, BOOL p2, BOOL p3, int npcProvider)
	{
		return invoker::invoke<void, 0x71D67D692ED4A77A, 0xD1AA24>(p0, p1, p2, p3, npcProvider);
	}

	FORCEINLINE auto NETWORK_BUY_HELI_STRIKE(int cost, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x2E2FE70D24958511, 0xD1AB00>(cost, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_AMMO_DROP(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0xEE1CE55E7DF07D50, 0xD1C5AC>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_BUY_BOUNTY(int amount, Player victim, BOOL p2, BOOL p3, Any p4)
	{
		return invoker::invoke<void, 0x2E361871F6DBB0BB, 0xD1AA54>(amount, victim, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_BUY_PROPERTY(int cost, Hash propertyName, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0xA0BB8B5F3BF0B873, 0xD1AB30>(cost, propertyName, p2, p3);
	}

	FORCEINLINE auto NETWORK_BUY_SMOKES(int p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x3394F4E239C12E5B, 0xD1AB50>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_HELI_PICKUP(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x5281982126ED6EB1, 0xD1C9E8>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_BOAT_PICKUP(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0xB191D6DA6D08B82, 0xD1C670>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_BULL_SHARK(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x510FA24010D2C6E2, 0xD1C6E0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_CASH_DROP(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x93D264A3F6B3EC83, 0xD1C8CC>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_HIRE_MUGGER(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x28DAC40D73AD61C, 0xD1CA28>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_ROBBED_BY_MUGGER(int amount, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x47E7DCF167AAD291, 0xD1CFBC>(amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_HIRE_MERCENARY(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x3805A7764BBF4986, 0xD1CA08>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_BUY_WANTEDLEVEL(Any p0, Any* p1, BOOL p2, BOOL p3, Any p4)
	{
		return invoker::invoke<void, 0xA8C662E16DC4030E, 0xD1C810>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPENT_BUY_OFFTHERADAR(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x390F7605EEFF27DD, 0xD1C758>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_BUY_REVEAL_PLAYERS(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x38B36DE4A0DD8551, 0xD1C798>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_CARWASH(Any p0, Any p1, Any p2, BOOL p3, BOOL p4)
	{
		return invoker::invoke<void, 0xB18702619A0C0E6E, 0xD1C89C>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPENT_CINEMA(Any p0, Any p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x2896F1C9B1221336, 0xD1C904>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_TELESCOPE(Any p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xE7F56AD8A71AC4E6, 0xD1D054>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_HOLDUPS(Any p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x770EB7A756AEBF26, 0xD1CA48>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_BUY_PASSIVE_MODE(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x3DFB797B5A3B9923, 0xD1C778>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_BANK_INTEREST(int p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x91F514ABD264DE39, 0xD1C624>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_PROSTITUTES(Any p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x8D54F66F66BE0AA4, 0xD1CD20>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_ARREST_BAIL(Any p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x5ED8FA0BD19D1554, 0xD1C5EC>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(int amount, Hash vehicleModel, Any* gamerHandle, BOOL notBankrupt, BOOL hasTheMoney)
	{
		return invoker::invoke<void, 0xC093604219A86052, 0xD1CC10>(amount, vehicleModel, gamerHandle, notBankrupt, hasTheMoney);
	}

	FORCEINLINE auto NETWORK_SPENT_CALL_PLAYER(Any p0, Any* p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x3C433641FBE9B092, 0xD1C840>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_BOUNTY(Any p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x2A073933B945C84D, 0xD1C6C4>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_FROM_ROCKSTAR(int p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xE3BE7893C3C3EC1D, 0xD1C944>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS(int amount)
	{
		return invoker::invoke<int, 0xD97AF335F8ACDB0F, 0xCCE8A8>(amount);
	}

	FORCEINLINE auto PROCESS_CASH_GIFT(int* p0, int* p1, const char* p2)
	{
		return invoker::invoke<const char*, 0x75C19185BEAE4AA9, 0xD1D6DC>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_MOVE_SUBMARINE(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xFCCEE4DF574659D5, 0xD1CB30>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_PLAYER_HEALTHCARE(int p0, int p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x34CF401503972D8, 0xD1CD00>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_NO_COPS(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x5457AC60E3138BFF, 0xD1CB98>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_CARGO_SOURCING(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<void, 0x17723C8F38B28C26, 0xD1C860>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto NETWORK_SPENT_REQUEST_JOB(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x473E72253CC49698, 0xD1CF9C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_REQUEST_HEIST(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0xBB8D17D4C5954DAD, 0xD1CF7C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_BUY_FAIRGROUND_RIDE(int amount, Any p1, BOOL p2, BOOL p3, Any p4)
	{
		return invoker::invoke<void, 0xD8F9465B2186C59F, 0xD1AAB4>(amount, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS()
	{
		return invoker::invoke<BOOL, 0xF0E83DAB719BAF47, 0xD1B8A4>();
	}

	FORCEINLINE auto NETWORK_SPENT_JOB_SKIP(int amount, const char* matchId, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0xE6BD97EF8B376DAC, 0xD1CAA0>(amount, matchId, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_BOSS_GOON(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<BOOL, 0xEDD28D3FAFE98806, 0xD1C690>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPEND_GOON(int p0, int p1, int amount)
	{
		return invoker::invoke<void, 0x7E8D3E1CB76D4269, 0xD1C10C>(p0, p1, amount);
	}

	FORCEINLINE auto NETWORK_SPEND_BOSS(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x773A6B5BEC33A424, 0xD1BD14>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_MOVE_YACHT(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x5ACC4ABDE69D38D4, 0xD1CB4C>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_RENAME_ORGANIZATION(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x1DC31E2CC59D9BB2, 0xD1CF58>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_BUY_CONTRABAND_MISSION(int p0, int p1, Hash p2, BOOL p3, BOOL p4)
	{
		return invoker::invoke<void, 0xCD042AEDCC67E05D, 0xD1AA84>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPENT_PA_SERVICE_HELI(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x4F12D7F9E2049590, 0xD1CC80>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_PA_SERVICE_VEHICLE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xEC25575B0C446336, 0xD1CCE0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_PA_SERVICE_SNACK(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x4A920AB6D0B69785, 0xD1CCC0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_PA_SERVICE_DANCER(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xEC8A7DFF32FD54B9, 0xD1CC60>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_PA_SERVICE_IMPOUND(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x6C12EC99A95B5DAB, 0xD1CCA4>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_PA_HELI_PICKUP(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xD4C7A8B7798F8D76, 0xD1CC40>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0xE56907D742FBB98E, 0xD1CEA0>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0xF703ED783A4823FC, 0xD1D248>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x81817FDF3227FB55, 0xD1CEDC>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xD387AD5F69E5AED7, 0xD1D2E0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(int amount, Any* data, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x47CF1A8941FAF477, 0xD1CDF8>(amount, data, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xC190A01717631220, 0xD1D1A0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x997FC0391BB433D7, 0xD1D090>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xAC68FC3E6CBCE6FC, 0xD1CBD8>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x4EF4490FC3B90AD2, 0xD1CBB8>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_JUKEBOX(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x4EFA5A2F877A4580, 0xD1CAC0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_PURCHASE_CLUB_HOUSE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x487238BD4D444146, 0xD1CD5C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_CLUB_HOUSE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xB69E368585E687CB, 0xD1D104>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x7C551A8AD8F364D6, 0xD1CD3C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x96861731FED0B20F, 0xD1D0E4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x6B149894691C7CC8, 0xD1D070>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_MC_ABILITY(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0xD0D235D716CBBF3A, 0xD1CAE0>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x2AED47655EBD41F9, 0xD1CBF8>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_CHANGE_APPEARANCE(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xE9B35F4B3FA183CC, 0xD1C8E8>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_VEHICLE_EXPORT_MODS(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
	{
		return invoker::invoke<void, 0x234A1A7A21B287F0, 0xD1D344>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	FORCEINLINE auto NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x6690522491F2B7EF, 0xD1CE6C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x835DCD1C2346F3E5, 0xD1D214>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_IMPORT_EXPORT_REPAIR(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x4748E1ADA6271630, 0xD1CA64>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_PURCHASE_HANGAR(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x26FCA81008B87FAF, 0xD1CDC4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_HANGAR(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x74A9433D624A129B, 0xD1D16C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_HANGAR_UTILITY_CHARGES(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xE9BEC9AEEBD10172, 0xD1C9CC>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_HANGAR_STAFF_CHARGES(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x7AB1CE55FB991D7E, 0xD1C9B0>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_BUY_TRUCK(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xA813D964741A08C1, 0xD1C7EC>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_TRUCK(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x2119E194E1B27356, 0xD1D2BC>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_BUY_BUNKER(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xD31BD6FE1E51499, 0xD1C734>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPRADE_BUNKER(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x239899C7038B89B2, 0xD1D320>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_SELL_BUNKER(int amount, Hash bunkerHash)
	{
		return invoker::invoke<void, 0x9B8D5650AE5D3E37, 0xD1B470>(amount, bunkerHash);
	}

	FORCEINLINE auto NETWORK_SPENT_BALLISTIC_EQUIPMENT(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x5D9F9E16048EFF63, 0xD1C608>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_RDR_BONUS(int amount, Any p1)
	{
		return invoker::invoke<void, 0x90A6F64158BFDC6, 0xD1B6FC>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_WAGE_PAYMENT(int amount, Any p1)
	{
		return invoker::invoke<void, 0x19B6E06EEAE42FD9, 0xD1B878>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_WAGE_PAYMENT_BONUS(int amount)
	{
		return invoker::invoke<void, 0xF031AD8A21A8C1A0, 0xD1B888>(amount);
	}

	FORCEINLINE auto NETWORK_SPENT_BUY_BASE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x6AAECCF5BAF1E393, 0xD1C700>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_BASE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x514D80B09AEE6358, 0xD1D0B0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_BUY_TILTROTOR(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x7544F7A9D8A06A08, 0xD1C7B8>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_TILTROTOR(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xC19533F1B83A7895, 0xD1D288>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_EMPLOY_ASSASSINS(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xD22ED94E238E6212, 0xD1C924>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_GANGOPS_CANNON(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x147D45A959CA40D8, 0xD1C074>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_GANGOPS_SKIP_MISSION(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xDE737A0063E49970, 0xD1C0B0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x47051CE8E3FBF361, 0xD1C014>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_SELL_BASE(int amount, Hash baseNameHash)
	{
		return invoker::invoke<void, 0xFD08D543F04B5AD5, 0xD1B72C>(amount, baseNameHash);
	}

	FORCEINLINE auto NETWORK_EARN_TARGET_REFUND(int amount, int p1)
	{
		return invoker::invoke<void, 0x1B7FCA28E35CDBB0, 0xD1B7E4>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_GANGOPS_WAGES(int amount, int p1)
	{
		return invoker::invoke<void, 0xC7791AFBC3D6AAD5, 0xD1B578>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_GANGOPS_WAGES_BONUS(int amount, int p1)
	{
		return invoker::invoke<void, 0xCFCD749D4E341FD7, 0xD1B588>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_DAR_CHALLENGE(int amount, Any p1)
	{
		return invoker::invoke<void, 0x76B1F7266AE121AC, 0xD1B15C>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_DOOMSDAY_FINALE_BONUS(int amount, Hash vehicleHash)
	{
		return invoker::invoke<void, 0x80D494C63CA32BD2, 0xD1B16C>(amount, vehicleHash);
	}

	FORCEINLINE auto NETWORK_EARN_GANGOPS_AWARD(int amount, const char* p1, Any p2)
	{
		return invoker::invoke<void, 0xA32B695D90B1EA0E, 0xD1B524>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_GANGOPS_ELITE(int amount, const char* p1, int actIndex)
	{
		return invoker::invoke<void, 0x90C7361D0621A3B6, 0xD1B538>(amount, p1, actIndex);
	}

	FORCEINLINE auto NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(int earnedMoney)
	{
		return invoker::invoke<void, 0xC1248D942D71375C, 0xD1BB90>(earnedMoney);
	}

	FORCEINLINE auto NETWORK_SPEND_GANGOPS_START_STRAND(int type, int amount, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0xE01ABEB9E2CF42B9, 0xD1C0D0>(type, amount, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_GANGOPS_TRIP_SKIP(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x8091E3CC1E619B39, 0xD1C0F0>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(int amount)
	{
		return invoker::invoke<void, 0x1320A36B594CBEC2, 0xD1B55C>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_GANGOPS_SETUP(int amount, const char* p1)
	{
		return invoker::invoke<void, 0xE31A6007C811856C, 0xD1B568>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_GANGOPS_FINALE(int amount, const char* p1)
	{
		return invoker::invoke<void, 0x177CA8EC3BEBA1EB, 0xD1B54C>(amount, p1);
	}

	FORCEINLINE auto NETWORK_SPEND_GANGOPS_REPAIR_COST(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x679A4C47D3A0A4B2, 0xD1C094>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_NIGHTCLUB(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x1CB79849195B4445, 0xD1B668>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_NIGHTCLUB_DANCING(Any p0)
	{
		return invoker::invoke<void, 0x6720272CB53DBA48, 0xD1B6B4>(p0);
	}

	FORCEINLINE auto NETWORK_EARN_BB_EVENT_BONUS(int amount)
	{
		return invoker::invoke<void, 0x5CD8E37BA3CBA971, 0xD1AFA0>(amount);
	}

	FORCEINLINE auto NETWORK_SPENT_PURCHASE_HACKER_TRUCK(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xCCC74177BFE27AC9, 0xD1CD90>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_HACKER_TRUCK(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xA93B2B393E4AAA20, 0xD1D138>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_HACKER_TRUCK(Any p0, int amount, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x771C72551EE0BD14, 0xD1B5D8>(p0, amount, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xF7449BB82D5A6055, 0xD1CE38>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x4CA2FD73CB528330, 0xD1D1E0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
	{
		return invoker::invoke<void, 0x80B2A7374EC83539, 0xD1B678>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x635D6A4C16C8B427, 0xD1C1C0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_RDR_HATCHET_BONUS(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x4D7CE2298CFF7D42, 0xD1CF1C>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(Player player, int amount, Any p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x75BD55E6AB869CAF, 0xD1CB68>(player, amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(int amount, Any p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x8F5EE908F5AE9BC3, 0xD1C1E0>(amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_BOUNTY_HUNTER_MISSION(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x86156182084D56A1, 0xD1BD28>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPENT_REHIRE_DJ(int amount, Any p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0xC72D28E5EF1107CF, 0xD1CF38>(amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPENT_ARENA_JOIN_SPECTATOR(int amount, Any p1, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x6AE6C5324BD6DEBD, 0xD1C5CC>(amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(int amount, Any p1)
	{
		return invoker::invoke<void, 0x2F7D409DB8FCD57F, 0xD1AE7C>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_ARENA_CAREER_PROGRESSION(int amount, Any p1)
	{
		return invoker::invoke<void, 0xC7D8414269660FC0, 0xD1AE6C>(amount, p1);
	}

	FORCEINLINE auto NETWORK_SPEND_MAKE_IT_RAIN(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xF5BEEB8BA669C558, 0xD1C1A4>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_SPEND_BUY_ARENA(int amount, BOOL p1, BOOL p2, const char* p3)
	{
		return invoker::invoke<void, 0xDAFEB0418AF8DAF, 0xD1BDF0>(amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_UPGRADE_ARENA(int amount, BOOL p1, BOOL p2, const char* p3)
	{
		return invoker::invoke<void, 0x56EA8C6ED5821F2B, 0xD1C46C>(amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_ARENA_SPECTATOR_BOX(int amount, int type, BOOL p2, BOOL p3)
	{
		return invoker::invoke<void, 0x5F6D2B7BA40483E7, 0xD1BC94>(amount, type, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(int amount, Any p1, BOOL p2)
	{
		return invoker::invoke<void, 0x929557FEA326BBCC, 0xD1C374>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_SPIN_THE_WHEEL_CASH(int amount)
	{
		return invoker::invoke<void, 0x6B07E1D996A69ACF, 0xD1B7C8>(amount);
	}

	FORCEINLINE auto NETWORK_SPEND_ARENA_PREMIUM(int amount, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xC57A6CADCEFE5089, 0xD1BC78>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_ARENA_WAR(int amount, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x9025AEE080F84A1B, 0xD1AE8C>(amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(int amount)
	{
		return invoker::invoke<void, 0xC46CA38367F16578, 0xD1AEA4>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_ARENA_WAR_EVENT_CARGO(int amount)
	{
		return invoker::invoke<void, 0x360C31F0E45DAA5F, 0xD1AEB0>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_RC_TIME_TRIAL(int amount)
	{
		return invoker::invoke<void, 0x110068A07EDA9FBC, 0xD1B6F0>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_DAILY_OBJECTIVE_EVENT(int amount)
	{
		return invoker::invoke<void, 0x4FF0B515E4C83097, 0xD1B134>(amount);
	}

	FORCEINLINE auto NETWORK_SPEND_CASINO_MEMBERSHIP(int amount, BOOL p1, BOOL p2, int p3)
	{
		return invoker::invoke<void, 0x3F00B9CADEE8EB3D, 0xD1C034>(amount, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_BUY_CASINO(int amount, BOOL p1, BOOL p2, Any* data)
	{
		return invoker::invoke<void, 0xD85A55A2B60E86C9, 0xD1BE58>(amount, p1, p2, data);
	}

	FORCEINLINE auto NETWORK_SPEND_UPGRADE_CASINO(int amount, BOOL p1, BOOL p2, Any* data)
	{
		return invoker::invoke<void, 0xC28FC39C693BF50B, 0xD1C4D4>(amount, p1, p2, data);
	}

	FORCEINLINE auto NETWORK_SPEND_CASINO_GENERIC(int amount, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0xE4A2A5E5455654BF, 0xD1BFD0>(amount, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_EARN_CASINO_TIME_TRIAL_WIN(int amount)
	{
		return invoker::invoke<void, 0x416DEBEC2AF19312, 0xD1B0C4>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(int amount)
	{
		return invoker::invoke<void, 0xDE5641418FF92887, 0xD1B0F8>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(int amount)
	{
		return invoker::invoke<void, 0x22F6103D7DF1811B, 0xD1B02C>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_SELL_PRIZE_VEHICLE(int amount, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xD568567F2142F0D6, 0xD1B74C>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_CASINO_MISSION_REWARD(int amount)
	{
		return invoker::invoke<void, 0xE073EC11C22D5CB5, 0xD1B0AC>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_CASINO_STORY_MISSION_REWARD(int amount)
	{
		return invoker::invoke<void, 0xCC4DAB4ED0FA0069, 0xD1B0B8>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_CASINO_MISSION_PARTICIPATION(int amount)
	{
		return invoker::invoke<void, 0xFF9E4D74FE360E69, 0xD1B0A0>(amount);
	}

	FORCEINLINE auto NETWORK_EARN_CASINO_AWARD(int amount, Hash hash)
	{
		return invoker::invoke<void, 0x6F19DA0555AFD918, 0xD1B01C>(amount, hash);
	}

	FORCEINLINE auto NETWORK_SPEND_BUY_ARCADE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x23832C1A8C99748C, 0xD1BDBC>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_UPGRADE_ARCADE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x58F5E56CDD996880, 0xD1C438>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_CASINO_HEIST(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10)
	{
		return invoker::invoke<void, 0x217CC1BF55D59C44, 0xD1C004>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
	}

	FORCEINLINE auto NETWORK_SPEND_ARCADE_MGMT(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x65093A8F4C502F7F, 0xD1BC44>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPEND_PLAY_ARCADE(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0xE05D60BF50DB8652, 0xD1C200>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPEND_ARCADE(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x4BB8B039E0467D33, 0xD1BC10>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_EARN_CASINO_HEIST(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
	{
		return invoker::invoke<void, 0x814E3AEA72604174, 0xD1B038>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto NETWORK_EARN_UPGRADE_ARCADE(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xAA8EDC61C1A66D69, 0xD1B854>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_ARCADE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<void, 0x397B2F6C8F2E3FB2, 0xD1AE38>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto NETWORK_EARN_COLLECTABLES(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x2E90F469A6AC992, 0xD1B0E4>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_CHALLENGE(int amount, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xA5C6A0D18EC0D946, 0xD1B0D0>(amount, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_CASINO_HEIST_AWARDS(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x9ACC96FE8469BF29, 0xD1B074>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_EARN_COLLECTABLE_ITEM(int amount, Any p1)
	{
		return invoker::invoke<void, 0x2B8A3862BDE6737C, 0xD1B114>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(int amount, Any p1)
	{
		return invoker::invoke<void, 0xD8D4BFD9BC71E9CC, 0xD1B104>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_YATCH_MISSION(int amount, Any p1)
	{
		return invoker::invoke<void, 0xA6CF99057D1A4B2F, 0xD1B894>(amount, p1);
	}

	FORCEINLINE auto NETWORK_EARN_DISPATCH_CALL(int amount, Any p1)
	{
		return invoker::invoke<void, 0x78B315C577CF6D01, 0xD1B894>(amount, p1);
	}

	FORCEINLINE auto NETWORK_SPEND_BEACH_PARTY(Any p0)
	{
		return invoker::invoke<void, 0x1F6D32912DBFCEA7, 0xD1BCE8>(p0);
	}

	FORCEINLINE auto NETWORK_SPEND_SUBMARINE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<void, 0xC919F00C1EB6628, 0xD1C390>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto NETWORK_SPEND_CASINO_CLUB(int amount1, Any p1, BOOL p2, Any p3, int p4, int p5, int p6, int amount2, Any p8)
	{
		return invoker::invoke<void, 0x7295CAE6372986E4, 0xD1BF78>(amount1, p1, p2, p3, p4, p5, p6, amount2, p8);
	}

	FORCEINLINE auto NETWORK_SPEND_BUY_SUB(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x4BEE133765D6015F, 0xD1BEB0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_UPGRADE_SUB(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xE285C20435466381, 0xD1C508>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_ISLAND_HEIST(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xDCA98A271D0CC516, 0xD1C180>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_ISLAND_HEIST(int amount1, Any p1, Any p2, Any p3, int amount2, int p5)
	{
		return invoker::invoke<void, 0xB413CA811F506DCF, 0xD1B634>(amount1, p1, p2, p3, amount2, p5);
	}

	FORCEINLINE auto NETWORK_EARN_BEACH_PARTY_LOST_FOUND(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x45D4863471811592, 0xD1AFAC>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x5836433A62D1A6C4, 0xD1B37C>(p0, p1);
	}

	FORCEINLINE auto NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(int amount1, Any p1, Any p2, int amount2, Any p4)
	{
		return invoker::invoke<void, 0x3D20F4EE16939AC2, 0xD1BF24>(amount1, p1, p2, amount2, p4);
	}

	FORCEINLINE auto NETWORK_SPEND_CAR_CLUB_BAR(Any p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0xF3C2DA93952477BC, 0xD1BF04>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_AUTOSHOP_MODIFY(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0xC514E0BC5A9C1A6A, 0xD1BCB4>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPEND_CAR_CLUB_TAKEOVER(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x883A1BCBA56D5FBD, 0xD1BF58>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_BUY_AUTOSHOP(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xC6B8A83CB698802E, 0xD1BE24>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_UPGRADE_AUTOSHOP(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x3FA880262FF79243, 0xD1C4A0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_AUTOSHOP_BUSINESS(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x84A07CA553A4F9C3, 0xD1AEC8>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_AUTOSHOP_INCOME(Any p0, int p1)
	{
		return invoker::invoke<void, 0xE16238C3C62697D0, 0xD1AEE0>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_CARCLUB_MEMBERSHIP(Any p0)
	{
		return invoker::invoke<void, 0x7A3449D1CF40578C, 0xD1B010>(p0);
	}

	FORCEINLINE auto NETWORK_EARN_DAILY_VEHICLE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xD378B386217DBB5E, 0xD1B140>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_DAILY_VEHICLE_BONUS(Any p0)
	{
		return invoker::invoke<void, 0xC9F128BF7D93196, 0xD1B150>(p0);
	}

	FORCEINLINE auto NETWORK_EARN_TUNER_AWARD(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x16FD73B3F4345670, 0xD1B804>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_TUNER_ROBBERY(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0xAF64B7223D9E0FEB, 0xD1B818>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_EARN_UPGRADE_AUTOSHOP(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x9FF64089E5DAC313, 0xD1B868>(p0, p1);
	}

	FORCEINLINE auto NETWORK_SPEND_INTERACTION_MENU_ABILITY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xC8EAF995510A953C, 0xD1C160>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_SET_COMMON_FIELDS(Any p0, Any p1, Any p2, BOOL p3)
	{
		return invoker::invoke<void, 0xD10B64D006F40B14, 0xD1C320>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_SET_DISCOUNT(BOOL p0)
	{
		return invoker::invoke<void, 0xABC3E4AF7CA40513, 0xD1C344>(p0);
	}

	FORCEINLINE auto NETWORK_SPEND_BUY_AGENCY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x901A291369C59088, 0xD1BD88>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_UPGRADE_AGENCY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x5EFF344D2CEF49DE, 0xD1C404>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_AGENCY(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0xE521F8F950FE34C3, 0xD1BBB8>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPEND_HIDDEN(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x29F36537BAC3D711, 0xD1C140>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_SOURCE_BIKE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xA19C2545709CF8B5, 0xD1C354>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_COMP_SUV(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x566ADA7FE6D2FFC4, 0xD1C054>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_SUV_FST_TRVL(int p0, BOOL p1, BOOL p2, Any p3)
	{
		return invoker::invoke<void, 0x59DB49C02815273E, 0xD1C3E4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_SUPPLY(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x2F5233FB30DF57D5, 0xD1C3C4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_BIKE_SHOP(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x682B3A2CFD8CC244, 0xD1BCF4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SPEND_VEHICLE_REQUESTED(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<void, 0x2ED93149B4CC68C1, 0xD1C53C>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SPEND_GUNRUNNING(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x92473EA3E0FD6C3C, 0xD1C120>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_AGENCY_SAFE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x3398D3F6736CF301, 0xD1AE28>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_AWARD_CONTRACT(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x50EE547EE5B116FA, 0xD1AF10>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_AGENCY_CONTRACT(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xEBDEC0D7E92D20B0, 0xD1AE04>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_AWARD_PHONE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x61D4C8F1146AD04D, 0xD1AF60>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_AGENCY_PHONE(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x87065E48A6ACAF50, 0xD1AE14>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_EARN_AWARD_FIXER_MISSION(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x583714F99BC53894, 0xD1AF40>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FIXER_PREP(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x4B9D927C4A4FB9DC, 0xD1B6D0>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FIXER_FINALE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x9E645A15DE54B5EE, 0xD1B17C>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x7729F2302AF3353, 0xD1B1B0>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_AWARD_SHORT_TRIP(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xFC7D9950A581B4F3, 0xD1AF80>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_FIXER_RIVAL_DELIVERY(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xF4E49895EADECEB2, 0xD1B1C0>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_UPGRADE_AGENCY(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x95F1CA5C2CE2942C, 0xD1B844>(p0, p1);
	}

	FORCEINLINE auto NETWORK_SPEND_APARTMENT_UTILITIES(int amount, BOOL p1, BOOL p2, Any* data)
	{
		return invoker::invoke<void, 0xD00BC7FDBE039771, 0xD1BBEC>(amount, p1, p2, data);
	}

	FORCEINLINE auto NETWORK_SPEND_BUSINESS_PROPERTY_FEES(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xCF0625D5D2A8F298, 0xD1BD44>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_SIGHTSEEING_REWARD(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x4D488739F6C82163, 0xD1B770>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_EARN_BIKER_SHOP(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xFFE3EA612616D334, 0xD1AFCC>(p0, p1);
	}

	FORCEINLINE auto NETWORK_EARN_BIKER(Any p0)
	{
		return invoker::invoke<void, 0xDA1798FB73681E87, 0xD1AFC0>(p0);
	}

	FORCEINLINE auto NETWORK_YOHAN_SOURCE_GOODS(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x1D83165BDA8DF7FC, 0xD1D368>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_SPEND_BUY_MFGARAGE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x8B7BEFF3C8EF4B47, 0xD1BE8C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_SPEND_UPGRADE_MFGARAGE(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xB01E58326A51EBA2, 0xD1C2DC>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_SPEND_BUY_SUPPLIES(int p0, BOOL p1, BOOL p2, int p3)
	{
		return invoker::invoke<void, 0x8D6321E6F1CBC69C, 0xD1BEE4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_SPEND_BUY_ACID_LAB(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0xFF1266444C9426B4, 0xD1BD68>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x6EF8DB87205D57FF, 0xD1C29C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR(int p0, BOOL p1, BOOL p2, int p3)
	{
		return invoker::invoke<void, 0x3BE0A37C527AC2C8, 0xD1C27C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP(int p0, BOOL p1, BOOL p2, int p3)
	{
		return invoker::invoke<void, 0x6948702511126852, 0xD1C300>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_SPEND_UPGRADE_ACID_LAB_MINES(int p0, BOOL p1, BOOL p2, int p3)
	{
		return invoker::invoke<void, 0xCC69EE39119A150C, 0xD1C2BC>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_SPEND_RENAME_ACID_LAB(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x2416BBA9A9F18EAB, 0xD1C234>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_SPEND_RENAME_ACID_PRODUCT(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x14DF63D0BB614642, 0xD1C258>(p0, p1, p2, p3);
	}

	FORCEINLINE auto _NETWORK_EARN_AWARD_JUGGALO_MISSION(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xCFA8FE5301B9E6CE, 0xD1AF50>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_AWARD_ACID_LAB(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x2656226DE9A2C644, 0xD1AF00>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_AWARD_DAILY_STASH(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xA4457A33AC118B4, 0xD1AF20>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_AWARD_DEAD_DROP(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x39D90796902DFED4, 0xD1AF30>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_AWARD_RANDOM_EVENT(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x9657D8B784593A5E, 0xD1AF70>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_AWARD_TAXI(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xD755F13556CF7C9D, 0xD1AF90>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_STREET_DEALER(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xC026E17CC4E7BED5, 0xD1B7D4>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_SELL_ACID(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xEC9101A02CD98A8B, 0xD1B71C>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x8D2A2025E94588A1, 0xD1B760>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x733EB09C30E2BC1E, 0xD1B7B8>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x5E3EE3B0D24ED146, 0xD1B73C>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_JUGGALO_STORY_MISSION(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xF8BBC07B8BA14ECF, 0xD1B614>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xD16E87370ADCE88C, 0xD1B624>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_FOOLIGAN_JOB(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xA1243621982D87, 0xD1B1DC>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xDD0F567A35809C42, 0xD1B1EC>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_TAXI_JOB(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x4AA32C25ED6D69D, 0xD1B7F4>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x5B46189D0DA97DE4, 0xD1B124>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xE8C7135747EA3054, 0xD1B6C0>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_AVENGER(int amount, int p1)
	{
		return invoker::invoke<void, 0x55F006B9D4A46C1D, 0xD1AEF0>(amount, p1);
	}

	FORCEINLINE auto _NETWORK_EARN_SMUGGLER_OPS(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xDEA273D5F8A9661A, 0xD1B7A4>(p0, p1, p2);
	}

	FORCEINLINE auto _NETWORK_EARN_BONUS_OBJECTIVE(int amount, Any p1, Any p2)
	{
		return invoker::invoke<void, 0xDCEF983C24191997, 0xD1AFDC>(amount, p1, p2);
	}

	FORCEINLINE auto _NETWORK_EARN_PROGRESS_HUB(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xF8332B06F0EECC9C, 0xD1B70C>(p0, p1);
	}

	FORCEINLINE auto _NETWORK_SPENT_AIR_FREIGHT(int hangarCargoSourcingPrice, BOOL fromBank, BOOL fromBankAndWallet, int cost, int warehouseId, int warehouseSlot)
	{
		return invoker::invoke<void, 0x8C7E8D6F96C9E948, 0xD1C570>(hangarCargoSourcingPrice, fromBank, fromBankAndWallet, cost, warehouseId, warehouseSlot);
	}

	FORCEINLINE auto _NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP(int amount, BOOL fromBank, BOOL fromBankAndWallet, int cost)
	{
		return invoker::invoke<void, 0xED1B407BADA42CEC, 0xD1CFDC>(amount, fromBank, fromBankAndWallet, cost);
	}

	FORCEINLINE auto _NETWORK_SPENT_STEALTH_MODULE(int amount, BOOL fromBank, BOOL fromBankAndWallet, Hash p3)
	{
		return invoker::invoke<void, 0x95CE79A6939C537A, 0xD1CFFC>(amount, fromBank, fromBankAndWallet, p3);
	}

	FORCEINLINE auto _NETWORK_SPENT_MISSILE_JAMMER(int amount, BOOL fromBank, BOOL fromBankAndWallet, Hash p3)
	{
		return invoker::invoke<void, 0xD687100F616163F4, 0xD1CB10>(amount, fromBank, fromBankAndWallet, p3);
	}

	FORCEINLINE auto _NETWORK_SPENT_GENERIC(int price, BOOL p1, BOOL p2, Hash stat, Hash spent, const char* p5, const char* p6, Any* data)
	{
		return invoker::invoke<void, 0x2803B027479FB640, 0xD1C960>(price, p1, p2, stat, spent, p5, p6, data);
	}

	FORCEINLINE auto _NETWORK_EARN_GENERIC(int amount, Hash earn, const char* p2, const char* p3, Any* data)
	{
		return invoker::invoke<void, 0xBF7B5BB7ED890380, 0xD1B598>(amount, earn, p2, p3, data);
	}

	FORCEINLINE auto _NETWORK_CLEAR_TRANSACTION_TELEMETRY_NONCE()
	{
		return invoker::invoke<void, 0xE03B9F95556E48E9, 0xD1AD84>();
	}

	FORCEINLINE auto NETWORK_GET_VC_BANK_BALANCE()
	{
		return invoker::invoke<int, 0x227D0C27EB51D76C, 0xD1BA78>();
	}

	FORCEINLINE auto NETWORK_GET_VC_WALLET_BALANCE(int characterSlot)
	{
		return invoker::invoke<int, 0xBDC89742B13CD2, 0xD1BA9C>(characterSlot);
	}

	FORCEINLINE auto NETWORK_GET_VC_BALANCE()
	{
		return invoker::invoke<int, 0x6A9B427B35077684, 0xD1BA54>();
	}

	FORCEINLINE auto NETWORK_GET_EVC_BALANCE()
	{
		return invoker::invoke<int, 0xF9A874A9AA3CA007, 0xD1B978>();
	}

	FORCEINLINE auto NETWORK_GET_PVC_BALANCE()
	{
		return invoker::invoke<int, 0xF3ABFA84F93690E0, 0xD1B9B8>();
	}

	FORCEINLINE auto NETWORK_GET_STRING_WALLET_BALANCE(int characterSlot)
	{
		return invoker::invoke<const char*, 0x815E568EDFA0F84F, 0xD1BA34>(characterSlot);
	}

	FORCEINLINE auto NETWORK_GET_STRING_BANK_BALANCE()
	{
		return invoker::invoke<const char*, 0xCC3DCF2C80164BB7, 0xD1B9F8>();
	}

	FORCEINLINE auto NETWORK_GET_STRING_BANK_WALLET_BALANCE(int character)
	{
		return invoker::invoke<const char*, 0xFA33924AB598C47C, 0xD1BA14>(character);
	}

	FORCEINLINE auto NETWORK_GET_CAN_SPEND_FROM_WALLET(int amount, int characterSlot)
	{
		return invoker::invoke<BOOL, 0x2CCC9874DC774FD1, 0xD1B91C>(amount, characterSlot);
	}

	FORCEINLINE auto NETWORK_GET_CAN_SPEND_FROM_BANK(int amount)
	{
		return invoker::invoke<BOOL, 0x33B9AE76A0E4C46D, 0xD1B8C0>(amount);
	}

	FORCEINLINE auto NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(int amount, int characterSlot)
	{
		return invoker::invoke<BOOL, 0x818CFAC7819E0460, 0xD1B8F4>(amount, characterSlot);
	}

	FORCEINLINE auto NETWORK_GET_PVC_TRANSFER_BALANCE()
	{
		return invoker::invoke<int, 0xB7D5A701FD23B2B4, 0xD1B9DC>();
	}

	FORCEINLINE auto NETWORK_GET_CAN_TRANSFER_CASH(int amount)
	{
		return invoker::invoke<BOOL, 0xDF1F519EA0B54B7D, 0xD1B954>(amount);
	}

	FORCEINLINE auto NETWORK_CAN_RECEIVE_PLAYER_CASH(Any p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<BOOL, 0x5B9D8077EF640468, 0xD1AB90>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_GET_REMAINING_TRANSFER_BALANCE()
	{
		return invoker::invoke<int, 0xCAA7ED3DA3EAD53C, 0xD1B9DC>();
	}

	FORCEINLINE auto WITHDRAW_VC(int amount)
	{
		return invoker::invoke<int, 0x8C72AE091EB20602, 0xD1F938>(amount);
	}

	FORCEINLINE auto DEPOSIT_VC(int amount)
	{
		return invoker::invoke<BOOL, 0xAC3F47C6E026FB48, 0xD17EDC>(amount);
	}

	FORCEINLINE auto HAS_VC_WITHDRAWAL_COMPLETED(Any p0)
	{
		return invoker::invoke<BOOL, 0x7BAF87C40BEA974C, 0xD1F814>(p0);
	}

	FORCEINLINE auto WAS_VC_WITHDRAWAL_SUCCESSFUL(Any p0)
	{
		return invoker::invoke<BOOL, 0x7E903F2F588C9435, 0xD1F814>(p0);
	}

}
namespace NETWORK
{
	FORCEINLINE auto GET_ONLINE_VERSION()
	{
		return invoker::invoke<const char*, 0x5DABD035363E4E52, 0xCCEEBC>();
	}

	FORCEINLINE auto NETWORK_IS_SIGNED_IN()
	{
		return invoker::invoke<BOOL, 0x5F9F81C08516558E, 0xCD545C>();
	}

	FORCEINLINE auto NETWORK_IS_SIGNED_ONLINE()
	{
		return invoker::invoke<BOOL, 0x261E3728EE56B3AC, 0xCD1DC4>();
	}

	FORCEINLINE auto NETWORK_IS_NP_AVAILABLE()
	{
		return invoker::invoke<BOOL, 0xECBFC40AE72FA489, 0xD1F814>();
	}

	FORCEINLINE auto NETWORK_IS_NP_PENDING()
	{
		return invoker::invoke<BOOL, 0x8C9CC81BD246DE31, 0xD1F814>();
	}

	FORCEINLINE auto NETWORK_GET_NP_UNAVAILABLE_REASON()
	{
		return invoker::invoke<int, 0x444B1E9E9A9D726B, 0xCCE8A8>();
	}

	FORCEINLINE auto NETWORK_IS_CONNETED_TO_NP_PRESENCE()
	{
		return invoker::invoke<BOOL, 0x8827319E5D2F9C68, 0xD1F814>();
	}

	FORCEINLINE auto NETWORK_IS_LOGGED_IN_TO_PSN()
	{
		return invoker::invoke<BOOL, 0xC026D674C8C48368, 0xCCE8A8>();
	}

	FORCEINLINE auto NETWORK_HAS_VALID_ROS_CREDENTIALS()
	{
		return invoker::invoke<BOOL, 0x1595D1B690089487, 0xCD49E4>();
	}

	FORCEINLINE auto NETWORK_IS_REFRESHING_ROS_CREDENTIALS()
	{
		return invoker::invoke<BOOL, 0x9A98CA859043585F, 0xCD5364>();
	}

	FORCEINLINE auto NETWORK_IS_CLOUD_AVAILABLE()
	{
		return invoker::invoke<BOOL, 0x5676319ACE5BEC37, 0xCD4D38>();
	}

	FORCEINLINE auto NETWORK_HAS_SOCIAL_CLUB_ACCOUNT()
	{
		return invoker::invoke<BOOL, 0xFE087BC8EB584AA2, 0xCD4984>();
	}

	FORCEINLINE auto NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT()
	{
		return invoker::invoke<BOOL, 0xEBF44C5F6EF789C0, 0xCD2A28>();
	}

	FORCEINLINE auto NETWORK_IS_HOST()
	{
		return invoker::invoke<BOOL, 0x7242220B378B8CCF, 0xCD4FE4>();
	}

	FORCEINLINE auto NETWORK_GET_HOST_PLAYER_INDEX()
	{
		return invoker::invoke<Player, 0x53A6D90B4FBC585D, 0xCD3BF0>();
	}

	FORCEINLINE auto NETWORK_WAS_GAME_SUSPENDED()
	{
		return invoker::invoke<BOOL, 0xC8D0FF9225C03E0E, 0xCD6DA4>();
	}

	FORCEINLINE auto NETWORK_HAVE_ONLINE_PRIVILEGES()
	{
		return invoker::invoke<BOOL, 0xD25970CBEE074E07, 0xCD4A2C>();
	}

	FORCEINLINE auto NETWORK_HAS_AGE_RESTRICTIONS()
	{
		return invoker::invoke<BOOL, 0xB0DF27929B02C57E, 0xCD45EC>();
	}

	FORCEINLINE auto NETWORK_HAVE_USER_CONTENT_PRIVILEGES(int p0)
	{
		return invoker::invoke<BOOL, 0x97DD063A9C6137F8, 0xCD4B48>(p0);
	}

	FORCEINLINE auto NETWORK_HAVE_COMMUNICATION_PRIVILEGES(int p0, Player player)
	{
		return invoker::invoke<BOOL, 0x9A9677D7F3615A86, 0xCD4A04>(p0, player);
	}

	FORCEINLINE auto _NETWORK_HAVE_PLATFORM_COMMUNICATION_PRIVILEGES()
	{
		return invoker::invoke<BOOL, 0xE1E02509169C124E, 0xCD4A50>();
	}

	FORCEINLINE auto NETWORK_CHECK_ONLINE_PRIVILEGES(Any p0, BOOL p1)
	{
		return invoker::invoke<BOOL, 0x27AEB178E6BB8021, 0xCD2D64>(p0, p1);
	}

	FORCEINLINE auto NETWORK_CHECK_USER_CONTENT_PRIVILEGES(int p0, int p1, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x8FF2665359043205, 0xCD2E08>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_CHECK_COMMUNICATION_PRIVILEGES(int p0, int p1, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x521B8DE052C56837, 0xCD2CE8>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<BOOL, 0xB856D5DB24672EA4, 0xCD2DDC>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_IS_USING_ONLINE_PROMOTION()
	{
		return invoker::invoke<BOOL, 0x46396D1A40BBF581, 0xCCE8A8>();
	}

	FORCEINLINE auto NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN()
	{
		return invoker::invoke<BOOL, 0xCA8FCC9293149C67, 0xCCE8A8>();
	}

	FORCEINLINE auto NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV()
	{
		return invoker::invoke<BOOL, 0xADED703C1F8CC52B, 0xCD49A0>();
	}

	FORCEINLINE auto NETWORK_GET_AGE_GROUP()
	{
		return invoker::invoke<int, 0xB3592BAAAC94842D, 0xCD3848>();
	}

	FORCEINLINE auto NETWORK_CHECK_PRIVILEGES(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x6530C8E06980D65E, 0xCD2D90>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS()
	{
		return invoker::invoke<BOOL, 0xA5D42B526D34A833, 0xCD5304>();
	}

	FORCEINLINE auto NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED()
	{
		return invoker::invoke<void, 0xDF9CDAB22CD2E6EF, 0x1704638>();
	}

	FORCEINLINE auto NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT()
	{
		return invoker::invoke<BOOL, 0x1BF2060736C8594C, 0xD1F814>();
	}

	FORCEINLINE auto NETWORK_HAVE_PLATFORM_SUBSCRIPTION()
	{
		return invoker::invoke<BOOL, 0x47C5F1CAA6A07D67, 0xCD4A74>();
	}

	FORCEINLINE auto NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING()
	{
		return invoker::invoke<BOOL, 0x6C8E92D4F56B150E, 0xCD5144>();
	}

	FORCEINLINE auto NETWORK_SHOW_ACCOUNT_UPGRADE_UI()
	{
		return invoker::invoke<void, 0x130048FEFDA3B288, 0xCD6AC0>();
	}

	FORCEINLINE auto NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL()
	{
		return invoker::invoke<BOOL, 0x348A57FA9B720374, 0xCD5440>();
	}

	FORCEINLINE auto NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED()
	{
		return invoker::invoke<BOOL, 0xEF3203CB3CD405D3, 0xCD585C>();
	}

	FORCEINLINE auto NETWORK_CAN_BAIL()
	{
		return invoker::invoke<BOOL, 0xF08B45C0CEBE11C2, 0xCD2B54>();
	}

	FORCEINLINE auto NETWORK_BAIL(int p0, int p1, int p2)
	{
		return invoker::invoke<void, 0xB0926B14C2D3A838, 0xCD2A7C>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_ON_RETURN_TO_SINGLE_PLAYER()
	{
		return invoker::invoke<void, 0x2920E3AB45CC75B8, 0xCD5878>();
	}

	FORCEINLINE auto NETWORK_TRANSITION_START(int p0, Any p1, Any p2, Any p3)
	{
		return invoker::invoke<BOOL, 0xC92F64C449585057, 0xCD6C98>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_TRANSITION_ADD_STAGE(Hash hash, int p1, int p2, int state, int p4)
	{
		return invoker::invoke<BOOL, 0x350F7DB8B2765EC2, 0xCD6BF4>(hash, p1, p2, state, p4);
	}

	FORCEINLINE auto NETWORK_TRANSITION_FINISH(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x232D3561D0F9CC6E, 0xCD6C30>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_CAN_ACCESS_MULTIPLAYER(int* loadingState)
	{
		return invoker::invoke<BOOL, 0xC81430427CA20D7, 0xCD2B30>(loadingState);
	}

	FORCEINLINE auto NETWORK_IS_MULTIPLAYER_DISABLED()
	{
		return invoker::invoke<BOOL, 0xB1839CEE630503F9, 0xCD50C4>();
	}

	FORCEINLINE auto NETWORK_CAN_ENTER_MULTIPLAYER()
	{
		return invoker::invoke<BOOL, 0x5FA9B89685B7F17E, 0xCD2B94>();
	}

	FORCEINLINE auto NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<BOOL, 0xD9082A1A08CF156E, 0xCD5F94>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SESSION_DO_FRIEND_MATCHMAKING(int p0, int p1, int p2)
	{
		return invoker::invoke<BOOL, 0x563974EC0E4F379, 0xCD5FC0>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SESSION_DO_CREW_MATCHMAKING(int crewId, int p1, int p2, int maxPlayers)
	{
		return invoker::invoke<BOOL, 0x2FFEC9DB9C5EB929, 0xCD5F64>(crewId, p1, p2, maxPlayers);
	}

	FORCEINLINE auto NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(Any p0, Any p1, Any p2, Any p3, Any p4)
	{
		return invoker::invoke<BOOL, 0x3B554BBD6F262ED5, 0xCD5F2C>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_SESSION_HOST(int p0, int maxPlayers, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x255FDE258192D9FE, 0xCD60F8>(p0, maxPlayers, p2);
	}

	FORCEINLINE auto NETWORK_SESSION_HOST_CLOSED(int p0, int maxPlayers)
	{
		return invoker::invoke<BOOL, 0xE2C5447EB91CC682, 0xCD6128>(p0, maxPlayers);
	}

	FORCEINLINE auto NETWORK_SESSION_HOST_FRIENDS_ONLY(int p0, int maxPlayers)
	{
		return invoker::invoke<BOOL, 0x4F279069441DF335, 0xCD6150>(p0, maxPlayers);
	}

	FORCEINLINE auto NETWORK_SESSION_IS_CLOSED_FRIENDS()
	{
		return invoker::invoke<BOOL, 0xCA440502CAC1617C, 0xCD61DC>();
	}

	FORCEINLINE auto NETWORK_SESSION_IS_CLOSED_CREW()
	{
		return invoker::invoke<BOOL, 0x568C5A2B6834D226, 0xCD61B4>();
	}

	FORCEINLINE auto NETWORK_SESSION_IS_SOLO()
	{
		return invoker::invoke<BOOL, 0xDC8C0439F5CD3C85, 0xCD6278>();
	}

	FORCEINLINE auto NETWORK_SESSION_IS_PRIVATE()
	{
		return invoker::invoke<BOOL, 0x6CCB49E4B35F59D6, 0xCD6250>();
	}

	FORCEINLINE auto _NETWORK_SESSION_LEAVE_INCLUDING_REASON(int leaveFlags, int leaveReason)
	{
		return invoker::invoke<BOOL, 0xE0128328CF1FD9F4, 0xCD635C>(leaveFlags, leaveReason);
	}

	FORCEINLINE auto NETWORK_SESSION_END(BOOL p0, BOOL p1)
	{
		return invoker::invoke<BOOL, 0xD0C8A7FF1FD5A461, 0xCD5FEC>(p0, p1);
	}

	FORCEINLINE auto NETWORK_SESSION_LEAVE(Any p0)
	{
		return invoker::invoke<BOOL, 0x8FFE1F924EF00340, 0xCD6334>(p0);
	}

	FORCEINLINE auto NETWORK_SESSION_KICK_PLAYER(Player player)
	{
		return invoker::invoke<void, 0xE8B604AD9A55DE39, 0xCD6328>(player);
	}

	FORCEINLINE auto NETWORK_SESSION_GET_KICK_VOTE(Player player)
	{
		return invoker::invoke<BOOL, 0xB1397F80306800D5, 0xCD6058>(player);
	}

	FORCEINLINE auto NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x66E498254807DB77, 0xCD63AC>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION()
	{
		return invoker::invoke<BOOL, 0x68CB8278CA2DB28D, 0xCD56C0>();
	}

	FORCEINLINE auto NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION()
	{
		return invoker::invoke<BOOL, 0x7C2F429F5A70EFE8, 0xCD56E4>();
	}

	FORCEINLINE auto NETWORK_SESSION_SET_MATCHMAKING_GROUP(int matchmakingGroup)
	{
		return invoker::invoke<void, 0x9A651BCFA544373C, 0xCD6400>(matchmakingGroup);
	}

	FORCEINLINE auto NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(int playerType, int playerCount)
	{
		return invoker::invoke<void, 0x4EDA84E31A9AD294, 0xCD6420>(playerType, playerCount);
	}

	FORCEINLINE auto NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(int p0)
	{
		return invoker::invoke<int, 0x90383DF0E1713198, 0xCD607C>(p0);
	}

	FORCEINLINE auto NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(int groupId)
	{
		return invoker::invoke<void, 0x5A59537D7B87C071, 0xCD5EE4>(groupId);
	}

	FORCEINLINE auto NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(Any p0)
	{
		return invoker::invoke<void, 0xC2FDE8BF0797A991, 0xCD6488>(p0);
	}

	FORCEINLINE auto NETWORK_SESSION_GET_UNIQUE_CREW_LIMIT()
	{
		return invoker::invoke<int, 0xCDC936BF35EDCB73, 0xCD60D4>();
	}

	FORCEINLINE auto NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(Any p0)
	{
		return invoker::invoke<void, 0x93055E37701645DF, 0xCD64A0>(p0);
	}

	FORCEINLINE auto NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(BOOL p0)
	{
		return invoker::invoke<void, 0x3A777FFCB6CEEC68, 0xCD64B8>(p0);
	}

	FORCEINLINE auto NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(Any p0)
	{
		return invoker::invoke<void, 0x748527CDF8982E12, 0xCD63DC>(p0);
	}

	FORCEINLINE auto NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(BOOL p0)
	{
		return invoker::invoke<void, 0x97FAFBDA1C653C51, 0xCD646C>(p0);
	}

	FORCEINLINE auto NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(int p0)
	{
		return invoker::invoke<void, 0xAECA84689B07DB71, 0xCD644C>(p0);
	}

	FORCEINLINE auto NETWORK_SESSION_SET_NUM_BOSSES(int num)
	{
		return invoker::invoke<void, 0x76B38120ECD9A6EE, 0x81A1C0>(num);
	}

	FORCEINLINE auto NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN()
	{
		return invoker::invoke<void, 0x19B1BD7BD2BA430B, 0xCD6480>();
	}

	FORCEINLINE auto NETWORK_SESSION_VALIDATE_JOIN(BOOL p0)
	{
		return invoker::invoke<void, 0xD327503849EFC7D2, 0xCD64D4>(p0);
	}

	FORCEINLINE auto NETWORK_ADD_FOLLOWERS(int* p0, int p1)
	{
		return invoker::invoke<void, 0x26AC5C43C19083BA, 0xCD2768>(p0, p1);
	}

	FORCEINLINE auto NETWORK_CLEAR_FOLLOWERS()
	{
		return invoker::invoke<void, 0x9758CB6BB2E4700F, 0xCD3168>();
	}

	FORCEINLINE auto NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(int* hours, int* minutes, int* seconds)
	{
		return invoker::invoke<void, 0x7CA15BD368B8D693, 0xCD3B78>(hours, minutes, seconds);
	}

	FORCEINLINE auto NETWORK_SESSION_SET_GAMEMODE(Any p0)
	{
		return invoker::invoke<void, 0xD51099E517218F8C, 0xCD63F4>(p0);
	}

	FORCEINLINE auto NETWORK_SESSION_GET_HOST_AIM_PREFERENCE()
	{
		return invoker::invoke<int, 0x672C2841CFBEC1A5, 0xCD6038>();
	}

	FORCEINLINE auto NETWORK_FIND_GAMERS_IN_CREW(int crewId)
	{
		return invoker::invoke<BOOL, 0xC3213134B5223EB, 0xCD36B0>(crewId);
	}

	FORCEINLINE auto NETWORK_FIND_MATCHED_GAMERS(int attribute, float fallbackLimit, float lowerLimit, float upperLimit)
	{
		return invoker::invoke<BOOL, 0x748C69C64ED4F080, 0xCD3724>(attribute, fallbackLimit, lowerLimit, upperLimit);
	}

	FORCEINLINE auto NETWORK_IS_FINDING_GAMERS()
	{
		return invoker::invoke<BOOL, 0xDD718E172A233DC5, 0xCD4E0C>();
	}

	FORCEINLINE auto NETWORK_DID_FIND_GAMERS_SUCCEED()
	{
		return invoker::invoke<BOOL, 0x6612FC080482B408, 0xCD32A8>();
	}

	FORCEINLINE auto NETWORK_GET_NUM_FOUND_GAMERS()
	{
		return invoker::invoke<int, 0x7B74C2465094BAE7, 0xCD3E04>();
	}

	FORCEINLINE auto NETWORK_GET_FOUND_GAMER(Any* p0, Any p1)
	{
		return invoker::invoke<BOOL, 0x9A791B1482F74599, 0xCD3AA0>(p0, p1);
	}

	FORCEINLINE auto NETWORK_CLEAR_FOUND_GAMERS()
	{
		return invoker::invoke<void, 0x40F220671F7EF07D, 0xCD3198>();
	}

	FORCEINLINE auto NETWORK_QUEUE_GAMER_FOR_STATUS(Any* p0)
	{
		return invoker::invoke<BOOL, 0xA35EFADA8B877384, 0xCD5AF0>(p0);
	}

	FORCEINLINE auto NETWORK_GET_GAMER_STATUS_FROM_QUEUE()
	{
		return invoker::invoke<BOOL, 0x23F4D421F65F56BD, 0xCD3B18>();
	}

	FORCEINLINE auto NETWORK_IS_GETTING_GAMER_STATUS()
	{
		return invoker::invoke<BOOL, 0x124398C14F6A1133, 0xCD4FA0>();
	}

	FORCEINLINE auto NETWORK_DID_GET_GAMER_STATUS_SUCCEED()
	{
		return invoker::invoke<BOOL, 0xC0AA79A8808D5BA2, 0xCD32C4>();
	}

	FORCEINLINE auto NETWORK_GET_GAMER_STATUS_RESULT(Any* p0, Any p1)
	{
		return invoker::invoke<BOOL, 0x8A4CF1E65E8A0EC, 0xCD3B34>(p0, p1);
	}

	FORCEINLINE auto NETWORK_CLEAR_GET_GAMER_STATUS()
	{
		return invoker::invoke<void, 0x1718FDF9693BFC2B, 0xCD31A0>();
	}

	FORCEINLINE auto NETWORK_SESSION_JOIN_INVITE()
	{
		return invoker::invoke<void, 0x65ED066142EEE36, 0xCD631C>();
	}

	FORCEINLINE auto NETWORK_SESSION_CANCEL_INVITE()
	{
		return invoker::invoke<void, 0xB1354B4526064BB6, 0xCD5F14>();
	}

	FORCEINLINE auto NETWORK_SESSION_FORCE_CANCEL_INVITE()
	{
		return invoker::invoke<void, 0x700F61510EE70767, 0xCD6030>();
	}

	FORCEINLINE auto NETWORK_HAS_PENDING_INVITE()
	{
		return invoker::invoke<BOOL, 0x6F5C1B03EC881534, 0xCD4824>();
	}

	FORCEINLINE auto NETWORK_HAS_CONFIRMED_INVITE()
	{
		return invoker::invoke<BOOL, 0x60EDC5810CB82627, 0xCD4688>();
	}

	FORCEINLINE auto NETWORK_REQUEST_INVITE_CONFIRMED_EVENT()
	{
		return invoker::invoke<BOOL, 0x4AA344248B02BD35, 0xCD5D20>();
	}

	FORCEINLINE auto NETWORK_SESSION_WAS_INVITED()
	{
		return invoker::invoke<BOOL, 0x8F676111F5795F1C, 0xCD6568>();
	}

	FORCEINLINE auto NETWORK_SESSION_GET_INVITER(Any* gamerHandle)
	{
		return invoker::invoke<void, 0xDAB06DF0C53853BB, 0xCD604C>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE()
	{
		return invoker::invoke<BOOL, 0xC05DC36AE101C2BB, 0xCD6190>();
	}

	FORCEINLINE auto NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION()
	{
		return invoker::invoke<BOOL, 0xD03C646667D8D5F1, 0xCD6204>();
	}

	FORCEINLINE auto NETWORK_SUPPRESS_INVITE(BOOL toggle)
	{
		return invoker::invoke<void, 0x408B17CF0BA8B155, 0xCD6BB4>(toggle);
	}

	FORCEINLINE auto NETWORK_BLOCK_INVITES(BOOL toggle)
	{
		return invoker::invoke<void, 0xF303C195C2A60638, 0xCD2ABC>(toggle);
	}

	FORCEINLINE auto NETWORK_BLOCK_JOIN_QUEUE_INVITES(BOOL toggle)
	{
		return invoker::invoke<void, 0x6E8BBCAC6E64214C, 0xCD2AD4>(toggle);
	}

	FORCEINLINE auto NETWORK_SET_CAN_RECEIVE_RS_INVITES(BOOL p0)
	{
		return invoker::invoke<void, 0x7AFB027C1EB91ABE, 0xCD65F8>(p0);
	}

	FORCEINLINE auto NETWORK_STORE_INVITE_THROUGH_RESTART()
	{
		return invoker::invoke<void, 0x918B9A135FB8B81F, 0xCD6BA8>();
	}

	FORCEINLINE auto NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(BOOL p0)
	{
		return invoker::invoke<void, 0x93F98BC782D307FF, 0xCD2858>(p0);
	}

	FORCEINLINE auto NETWORK_SET_SCRIPT_READY_FOR_EVENTS(BOOL toggle)
	{
		return invoker::invoke<void, 0x10B4F03DA622008C, 0xCD6970>(toggle);
	}

	FORCEINLINE auto NETWORK_IS_OFFLINE_INVITE_PENDING()
	{
		return invoker::invoke<BOOL, 0xDB0CDDD9A5B1C7A9, 0xCD5104>();
	}

	FORCEINLINE auto NETWORK_CLEAR_OFFLINE_INVITE_PENDING()
	{
		return invoker::invoke<void, 0x984AEF3A625C58C4, 0xCD31CC>();
	}

	FORCEINLINE auto _NETWORK_INVITE_GET_JOIN_FAIL_REASON()
	{
		return invoker::invoke<const char*, 0x7B335F84501145BB, 0xCD4BFC>();
	}

	FORCEINLINE auto _NETWORK_INVITE_CLEAR_JOIN_FAIL_REASON()
	{
		return invoker::invoke<void, 0x8EF5F5811A940F82, 0xCD4B98>();
	}

	FORCEINLINE auto NETWORK_SESSION_HOST_SINGLE_PLAYER(int p0)
	{
		return invoker::invoke<void, 0x827C8918F31EF9CD, 0xCD6178>(p0);
	}

	FORCEINLINE auto NETWORK_SESSION_LEAVE_SINGLE_PLAYER()
	{
		return invoker::invoke<void, 0x566589BD8D826713, 0xCD6384>();
	}

	FORCEINLINE auto NETWORK_IS_GAME_IN_PROGRESS()
	{
		return invoker::invoke<BOOL, 0x76CD105BCAC6EB9F, 0xCD4F90>();
	}

	FORCEINLINE auto NETWORK_IS_SESSION_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x7B3F26F5D11BF3BE, 0xCD53EC>();
	}

	FORCEINLINE auto NETWORK_IS_IN_SESSION()
	{
		return invoker::invoke<BOOL, 0xBF52D447C795492B, 0xCD53EC>();
	}

	FORCEINLINE auto _NETWORK_IS_AMERICAS_VERSION()
	{
		return invoker::invoke<BOOL, 0x292BD7F3766CEBC, 0xCCE8A8>();
	}

	FORCEINLINE auto NETWORK_IS_SESSION_STARTED()
	{
		return invoker::invoke<BOOL, 0x2312C61FB9082621, 0xCD5424>();
	}

	FORCEINLINE auto NETWORK_IS_SESSION_BUSY()
	{
		return invoker::invoke<BOOL, 0xAB8F1746453732A4, 0xCD5408>();
	}

	FORCEINLINE auto NETWORK_CAN_SESSION_END()
	{
		return invoker::invoke<BOOL, 0x2CA491A425D49E0D, 0xCD2C24>();
	}

	FORCEINLINE auto NETWORK_GET_GAME_MODE()
	{
		return invoker::invoke<int, 0x83E35AD37CFCE6F6, 0xCD3B5C>();
	}

	FORCEINLINE auto NETWORK_SESSION_MARK_VISIBLE(BOOL toggle)
	{
		return invoker::invoke<void, 0x4C4BDAB6F7441447, 0xCD639C>(toggle);
	}

	FORCEINLINE auto NETWORK_SESSION_IS_VISIBLE()
	{
		return invoker::invoke<BOOL, 0x6887ED8BDFBE2715, 0xCD62A0>();
	}

	FORCEINLINE auto NETWORK_SESSION_BLOCK_JOIN_REQUESTS(BOOL toggle)
	{
		return invoker::invoke<void, 0x82B8FC206B9F77F8, 0xCD5F04>(toggle);
	}

	FORCEINLINE auto NETWORK_SESSION_CHANGE_SLOTS(int slots, BOOL p1)
	{
		return invoker::invoke<void, 0x6160ECE40167CDEA, 0xCD5F1C>(slots, p1);
	}

	FORCEINLINE auto NETWORK_SESSION_GET_PRIVATE_SLOTS()
	{
		return invoker::invoke<int, 0x7EE8EFCDD1DAF8E8, 0xCD60B0>();
	}

	FORCEINLINE auto NETWORK_SESSION_VOICE_HOST()
	{
		return invoker::invoke<BOOL, 0xD9C7584E971C091E, 0xCD64F0>();
	}

	FORCEINLINE auto NETWORK_SESSION_VOICE_LEAVE()
	{
		return invoker::invoke<BOOL, 0x7D8697356CC73FFD, 0xCD6514>();
	}

	FORCEINLINE auto NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(Any* gamerHandle)
	{
		return invoker::invoke<void, 0x2D78E296BAAE4A1, 0xCD64E4>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(BOOL p0, int p1)
	{
		return invoker::invoke<void, 0x4C07C028D5A3A1A, 0xCD6538>(p0, p1);
	}

	FORCEINLINE auto NETWORK_SESSION_VOICE_SET_TIMEOUT(int timeout)
	{
		return invoker::invoke<void, 0xBA4DB04D93B492EF, 0xCD6554>(timeout);
	}

	FORCEINLINE auto NETWORK_SESSION_IS_IN_VOICE_SESSION()
	{
		return invoker::invoke<BOOL, 0x5150DDF9D3BDA9E5, 0xCD622C>();
	}

	FORCEINLINE auto NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x810D839B3DC43B18, 0xCD62D4>();
	}

	FORCEINLINE auto NETWORK_SESSION_IS_VOICE_SESSION_BUSY()
	{
		return invoker::invoke<BOOL, 0x8BDB5F6FED3994AD, 0xCD62F8>();
	}

	FORCEINLINE auto NETWORK_SEND_TEXT_MESSAGE(const char* message, Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x44FC944CCE2884A5, 0xCD5E50>(message, gamerHandle);
	}

	FORCEINLINE auto NETWORK_SET_ACTIVITY_SPECTATOR(BOOL toggle)
	{
		return invoker::invoke<void, 0x7815F93AD7950188, 0xCD6590>(toggle);
	}

	FORCEINLINE auto NETWORK_IS_ACTIVITY_SPECTATOR()
	{
		return invoker::invoke<BOOL, 0x8B6869C5EC0F62C3, 0xCD4C4C>();
	}

	FORCEINLINE auto NETWORK_SET_ACTIVITY_PLAYER_MAX(Any p0)
	{
		return invoker::invoke<void, 0xE637CC36B406C3BD, 0xCD657C>(p0);
	}

	FORCEINLINE auto NETWORK_SET_ACTIVITY_SPECTATOR_MAX(int maxSpectators)
	{
		return invoker::invoke<void, 0xD813155D5FA37C96, 0xCD65A8>(maxSpectators);
	}

	FORCEINLINE auto NETWORK_GET_ACTIVITY_PLAYER_NUM(BOOL p0)
	{
		return invoker::invoke<int, 0x148F075BF593134E, 0xCD381C>(p0);
	}

	FORCEINLINE auto NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xDFA2DE98496613A2, 0xCD4C60>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_HOST_TRANSITION(int p0, int p1, int p2, int p3, Any p4, BOOL p5, BOOL p6, int p7, Any p8, int p9)
	{
		return invoker::invoke<BOOL, 0xD8DD13235608C9D0, 0xCD4B80>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	FORCEINLINE auto NETWORK_DO_TRANSITION_QUICKMATCH(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<BOOL, 0xFC1123FE6C7D5909, 0xCD33B4>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<BOOL, 0x1C9B0FC57F5144E, 0xCD33F4>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(Any p0, Any p1, Any p2, Any p3, Any* p4, Any p5, Any p6, Any p7)
	{
		return invoker::invoke<BOOL, 0x8AB21B54A01F6CC2, 0xCD3434>(p0, p1, p2, p3, p4, p5, p6, p7);
	}

	FORCEINLINE auto NETWORK_JOIN_GROUP_ACTIVITY()
	{
		return invoker::invoke<BOOL, 0x646BC1CC9552A232, 0xCD569C>();
	}

	FORCEINLINE auto NETWORK_CLEAR_GROUP_ACTIVITY()
	{
		return invoker::invoke<void, 0x6AF1528AD00C76A2, 0xCD31A8>();
	}

	FORCEINLINE auto NETWORK_RETAIN_ACTIVITY_GROUP()
	{
		return invoker::invoke<void, 0x7FFE6853F63E56BA, 0xCD5DA0>();
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_CLOSED_FRIENDS()
	{
		return invoker::invoke<BOOL, 0x250E5C2B310DC7C4, 0xCD54E4>();
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_CLOSED_CREW()
	{
		return invoker::invoke<BOOL, 0x2D7D4A7EDC2C2543, 0xCD54BC>();
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_SOLO()
	{
		return invoker::invoke<BOOL, 0x3EC1F83231603B24, 0xCD55D4>();
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_PRIVATE()
	{
		return invoker::invoke<BOOL, 0x1ABB34FE0E4550C3, 0xCD55AC>();
	}

	FORCEINLINE auto NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS()
	{
		return invoker::invoke<int, 0x1F97DCD0259BD8BB, 0xCD3E84>();
	}

	FORCEINLINE auto NETWORK_MARK_AS_PREFERRED_ACTIVITY(BOOL p0)
	{
		return invoker::invoke<void, 0x8C15D9F9A0692305, 0xCD57E4>(p0);
	}

	FORCEINLINE auto NETWORK_MARK_AS_WAITING_ASYNC(BOOL p0)
	{
		return invoker::invoke<void, 0x5B6118C4A1363B02, 0xCD57FC>(p0);
	}

	FORCEINLINE auto NETWORK_SET_IN_PROGRESS_FINISH_TIME(Any p0)
	{
		return invoker::invoke<void, 0x4E0E12D39BE69892, 0xCD679C>(p0);
	}

	FORCEINLINE auto NETWORK_SET_TRANSITION_CREATOR_HANDLE(Any* p0)
	{
		return invoker::invoke<void, 0x5B4AC3576C9F22EA, 0xCD69F8>(p0);
	}

	FORCEINLINE auto NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE()
	{
		return invoker::invoke<void, 0x5AB2FA2EDFF61EB9, 0xCD31E8>();
	}

	FORCEINLINE auto NETWORK_INVITE_GAMERS_TO_TRANSITION(Any* p0, Any p1)
	{
		return invoker::invoke<BOOL, 0x6DD03E2B054A8A3F, 0xCD4BD4>(p0, p1);
	}

	FORCEINLINE auto NETWORK_SET_GAMER_INVITED_TO_TRANSITION(Any* gamerHandle)
	{
		return invoker::invoke<void, 0xB502672BBF33603F, 0xCD6720>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_LEAVE_TRANSITION()
	{
		return invoker::invoke<BOOL, 0x2B0E6E483C2214A4, 0xCD5790>();
	}

	FORCEINLINE auto NETWORK_LAUNCH_TRANSITION()
	{
		return invoker::invoke<BOOL, 0x7FF4763F9198B0EE, 0xCD5740>();
	}

	FORCEINLINE auto NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(BOOL toggle)
	{
		return invoker::invoke<void, 0xA1DA526BBDEF1146, 0xCD66D0>(toggle);
	}

	FORCEINLINE auto NETWORK_CANCEL_TRANSITION_MATCHMAKING()
	{
		return invoker::invoke<void, 0x1FB39C4C10D6F290, 0xCD2B24>();
	}

	FORCEINLINE auto NETWORK_BAIL_TRANSITION(int p0, int p1, int p2)
	{
		return invoker::invoke<void, 0x891F7D003513A461, 0xCD2A90>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_DO_TRANSITION_TO_GAME(BOOL p0, int maxPlayers)
	{
		return invoker::invoke<BOOL, 0x58B069A2B3372724, 0xCD34C8>(p0, maxPlayers);
	}

	FORCEINLINE auto NETWORK_DO_TRANSITION_TO_NEW_GAME(BOOL p0, int maxPlayers, BOOL p2)
	{
		return invoker::invoke<BOOL, 0x35628CF57A78C4CD, 0xCD353C>(p0, maxPlayers, p2);
	}

	FORCEINLINE auto NETWORK_DO_TRANSITION_TO_FREEMODE(Any* p0, Any p1, BOOL p2, int players, BOOL p4)
	{
		return invoker::invoke<BOOL, 0x26A3263324259353, 0xCD348C>(p0, p1, p2, players, p4);
	}

	FORCEINLINE auto NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(Any* p0, Any p1, int players, BOOL p3, BOOL p4, BOOL p5)
	{
		return invoker::invoke<BOOL, 0x9D1FE8B2049C8437, 0xCD34F4>(p0, p1, players, p3, p4, p5);
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_TO_GAME()
	{
		return invoker::invoke<BOOL, 0x38D0A140AB80B25C, 0xCD5618>();
	}

	FORCEINLINE auto NETWORK_GET_TRANSITION_MEMBERS(Any* data, int dataCount)
	{
		return invoker::invoke<int, 0xE82C4DFDE9FB1B8B, 0xCD4484>(data, dataCount);
	}

	FORCEINLINE auto NETWORK_APPLY_TRANSITION_PARAMETER(int p0, int p1)
	{
		return invoker::invoke<void, 0x9B74CCFFA48B4E55, 0xCD2990>(p0, p1);
	}

	FORCEINLINE auto NETWORK_APPLY_TRANSITION_PARAMETER_STRING(int p0, const char* string, BOOL p2)
	{
		return invoker::invoke<void, 0x9F634E841D2FDFE7, 0xCD29AC>(p0, string, p2);
	}

	FORCEINLINE auto NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(Any* gamerHandle, const char* p1, int p2, int p3, BOOL p4)
	{
		return invoker::invoke<BOOL, 0xD13EB0279D039C8B, 0xCD5E78>(gamerHandle, p1, p2, p3, p4);
	}

	FORCEINLINE auto NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(Any* p0)
	{
		return invoker::invoke<BOOL, 0x3E331587D83F6765, 0xCD5814>(p0);
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_HOST()
	{
		return invoker::invoke<BOOL, 0xD0A8F3B0E848A00C, 0xCD550C>();
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xC8827E144B173DFB, 0xCD5538>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_GET_TRANSITION_HOST(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xE344B3616A2C3592, 0xCD4460>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_IS_IN_TRANSITION()
	{
		return invoker::invoke<BOOL, 0xFFB255D6878CB691, 0xCD5074>();
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_STARTED()
	{
		return invoker::invoke<BOOL, 0x46AEFA18F83E2E9B, 0xCD55FC>();
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_BUSY()
	{
		return invoker::invoke<BOOL, 0xBEBFA329956ABA4C, 0xCD549C>();
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_MATCHMAKING()
	{
		return invoker::invoke<BOOL, 0xF34D7A660FA4A707, 0xCD5570>();
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_LEAVE_POSTPONED()
	{
		return invoker::invoke<BOOL, 0x3925DD69CFF095F4, 0xCD555C>();
	}

	FORCEINLINE auto NETWORK_TRANSITION_SET_IN_PROGRESS(Any p0)
	{
		return invoker::invoke<void, 0x378AFFC55A6E480C, 0xCD6C7C>(p0);
	}

	FORCEINLINE auto NETWORK_TRANSITION_SET_CONTENT_CREATOR(Any p0)
	{
		return invoker::invoke<void, 0xAB1097B46FD0ECE9, 0xCD6C64>(p0);
	}

	FORCEINLINE auto NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(Any p0)
	{
		return invoker::invoke<void, 0x4470407B9FB1A6E0, 0xCD6C44>(p0);
	}

	FORCEINLINE auto NETWORK_OPEN_TRANSITION_MATCHMAKING()
	{
		return invoker::invoke<void, 0x1729D05F2DC94AF9, 0xCD5884>();
	}

	FORCEINLINE auto NETWORK_CLOSE_TRANSITION_MATCHMAKING()
	{
		return invoker::invoke<void, 0xFC98CB0BBC0A0A7B, 0xCD3208>();
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING()
	{
		return invoker::invoke<BOOL, 0x15968F67A02D1437, 0xCD5584>();
	}

	FORCEINLINE auto NETWORK_SET_TRANSITION_VISIBILITY_LOCK(BOOL p0, BOOL p1)
	{
		return invoker::invoke<void, 0x7C7E0FB84F9E6CEE, 0xCD6A04>(p0, p1);
	}

	FORCEINLINE auto NETWORK_IS_TRANSITION_VISIBILITY_LOCKED()
	{
		return invoker::invoke<BOOL, 0x4AAE1A24667185BB, 0xCD5634>();
	}

	FORCEINLINE auto NETWORK_SET_TRANSITION_ACTIVITY_ID(Any p0)
	{
		return invoker::invoke<void, 0x55EB8BA1CE3E5D52, 0xCD69EC>(p0);
	}

	FORCEINLINE auto NETWORK_CHANGE_TRANSITION_SLOTS(Any p0, BOOL p1)
	{
		return invoker::invoke<void, 0xE22626CD864678B3, 0xCD2CD8>(p0, p1);
	}

	FORCEINLINE auto NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(BOOL p0)
	{
		return invoker::invoke<void, 0x16CB1C9CEF606A50, 0xCD6C20>(p0);
	}

	FORCEINLINE auto NETWORK_HAS_PLAYER_STARTED_TRANSITION(Player player)
	{
		return invoker::invoke<BOOL, 0x5CB105D3EB58499C, 0xCD4868>(player);
	}

	FORCEINLINE auto NETWORK_ARE_TRANSITION_DETAILS_VALID(Any p0)
	{
		return invoker::invoke<BOOL, 0xF59281E510228E22, 0xCD2A44>(p0);
	}

	FORCEINLINE auto NETWORK_JOIN_TRANSITION(Player player)
	{
		return invoker::invoke<BOOL, 0xB8EB69DE72AD71E, 0xCD5708>(player);
	}

	FORCEINLINE auto NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(Any* p0)
	{
		return invoker::invoke<BOOL, 0xD5C2153418DB9348, 0xCD47DC>(p0);
	}

	FORCEINLINE auto NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(Any* p0)
	{
		return invoker::invoke<BOOL, 0xE9E0BE3414B91F8E, 0xCD49C0>(p0);
	}

	FORCEINLINE auto NETWORK_IS_ACTIVITY_SESSION()
	{
		return invoker::invoke<BOOL, 0x834C960822A4683F, 0xCD4C20>();
	}

	FORCEINLINE auto NETWORK_DISABLE_REALTIME_MULTIPLAYER()
	{
		return invoker::invoke<void, 0xF4DE15907AAE2E3A, 0x81A1C0>();
	}

	FORCEINLINE auto NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(BOOL toggle)
	{
		return invoker::invoke<void, 0x690E83E7292EA12C, 0xCD68D0>(toggle);
	}

	FORCEINLINE auto NETWORK_SEND_INVITE_VIA_PRESENCE(Any* gamerHandle, const char* p1, int dataCount, int p3)
	{
		return invoker::invoke<BOOL, 0xBB7F9D4FB57B4FFA, 0xCD5E14>(gamerHandle, p1, dataCount, p3);
	}

	FORCEINLINE auto NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(Any* gamerHandle, const char* p1, int dataCount, int p3)
	{
		return invoker::invoke<BOOL, 0x6651FAED711991F0, 0xCD5EB4>(gamerHandle, p1, dataCount, p3);
	}

	FORCEINLINE auto NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(Any* gamerHandle, const char* p1, int dataCount, int p3)
	{
		return invoker::invoke<BOOL, 0xA8778038A42EA249, 0xCD5DE4>(gamerHandle, p1, dataCount, p3);
	}

	FORCEINLINE auto NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(int p0)
	{
		return invoker::invoke<int, 0x7F36EF28AE77E331, 0xCD412C>(p0);
	}

	FORCEINLINE auto NETWORK_GET_NUM_PRESENCE_INVITES()
	{
		return invoker::invoke<int, 0xA21ED22C344748B0, 0xCD3E3C>();
	}

	FORCEINLINE auto NETWORK_ACCEPT_PRESENCE_INVITE(int p0)
	{
		return invoker::invoke<BOOL, 0xA69636D9FC46B96C, 0xCD24D8>(p0);
	}

	FORCEINLINE auto NETWORK_REMOVE_PRESENCE_INVITE(int p0)
	{
		return invoker::invoke<BOOL, 0x97F5F6E518D1ADB5, 0xCD5C3C>(p0);
	}

	FORCEINLINE auto NETWORK_GET_PRESENCE_INVITE_ID(int p0)
	{
		return invoker::invoke<int, 0x8BFCB98CBB3ADB9, 0xCD4104>(p0);
	}

	FORCEINLINE auto NETWORK_GET_PRESENCE_INVITE_INVITER(int p0)
	{
		return invoker::invoke<const char*, 0x4886DE678C2CE4D2, 0xCD4154>(p0);
	}

	FORCEINLINE auto NETWORK_GET_PRESENCE_INVITE_HANDLE(Any p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0x9533853565DED3F7, 0xCD40DC>(p0, p1);
	}

	FORCEINLINE auto NETWORK_GET_PRESENCE_INVITE_SESSION_ID(Any p0)
	{
		return invoker::invoke<int, 0x32FF25F8A134DEC8, 0xCD41F8>(p0);
	}

	FORCEINLINE auto NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(int p0)
	{
		return invoker::invoke<const char*, 0xE533A869F4C34F41, 0xCD4088>(p0);
	}

	FORCEINLINE auto NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(int p0)
	{
		return invoker::invoke<int, 0x6B43310DD2DEF12, 0xCD41D0>(p0);
	}

	FORCEINLINE auto NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(int p0)
	{
		return invoker::invoke<int, 0xA9FDF40CD06A05D, 0xCD41A8>(p0);
	}

	FORCEINLINE auto NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(int p0)
	{
		return invoker::invoke<BOOL, 0xB73605870CAE4123, 0xCD40B0>(p0);
	}

	FORCEINLINE auto NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(Any p0)
	{
		return invoker::invoke<BOOL, 0x5CAC0C9085C92014, 0xCD417C>(p0);
	}

	FORCEINLINE auto NETWORK_HAS_FOLLOW_INVITE()
	{
		return invoker::invoke<BOOL, 0x6E4D523086634F4B, 0xCD4778>();
	}

	FORCEINLINE auto NETWORK_ACTION_FOLLOW_INVITE()
	{
		return invoker::invoke<BOOL, 0x9BC1C803BECC2537, 0xCD2668>();
	}

	FORCEINLINE auto NETWORK_CLEAR_FOLLOW_INVITE()
	{
		return invoker::invoke<BOOL, 0x24F6146DA6B0AD4D, 0xCD3174>();
	}

	FORCEINLINE auto NETWORK_REMOVE_AND_CANCEL_ALL_INVITES()
	{
		return invoker::invoke<void, 0x81C066ED25825D02, 0xCD5BEC>();
	}

	FORCEINLINE auto NETWORK_REMOVE_TRANSITION_INVITE(Any* p0)
	{
		return invoker::invoke<void, 0x78595F3231E58B25, 0xCD5C6C>(p0);
	}

	FORCEINLINE auto NETWORK_REMOVE_ALL_TRANSITION_INVITE()
	{
		return invoker::invoke<void, 0x646B265426E8F86D, 0xCD5BE0>();
	}

	FORCEINLINE auto NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES()
	{
		return invoker::invoke<void, 0x75F142E8DF15F74F, 0xCD5BF8>();
	}

	FORCEINLINE auto NETWORK_INVITE_GAMERS(Any* p0, Any p1, Any* p2, Any p3)
	{
		return invoker::invoke<BOOL, 0xAE84E9DFB523207B, 0xCD4BA4>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_HAS_INVITED_GAMER(Any* p0)
	{
		return invoker::invoke<BOOL, 0xE58BC7A6579889B, 0xCD47B8>(p0);
	}

	FORCEINLINE auto NETWORK_HAS_MADE_INVITE_DECISION(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xF3AA932723A7168A, 0xCD4800>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_GET_INVITE_REPLY_STATUS(Any p0)
	{
		return invoker::invoke<int, 0xEAC3CA6CF6C9EB8C, 0xCD3C38>(p0);
	}

	FORCEINLINE auto NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(Any* p0)
	{
		return invoker::invoke<BOOL, 0xAF52AA4A49D4A9B4, 0xCD3988>(p0);
	}

	FORCEINLINE auto NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(Any* p0)
	{
		return invoker::invoke<BOOL, 0xF49565F8EDB1A5AF, 0xCD6640>(p0);
	}

	FORCEINLINE auto NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(Any* p0)
	{
		return invoker::invoke<void, 0x36BA6B20E222965C, 0xCD6754>(p0);
	}

	FORCEINLINE auto NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(int p0, Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xA845292976402C0F, 0xCD2D3C>(p0, gamerHandle);
	}

	FORCEINLINE auto NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(Any p0, Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x53A0D6983FA95432, 0xCD2D14>(p0, gamerHandle);
	}

	FORCEINLINE auto NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(Any* p0, Any* p1)
	{
		return invoker::invoke<void, 0x8EBBDA7981838F74, 0xCD6744>(p0, p1);
	}

	FORCEINLINE auto FILLOUT_PM_PLAYER_LIST(Any* gamerHandle, Any p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x403A85E50E14F1BD, 0xCCDF6C>(gamerHandle, p1, p2);
	}

	FORCEINLINE auto FILLOUT_PM_PLAYER_LIST_WITH_NAMES(Any* p0, Any* p1, Any p2, Any p3)
	{
		return invoker::invoke<BOOL, 0xD57BC2EBAE7CB358, 0xCCDF98>(p0, p1, p2, p3);
	}

	FORCEINLINE auto REFRESH_PLAYER_LIST_STATS(int p0)
	{
		return invoker::invoke<BOOL, 0xAD5E28295E97B3FB, 0xCD74D0>(p0);
	}

	FORCEINLINE auto NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(Any* p0)
	{
		return invoker::invoke<BOOL, 0x9215F2CB541DA81C, 0xCD6670>(p0);
	}

	FORCEINLINE auto NETWORK_IS_IN_PLATFORM_PARTY()
	{
		return invoker::invoke<BOOL, 0x6FE3848CD1092574, 0xCD5304>();
	}

	FORCEINLINE auto NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT()
	{
		return invoker::invoke<int, 0x9DC05704C71AF6C5, 0xCD3F08>();
	}

	FORCEINLINE auto NETWORK_GET_PLATFORM_PARTY_MEMBERS(Any* data, int dataSize)
	{
		return invoker::invoke<int, 0xFFE22E756055DC96, 0xCD3EE4>(data, dataSize);
	}

	FORCEINLINE auto NETWORK_IS_IN_PLATFORM_PARTY_CHAT()
	{
		return invoker::invoke<BOOL, 0x3D7696E3D331706, 0xCD5304>();
	}

	FORCEINLINE auto NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x8510A5D786F703DC, 0xCD4CF8>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN()
	{
		return invoker::invoke<BOOL, 0xC9C468532694A690, 0xCD2BDC>();
	}

	FORCEINLINE auto NETWORK_IS_QUEUING_FOR_SESSION_JOIN()
	{
		return invoker::invoke<BOOL, 0x4E03BF5175B444A6, 0xCD533C>();
	}

	FORCEINLINE auto NETWORK_CLEAR_QUEUED_JOIN_REQUEST()
	{
		return invoker::invoke<void, 0x6CE421AEDCB62B7E, 0xCD31DC>();
	}

	FORCEINLINE auto NETWORK_SEND_QUEUED_JOIN_REQUEST()
	{
		return invoker::invoke<void, 0x2D1FE8FD7BC2BF03, 0xCD5E44>();
	}

	FORCEINLINE auto NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS()
	{
		return invoker::invoke<void, 0x180F569AF7F16BB2, 0xCD5BD4>();
	}

	FORCEINLINE auto NETWORK_SEED_RANDOM_NUMBER_GENERATOR(int seed)
	{
		return invoker::invoke<void, 0xC37AA2604D0B69E8, 0xCD5DAC>(seed);
	}

	FORCEINLINE auto NETWORK_GET_RANDOM_INT()
	{
		return invoker::invoke<int, 0xFBC07BCFFCB8DD9B, 0xCD42F8>();
	}

	FORCEINLINE auto NETWORK_GET_RANDOM_INT_RANGED(int rangeStart, int rangeEnd)
	{
		return invoker::invoke<int, 0x5A6DA0A2EEDE8B78, 0xCD432C>(rangeStart, rangeEnd);
	}

	FORCEINLINE auto _NETWORK_GET_RANDOM_FLOAT_RANGED(float rangeStart, float rangeEnd)
	{
		return invoker::invoke<float, 0xDB1A8B701601A206, 0xCD42D0>(rangeStart, rangeEnd);
	}

	FORCEINLINE auto NETWORK_PLAYER_IS_CHEATER()
	{
		return invoker::invoke<BOOL, 0xB10D024D4A098884, 0xCD5A88>();
	}

	FORCEINLINE auto NETWORK_PLAYER_GET_CHEATER_REASON()
	{
		return invoker::invoke<int, 0x36D707C40C1DCEB3, 0xCD59BC>();
	}

	FORCEINLINE auto NETWORK_PLAYER_IS_BADSPORT()
	{
		return invoker::invoke<BOOL, 0x3369879DB5987727, 0xCD5A68>();
	}

	FORCEINLINE auto REMOTE_CHEATER_PLAYER_DETECTED(Player player, int a, int b)
	{
		return invoker::invoke<BOOL, 0x1CACC0A56175FE7D, 0xCD75DC>(player, a, b);
	}

	FORCEINLINE auto BAD_SPORT_PLAYER_LEFT_DETECTED(Any* gamerHandle, int event, int amountReceived)
	{
		return invoker::invoke<BOOL, 0xC9B8B8CBF4083E0F, 0xCCCC7C>(gamerHandle, event, amountReceived);
	}

	FORCEINLINE auto NETWORK_ADD_INVALID_OBJECT_MODEL(Hash modelHash, Any p1)
	{
		return invoker::invoke<void, 0x72073521D4ACB83A, 0xCD27A0>(modelHash, p1);
	}

	FORCEINLINE auto NETWORK_REMOVE_INVALID_OBJECT_MODEL(Hash modelHash)
	{
		return invoker::invoke<void, 0x127914A94E51F42, 0xCD5C28>(modelHash);
	}

	FORCEINLINE auto NETWORK_CLEAR_INVALID_OBJECT_MODELS()
	{
		return invoker::invoke<void, 0x5D87EA74A2BF9133, 0xCD31B4>();
	}

	FORCEINLINE auto NETWORK_APPLY_PED_SCAR_DATA(Ped ped, int p1)
	{
		return invoker::invoke<void, 0xF92FD7949E52DEA2, 0xCD2980>(ped, p1);
	}

	FORCEINLINE auto NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(int maxNumMissionParticipants, BOOL p1, int instanceId)
	{
		return invoker::invoke<void, 0xDB2434E51017FFCC, 0xCD69D4>(maxNumMissionParticipants, p1, instanceId);
	}

	FORCEINLINE auto NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(Any p0, BOOL p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x384E096E4BE6261, 0xCD6D1C>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT()
	{
		return invoker::invoke<BOOL, 0xE8DB952A4BA8F328, 0xCD4404>();
	}

	FORCEINLINE auto NETWORK_GET_MAX_NUM_PARTICIPANTS()
	{
		return invoker::invoke<int, 0x95C7A22DBE7AEF4C, 0xCD3D90>();
	}

	FORCEINLINE auto NETWORK_GET_NUM_PARTICIPANTS()
	{
		return invoker::invoke<int, 0x7F258099B06D4C7C, 0xCD3E20>();
	}

	FORCEINLINE auto NETWORK_GET_SCRIPT_STATUS()
	{
		return invoker::invoke<int, 0xDFF16B5B12604EFF, 0xCD43C4>();
	}

	FORCEINLINE auto NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(int* vars, int numVars, const char* debugName)
	{
		return invoker::invoke<void, 0x6F4A865F87C7A3AD, 0xCD5B74>(vars, numVars, debugName);
	}

	FORCEINLINE auto NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(int* vars, int numVars, const char* debugName)
	{
		return invoker::invoke<void, 0x7B13DC83218D9AF5, 0xCD5B98>(vars, numVars, debugName);
	}

	FORCEINLINE auto NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x2867D5E1AD29963D, 0xCD5B2C>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x2F0F5E0292A89B1C, 0xCD5B50>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_FINISH_BROADCASTING_DATA()
	{
		return invoker::invoke<void, 0x40442590673371C9, 0xCD3758>();
	}

	FORCEINLINE auto NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA()
	{
		return invoker::invoke<BOOL, 0x37F4AB46DE999660, 0xCD488C>();
	}

	FORCEINLINE auto NETWORK_GET_PLAYER_INDEX(Player player)
	{
		return invoker::invoke<Player, 0x4470BE79F5771783, 0xCD3F74>(player);
	}

	FORCEINLINE auto NETWORK_GET_PARTICIPANT_INDEX(int index)
	{
		return invoker::invoke<int, 0x857CA6FCE5E9C84F, 0xCD3EC4>(index);
	}

	FORCEINLINE auto NETWORK_GET_PLAYER_INDEX_FROM_PED(Ped ped)
	{
		return invoker::invoke<Player, 0x1C1C92A1CBAE364B, 0xCD3F94>(ped);
	}

	FORCEINLINE auto NETWORK_GET_NUM_CONNECTED_PLAYERS()
	{
		return invoker::invoke<int, 0x6AC5EDDD33D79407, 0xCD3DE8>();
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_CONNECTED(Player player)
	{
		return invoker::invoke<BOOL, 0x89BE185F885B6CD6, 0xCD522C>(player);
	}

	FORCEINLINE auto NETWORK_GET_TOTAL_NUM_PLAYERS()
	{
		return invoker::invoke<int, 0xC259E614564DAB8F, 0xCD4444>();
	}

	FORCEINLINE auto NETWORK_IS_PARTICIPANT_ACTIVE(int p0)
	{
		return invoker::invoke<BOOL, 0x7206AEB20960CCC8, 0xCD5120>(p0);
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_ACTIVE(Player player)
	{
		return invoker::invoke<BOOL, 0x762604C40829DB72, 0xCD5170>(player);
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_A_PARTICIPANT(Player player)
	{
		return invoker::invoke<BOOL, 0xCCD470854FB0E643, 0xCD5194>(player);
	}

	FORCEINLINE auto NETWORK_IS_HOST_OF_THIS_SCRIPT()
	{
		return invoker::invoke<BOOL, 0x93E08E0F531E2C35, 0xCD5000>();
	}

	FORCEINLINE auto NETWORK_GET_HOST_OF_THIS_SCRIPT()
	{
		return invoker::invoke<Player, 0x48B835569F078653, 0xCD3BD4>();
	}

	FORCEINLINE auto NETWORK_GET_HOST_OF_SCRIPT(const char* scriptName, int instance_id, int position_hash)
	{
		return invoker::invoke<Player, 0xF1A4B8228C5E44B7, 0xCD3BAC>(scriptName, instance_id, position_hash);
	}

	FORCEINLINE auto NETWORK_SET_MISSION_FINISHED()
	{
		return invoker::invoke<void, 0xA3E878F88F44843, 0xCD6840>();
	}

	FORCEINLINE auto NETWORK_IS_SCRIPT_ACTIVE(const char* scriptName, int instance_id, BOOL p2, int position_hash)
	{
		return invoker::invoke<BOOL, 0x99F8FC8A6D8E20C0, 0xCD5384>(scriptName, instance_id, p2, position_hash);
	}

	FORCEINLINE auto NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(Hash scriptHash, int p1, BOOL p2, int p3)
	{
		return invoker::invoke<BOOL, 0x96B8D4513E0350EC, 0xCD53B8>(scriptHash, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_IS_THREAD_A_NETWORK_SCRIPT(int threadId)
	{
		return invoker::invoke<BOOL, 0x98A7AD360A44F01D, 0xCD5478>(threadId);
	}

	FORCEINLINE auto NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(const char* scriptName, int instance_id, int position_hash)
	{
		return invoker::invoke<int, 0x996932F6DFE01964, 0xCD3E5C>(scriptName, instance_id, position_hash);
	}

	FORCEINLINE auto NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT()
	{
		return invoker::invoke<int, 0xF25E5B7C1279A85B, 0xCD3C1C>();
	}

	FORCEINLINE auto NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT()
	{
		return invoker::invoke<Hash, 0x4C7F9ACFABADEB9E, 0xCD401C>();
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(Player player, const char* script, int instance_id)
	{
		return invoker::invoke<BOOL, 0xE39406DC2A852B0E, 0xCD51B8>(player, script, instance_id);
	}

	FORCEINLINE auto NETWORK_PREVENT_SCRIPT_HOST_MIGRATION()
	{
		return invoker::invoke<void, 0x102543889D51BCB6, 0xCD5AC8>();
	}

	FORCEINLINE auto NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT()
	{
		return invoker::invoke<void, 0x68F69A7905654A16, 0xCD5D44>();
	}

	FORCEINLINE auto PARTICIPANT_ID()
	{
		return invoker::invoke<Player, 0x30DE412C1194FCDD, 0xCD7354>();
	}

	FORCEINLINE auto PARTICIPANT_ID_TO_INT()
	{
		return invoker::invoke<int, 0xAE032CEDCF23C6D5, 0xCD7354>();
	}

	FORCEINLINE auto NETWORK_GET_KILLER_OF_PLAYER(Player player, Hash* weaponHash)
	{
		return invoker::invoke<Player, 0xD109ACB1A444BD9D, 0xCD3C58>(player, weaponHash);
	}

	FORCEINLINE auto NETWORK_GET_DESTROYER_OF_NETWORK_ID(int netId, Hash* weaponHash)
	{
		return invoker::invoke<Player, 0x7B8DC32252146679, 0xCD39D0>(netId, weaponHash);
	}

	FORCEINLINE auto NETWORK_GET_DESTROYER_OF_ENTITY(Entity entity, Hash* weaponHash)
	{
		return invoker::invoke<Player, 0x89DAB370A022F4CC, 0xCD39AC>(entity, weaponHash);
	}

	FORCEINLINE auto NETWORK_GET_ASSISTED_KILL_OF_ENTITY(Player player, Entity entity, int* p2)
	{
		return invoker::invoke<BOOL, 0x3DC0E2D99138397E, 0xCD3890>(player, entity, p2);
	}

	FORCEINLINE auto NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(Player player, Entity entity, int* p2)
	{
		return invoker::invoke<BOOL, 0x7DCBF1C62A9C503, 0xCD3864>(player, entity, p2);
	}

	FORCEINLINE auto NETWORK_GET_ENTITY_KILLER_OF_PLAYER(Player player, Hash* weaponHash)
	{
		return invoker::invoke<Entity, 0x630DDB54213C37C8, 0xCD3A7C>(player, weaponHash);
	}

	FORCEINLINE auto NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(const char* missionId)
	{
		return invoker::invoke<void, 0xF49F5AE96EF1A683, 0xCD6694>(missionId);
	}

	FORCEINLINE auto NETWORK_SET_CURRENT_CHAT_OPTION(int newChatOption)
	{
		return invoker::invoke<void, 0xB933C101279FCB7, 0xCD6664>(newChatOption);
	}

	FORCEINLINE auto NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(Hash mpSettingSpawn)
	{
		return invoker::invoke<void, 0xDBCD5F83F8E84B5C, 0xCD66A0>(mpSettingSpawn);
	}

	FORCEINLINE auto NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(BOOL toggle)
	{
		return invoker::invoke<void, 0x28A2896E5EB2CBE, 0xCD6A34>(toggle);
	}

	FORCEINLINE auto NETWORK_SET_VEHICLE_DRIVEN_LOCATION(Hash location)
	{
		return invoker::invoke<void, 0xA0CE91E47531D3BB, 0xCD6A5C>(location);
	}

	FORCEINLINE auto NETWORK_RESURRECT_LOCAL_PLAYER(float x, float y, float z, float heading, BOOL p4, BOOL changetime, BOOL p6, int p7, int p8)
	{
		return invoker::invoke<void, 0xF24C94A1C99DA4AB, 0xCD5D64>(x, y, z, heading, p4, changetime, p6, p7, p8);
	}

	FORCEINLINE auto NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(int time)
	{
		return invoker::invoke<void, 0xC522FBE9CCC8C20E, 0xCD67E0>(time);
	}

	FORCEINLINE auto NETWORK_IS_LOCAL_PLAYER_INVINCIBLE()
	{
		return invoker::invoke<BOOL, 0x72096E3388B1352A, 0xCD50A8>();
	}

	FORCEINLINE auto NETWORK_DISABLE_INVINCIBLE_FLASHING(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x65EEAD281B3DD2AD, 0xCD32E0>(player, toggle);
	}

	FORCEINLINE auto NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(Ped ped)
	{
		return invoker::invoke<void, 0xA8A5C2C6069112B4, 0xCD59B0>(ped);
	}

	FORCEINLINE auto NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(BOOL toggle)
	{
		return invoker::invoke<void, 0xD187A24F607E4EC1, 0xCD67EC>(toggle);
	}

	FORCEINLINE auto NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(Entity entity)
	{
		return invoker::invoke<BOOL, 0x5DAE095398CD3303, 0xCD4744>(entity);
	}

	FORCEINLINE auto NETWORK_GET_NETWORK_ID_FROM_ENTITY(Entity entity)
	{
		return invoker::invoke<int, 0xEDC5724006650308, 0xCD73B0>(entity);
	}

	FORCEINLINE auto NETWORK_GET_ENTITY_FROM_NETWORK_ID(int netId)
	{
		return invoker::invoke<Entity, 0x2D1D65495AECC04F, 0xCD39F4>(netId);
	}

	FORCEINLINE auto NETWORK_GET_ENTITY_IS_NETWORKED(Entity entity)
	{
		return invoker::invoke<BOOL, 0xC8D49539708A80B4, 0xCD3A58>(entity);
	}

	FORCEINLINE auto NETWORK_GET_ENTITY_IS_LOCAL(Entity entity)
	{
		return invoker::invoke<BOOL, 0xE639563966553FA8, 0xCD3A34>(entity);
	}

	FORCEINLINE auto NETWORK_REGISTER_ENTITY_AS_NETWORKED(Entity entity)
	{
		return invoker::invoke<void, 0xAFD7C87C41AEE7E7, 0xCD5B20>(entity);
	}

	FORCEINLINE auto NETWORK_UNREGISTER_NETWORKED_ENTITY(Entity entity)
	{
		return invoker::invoke<void, 0xE34E2B2CD0086B03, 0xCD6D5C>(entity);
	}

	FORCEINLINE auto NETWORK_DOES_NETWORK_ID_EXIST(int netId)
	{
		return invoker::invoke<BOOL, 0x2FC2FDC413532977, 0xCD331C>(netId);
	}

	FORCEINLINE auto NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(int netId)
	{
		return invoker::invoke<BOOL, 0x93BF17E19A9F0E9B, 0xCD331C>(netId);
	}

	FORCEINLINE auto NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(int netId)
	{
		return invoker::invoke<BOOL, 0x460D2A8B2C7DC7D4, 0xCD5CFC>(netId);
	}

	FORCEINLINE auto NETWORK_HAS_CONTROL_OF_NETWORK_ID(int netId)
	{
		return invoker::invoke<BOOL, 0xEADBDBE0422CF7E6, 0xCD46FC>(netId);
	}

	FORCEINLINE auto NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(int netId)
	{
		return invoker::invoke<BOOL, 0x5766C800B3721367, 0xCD50E0>(netId);
	}

	FORCEINLINE auto NETWORK_REQUEST_CONTROL_OF_ENTITY(Entity entity)
	{
		return invoker::invoke<BOOL, 0xF093E270C0B6B318, 0xCD5CD8>(entity);
	}

	FORCEINLINE auto NETWORK_REQUEST_CONTROL_OF_DOOR(int doorID)
	{
		return invoker::invoke<BOOL, 0xA6C7B9A74A74B015, 0xCD5CB4>(doorID);
	}

	FORCEINLINE auto NETWORK_HAS_CONTROL_OF_ENTITY(Entity entity)
	{
		return invoker::invoke<BOOL, 0x1B1A446EFA398EB5, 0xCD46D8>(entity);
	}

	FORCEINLINE auto NETWORK_HAS_CONTROL_OF_PICKUP(Pickup pickup)
	{
		return invoker::invoke<BOOL, 0xFB4A5FDA5B2A809, 0xCD4720>(pickup);
	}

	FORCEINLINE auto NETWORK_HAS_CONTROL_OF_DOOR(Hash doorHash)
	{
		return invoker::invoke<BOOL, 0x5C0E11904FA483A, 0xCD46B4>(doorHash);
	}

	FORCEINLINE auto NETWORK_IS_DOOR_NETWORKED(Hash doorHash)
	{
		return invoker::invoke<BOOL, 0xBC04D336219C5196, 0xCD4DA0>(doorHash);
	}

	FORCEINLINE auto VEH_TO_NET(Vehicle vehicle)
	{
		return invoker::invoke<int, 0x913A6486719A87D2, 0xCD73B0>(vehicle);
	}

	FORCEINLINE auto PED_TO_NET(Ped ped)
	{
		return invoker::invoke<int, 0x9F7A52B1537567AC, 0xCD73B0>(ped);
	}

	FORCEINLINE auto OBJ_TO_NET(Object object)
	{
		return invoker::invoke<int, 0x16FE0AE33E462D17, 0xCD73B0>(object);
	}

	FORCEINLINE auto NET_TO_VEH(int netHandle)
	{
		return invoker::invoke<Vehicle, 0xE38610F405049F71, 0xCD39F4>(netHandle);
	}

	FORCEINLINE auto NET_TO_PED(int netHandle)
	{
		return invoker::invoke<Ped, 0xC35A3A4C05A4831B, 0xCD39F4>(netHandle);
	}

	FORCEINLINE auto NET_TO_OBJ(int netHandle)
	{
		return invoker::invoke<Object, 0xAB3646235DE50E93, 0xCD39F4>(netHandle);
	}

	FORCEINLINE auto NET_TO_ENT(int netHandle)
	{
		return invoker::invoke<Entity, 0xF5014688C9788D5F, 0xCD39F4>(netHandle);
	}

	FORCEINLINE auto NETWORK_GET_LOCAL_HANDLE(Any* gamerHandle, int gamerHandleSize)
	{
		return invoker::invoke<void, 0x677540FE33795D26, 0xCD3D54>(gamerHandle, gamerHandleSize);
	}

	FORCEINLINE auto NETWORK_HANDLE_FROM_USER_ID(const char* userId, Any* gamerHandle, int gamerHandleSize)
	{
		return invoker::invoke<void, 0xF1DAEAF3D760B0ED, 0xCD4598>(userId, gamerHandle, gamerHandleSize);
	}

	FORCEINLINE auto NETWORK_HANDLE_FROM_MEMBER_ID(const char* memberId, Any* gamerHandle, int gamerHandleSize)
	{
		return invoker::invoke<void, 0xD41EE13851E1A5D7, 0xCD4570>(memberId, gamerHandle, gamerHandleSize);
	}

	FORCEINLINE auto NETWORK_HANDLE_FROM_PLAYER(Player player, Any* gamerHandle, int gamerHandleSize)
	{
		return invoker::invoke<void, 0x464E131FD68B953F, 0xCD4584>(player, gamerHandle, gamerHandleSize);
	}

	FORCEINLINE auto NETWORK_HASH_FROM_PLAYER_HANDLE(Player player)
	{
		return invoker::invoke<Hash, 0x3351FEF40EC734DB, 0xCD45CC>(player);
	}

	FORCEINLINE auto NETWORK_HASH_FROM_GAMER_HANDLE(Any* gamerHandle)
	{
		return invoker::invoke<Hash, 0xA7D865785DB9408A, 0xCD45AC>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_HANDLE_FROM_FRIEND(int friendIndex, Any* gamerHandle, int gamerHandleSize)
	{
		return invoker::invoke<void, 0x1530EB7A9B636789, 0xCD455C>(friendIndex, gamerHandle, gamerHandleSize);
	}

	FORCEINLINE auto NETWORK_GAMERTAG_FROM_HANDLE_START(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x8F46B8E54248FD48, 0xCD37B8>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_GAMERTAG_FROM_HANDLE_PENDING()
	{
		return invoker::invoke<BOOL, 0x6B6DB41744C41D5E, 0xCD379C>();
	}

	FORCEINLINE auto NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED()
	{
		return invoker::invoke<BOOL, 0xA44A2B8A83947D02, 0xCD37DC>();
	}

	FORCEINLINE auto NETWORK_GET_GAMERTAG_FROM_HANDLE(Any* gamerHandle)
	{
		return invoker::invoke<const char*, 0x6E4BB594E2A075CC, 0xCD3AF4>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_DISPLAYNAMES_FROM_HANDLES_START(Any* p0, Any p1)
	{
		return invoker::invoke<int, 0x310461CE0659232F, 0xCD6B00>(p0, p1);
	}

	FORCEINLINE auto NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<int, 0xD61DBE5217500D72, 0xCCE8A8>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_ARE_HANDLES_THE_SAME(Any* gamerHandle1, Any* gamerHandle2)
	{
		return invoker::invoke<BOOL, 0xD43ED7463CB7671C, 0xCD29D8>(gamerHandle1, gamerHandle2);
	}

	FORCEINLINE auto NETWORK_IS_HANDLE_VALID(Any* gamerHandle, int gamerHandleSize)
	{
		return invoker::invoke<BOOL, 0xA8F635A578C0CE07, 0xCD4FBC>(gamerHandle, gamerHandleSize);
	}

	FORCEINLINE auto NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(Any* gamerHandle)
	{
		return invoker::invoke<Player, 0xA34132DD5D4FE383, 0xCD3F54>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(Any* gamerHandle)
	{
		return invoker::invoke<const char*, 0xCA8AE01D86E1FDC, 0xCD5838>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_IS_GAMER_IN_MY_SESSION(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xBE0146369C46314B, 0xCD4F24>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_SHOW_PROFILE_UI(Any* gamerHandle)
	{
		return invoker::invoke<void, 0xAD9DEC6201018EA3, 0xCD6AC8>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_PLAYER_GET_NAME(Player player)
	{
		return invoker::invoke<const char*, 0x4B41F70EA5AA79D4, 0xCD59DC>(player);
	}

	FORCEINLINE auto NETWORK_PLAYER_GET_USERID(Player player, int* userID)
	{
		return invoker::invoke<const char*, 0x4DE98A9A01197527, 0xCD59FC>(player, userID);
	}

	FORCEINLINE auto NETWORK_PLAYER_IS_ROCKSTAR_DEV(Player player)
	{
		return invoker::invoke<BOOL, 0x6BAFBE8178274578, 0xCD5AA4>(player);
	}

	FORCEINLINE auto NETWORK_PLAYER_INDEX_IS_CHEATER(Player player)
	{
		return invoker::invoke<BOOL, 0x686D5124777B9BE, 0xCD5A44>(player);
	}

	FORCEINLINE auto NETWORK_ENTITY_GET_OBJECT_ID(Entity entity)
	{
		return invoker::invoke<int, 0x71698F8AAB574CF7, 0xCD3604>(entity);
	}

	FORCEINLINE auto NETWORK_GET_ENTITY_FROM_OBJECT_ID(Any p0)
	{
		return invoker::invoke<Entity, 0x85266061BAF25926, 0xCD3A14>(p0);
	}

	FORCEINLINE auto NETWORK_IS_INACTIVE_PROFILE(Any* p0)
	{
		return invoker::invoke<BOOL, 0x39C0534F522598C0, 0xCD501C>(p0);
	}

	FORCEINLINE auto _NETWORK_LOAD_GAMER_DISPLAY_NAME(Any* gamerHandle)
	{
		return invoker::invoke<const char*, 0x338ECE3637937BC2, 0xCD57C0>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_GET_MAX_FRIENDS()
	{
		return invoker::invoke<int, 0x93352D3163414D4A, 0xCD3D84>();
	}

	FORCEINLINE auto NETWORK_GET_FRIEND_COUNT()
	{
		return invoker::invoke<int, 0xFD8C855412F74D0F, 0xCD3AC8>();
	}

	FORCEINLINE auto NETWORK_GET_FRIEND_NAME(int friendIndex)
	{
		return invoker::invoke<const char*, 0x5FDC59F83F2D1C9F, 0xCD3AD4>(friendIndex);
	}

	FORCEINLINE auto NETWORK_GET_FRIEND_DISPLAY_NAME(int friendIndex)
	{
		return invoker::invoke<const char*, 0x6FB5D26E5812C023, 0xCD3AD4>(friendIndex);
	}

	FORCEINLINE auto NETWORK_IS_FRIEND_ONLINE(const char* name)
	{
		return invoker::invoke<BOOL, 0xB8CDCB967533FCB3, 0xCD4EDC>(name);
	}

	FORCEINLINE auto NETWORK_IS_FRIEND_HANDLE_ONLINE(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x484CF81C32C3D413, 0xCD4E4C>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_IS_FRIEND_IN_SAME_TITLE(const char* friendName)
	{
		return invoker::invoke<BOOL, 0x68809A66A3FB7B8F, 0xCD4EB8>(friendName);
	}

	FORCEINLINE auto NETWORK_IS_FRIEND_IN_MULTIPLAYER(const char* friendName)
	{
		return invoker::invoke<BOOL, 0x116CDE00FC231A4B, 0xCD4E94>(friendName);
	}

	FORCEINLINE auto NETWORK_IS_FRIEND(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xEDD63461767A518C, 0xCD4E28>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_IS_PENDING_FRIEND(Any p0)
	{
		return invoker::invoke<BOOL, 0x8353648A58677B60, 0xCCE8A8>(p0);
	}

	FORCEINLINE auto NETWORK_IS_ADDING_FRIEND()
	{
		return invoker::invoke<BOOL, 0xD731E73BAE356976, 0xCD4C80>();
	}

	FORCEINLINE auto NETWORK_ADD_FRIEND(Any* gamerHandle, const char* message)
	{
		return invoker::invoke<BOOL, 0x454174F8A9B8D8A1, 0xCD2778>(gamerHandle, message);
	}

	FORCEINLINE auto NETWORK_IS_FRIEND_INDEX_ONLINE(int friendIndex)
	{
		return invoker::invoke<BOOL, 0x5679681143C10F0A, 0xCD4E70>(friendIndex);
	}

	FORCEINLINE auto NETWORK_SET_PLAYER_IS_PASSIVE(BOOL toggle)
	{
		return invoker::invoke<void, 0x8C2ACB534243279, 0xCD68B4>(toggle);
	}

	FORCEINLINE auto NETWORK_GET_PLAYER_OWNS_WAYPOINT(Player player)
	{
		return invoker::invoke<BOOL, 0xB039D40188E991D1, 0xCD3FD8>(player);
	}

	FORCEINLINE auto NETWORK_CAN_SET_WAYPOINT()
	{
		return invoker::invoke<BOOL, 0xA610A20639713DEA, 0xCD2C40>();
	}

	FORCEINLINE auto NETWORK_IGNORE_REMOTE_WAYPOINTS()
	{
		return invoker::invoke<void, 0xE30EF2DB0A0576B4, 0xCD4B90>();
	}

	FORCEINLINE auto _NETWORK_DOES_COMMUNICATION_GROUP_EXIST(int communicationType)
	{
		return invoker::invoke<BOOL, 0xDBDF80673BBA3D65, 0xCD3390>(communicationType);
	}

	FORCEINLINE auto _NETWORK_GET_COMMUNICATION_GROUP_FLAGS(int communicationType)
	{
		return invoker::invoke<int, 0x40DF02F371F40883, 0xCD3930>(communicationType);
	}

	FORCEINLINE auto _NETWORK_SET_COMMUNICATION_GROUP_FLAGS(int communicationType, int communicationGroupFlag)
	{
		return invoker::invoke<void, 0xE549F846DE7D32D5, 0xCD6610>(communicationType, communicationGroupFlag);
	}

	FORCEINLINE auto _NETWORK_HAS_PLAYER_PASSED_CHECK_TYPE(int checkType, Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x62E29CDA11F9C230, 0xCD4840>(checkType, gamerHandle);
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_ON_BLOCKLIST(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xF3BBE5935A04D276, 0xCD52BC>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_SET_SCRIPT_AUTOMUTED(Any p0)
	{
		return invoker::invoke<BOOL, 0x89C96510735202D2, 0xCD693C>(p0);
	}

	FORCEINLINE auto NETWORK_HAS_AUTOMUTE_OVERRIDE()
	{
		return invoker::invoke<BOOL, 0xB75567FBC57302E6, 0xCD460C>();
	}

	FORCEINLINE auto NETWORK_HAS_HEADSET()
	{
		return invoker::invoke<BOOL, 0x473AAB3F1DA97144, 0xCD479C>();
	}

	FORCEINLINE auto NETWORK_SET_LOOK_AT_TALKERS(BOOL p0)
	{
		return invoker::invoke<void, 0xB85BAB4E28676C4D, 0xCD67FC>(p0);
	}

	FORCEINLINE auto NETWORK_IS_PUSH_TO_TALK_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xC58A2B1D95D090, 0xCD5320>();
	}

	FORCEINLINE auto NETWORK_GAMER_HAS_HEADSET(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xC5687BF1EB7AC190, 0xCD37F8>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_IS_GAMER_TALKING(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x6E171E077926FBF7, 0xCD4F6C>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_PERMISSIONS_HAS_GAMER_RECORD(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xC9AFD0C222C7CA74, 0xCD2BB8>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_CAN_COMMUNICATE_WITH_GAMER(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xC9D8BDF3564325CA, 0xCD2B70>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_CAN_TEXT_CHAT_WITH_GAMER(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x6404C6D45C897433, 0xCD2C6C>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_IS_GAMER_MUTED_BY_ME(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x73038C255039CB0A, 0xCD4F48>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_AM_I_MUTED_BY_GAMER(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xD948F622B2C316C0, 0xCD2910>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_IS_GAMER_BLOCKED_BY_ME(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x4BD40114338C93C0, 0xCD4F00>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_AM_I_BLOCKED_BY_GAMER(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x48888A41791BFEF1, 0xCD28C8>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_CAN_VIEW_GAMER_USER_CONTENT(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x8EF8E27D73EB5271, 0xCD2CB4>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x585FB8B7945FC92A, 0xCD2BB8>(gamerHandle);
	}

	FORCEINLINE auto _NETWORK_CAN_TEXT_FROM_GAMER_BE_VIEWED(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x9F633448E4C73207, 0xCD2C90>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x5CE1DEFE2CD68587, 0xCD2BB8>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x212E8A037E68E81C, 0xCD2BB8>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_CAN_SEND_LOCAL_INVITE(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x75AC04DC09B758E5, 0xCD2C00>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_CAN_RECEIVE_LOCAL_INVITE(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x2879B51C18AEF948, 0xCD2C00>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_TALKING(Player player)
	{
		return invoker::invoke<BOOL, 0x51DC6104DE62EE22, 0xCD52E0>(player);
	}

	FORCEINLINE auto NETWORK_PLAYER_HAS_HEADSET(Player player)
	{
		return invoker::invoke<BOOL, 0xF060DE6D44C11C50, 0xCD5A20>(player);
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_MUTED_BY_ME(Player player)
	{
		return invoker::invoke<BOOL, 0x9F1D63C7BDCDFBC5, 0xCD5298>(player);
	}

	FORCEINLINE auto NETWORK_AM_I_MUTED_BY_PLAYER(Player player)
	{
		return invoker::invoke<BOOL, 0xDCEC24AE33904F8D, 0xCD2934>(player);
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_BLOCKED_BY_ME(Player player)
	{
		return invoker::invoke<BOOL, 0xF3BBDC6EE4727F8B, 0xCD51E4>(player);
	}

	FORCEINLINE auto NETWORK_AM_I_BLOCKED_BY_PLAYER(Player player)
	{
		return invoker::invoke<BOOL, 0x37B71363FBA86179, 0xCD28EC>(player);
	}

	FORCEINLINE auto NETWORK_GET_PLAYER_LOUDNESS(Player player)
	{
		return invoker::invoke<float, 0xF2B38A65CE1CD227, 0xCD3FB4>(player);
	}

	FORCEINLINE auto NETWORK_SET_TALKER_PROXIMITY(float value)
	{
		return invoker::invoke<void, 0x1D9E253CF963B125, 0xCD6998>(value);
	}

	FORCEINLINE auto NETWORK_GET_TALKER_PROXIMITY()
	{
		return invoker::invoke<float, 0xA928AA924B7E3EE2, 0xCD43E0>();
	}

	FORCEINLINE auto NETWORK_SET_VOICE_ACTIVE(BOOL toggle)
	{
		return invoker::invoke<void, 0x4314716E4B544721, 0xCD6A80>(toggle);
	}

	FORCEINLINE auto NETWORK_REMAIN_IN_GAME_CHAT(BOOL p0)
	{
		return invoker::invoke<void, 0x270D952336FB6142, 0xCD5BBC>(p0);
	}

	FORCEINLINE auto NETWORK_OVERRIDE_TRANSITION_CHAT(BOOL p0)
	{
		return invoker::invoke<void, 0xDF204CDF19B1E09E, 0xCD5998>(p0);
	}

	FORCEINLINE auto NETWORK_SET_TEAM_ONLY_CHAT(BOOL toggle)
	{
		return invoker::invoke<void, 0x26E61E347F8C2FB5, 0xCD69BC>(toggle);
	}

	FORCEINLINE auto NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(Any p0)
	{
		return invoker::invoke<void, 0x2918CC9062732BC6, 0xCD694C>(p0);
	}

	FORCEINLINE auto NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(Any p0, Any p1)
	{
		return invoker::invoke<BOOL, 0xF97151502670C015, 0xCD6910>(p0, p1);
	}

	FORCEINLINE auto NETWORK_OVERRIDE_TEAM_RESTRICTIONS(int team, BOOL toggle)
	{
		return invoker::invoke<void, 0x2EBB17A226639CE0, 0xCD5970>(team, toggle);
	}

	FORCEINLINE auto NETWORK_SET_OVERRIDE_SPECTATOR_MODE(BOOL toggle)
	{
		return invoker::invoke<void, 0x3D203A4099538B41, 0xCD6884>(toggle);
	}

	FORCEINLINE auto NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(BOOL toggle)
	{
		return invoker::invoke<void, 0x13D997FE205FD704, 0xCD689C>(toggle);
	}

	FORCEINLINE auto NETWORK_SET_PROXIMITY_AFFECTS_TEAM(BOOL toggle)
	{
		return invoker::invoke<void, 0x725A501C189FDB29, 0xCD68F8>(toggle);
	}

	FORCEINLINE auto NETWORK_SET_NO_SPECTATOR_CHAT(BOOL toggle)
	{
		return invoker::invoke<void, 0x651F95F7EDE35255, 0xCD6848>(toggle);
	}

	FORCEINLINE auto NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(BOOL toggle)
	{
		return invoker::invoke<void, 0xDB9D60DE4E690B9C, 0xCD672C>(toggle);
	}

	FORCEINLINE auto NETWORK_OVERRIDE_CHAT_RESTRICTIONS(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x38C14A8B378CBD7B, 0xCD5898>(player, toggle);
	}

	FORCEINLINE auto NETWORK_OVERRIDE_SEND_RESTRICTIONS(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x7453501DC1481684, 0xCD5930>(player, toggle);
	}

	FORCEINLINE auto NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(BOOL toggle)
	{
		return invoker::invoke<void, 0xF2EE6216DEB74ACC, 0xCD5958>(toggle);
	}

	FORCEINLINE auto NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x7EDC844C6CEBFEB8, 0xCD58F0>(player, toggle);
	}

	FORCEINLINE auto NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(BOOL toggle)
	{
		return invoker::invoke<void, 0x8D163415FF0DAFC3, 0xCD5918>(toggle);
	}

	FORCEINLINE auto NETWORK_SET_VOICE_CHANNEL(int channel)
	{
		return invoker::invoke<void, 0xD80197DCA1803BB2, 0xCD6A98>(channel);
	}

	FORCEINLINE auto NETWORK_CLEAR_VOICE_CHANNEL()
	{
		return invoker::invoke<void, 0x12761B3B63D726C3, 0xCD31F8>();
	}

	FORCEINLINE auto NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(float x, float y, float z)
	{
		return invoker::invoke<void, 0x1DF2F4D8E7C2CD47, 0xCD29CC>(x, y, z);
	}

	FORCEINLINE auto NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE()
	{
		return invoker::invoke<void, 0x25290320BF2D9807, 0xCD3200>();
	}

	FORCEINLINE auto NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(Player player)
	{
		return invoker::invoke<void, 0x6F146BCF099DE910, 0xCD3584>(player);
	}

	FORCEINLINE auto NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(Player player)
	{
		return invoker::invoke<void, 0x139268884A0795C9, 0xCD3310>(player);
	}

	FORCEINLINE auto NETWORK_GET_MUTE_COUNT_FOR_PLAYER(Player p0, float* p1, float* p2)
	{
		return invoker::invoke<void, 0x43D614D95E50418D, 0xCD3DAC>(p0, p1, p2);
	}

	FORCEINLINE auto NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(BOOL toggle)
	{
		return invoker::invoke<void, 0xA25C1B5218833F4E, 0xCD6980>(toggle);
	}

	FORCEINLINE auto NETWORK_TEXT_CHAT_IS_TYPING()
	{
		return invoker::invoke<BOOL, 0xA43CD45F18522E3F, 0xCD6BD0>();
	}

	FORCEINLINE auto SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME()
	{
		return invoker::invoke<void, 0x597D3F733B15F96E, 0xCDA630>();
	}

	FORCEINLINE auto SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE()
	{
		return invoker::invoke<BOOL, 0xC41B72952BCE3731, 0xCDA64C>();
	}

	FORCEINLINE auto NETWORK_SET_FRIENDLY_FIRE_OPTION(BOOL toggle)
	{
		return invoker::invoke<void, 0x6106E62525304863, 0xCD6710>(toggle);
	}

	FORCEINLINE auto NETWORK_SET_RICH_PRESENCE(int p0, int p1, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x12C74D626CB4559, 0x81A1C0>(p0, p1, p2, p3);
	}

	FORCEINLINE auto NETWORK_SET_RICH_PRESENCE_STRING(int p0, const char* textLabel)
	{
		return invoker::invoke<void, 0x5F974E79EAE32BE7, 0x81A1C0>(p0, textLabel);
	}

	FORCEINLINE auto NETWORK_GET_TIMEOUT_TIME()
	{
		return invoker::invoke<int, 0x6145620349FC9F57, 0xCD4428>();
	}

	FORCEINLINE auto NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(Player player, float x, float y, float z, BOOL p4, BOOL p5)
	{
		return invoker::invoke<void, 0x520FABA37BE687A7, 0xCD5770>(player, x, y, z, p4, p5);
	}

	FORCEINLINE auto NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(Player player, BOOL p1)
	{
		return invoker::invoke<void, 0xBD9FF88287E84727, 0xCD575C>(player, p1);
	}

	FORCEINLINE auto REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(Entity entity, Ped ped)
	{
		return invoker::invoke<void, 0xFF71621A8661D34F, 0xCD7634>(entity, ped);
	}

	FORCEINLINE auto NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x69BED8420A766753, 0xCD572C>(p0, p1);
	}

	FORCEINLINE auto NETWORK_IS_ANY_PLAYER_NEAR(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6)
	{
		return invoker::invoke<BOOL, 0x955C6F927712241, 0xCD4C9C>(p0, p1, p2, p3, p4, p5, p6);
	}

	FORCEINLINE auto NETWORK_CLAN_SERVICE_IS_VALID()
	{
		return invoker::invoke<BOOL, 0x7260716F2E4D7661, 0xCD313C>();
	}

	FORCEINLINE auto NETWORK_CLAN_PLAYER_IS_ACTIVE(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xE582BF3EDDBB1A68, 0xCD30C4>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_CLAN_PLAYER_GET_DESC(Any* clanDesc, int bufferSize, Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0xC07B1AA6155EC337, 0xCD3098>(clanDesc, bufferSize, gamerHandle);
	}

	FORCEINLINE auto NETWORK_CLAN_IS_ROCKSTAR_CLAN(Any* clanDesc, int bufferSize)
	{
		return invoker::invoke<BOOL, 0xF05A19B508A1ECF0, 0xCD3028>(clanDesc, bufferSize);
	}

	FORCEINLINE auto NETWORK_CLAN_GET_UI_FORMATTED_TAG(Any* clanDesc, int bufferSize, char* formattedTag)
	{
		return invoker::invoke<void, 0x29B9959EF2236634, 0xCD2FD0>(clanDesc, bufferSize, formattedTag);
	}

	FORCEINLINE auto NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT()
	{
		return invoker::invoke<int, 0xAB468D6C5C0FC4AF, 0xCD2F10>();
	}

	FORCEINLINE auto NETWORK_CLAN_GET_MEMBERSHIP_DESC(Any* memberDesc, int p1)
	{
		return invoker::invoke<BOOL, 0xDF6959109D35BAAB, 0xCD2F80>(memberDesc, p1);
	}

	FORCEINLINE auto NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(Any* gamerHandle)
	{
		return invoker::invoke<BOOL, 0x5A748C59E0807FB6, 0xCD2EA0>(gamerHandle);
	}

	FORCEINLINE auto NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(Any* p0)
	{
		return invoker::invoke<BOOL, 0x1B9836D5F27EFE57, 0xCD2EC4>(p0);
	}

	FORCEINLINE auto NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING()
	{
		return invoker::invoke<BOOL, 0xD0E82DF28BBDFA90, 0xCD2E34>();
	}

	FORCEINLINE auto NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(int* p0)
	{
		return invoker::invoke<BOOL, 0xBC8E0392E851E2B8, 0xCD30F4>(p0);
	}

	FORCEINLINE auto NETWORK_CLAN_GET_MEMBERSHIP_COUNT(int* p0)
	{
		return invoker::invoke<int, 0x6CC5D49F92B6055B, 0xCD2F60>(p0);
	}

	FORCEINLINE auto NETWORK_CLAN_GET_MEMBERSHIP_VALID(int* p0, Any p1)
	{
		return invoker::invoke<BOOL, 0xE4DC83CCE846C81, 0xCD2FA8>(p0, p1);
	}

	FORCEINLINE auto NETWORK_CLAN_GET_MEMBERSHIP(int* p0, Any* clanMembership, int p2)
	{
		return invoker::invoke<BOOL, 0xC044D4B0F1BFE812, 0xCD2F34>(p0, clanMembership, p2);
	}

	FORCEINLINE auto NETWORK_CLAN_JOIN(int clanDesc)
	{
		return invoker::invoke<BOOL, 0xA360DA3480F0FFB9, 0xCD3060>(clanDesc);
	}

	FORCEINLINE auto NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(const char* animDict, const char* animName)
	{
		return invoker::invoke<BOOL, 0xB22FD03174DE49A7, 0xCD2E78>(animDict, animName);
	}

	FORCEINLINE auto NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(int p0, const char* p1)
	{
		return invoker::invoke<BOOL, 0xD0C87974FE71F8C4, 0xCD2E50>(p0, p1);
	}

	FORCEINLINE auto NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED()
	{
		return invoker::invoke<BOOL, 0xED0FE8A62C2CBE6, 0xCD2FE4>();
	}

	FORCEINLINE auto NETWORK_CLAN_GET_EMBLEM_TXD_NAME(Any* netHandle, char* txdName)
	{
		return invoker::invoke<BOOL, 0xE460920F3D75C34D, 0xCD2EE8>(netHandle, txdName);
	}

	FORCEINLINE auto NETWORK_CLAN_REQUEST_EMBLEM(Any p0)
	{
		return invoker::invoke<BOOL, 0xC8FEAF9D86CA72E6, 0xCD3118>(p0);
	}

	FORCEINLINE auto NETWORK_CLAN_IS_EMBLEM_READY(Any p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0xAE4A8E8C58358A87, 0xCD3000>(p0, p1);
	}

	FORCEINLINE auto NETWORK_CLAN_RELEASE_EMBLEM(Any p0)
	{
		return invoker::invoke<void, 0x84B5F8F55152B935, 0xCD30E8>(p0);
	}

	FORCEINLINE auto NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR()
	{
		return invoker::invoke<BOOL, 0x96B33F4FC167DB47, 0xCD4238>();
	}

	FORCEINLINE auto NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL()
	{
		return invoker::invoke<void, 0xFAE42E9AE7B80A4C, 0xCD4218>();
	}

	FORCEINLINE auto NETWORK_GET_PRIMARY_CLAN_DATA_START(Any* p0, Any p1)
	{
		return invoker::invoke<BOOL, 0xAC93CF5F25CF17A8, 0xCD4294>(p0, p1);
	}

	FORCEINLINE auto NETWORK_GET_PRIMARY_CLAN_DATA_PENDING()
	{
		return invoker::invoke<BOOL, 0x51BEADCE3428DB6F, 0xCD4280>();
	}

	FORCEINLINE auto NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS()
	{
		return invoker::invoke<BOOL, 0xCE1D2FC338EEA6AA, 0xCD42BC>();
	}

	FORCEINLINE auto NETWORK_GET_PRIMARY_CLAN_DATA_NEW(Any* p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0x2C34F64CC58753D7, 0xCD4258>(p0, p1);
	}

	FORCEINLINE auto SET_NETWORK_ID_CAN_MIGRATE(int netId, BOOL toggle)
	{
		return invoker::invoke<void, 0x8FC511FC963C67E5, 0xCD869C>(netId, toggle);
	}

	FORCEINLINE auto SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(int netId, BOOL toggle)
	{
		return invoker::invoke<void, 0x3C1752E361ED8FC9, 0xCD86B0>(netId, toggle);
	}

	FORCEINLINE auto SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(int netId, Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0x4C48F052678AA7EF, 0xCD8670>(netId, player, toggle);
	}

	FORCEINLINE auto SET_NETWORK_ID_CAN_BE_REASSIGNED(int netId, BOOL toggle)
	{
		return invoker::invoke<void, 0xF63E001A5DB10361, 0xCD8688>(netId, toggle);
	}

	FORCEINLINE auto NETWORK_SET_ENTITY_CAN_BLEND(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0xA7B045B3F131EA0F, 0xCD66E8>(entity, toggle);
	}

	FORCEINLINE auto NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(Object object, BOOL toggle)
	{
		return invoker::invoke<void, 0x40B679A9143C1CE0, 0xCD6860>(object, toggle);
	}

	FORCEINLINE auto NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x32C336953C18A3CE, 0xCD66FC>(entity, toggle);
	}

	FORCEINLINE auto SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(int netId, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xEC34E75BDB02A4C6, 0xCD86D8>(netId, p1, p2);
	}

	FORCEINLINE auto SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(int netId, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0x22CE5B137F505B14, 0xCD86F4>(netId, p1, p2);
	}

	FORCEINLINE auto SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(Any p0, Any p1, Any p2)
	{
		return invoker::invoke<void, 0x82EDE1ECB3BF1ADF, 0xCD8710>(p0, p1, p2);
	}

	FORCEINLINE auto SET_NETWORK_CUTSCENE_ENTITIES(BOOL toggle)
	{
		return invoker::invoke<void, 0x6ABC02CAFE92B58C, 0xCD8634>(toggle);
	}

	FORCEINLINE auto ARE_CUTSCENE_ENTITIES_NETWORKED()
	{
		return invoker::invoke<BOOL, 0x2E0CDDCB2AD38385, 0xCCCB44>();
	}

	FORCEINLINE auto SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(int netId, BOOL state)
	{
		return invoker::invoke<void, 0xD8347AAB0A3EF3A0, 0xCD86C4>(netId, state);
	}

	FORCEINLINE auto IS_NETWORK_ID_OWNED_BY_PARTICIPANT(int netId)
	{
		return invoker::invoke<BOOL, 0xB0AB1F334666E337, 0xCD0B9C>(netId);
	}

	FORCEINLINE auto SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE(Player player, BOOL locallyVisible)
	{
		return invoker::invoke<void, 0x57F9D4E3B420366E, 0xCDA31C>(player, locallyVisible);
	}

	FORCEINLINE auto SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(BOOL p0, BOOL p1)
	{
		return invoker::invoke<void, 0x61780C0351CEFAD1, 0xCD8508>(p0, p1);
	}

	FORCEINLINE auto SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(BOOL bIncludePlayersVehicle)
	{
		return invoker::invoke<void, 0x2E99083F03611030, 0xCD84E4>(bIncludePlayersVehicle);
	}

	FORCEINLINE auto SET_LOCAL_PLAYER_VISIBLE_LOCALLY(BOOL bIncludePlayersVehicle)
	{
		return invoker::invoke<void, 0xA6DFB7FC64F53E33, 0xCD8520>(bIncludePlayersVehicle);
	}

	FORCEINLINE auto SET_PLAYER_INVISIBLE_LOCALLY(Player player, BOOL bIncludePlayersVehicle)
	{
		return invoker::invoke<void, 0x903DAFB544C5CA0D, 0xCD9E54>(player, bIncludePlayersVehicle);
	}

	FORCEINLINE auto SET_PLAYER_VISIBLE_LOCALLY(Player player, BOOL bIncludePlayersVehicle)
	{
		return invoker::invoke<void, 0x8DDE9E4E8A102CD9, 0xCDA15C>(player, bIncludePlayersVehicle);
	}

	FORCEINLINE auto FADE_OUT_LOCAL_PLAYER(BOOL p0)
	{
		return invoker::invoke<void, 0x6E2FA5434737D22F, 0xCCDF5C>(p0);
	}

	FORCEINLINE auto NETWORK_FADE_OUT_ENTITY(Entity entity, BOOL normal, BOOL slow)
	{
		return invoker::invoke<void, 0x91AB029AFE429F2, 0xCD3694>(entity, normal, slow);
	}

	FORCEINLINE auto NETWORK_FADE_IN_ENTITY(Entity entity, BOOL state, Any p2)
	{
		return invoker::invoke<void, 0x6EF982A39E8D08FA, 0xCD3678>(entity, state, p2);
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_FADING(Player player)
	{
		return invoker::invoke<BOOL, 0xCF580EB76CEC15FD, 0xCD5250>(player);
	}

	FORCEINLINE auto NETWORK_IS_ENTITY_FADING(Entity entity)
	{
		return invoker::invoke<BOOL, 0x6BF8FE9F26BBABDE, 0xCD4DE8>(entity);
	}

	FORCEINLINE auto IS_PLAYER_IN_CUTSCENE(Player player)
	{
		return invoker::invoke<BOOL, 0xF4102A2D0D824EC3, 0xCD1DA0>(player);
	}

	FORCEINLINE auto SET_ENTITY_VISIBLE_IN_CUTSCENE(Any p0, BOOL p1, BOOL p2)
	{
		return invoker::invoke<void, 0xE6E7B0D0E904CA62, 0xCD81AC>(p0, p1, p2);
	}

	FORCEINLINE auto SET_ENTITY_LOCALLY_INVISIBLE(Entity entity)
	{
		return invoker::invoke<void, 0xA612CEAF809E9032, 0xCD8194>(entity);
	}

	FORCEINLINE auto SET_ENTITY_LOCALLY_VISIBLE(Entity entity)
	{
		return invoker::invoke<void, 0x158E535F1DD78CFE, 0xCD81A0>(entity);
	}

	FORCEINLINE auto IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(int netID)
	{
		return invoker::invoke<BOOL, 0x3A6DAAE139DC9E9, 0xCD094C>(netID);
	}

	FORCEINLINE auto ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(int netID, BOOL toggle)
	{
		return invoker::invoke<void, 0x7B95E064D91BFE49, 0xCCC78C>(netID, toggle);
	}

	FORCEINLINE auto IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(Player player)
	{
		return invoker::invoke<BOOL, 0xE29ED67EC061E70B, 0xCD0970>(player);
	}

	FORCEINLINE auto ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(Player player, BOOL toggle)
	{
		return invoker::invoke<void, 0xEB41AFC8A3FF370B, 0xCCC7A0>(player, toggle);
	}

	FORCEINLINE auto IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(float p0, float p1, float p2, float p3)
	{
		return invoker::invoke<BOOL, 0x809E97B5B52A6418, 0xCD219C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto IS_SPHERE_VISIBLE_TO_PLAYER(Any p0, float p1, float p2, float p3, float p4)
	{
		return invoker::invoke<BOOL, 0x267FC71D3F0D131A, 0xCD21C4>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto RESERVE_NETWORK_MISSION_OBJECTS(int amount)
	{
		return invoker::invoke<void, 0xB7F37A0A1E8A175E, 0xCD7910>(amount);
	}

	FORCEINLINE auto RESERVE_NETWORK_MISSION_PEDS(int amount)
	{
		return invoker::invoke<void, 0x17C7D9B3979F5759, 0xCD791C>(amount);
	}

	FORCEINLINE auto RESERVE_NETWORK_MISSION_VEHICLES(int amount)
	{
		return invoker::invoke<void, 0x552B3BADB43FF551, 0xCD7928>(amount);
	}

	FORCEINLINE auto RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(int amount)
	{
		return invoker::invoke<void, 0x99C26F3C23B37F42, 0xCD78EC>(amount);
	}

	FORCEINLINE auto RESERVE_LOCAL_NETWORK_MISSION_PEDS(int amount)
	{
		return invoker::invoke<void, 0x7E46D691B4F4B711, 0xCD78F8>(amount);
	}

	FORCEINLINE auto RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(int amount)
	{
		return invoker::invoke<void, 0x593FDB07AF52E85D, 0xCD7904>(amount);
	}

	FORCEINLINE auto CAN_REGISTER_MISSION_OBJECTS(int amount)
	{
		return invoker::invoke<BOOL, 0x78D35ABAF71764AD, 0xCCCF54>(amount);
	}

	FORCEINLINE auto CAN_REGISTER_MISSION_PEDS(int amount)
	{
		return invoker::invoke<BOOL, 0xADCE9BCAFCB83364, 0xCCCF78>(amount);
	}

	FORCEINLINE auto CAN_REGISTER_MISSION_VEHICLES(int amount)
	{
		return invoker::invoke<BOOL, 0x2E9F58AD6FE93DFF, 0xCCCFC0>(amount);
	}

	FORCEINLINE auto CAN_REGISTER_MISSION_PICKUPS(int amount)
	{
		return invoker::invoke<BOOL, 0xF95A1422CB355630, 0xCCCF9C>(amount);
	}

	FORCEINLINE auto CAN_REGISTER_MISSION_DOORS(Any p0)
	{
		return invoker::invoke<BOOL, 0xF7BCDD970AAA9B9, 0xCCCF00>(p0);
	}

	FORCEINLINE auto CAN_REGISTER_MISSION_ENTITIES(int ped_amt, int vehicle_amt, int object_amt, int pickup_amt)
	{
		return invoker::invoke<BOOL, 0x4D64DFA5BE3B2871, 0xCCCF24>(ped_amt, vehicle_amt, object_amt, pickup_amt);
	}

	FORCEINLINE auto GET_NUM_RESERVED_MISSION_OBJECTS(BOOL p0, Any p1)
	{
		return invoker::invoke<int, 0xD1797191721E17CE, 0xCCED98>(p0, p1);
	}

	FORCEINLINE auto GET_NUM_RESERVED_MISSION_PEDS(BOOL p0, Any p1)
	{
		return invoker::invoke<int, 0xA0522491D076C1E6, 0xCCEDC0>(p0, p1);
	}

	FORCEINLINE auto GET_NUM_RESERVED_MISSION_VEHICLES(BOOL p0, Any p1)
	{
		return invoker::invoke<int, 0xF46F370442FAD8F9, 0xCCEDE8>(p0, p1);
	}

	FORCEINLINE auto GET_NUM_CREATED_MISSION_OBJECTS(BOOL p0)
	{
		return invoker::invoke<int, 0xD1C2A76DD73A4387, 0xCCECF0>(p0);
	}

	FORCEINLINE auto GET_NUM_CREATED_MISSION_PEDS(BOOL p0)
	{
		return invoker::invoke<int, 0x594FD1B13DCC309E, 0xCCED14>(p0);
	}

	FORCEINLINE auto GET_NUM_CREATED_MISSION_VEHICLES(BOOL p0)
	{
		return invoker::invoke<int, 0x92D994BC2EF590F9, 0xCCED38>(p0);
	}

	FORCEINLINE auto GET_RESERVED_MISSION_ENTITIES_IN_AREA(float x, float y, float z, Any p3, Any* out1, Any* out2, Any* out3)
	{
		return invoker::invoke<void, 0x1B402403FBCD3843, 0xCCFCD8>(x, y, z, p3, out1, out2, out3);
	}

	FORCEINLINE auto GET_MAX_NUM_NETWORK_OBJECTS()
	{
		return invoker::invoke<int, 0x2E63B6CC2AFB0B51, 0xCCE9C8>();
	}

	FORCEINLINE auto GET_MAX_NUM_NETWORK_PEDS()
	{
		return invoker::invoke<int, 0x76C7AF1F094891FC, 0xCCE9BC>();
	}

	FORCEINLINE auto GET_MAX_NUM_NETWORK_VEHICLES()
	{
		return invoker::invoke<int, 0xD544869339AEE474, 0xCCE9D4>();
	}

	FORCEINLINE auto GET_MAX_NUM_NETWORK_PICKUPS()
	{
		return invoker::invoke<int, 0x90F32A57D0D76E38, 0xCCE9C8>();
	}

	FORCEINLINE auto NETWORK_SET_OBJECT_SCOPE_DISTANCE(Object object, float range)
	{
		return invoker::invoke<void, 0x9059372A0C629EB6, 0xCD6874>(object, range);
	}

	FORCEINLINE auto NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x7280E2724C43179B, 0xCD2834>(p0, p1);
	}

	FORCEINLINE auto NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(Any p0)
	{
		return invoker::invoke<void, 0x44EF980B0D19828F, 0xCD69AC>(p0);
	}

	FORCEINLINE auto _NETWORK_HIDE_ENTITY_IN_TUTORIAL_SESSION(int netHandle, BOOL hide)
	{
		return invoker::invoke<void, 0xCFE359CCCFE359CC, 0xCD4B64>(netHandle, hide);
	}

	FORCEINLINE auto GET_NETWORK_TIME()
	{
		return invoker::invoke<int, 0x7E3F74F641EE6B27, 0xCCEB00>();
	}

	FORCEINLINE auto GET_NETWORK_TIME_ACCURATE()
	{
		return invoker::invoke<int, 0x728E77B2BF91D54, 0xCCEB1C>();
	}

	FORCEINLINE auto HAS_NETWORK_TIME_STARTED()
	{
		return invoker::invoke<BOOL, 0x8FE5240A69F17DF8, 0xCD03D0>();
	}

	FORCEINLINE auto GET_TIME_OFFSET(int timeA, int timeB)
	{
		return invoker::invoke<int, 0xAD5B43C219C4CB92, 0xCCFF78>(timeA, timeB);
	}

	FORCEINLINE auto IS_TIME_LESS_THAN(int timeA, int timeB)
	{
		return invoker::invoke<BOOL, 0xC9FA0059132D5731, 0xCD22F4>(timeA, timeB);
	}

	FORCEINLINE auto IS_TIME_MORE_THAN(int timeA, int timeB)
	{
		return invoker::invoke<BOOL, 0xDBA141080166EAA2, 0xCD230C>(timeA, timeB);
	}

	FORCEINLINE auto IS_TIME_EQUAL_TO(int timeA, int timeB)
	{
		return invoker::invoke<BOOL, 0xCFF17EF1F3F6FF43, 0xCD22DC>(timeA, timeB);
	}

	FORCEINLINE auto GET_TIME_DIFFERENCE(int timeA, int timeB)
	{
		return invoker::invoke<int, 0x775142054EC39277, 0xCCFF68>(timeA, timeB);
	}

	FORCEINLINE auto GET_TIME_AS_STRING(int time)
	{
		return invoker::invoke<const char*, 0xF55707B152A1A749, 0xCCFF48>(time);
	}

	FORCEINLINE auto GET_CLOUD_TIME_AS_STRING()
	{
		return invoker::invoke<const char*, 0x9D75306730D4D730, 0xCCE404>();
	}

	FORCEINLINE auto GET_CLOUD_TIME_AS_INT()
	{
		return invoker::invoke<int, 0x39D1D336459711BE, 0xCCE3E8>();
	}

	FORCEINLINE auto CONVERT_POSIX_TIME(int posixTime, Any* timeStructure)
	{
		return invoker::invoke<void, 0xB2D05034AF8E75CF, 0xCCD57C>(posixTime, timeStructure);
	}

	FORCEINLINE auto NETWORK_SET_IN_SPECTATOR_MODE(BOOL toggle, Ped playerPed)
	{
		return invoker::invoke<void, 0xF11FEC6A04FD7226, 0xCD67B0>(toggle, playerPed);
	}

	FORCEINLINE auto NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(BOOL toggle, Ped playerPed, BOOL p2)
	{
		return invoker::invoke<void, 0x522EF6D7B4059F2C, 0xCD67C4>(toggle, playerPed, p2);
	}

	FORCEINLINE auto NETWORK_SET_IN_FREE_CAM_MODE(BOOL toggle)
	{
		return invoker::invoke<void, 0xA83667A5D36A4FF, 0xCD6760>(toggle);
	}

	FORCEINLINE auto NETWORK_SET_ANTAGONISTIC_TO_PLAYER(BOOL toggle, Player player)
	{
		return invoker::invoke<void, 0x4D8F5CAFCB48E24, 0xCD65BC>(toggle, player);
	}

	FORCEINLINE auto NETWORK_IS_IN_SPECTATOR_MODE()
	{
		return invoker::invoke<BOOL, 0xAD15761928FCF79C, 0xCD5050>();
	}

	FORCEINLINE auto NETWORK_SET_IN_MP_CUTSCENE(BOOL p0, BOOL p1)
	{
		return invoker::invoke<void, 0x42B4970D598C8A72, 0xCD6770>(p0, p1);
	}

	FORCEINLINE auto NETWORK_IS_IN_MP_CUTSCENE()
	{
		return invoker::invoke<BOOL, 0x721B5D4CF3ACD02, 0xCD5040>();
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_IN_MP_CUTSCENE(Player player)
	{
		return invoker::invoke<BOOL, 0xD65DFBCD23E76428, 0xCD5274>(player);
	}

	FORCEINLINE auto NETWORK_HIDE_PROJECTILE_IN_CUTSCENE()
	{
		return invoker::invoke<void, 0xCBF07B57F6F01E05, 0xCD4B78>();
	}

	FORCEINLINE auto SET_NETWORK_VEHICLE_RESPOT_TIMER(int netId, int time, Any p2, Any p3)
	{
		return invoker::invoke<void, 0x48E5EEFE68D01C56, 0xCD8750>(netId, time, p2, p3);
	}

	FORCEINLINE auto IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER(int networkID)
	{
		return invoker::invoke<BOOL, 0x353A36B4FAA1F9D2, 0xCD0BC0>(networkID);
	}

	FORCEINLINE auto SET_NETWORK_VEHICLE_AS_GHOST(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x67697883F8C7E424, 0xCD872C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(Vehicle vehicle, float multiplier)
	{
		return invoker::invoke<void, 0x8526C06631BA8A87, 0xCD8740>(vehicle, multiplier);
	}

	FORCEINLINE auto SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(Vehicle vehicle, BOOL toggle)
	{
		return invoker::invoke<void, 0x8810DE004A94F18B, 0xCD865C>(vehicle, toggle);
	}

	FORCEINLINE auto SET_LOCAL_PLAYER_AS_GHOST(BOOL toggle, BOOL p1)
	{
		return invoker::invoke<void, 0x3DDE6E86B8024EEE, 0xCD84BC>(toggle, p1);
	}

	FORCEINLINE auto IS_ENTITY_A_GHOST(Entity entity)
	{
		return invoker::invoke<BOOL, 0xF073EDDFCBA082E6, 0xCD0A80>(entity);
	}

	FORCEINLINE auto SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(BOOL p0)
	{
		return invoker::invoke<void, 0x3EE3EB731E022D41, 0xCD8770>(p0);
	}

	FORCEINLINE auto SET_REMOTE_PLAYER_AS_GHOST(Player player, BOOL p1)
	{
		return invoker::invoke<void, 0xBF798C4E54C2B4E1, 0xCDA308>(player, p1);
	}

	FORCEINLINE auto SET_GHOST_ALPHA(int alpha)
	{
		return invoker::invoke<void, 0x4F1FE21A5BE23982, 0xCD8268>(alpha);
	}

	FORCEINLINE auto RESET_GHOST_ALPHA()
	{
		return invoker::invoke<void, 0x1D6800242F1593FB, 0xCD7974>();
	}

	FORCEINLINE auto SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x52C980E21BCCC469, 0xCD8180>(entity, toggle);
	}

	FORCEINLINE auto SET_INVERT_GHOSTING(BOOL p0)
	{
		return invoker::invoke<void, 0xC21CAB69B42AB890, 0xCD83E0>(p0);
	}

	FORCEINLINE auto IS_ENTITY_IN_GHOST_COLLISION(Entity entity)
	{
		return invoker::invoke<BOOL, 0x73DB31FD24210A89, 0xCD0AA4>(entity);
	}

	FORCEINLINE auto _SET_FREEMODE_REPORT_DATA(Any* gamerHandle, Any* reportData)
	{
		return invoker::invoke<void, 0x527803286A8B6C81, 0xCD8258>(gamerHandle, reportData);
	}

	FORCEINLINE auto IS_OBJECT_REASSIGNMENT_IN_PROGRESS()
	{
		return invoker::invoke<BOOL, 0x28123C8B056CC8AA, 0xCD0CB4>();
	}

	FORCEINLINE auto USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(BOOL toggle)
	{
		return invoker::invoke<void, 0x5F27287D37B4D40D, 0xCDB9B8>(toggle);
	}

	FORCEINLINE auto NETWORK_CREATE_SYNCHRONISED_SCENE(float x, float y, float z, float xRot, float yRot, float zRot, int rotationOrder, BOOL useOcclusionPortal, BOOL looped, float p9, float animTime, float p11)
	{
		return invoker::invoke<int, 0xBC5D9A293974F095, 0xCD324C>(x, y, z, xRot, yRot, zRot, rotationOrder, useOcclusionPortal, looped, p9, animTime, p11);
	}

	FORCEINLINE auto NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(Ped ped, int netScene, const char* animDict, const char* animnName, float speed, float speedMultiplier, int duration, int flag, float playbackRate, Any p9)
	{
		return invoker::invoke<void, 0xB94AB707B44E754, 0xCD27C4>(ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9);
	}

	FORCEINLINE auto NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9)
	{
		return invoker::invoke<void, 0xB81F209A2A150B89, 0xCD27C4>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	}

	FORCEINLINE auto NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(Entity entity, int netScene, const char* animDict, const char* animName, float speed, float speedMulitiplier, int flag)
	{
		return invoker::invoke<void, 0xDEE175A01A05A2F7, 0xCD2724>(entity, netScene, animDict, animName, speed, speedMulitiplier, flag);
	}

	FORCEINLINE auto NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(int netScene, Hash modelHash, float x, float y, float z, float p5, const char* p6, float p7, float p8, int flags)
	{
		return invoker::invoke<void, 0xA78D3770EC931263, 0xCD27B4>(netScene, modelHash, x, y, z, p5, p6, p7, p8, flags);
	}

	FORCEINLINE auto NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(int netScene, const char* animDict, const char* animName)
	{
		return invoker::invoke<void, 0x9E6111F1B7E0986E, 0xCD2820>(netScene, animDict, animName);
	}

	FORCEINLINE auto NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(int netScene, Entity entity, int bone)
	{
		return invoker::invoke<void, 0x5B2134752B0D9E36, 0xCD2A68>(netScene, entity, bone);
	}

	FORCEINLINE auto NETWORK_START_SYNCHRONISED_SCENE(int netScene)
	{
		return invoker::invoke<void, 0xE7101255AD6F1952, 0xCD6B90>(netScene);
	}

	FORCEINLINE auto NETWORK_STOP_SYNCHRONISED_SCENE(int netScene)
	{
		return invoker::invoke<void, 0xF2E51EC84D76A2B6, 0xCD6B9C>(netScene);
	}

	FORCEINLINE auto NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(int netId)
	{
		return invoker::invoke<int, 0x643DC062EE904FCA, 0xCD3D64>(netId);
	}

	FORCEINLINE auto NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(int netScene)
	{
		return invoker::invoke<void, 0xB505DDE34E5179B8, 0xCD3790>(netScene);
	}

	FORCEINLINE auto NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(Any p0)
	{
		return invoker::invoke<void, 0x5B051FA78EA5C170, 0xCD28A0>(p0);
	}

	FORCEINLINE auto NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(int p0, Any p1)
	{
		return invoker::invoke<BOOL, 0x644DD5C4A28FAEF3, 0xCD36D4>(p0, p1);
	}

	FORCEINLINE auto NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(Player player, float x, float y, float z, float radius, float p5, float p6, float p7, int flags)
	{
		return invoker::invoke<BOOL, 0x4249B4032FDD750E, 0xCD6B08>(player, x, y, z, radius, p5, p6, p7, flags);
	}

	FORCEINLINE auto NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(Player player, float x1, float y1, float z1, float x2, float y2, float z2, float width, float p8, float p9, float p10, int flags)
	{
		return invoker::invoke<BOOL, 0x243CFDECC076762E, 0xCD6B44>(player, x1, y1, z1, x2, y2, z2, width, p8, p9, p10, flags);
	}

	FORCEINLINE auto NETWORK_QUERY_RESPAWN_RESULTS(Any* p0)
	{
		return invoker::invoke<int, 0xC86D271C3C15DE36, 0xCD5AD0>(p0);
	}

	FORCEINLINE auto NETWORK_CANCEL_RESPAWN_SEARCH()
	{
		return invoker::invoke<void, 0xAE83F6C70E4B78E3, 0xCD2B1C>();
	}

	FORCEINLINE auto NETWORK_GET_RESPAWN_RESULT(int randomInt, Vector3* coordinates, float* heading)
	{
		return invoker::invoke<void, 0x308E9BE8B02DA53E, 0xCD4350>(randomInt, coordinates, heading);
	}

	FORCEINLINE auto NETWORK_GET_RESPAWN_RESULT_FLAGS(int p0)
	{
		return invoker::invoke<int, 0xD47DD48CBAF4A6B5, 0xCD43A4>(p0);
	}

	FORCEINLINE auto NETWORK_START_SOLO_TUTORIAL_SESSION()
	{
		return invoker::invoke<void, 0xD2788BE0DF3E0C9B, 0xCD6B88>();
	}

	FORCEINLINE auto NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(int teamId, int instanceId)
	{
		return invoker::invoke<void, 0x5147DD7078544AD1, 0xCD2848>(teamId, instanceId);
	}

	FORCEINLINE auto NETWORK_END_TUTORIAL_SESSION()
	{
		return invoker::invoke<void, 0x5A80107016E75ABC, 0xCD3590>();
	}

	FORCEINLINE auto NETWORK_IS_IN_TUTORIAL_SESSION()
	{
		return invoker::invoke<BOOL, 0xF859473E4AD09F30, 0xCD508C>();
	}

	FORCEINLINE auto NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION()
	{
		return invoker::invoke<BOOL, 0xE794EA31F030A1D1, 0xCD6D88>();
	}

	FORCEINLINE auto NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING()
	{
		return invoker::invoke<BOOL, 0x6457A0C458E98FFB, 0xCD5680>();
	}

	FORCEINLINE auto NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(Player player)
	{
		return invoker::invoke<int, 0x69617275A0B1B72D, 0xCD3FFC>(player);
	}

	FORCEINLINE auto NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(Player player, int index)
	{
		return invoker::invoke<BOOL, 0xDFAE61B1AEF262C2, 0xCD2A00>(player, index);
	}

	FORCEINLINE auto NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(Any p0)
	{
		return invoker::invoke<void, 0xD91B1F4829299334, 0xCD2AEC>(p0);
	}

	FORCEINLINE auto NETWORK_CONCEAL_PLAYER(Player player, BOOL toggle, BOOL p2)
	{
		return invoker::invoke<void, 0xA1D021917F4E3FBD, 0xCD3230>(player, toggle, p2);
	}

	FORCEINLINE auto NETWORK_IS_PLAYER_CONCEALED(Player player)
	{
		return invoker::invoke<BOOL, 0xF40724C1181481F4, 0xCD5208>(player);
	}

	FORCEINLINE auto NETWORK_CONCEAL_ENTITY(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x63FC4C73448FCEA2, 0xCD321C>(entity, toggle);
	}

	FORCEINLINE auto NETWORK_IS_ENTITY_CONCEALED(Entity entity)
	{
		return invoker::invoke<BOOL, 0xFFE66020A6507F47, 0xCD4DC4>(entity);
	}

	FORCEINLINE auto NETWORK_OVERRIDE_CLOCK_TIME(int hours, int minutes, int seconds)
	{
		return invoker::invoke<void, 0xAFD3BC0F6EBB5474, 0xCD58C4>(hours, minutes, seconds);
	}

	FORCEINLINE auto NETWORK_OVERRIDE_CLOCK_RATE(int ms)
	{
		return invoker::invoke<void, 0x2B7C09622E980A72, 0xCD58AC>(ms);
	}

	FORCEINLINE auto NETWORK_CLEAR_CLOCK_TIME_OVERRIDE()
	{
		return invoker::invoke<void, 0x99599AE2C0FDB2A1, 0xCD3160>();
	}

	FORCEINLINE auto NETWORK_IS_CLOCK_TIME_OVERRIDDEN()
	{
		return invoker::invoke<BOOL, 0x75193D36C5FA4721, 0xCD4D1C>();
	}

	FORCEINLINE auto NETWORK_ADD_ENTITY_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<int, 0x132F0517E3CE528A, 0xCD2700>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto NETWORK_ADD_ENTITY_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width)
	{
		return invoker::invoke<int, 0x3E1222B4C1E92A7A, 0xCD26D8>(x1, y1, z1, x2, y2, z2, width);
	}

	FORCEINLINE auto NETWORK_ADD_CLIENT_ENTITY_AREA(float x1, float y1, float z1, float x2, float y2, float z2)
	{
		return invoker::invoke<int, 0xE5870024C848E72D, 0xCD26B4>(x1, y1, z1, x2, y2, z2);
	}

	FORCEINLINE auto NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float radius)
	{
		return invoker::invoke<int, 0x48FE6369FE249FD2, 0xCD268C>(x1, y1, z1, x2, y2, z2, radius);
	}

	FORCEINLINE auto NETWORK_REMOVE_ENTITY_AREA(int areaHandle)
	{
		return invoker::invoke<BOOL, 0xC2A05549FF0EB55, 0xCD5C04>(areaHandle);
	}

	FORCEINLINE auto NETWORK_ENTITY_AREA_DOES_EXIST(int areaHandle)
	{
		return invoker::invoke<BOOL, 0x8256312AC2E5471D, 0xCD3598>(areaHandle);
	}

	FORCEINLINE auto NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(int areaHandle)
	{
		return invoker::invoke<BOOL, 0x31B34E18DE46CC94, 0xCD35BC>(areaHandle);
	}

	FORCEINLINE auto NETWORK_ENTITY_AREA_IS_OCCUPIED(int areaHandle)
	{
		return invoker::invoke<BOOL, 0xF8EEEE15D7483100, 0xCD35E0>(areaHandle);
	}

	FORCEINLINE auto NETWORK_USE_HIGH_PRECISION_BLENDING(int netID, BOOL toggle)
	{
		return invoker::invoke<void, 0x6CBA9D07DDF3A4F4, 0xCD6D68>(netID, toggle);
	}

	FORCEINLINE auto NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(int netId)
	{
		return invoker::invoke<void, 0xDB3FE51DA96E8CCA, 0xCD66C4>(netId);
	}

	FORCEINLINE auto NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(int netId, BOOL toggle)
	{
		return invoker::invoke<void, 0xB0D23E19A23DCAAF, 0xCD3624>(netId, toggle);
	}

	FORCEINLINE auto NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS()
	{
		return invoker::invoke<BOOL, 0x99F525995A2FD5E, 0xCD5C84>();
	}

	FORCEINLINE auto NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING()
	{
		return invoker::invoke<BOOL, 0x3B952A9A844B63C6, 0xCD4D58>();
	}

	FORCEINLINE auto NETWORK_REQUEST_CLOUD_TUNABLES()
	{
		return invoker::invoke<void, 0xC192DFBBB8B81D26, 0xCD5CA8>();
	}

	FORCEINLINE auto NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING()
	{
		return invoker::invoke<BOOL, 0x1DD7AFEBE9FED010, 0xCD565C>();
	}

	FORCEINLINE auto NETWORK_GET_TUNABLE_CLOUD_CRC()
	{
		return invoker::invoke<int, 0x188C088397FF5B1, 0xCD44A8>();
	}

	FORCEINLINE auto _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS(Any* tunableContextData)
	{
		return invoker::invoke<void, 0x14A73449675121D, 0xCD6A28>(tunableContextData);
	}

	FORCEINLINE auto _NETWORK_CLEAR_TUNABLES_REGISTRATION_CONTEXTS()
	{
		return invoker::invoke<void, 0xC87C83C8950432B, 0xCD31F0>();
	}

	FORCEINLINE auto _NETWORK_GET_TUNABLES_REGISTRATION_BOOL(Hash tunableName, BOOL defaultValue)
	{
		return invoker::invoke<BOOL, 0xB327CF1B8C2C0EA3, 0xCD44C4>(tunableName, defaultValue);
	}

	FORCEINLINE auto _NETWORK_GET_TUNABLES_REGISTRATION_INT(Hash tunableName, int defaultValue)
	{
		return invoker::invoke<int, 0xD94071E55F4C9CE, 0xCD4518>(tunableName, defaultValue);
	}

	FORCEINLINE auto _NETWORK_GET_TUNABLES_REGISTRATION_FLOAT(Hash tunableName, float defaultValue)
	{
		return invoker::invoke<float, 0x367E5E33E7F0DD1A, 0xCD44F0>(tunableName, defaultValue);
	}

	FORCEINLINE auto NETWORK_DOES_TUNABLE_EXIST(const char* tunableContext, const char* tunableName)
	{
		return invoker::invoke<BOOL, 0x1E8E83ADEA1A71BE, 0xCD3340>(tunableContext, tunableName);
	}

	FORCEINLINE auto NETWORK_ACCESS_TUNABLE_INT(const char* tunableContext, const char* tunableName, int* value)
	{
		return invoker::invoke<BOOL, 0xBB4032866B475D96, 0xCD25E4>(tunableContext, tunableName, value);
	}

	FORCEINLINE auto NETWORK_ACCESS_TUNABLE_FLOAT(const char* tunableContext, const char* tunableName, float* value)
	{
		return invoker::invoke<BOOL, 0xC244AC9DF2DBD29F, 0xCD258C>(tunableContext, tunableName, value);
	}

	FORCEINLINE auto NETWORK_ACCESS_TUNABLE_BOOL(const char* tunableContext, const char* tunableName)
	{
		return invoker::invoke<BOOL, 0x3DB3B2BA3A150EF2, 0xCD2504>(tunableContext, tunableName);
	}

	FORCEINLINE auto NETWORK_DOES_TUNABLE_EXIST_HASH(Hash tunableContext, Hash tunableName)
	{
		return invoker::invoke<BOOL, 0xAFEA31CC8C88FC36, 0xCD3368>(tunableContext, tunableName);
	}

	FORCEINLINE auto NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR()
	{
		return invoker::invoke<BOOL, 0x18CACC03B0B46CA9, 0xCD263C>();
	}

	FORCEINLINE auto NETWORK_ACCESS_TUNABLE_INT_HASH(Hash tunableContext, Hash tunableName, int* value)
	{
		return invoker::invoke<BOOL, 0x3924757A6ED5FEDB, 0xCD2610>(tunableContext, tunableName, value);
	}

	FORCEINLINE auto NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(Hash contextHash, Hash nameHash, int* value)
	{
		return invoker::invoke<BOOL, 0xDF6F5F7DECDD6CA3, 0xCD2554>(contextHash, nameHash, value);
	}

	FORCEINLINE auto NETWORK_ACCESS_TUNABLE_FLOAT_HASH(Hash tunableContext, Hash tunableName, float* value)
	{
		return invoker::invoke<BOOL, 0xA484A1273D8798FF, 0xCD25B8>(tunableContext, tunableName, value);
	}

	FORCEINLINE auto NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(Hash contextHash, Hash nameHash, float* value)
	{
		return invoker::invoke<BOOL, 0xA517819975B6DC39, 0xCD2554>(contextHash, nameHash, value);
	}

	FORCEINLINE auto NETWORK_ACCESS_TUNABLE_BOOL_HASH(Hash tunableContext, Hash tunableName)
	{
		return invoker::invoke<BOOL, 0xBFCA4F7F15FD06CC, 0xCD252C>(tunableContext, tunableName);
	}

	FORCEINLINE auto NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(Hash contextHash, Hash nameHash, BOOL* value)
	{
		return invoker::invoke<BOOL, 0xC9DC4A70BE727818, 0xCD2554>(contextHash, nameHash, value);
	}

	FORCEINLINE auto NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(Hash tunableContext, Hash tunableName, BOOL defaultValue)
	{
		return invoker::invoke<BOOL, 0x752721B56D5DBA3, 0xCD6CEC>(tunableContext, tunableName, defaultValue);
	}

	FORCEINLINE auto NETWORK_GET_CONTENT_MODIFIER_LIST_ID(Hash contentHash)
	{
		return invoker::invoke<int, 0xA71D65C4998B3DF8, 0xCD3960>(contentHash);
	}

	FORCEINLINE auto NETWORK_GET_BONE_ID_OF_FATAL_HIT()
	{
		return invoker::invoke<int, 0xDEBA59FD42C0BAEF, 0xCD3904>();
	}

	FORCEINLINE auto NETWORK_RESET_BODY_TRACKER()
	{
		return invoker::invoke<void, 0xEC550B2DD0955D8D, 0xCD5D4C>();
	}

	FORCEINLINE auto NETWORK_GET_NUMBER_BODY_TRACKER_HITS()
	{
		return invoker::invoke<int, 0xBA8E86ED610D8A3C, 0xCD3DC0>();
	}

	FORCEINLINE auto NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(int boneIndex)
	{
		return invoker::invoke<BOOL, 0x4B8C68B93333048F, 0xCD4630>(boneIndex);
	}

	FORCEINLINE auto NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(Ped ped, Player player)
	{
		return invoker::invoke<BOOL, 0x926910F3168C206A, 0xCD65D0>(ped, player);
	}

	FORCEINLINE auto NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x2D8C146ED8EFF79D, 0xCD6CC4>(entity, toggle);
	}

	FORCEINLINE auto _NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_PED_DAMAGE(Entity entity, BOOL trigger)
	{
		return invoker::invoke<void, 0xE9D0244ACBEE1BC4, 0xCD6CB0>(entity, trigger);
	}

	FORCEINLINE auto NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x64390744D38F9167, 0xCD6CD8>(entity, toggle);
	}

	FORCEINLINE auto NETWORK_SET_NO_LONGER_NEEDED(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x246563FFA6EA9A50, 0x81A1C0>(entity, toggle);
	}

	FORCEINLINE auto NETWORK_EXPLODE_VEHICLE(Vehicle vehicle, BOOL isAudible, BOOL isInvisible, int netId)
	{
		return invoker::invoke<BOOL, 0xC392361DCE030EF4, 0xCD3658>(vehicle, isAudible, isInvisible, netId);
	}

	FORCEINLINE auto NETWORK_EXPLODE_HELI(Vehicle vehicle, BOOL isAudible, BOOL isInvisible, int netId)
	{
		return invoker::invoke<void, 0xB5BD605FB63CDBE6, 0xCD3638>(vehicle, isAudible, isInvisible, netId);
	}

	FORCEINLINE auto NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(Entity entity)
	{
		return invoker::invoke<void, 0x6934C0E4AC296466, 0xCD6D7C>(entity);
	}

	FORCEINLINE auto NETWORK_OVERRIDE_COORDS_AND_HEADING(Entity entity, float x, float y, float z, float heading)
	{
		return invoker::invoke<void, 0x819DFDEDB0378F60, 0xCD58DC>(entity, x, y, z, heading);
	}

	FORCEINLINE auto NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(int netId, BOOL toggle)
	{
		return invoker::invoke<void, 0xFA3B6F3FE5E66382, 0xCD3570>(netId, toggle);
	}

	FORCEINLINE auto NETWORK_DISABLE_PROXIMITY_MIGRATION(int netID)
	{
		return invoker::invoke<void, 0xF35461D41398F92C, 0xCD3304>(netID);
	}

	FORCEINLINE auto NETWORK_SET_PROPERTY_ID(int id)
	{
		return invoker::invoke<void, 0x94796772E71D5123, 0xCD68EC>(id);
	}

	FORCEINLINE auto NETWORK_CLEAR_PROPERTY_ID()
	{
		return invoker::invoke<void, 0x5F1F0F7CE82B92D5, 0xCD31D4>();
	}

	FORCEINLINE auto NETWORK_SET_PLAYER_MENTAL_STATE(int p0)
	{
		return invoker::invoke<void, 0x8060309EC15DED26, 0xCD68C4>(p0);
	}

	FORCEINLINE auto NETWORK_SET_MINIMUM_RANK_FOR_MISSION(BOOL p0)
	{
		return invoker::invoke<void, 0xA2A73F751726916, 0xCD6820>(p0);
	}

	FORCEINLINE auto NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA()
	{
		return invoker::invoke<void, 0x98B8C1C5D9674E49, 0xCD2B14>();
	}

	FORCEINLINE auto NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(Player player)
	{
		return invoker::invoke<BOOL, 0x5B5089244DF8EA05, 0xCD4654>(player);
	}

	FORCEINLINE auto NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(Ped ped, Player player)
	{
		return invoker::invoke<BOOL, 0x7241E3AD10840886, 0xCD2958>(ped, player);
	}

	FORCEINLINE auto GET_NUM_COMMERCE_ITEMS()
	{
		return invoker::invoke<int, 0x21A5D8255DE6E429, 0xCCECE0>();
	}

	FORCEINLINE auto IS_COMMERCE_DATA_VALID()
	{
		return invoker::invoke<BOOL, 0xD3B5B2F30382DFA8, 0xCD07EC>();
	}

	FORCEINLINE auto TRIGGER_COMMERCE_DATA_FETCH(Any p0)
	{
		return invoker::invoke<void, 0xB926A96763FB9843, 0x81A1C0>(p0);
	}

	FORCEINLINE auto IS_COMMERCE_DATA_FETCH_IN_PROGRESS()
	{
		return invoker::invoke<BOOL, 0x9184B1F53F02EB67, 0xCD07C8>();
	}

	FORCEINLINE auto GET_COMMERCE_ITEM_ID(int index)
	{
		return invoker::invoke<const char*, 0x57C238FEAF0677E0, 0xCCE468>(index);
	}

	FORCEINLINE auto GET_COMMERCE_ITEM_NAME(int index)
	{
		return invoker::invoke<const char*, 0xDD21D41AD9E54549, 0xCCE488>(index);
	}

	FORCEINLINE auto GET_COMMERCE_PRODUCT_PRICE(int index)
	{
		return invoker::invoke<const char*, 0x3682CE8F11C793D4, 0xCCE4E8>(index);
	}

	FORCEINLINE auto GET_COMMERCE_ITEM_NUM_CATS(int index)
	{
		return invoker::invoke<int, 0xA25A07F63AC497BB, 0xCCE4A8>(index);
	}

	FORCEINLINE auto GET_COMMERCE_ITEM_CAT(int index, int index2)
	{
		return invoker::invoke<const char*, 0x8553FB74D3BF41C8, 0xCCE444>(index, index2);
	}

	FORCEINLINE auto OPEN_COMMERCE_STORE(const char* p0, const char* p1, int p2)
	{
		return invoker::invoke<void, 0xD1A4BF0F54E08B34, 0xCD7340>(p0, p1, p2);
	}

	FORCEINLINE auto IS_COMMERCE_STORE_OPEN()
	{
		return invoker::invoke<BOOL, 0x2B8BAF9BA2A3D36B, 0xCD07FC>();
	}

	FORCEINLINE auto SET_STORE_ENABLED(BOOL toggle)
	{
		return invoker::invoke<void, 0x56B77EAF3DD4C954, 0xCDA4D4>(toggle);
	}

	FORCEINLINE auto REQUEST_COMMERCE_ITEM_IMAGE(int index)
	{
		return invoker::invoke<BOOL, 0xBF5A33B684B68C2B, 0xCD77F0>(index);
	}

	FORCEINLINE auto RELEASE_ALL_COMMERCE_ITEM_IMAGES()
	{
		return invoker::invoke<void, 0x687DE1873713BF49, 0xCD7574>();
	}

	FORCEINLINE auto GET_COMMERCE_ITEM_TEXTURENAME(int index)
	{
		return invoker::invoke<const char*, 0x4ABEBEE42452BF31, 0xCCE4C8>(index);
	}

	FORCEINLINE auto IS_STORE_AVAILABLE_TO_USER()
	{
		return invoker::invoke<BOOL, 0xD553FC562BDEBE1E, 0xCD21F0>();
	}

	FORCEINLINE auto DELAY_MP_STORE_OPEN()
	{
		return invoker::invoke<void, 0xE50095A9B205820E, 0xCCD9C4>();
	}

	FORCEINLINE auto RESET_STORE_NETWORK_GAME_TRACKING()
	{
		return invoker::invoke<void, 0x2A878DDB1FE0F636, 0xCD7A28>();
	}

	FORCEINLINE auto IS_USER_OLD_ENOUGH_TO_ACCESS_STORE()
	{
		return invoker::invoke<BOOL, 0xB83285E02B6331A7, 0xCD2358>();
	}

	FORCEINLINE auto SET_LAST_VIEWED_SHOP_ITEM(Hash p0, int p1, Hash p2)
	{
		return invoker::invoke<void, 0x2ECA4EE3F57B8468, 0xCD8478>(p0, p1, p2);
	}

	FORCEINLINE auto GET_USER_PREMIUM_ACCESS()
	{
		return invoker::invoke<int, 0xEF05628918C6842D, 0xCD00B4>();
	}

	FORCEINLINE auto GET_USER_STARTER_ACCESS()
	{
		return invoker::invoke<int, 0xB83FBB552E8DBF61, 0xCD00D4>();
	}

	FORCEINLINE auto CLOUD_DELETE_MEMBER_FILE(const char* p0)
	{
		return invoker::invoke<int, 0x595BC3CB7A842B33, 0xCCD4A8>(p0);
	}

	FORCEINLINE auto CLOUD_HAS_REQUEST_COMPLETED(int requestId)
	{
		return invoker::invoke<BOOL, 0xF61191B654874D0, 0xCCD518>(requestId);
	}

	FORCEINLINE auto CLOUD_DID_REQUEST_SUCCEED(int requestId)
	{
		return invoker::invoke<BOOL, 0x7BAB29B9355651B7, 0xCCD4C8>(requestId);
	}

	FORCEINLINE auto CLOUD_CHECK_AVAILABILITY()
	{
		return invoker::invoke<void, 0x8D99EE58B1FB08FF, 0xCCD49C>();
	}

	FORCEINLINE auto CLOUD_IS_CHECKING_AVAILABILITY()
	{
		return invoker::invoke<BOOL, 0x722F601C8C71A90A, 0xCCD544>();
	}

	FORCEINLINE auto CLOUD_GET_AVAILABILITY_CHECK_RESULT()
	{
		return invoker::invoke<BOOL, 0x194647F86ACF56D4, 0xCCD4F4>();
	}

	FORCEINLINE auto GET_CONTENT_TO_LOAD_TYPE()
	{
		return invoker::invoke<int, 0xC10C1DEAEBB5849E, 0xCCE8A8>();
	}

	FORCEINLINE auto GET_IS_LAUNCH_FROM_LIVE_AREA()
	{
		return invoker::invoke<BOOL, 0x8071F22E56E8A70F, 0xCCE8A8>();
	}

	FORCEINLINE auto GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT()
	{
		return invoker::invoke<BOOL, 0x144FBCDDF1717161, 0xCCE8A8>();
	}

	FORCEINLINE auto CLEAR_SERVICE_EVENT_ARGUMENTS()
	{
		return invoker::invoke<void, 0x72CF8D8C29D8D5BD, 0x81A1C0>();
	}

	FORCEINLINE auto UGC_COPY_CONTENT(Any* p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0x150E13CB4B04648D, 0xCDAC70>(p0, p1);
	}

	FORCEINLINE auto UGC_IS_CREATING()
	{
		return invoker::invoke<BOOL, 0xFA49944CF453C338, 0xCDB528>();
	}

	FORCEINLINE auto UGC_HAS_CREATE_FINISHED()
	{
		return invoker::invoke<BOOL, 0x840A709B5493C918, 0xCDB450>();
	}

	FORCEINLINE auto UGC_DID_CREATE_SUCCEED()
	{
		return invoker::invoke<BOOL, 0x368A167655B5B44A, 0xCDAC98>();
	}

	FORCEINLINE auto UGC_GET_CREATE_RESULT()
	{
		return invoker::invoke<int, 0xE2BDF7F96F1777EA, 0xCDB1CC>();
	}

	FORCEINLINE auto UGC_GET_CREATE_CONTENT_ID()
	{
		return invoker::invoke<const char*, 0x7C1C1B7F72ACD298, 0xCDB1A8>();
	}

	FORCEINLINE auto UGC_CLEAR_CREATE_RESULT()
	{
		return invoker::invoke<void, 0x82134CFF7DD01AA, 0xCDAC40>();
	}

	FORCEINLINE auto UGC_QUERY_MY_CONTENT(Any p0, Any p1, Any* p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<BOOL, 0x3F784BD38F0D94BA, 0xCDB714>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto UGC_QUERY_BY_CATEGORY(Any p0, Any p1, Any p2, const char* p3, Any p4, BOOL p5)
	{
		return invoker::invoke<BOOL, 0x6D52735FB5FD59E8, 0xCDB63C>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto UGC_QUERY_BY_CONTENT_ID(const char* contentId, BOOL latestVersion, const char* contentTypeName)
	{
		return invoker::invoke<BOOL, 0xA5D1672BB8378B6A, 0xCDB680>(contentId, latestVersion, contentTypeName);
	}

	FORCEINLINE auto UGC_QUERY_BY_CONTENT_IDS(Any* data, int count, BOOL latestVersion, const char* contentTypeName)
	{
		return invoker::invoke<BOOL, 0x4516244647CDE56D, 0xCDB6B0>(data, count, latestVersion, contentTypeName);
	}

	FORCEINLINE auto UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(int offset, int count, const char* contentTypeName, int p3)
	{
		return invoker::invoke<BOOL, 0xA598E27B609E1B5E, 0xCDB6E4>(offset, count, contentTypeName, p3);
	}

	FORCEINLINE auto UGC_GET_BOOKMARKED_CONTENT(Any p0, Any p1, const char* p2, Any* p3)
	{
		return invoker::invoke<BOOL, 0x30385B4D972827A5, 0xCDAD54>(p0, p1, p2, p3);
	}

	FORCEINLINE auto UGC_GET_MY_CONTENT(Any p0, Any p1, const char* p2, Any* p3)
	{
		return invoker::invoke<BOOL, 0x4103A58ABA168EFB, 0xCDB3A8>(p0, p1, p2, p3);
	}

	FORCEINLINE auto UGC_GET_FRIEND_CONTENT(Any p0, Any p1, const char* p2, Any* p3)
	{
		return invoker::invoke<BOOL, 0xAE7CAF61C281EAB2, 0xCDB26C>(p0, p1, p2, p3);
	}

	FORCEINLINE auto UGC_GET_CREW_CONTENT(Any p0, Any p1, Any p2, const char* p3, Any* p4)
	{
		return invoker::invoke<BOOL, 0x2D3878E122FB9CD, 0xCDB234>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto UGC_GET_GET_BY_CATEGORY(Any p0, Any p1, Any p2, const char* p3, Any* p4)
	{
		return invoker::invoke<BOOL, 0xF9618670CE65580B, 0xCDB29C>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto UGC_GET_GET_BY_CONTENT_ID(const char* contentId, const char* contentTypeName)
	{
		return invoker::invoke<BOOL, 0xA46905C7B738C729, 0xCDB2D4>(contentId, contentTypeName);
	}

	FORCEINLINE auto UGC_GET_GET_BY_CONTENT_IDS(Any* data, int dataCount, const char* contentTypeName)
	{
		return invoker::invoke<BOOL, 0x423AC9BED82065D0, 0xCDB2FC>(data, dataCount, contentTypeName);
	}

	FORCEINLINE auto UGC_GET_MOST_RECENTLY_CREATED_CONTENT(Any p0, Any p1, Any* p2, Any* p3)
	{
		return invoker::invoke<BOOL, 0x3A9A4663D37D7390, 0xCDB348>(p0, p1, p2, p3);
	}

	FORCEINLINE auto UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(Any p0, Any p1, Any* p2, Any* p3)
	{
		return invoker::invoke<BOOL, 0xE3101BD119D7E62, 0xCDB378>(p0, p1, p2, p3);
	}

	FORCEINLINE auto UGC_GET_TOP_RATED_CONTENT(Any p0, Any p1, Any* p2, Any* p3)
	{
		return invoker::invoke<BOOL, 0xAD20B85AA9EC7F0B, 0xCDB420>(p0, p1, p2, p3);
	}

	FORCEINLINE auto UGC_CANCEL_QUERY()
	{
		return invoker::invoke<void, 0xF44BFA38C25D7F65, 0xCDAC34>();
	}

	FORCEINLINE auto UGC_IS_GETTING()
	{
		return invoker::invoke<BOOL, 0x3076B63C4BC614DC, 0xCDB578>();
	}

	FORCEINLINE auto UGC_HAS_GET_FINISHED()
	{
		return invoker::invoke<BOOL, 0xD1377E5E950FBDDA, 0xCDB4A0>();
	}

	FORCEINLINE auto UGC_DID_GET_SUCCEED()
	{
		return invoker::invoke<BOOL, 0xB615B19E3B1CB800, 0xCDACE8>();
	}

	FORCEINLINE auto UGC_WAS_QUERY_FORCE_CANCELLED()
	{
		return invoker::invoke<BOOL, 0xCFB101E40FBA6A5A, 0xCDB8E8>();
	}

	FORCEINLINE auto UGC_GET_QUERY_RESULT()
	{
		return invoker::invoke<int, 0x1DC804A2468D29A2, 0xCDB3D8>();
	}

	FORCEINLINE auto UGC_GET_CONTENT_NUM()
	{
		return invoker::invoke<int, 0xE5CECFB837D1F1B8, 0xCDB044>();
	}

	FORCEINLINE auto UGC_GET_CONTENT_TOTAL()
	{
		return invoker::invoke<int, 0x1EE4CB0B5FD3927E, 0xCDB128>();
	}

	FORCEINLINE auto UGC_GET_CONTENT_HASH()
	{
		return invoker::invoke<Hash, 0x7BC6776F828F022C, 0xCDAE78>();
	}

	FORCEINLINE auto UGC_CLEAR_QUERY_RESULTS()
	{
		return invoker::invoke<void, 0x7D7DC90EB1D8C8B4, 0xCDAC64>();
	}

	FORCEINLINE auto UGC_GET_CONTENT_USER_ID(int p0)
	{
		return invoker::invoke<const char*, 0x4A5B5E00528FADB4, 0xCDB158>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(int p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0x2461B1057D922D96, 0xCDADFC>(p0, p1);
	}

	FORCEINLINE auto UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(Any p0)
	{
		return invoker::invoke<BOOL, 0xB678B17485F07C58, 0xCDADD0>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_USER_NAME(Any p0)
	{
		return invoker::invoke<const char*, 0xA97D041A0700AC71, 0xCDB180>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_IS_USING_SC_NICKNAME(Any p0)
	{
		return invoker::invoke<BOOL, 0xD497BCA3B9495BB9, 0xCDAF9C>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_CATEGORY(int p0)
	{
		return invoker::invoke<int, 0x9FFE2545E71B490E, 0xCDADA8>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_ID(int p0)
	{
		return invoker::invoke<const char*, 0x7768894B5FCDF25F, 0xCDAF48>(p0);
	}

	FORCEINLINE auto UGC_GET_ROOT_CONTENT_ID(int p0)
	{
		return invoker::invoke<const char*, 0x7BA63240A50FC6C7, 0xCDB3F8>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_NAME(Any p0)
	{
		return invoker::invoke<const char*, 0xB3C23ED232D01319, 0xCDB01C>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_DESCRIPTION_HASH(Any p0)
	{
		return invoker::invoke<int, 0x8715A76F8294FEE0, 0xCDAE24>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_PATH(int p0, int p1)
	{
		return invoker::invoke<const char*, 0xEA3E22389A733263, 0xCDB064>(p0, p1);
	}

	FORCEINLINE auto UGC_GET_CONTENT_UPDATED_DATE(Any p0, Any* p1)
	{
		return invoker::invoke<void, 0x86D971EBB6E0F0AC, 0xCDB148>(p0, p1);
	}

	FORCEINLINE auto UGC_GET_CONTENT_FILE_VERSION(Any p0, Any p1)
	{
		return invoker::invoke<int, 0xB010444AA0CE4D66, 0xCDAE4C>(p0, p1);
	}

	FORCEINLINE auto UGC_GET_CONTENT_HAS_LO_RES_PHOTO(int p0)
	{
		return invoker::invoke<BOOL, 0xFFEDCFBF2A7D07DE, 0xCDAEC4>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_HAS_HI_RES_PHOTO(int p0)
	{
		return invoker::invoke<BOOL, 0xA049DE72EC734E79, 0xCDAE98>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_LANGUAGE(Any p0)
	{
		return invoker::invoke<int, 0xA2CE098EA47DF97D, 0xCDAFF4>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_IS_PUBLISHED(Any p0)
	{
		return invoker::invoke<BOOL, 0xDECDB93AECF4571C, 0xCDAF70>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_IS_VERIFIED(Any p0)
	{
		return invoker::invoke<BOOL, 0xE72957406FBFB362, 0xCDAFC8>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_RATING(Any p0, Any p1)
	{
		return invoker::invoke<float, 0xCF073B4FF8828B7E, 0xCDB088>(p0, p1);
	}

	FORCEINLINE auto UGC_GET_CONTENT_RATING_COUNT(Any p0, Any p1)
	{
		return invoker::invoke<int, 0x909B2EE8AF324A1D, 0xCDB0B0>(p0, p1);
	}

	FORCEINLINE auto UGC_GET_CONTENT_RATING_POSITIVE_COUNT(Any p0, Any p1)
	{
		return invoker::invoke<int, 0x7EB4730FA964B592, 0xCDB100>(p0, p1);
	}

	FORCEINLINE auto UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(Any p0, Any p1)
	{
		return invoker::invoke<int, 0xAA565F77BB458AFD, 0xCDB0D8>(p0, p1);
	}

	FORCEINLINE auto UGC_GET_CONTENT_HAS_PLAYER_RECORD(Any p0)
	{
		return invoker::invoke<BOOL, 0x821D66CE02BC23F8, 0xCDAF1C>(p0);
	}

	FORCEINLINE auto UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(Any p0)
	{
		return invoker::invoke<BOOL, 0xDA829364F715C68, 0xCDAEF0>(p0);
	}

	FORCEINLINE auto UGC_REQUEST_CONTENT_DATA_FROM_INDEX(int p0, int p1)
	{
		return invoker::invoke<int, 0x171DF6A0C07FB3DC, 0xCDB7B4>(p0, p1);
	}

	FORCEINLINE auto UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(const char* contentTypeName, const char* contentId, int p2, int p3, int p4)
	{
		return invoker::invoke<int, 0x7FD2990AF016795E, 0xCDB7E4>(contentTypeName, contentId, p2, p3, p4);
	}

	FORCEINLINE auto UGC_REQUEST_CACHED_DESCRIPTION(int p0)
	{
		return invoker::invoke<int, 0x52DCAA722383A060, 0xCDB78C>(p0);
	}

	FORCEINLINE auto UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(Any p0)
	{
		return invoker::invoke<BOOL, 0x66CB39FD84C5ED21, 0xCDB54C>(p0);
	}

	FORCEINLINE auto UGC_HAS_DESCRIPTION_REQUEST_FINISHED(Any p0)
	{
		return invoker::invoke<BOOL, 0x28F3FD2263FCE777, 0xCDB474>(p0);
	}

	FORCEINLINE auto UGC_DID_DESCRIPTION_REQUEST_SUCCEED(Any p0)
	{
		return invoker::invoke<BOOL, 0x16C0B173B472AF71, 0xCDACBC>(p0);
	}

	FORCEINLINE auto UGC_GET_CACHED_DESCRIPTION(Any p0, Any p1)
	{
		return invoker::invoke<const char*, 0x1B4FD4A821EC277E, 0xCDAD84>(p0, p1);
	}

	FORCEINLINE auto UGC_RELEASE_CACHED_DESCRIPTION(Any p0)
	{
		return invoker::invoke<BOOL, 0x2D133345AB736461, 0xCDB760>(p0);
	}

	FORCEINLINE auto UGC_RELEASE_ALL_CACHED_DESCRIPTIONS()
	{
		return invoker::invoke<void, 0x67BEDA5A8CD7FF28, 0xCDB754>();
	}

	FORCEINLINE auto UGC_HAS_PERMISSION_TO_WRITE()
	{
		return invoker::invoke<BOOL, 0xC33E7CBC06EC1A8D, 0xCDB4E8>();
	}

	FORCEINLINE auto UGC_PUBLISH(const char* contentId, const char* baseContentId, const char* contentTypeName)
	{
		return invoker::invoke<BOOL, 0x29D58EEB6D24D5FB, 0xCDB610>(contentId, baseContentId, contentTypeName);
	}

	FORCEINLINE auto UGC_SET_BOOKMARKED(const char* contentId, BOOL bookmarked, const char* contentTypeName)
	{
		return invoker::invoke<BOOL, 0xE3E138A155ACC0B9, 0xCDB818>(contentId, bookmarked, contentTypeName);
	}

	FORCEINLINE auto UGC_SET_DELETED(Any* p0, BOOL p1, const char* p2)
	{
		return invoker::invoke<BOOL, 0x8FA5AF26CEA0CF0C, 0xCDB848>(p0, p1, p2);
	}

	FORCEINLINE auto UGC_IS_MODIFYING()
	{
		return invoker::invoke<BOOL, 0x2DD9F4C2D128C690, 0xCDB5C0>();
	}

	FORCEINLINE auto UGC_HAS_MODIFY_FINISHED()
	{
		return invoker::invoke<BOOL, 0xBE4DBB4B94FDD19D, 0xCDB4C4>();
	}

	FORCEINLINE auto UGC_DID_MODIFY_SUCCEED()
	{
		return invoker::invoke<BOOL, 0x7911A5D34DD65F5B, 0xCDAD0C>();
	}

	FORCEINLINE auto UGC_GET_MODIFY_RESULT()
	{
		return invoker::invoke<int, 0xBA339BF67EA1C876, 0xCDB328>();
	}

	FORCEINLINE auto UGC_CLEAR_MODIFY_RESULT()
	{
		return invoker::invoke<void, 0xB7CBD1698172CFDD, 0xCDAC4C>();
	}

	FORCEINLINE auto UGC_GET_CREATORS_BY_USER_ID(Any* p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0x2D6CAE334C3034FD, 0xCDB1EC>(p0, p1);
	}

	FORCEINLINE auto UGC_HAS_QUERY_CREATORS_FINISHED()
	{
		return invoker::invoke<BOOL, 0x2D8B5E2968C2B8C, 0xCDB504>();
	}

	FORCEINLINE auto UGC_DID_QUERY_CREATORS_SUCCEED()
	{
		return invoker::invoke<BOOL, 0xA447FE863BC5F3D0, 0xCDAD30>();
	}

	FORCEINLINE auto UGC_GET_CREATOR_NUM()
	{
		return invoker::invoke<int, 0x403513BADB247F14, 0xCDB214>();
	}

	FORCEINLINE auto UGC_LOAD_OFFLINE_QUERY(Any p0)
	{
		return invoker::invoke<BOOL, 0x5177CA1D97988B5C, 0xCDB5E4>(p0);
	}

	FORCEINLINE auto UGC_CLEAR_OFFLINE_QUERY()
	{
		return invoker::invoke<void, 0x2864B7211C443DA5, 0xCDAC58>();
	}

	FORCEINLINE auto UGC_SET_QUERY_DATA_FROM_OFFLINE(BOOL p0)
	{
		return invoker::invoke<void, 0xB79F7D662E0B7885, 0xCDB878>(p0);
	}

	FORCEINLINE auto UGC_SET_USING_OFFLINE_CONTENT(BOOL p0)
	{
		return invoker::invoke<void, 0x626E6E90E38C6EF7, 0xCDB890>(p0);
	}

	FORCEINLINE auto UGC_IS_LANGUAGE_SUPPORTED(Any p0)
	{
		return invoker::invoke<BOOL, 0xFD898AF12570EEB6, 0xCDB59C>(p0);
	}

	FORCEINLINE auto FACEBOOK_POST_COMPLETED_HEIST(const char* heistName, int cashEarned, int xpEarned)
	{
		return invoker::invoke<BOOL, 0xA1EF53B581B6B4A9, 0xCCE8A8>(heistName, cashEarned, xpEarned);
	}

	FORCEINLINE auto FACEBOOK_POST_CREATE_CHARACTER()
	{
		return invoker::invoke<BOOL, 0x5506E003A95C6373, 0xCCE8A8>();
	}

	FORCEINLINE auto FACEBOOK_POST_COMPLETED_MILESTONE(int milestoneId)
	{
		return invoker::invoke<BOOL, 0xAE566521443DBC23, 0xCCE8A8>(milestoneId);
	}

	FORCEINLINE auto FACEBOOK_HAS_POST_COMPLETED()
	{
		return invoker::invoke<BOOL, 0x23ECFBF953F64001, 0xD1F814>();
	}

	FORCEINLINE auto FACEBOOK_DID_POST_SUCCEED()
	{
		return invoker::invoke<BOOL, 0x220ABB0D55961BE1, 0xCCE8A8>();
	}

	FORCEINLINE auto FACEBOOK_CAN_POST_TO_FACEBOOK()
	{
		return invoker::invoke<BOOL, 0x6D230D68A9AD1134, 0xCCE8A8>();
	}

	FORCEINLINE auto TEXTURE_DOWNLOAD_REQUEST(Any* gamerHandle, const char* filePath, const char* name, BOOL p3)
	{
		return invoker::invoke<int, 0x1905CE168C7AF873, 0xCDAB6C>(gamerHandle, filePath, name, p3);
	}

	FORCEINLINE auto TITLE_TEXTURE_DOWNLOAD_REQUEST(const char* filePath, const char* name, BOOL p2)
	{
		return invoker::invoke<int, 0x30B65E94C2188C92, 0xCDAB9C>(filePath, name, p2);
	}

	FORCEINLINE auto UGC_TEXTURE_DOWNLOAD_REQUEST(const char* p0, int p1, int p2, int p3, const char* p4, BOOL p5)
	{
		return invoker::invoke<int, 0x3A1BB16285A7B9C, 0xCDB8A8>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto TEXTURE_DOWNLOAD_RELEASE(int p0)
	{
		return invoker::invoke<void, 0x988DAD0F0370C94E, 0xCDAB58>(p0);
	}

	FORCEINLINE auto TEXTURE_DOWNLOAD_HAS_FAILED(int p0)
	{
		return invoker::invoke<BOOL, 0x26EA30089CAD115D, 0xCDAB2C>(p0);
	}

	FORCEINLINE auto TEXTURE_DOWNLOAD_GET_NAME(int p0)
	{
		return invoker::invoke<const char*, 0x6DE51300ACD3E3F3, 0xCDAB04>(p0);
	}

	FORCEINLINE auto GET_STATUS_OF_TEXTURE_DOWNLOAD(int p0)
	{
		return invoker::invoke<int, 0x15C0F0A696091ACB, 0xCCFECC>(p0);
	}

	FORCEINLINE auto NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET()
	{
		return invoker::invoke<BOOL, 0x3CF1DEF284B9B6C0, 0xCD2DC0>();
	}

	FORCEINLINE auto NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING()
	{
		return invoker::invoke<BOOL, 0x17739C59E555C46D, 0xCD6AA4>();
	}

	FORCEINLINE auto NETWORK_IS_CABLE_CONNECTED()
	{
		return invoker::invoke<BOOL, 0x6B47B305B6557EF9, 0xCD4CDC>();
	}

	FORCEINLINE auto NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV()
	{
		return invoker::invoke<BOOL, 0x62B038F95CEA3FE9, 0xCD4B2C>();
	}

	FORCEINLINE auto NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV()
	{
		return invoker::invoke<BOOL, 0xE67B481B4EC10A14, 0xCD4B10>();
	}

	FORCEINLINE auto NETWORK_HAVE_ROS_BANNED_PRIV()
	{
		return invoker::invoke<BOOL, 0xF4260C5C733DA1CB, 0xCD4AA0>();
	}

	FORCEINLINE auto NETWORK_HAVE_ROS_CREATE_TICKET_PRIV()
	{
		return invoker::invoke<BOOL, 0xC869C5AD1CA63C58, 0xCD4ABC>();
	}

	FORCEINLINE auto NETWORK_HAVE_ROS_MULTIPLAYER_PRIV()
	{
		return invoker::invoke<BOOL, 0x938C5858FA4618E2, 0xCD4AF4>();
	}

	FORCEINLINE auto NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV()
	{
		return invoker::invoke<BOOL, 0xAE6B753124318E29, 0xCD4AD8>();
	}

	FORCEINLINE auto NETWORK_HAS_ROS_PRIVILEGE(int index)
	{
		return invoker::invoke<BOOL, 0x428539069343758E, 0xCD48A8>(index);
	}

	FORCEINLINE auto NETWORK_HAS_ROS_PRIVILEGE_END_DATE(int privilege, int* banType, Any* timeData)
	{
		return invoker::invoke<BOOL, 0x20DACABA7023B608, 0xCD48CC>(privilege, banType, timeData);
	}

	FORCEINLINE auto NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN()
	{
		return invoker::invoke<BOOL, 0x5BC93955B6EEBC0B, 0xCD4930>();
	}

	FORCEINLINE auto NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT()
	{
		return invoker::invoke<BOOL, 0x753B42F8D561B8E2, 0xCD4968>();
	}

	FORCEINLINE auto _NETWORK_HAS_ROS_PRIVILEGE_MP_TEXT_COMMUNICATION()
	{
		return invoker::invoke<BOOL, 0xD9719341663C385F, 0xCD48F8>();
	}

	FORCEINLINE auto _NETWORK_HAS_ROS_PRIVILEGE_MP_VOICE_COMMUNICATION()
	{
		return invoker::invoke<BOOL, 0x8956A309BE90057C, 0xCD4914>();
	}

	FORCEINLINE auto _NETWORK_HAS_ROS_PRIVILEGE_REPORTING()
	{
		return invoker::invoke<BOOL, 0x9BA54B3CFB82ADDD, 0xCD494C>();
	}

	FORCEINLINE auto NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(Any p0)
	{
		return invoker::invoke<int, 0x9E0B6B766CF810E5, 0xCD6B00>(p0);
	}

	FORCEINLINE auto NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(Any* netHandle)
	{
		return invoker::invoke<int, 0x12AEE383533D0E70, 0xCD6B00>(netHandle);
	}

	FORCEINLINE auto NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE()
	{
		return invoker::invoke<void, 0xDC5F81D7F618A8A6, 0xCD6AD4>();
	}

	FORCEINLINE auto NETWORK_SKIP_RADIO_RESET_NEXT_OPEN()
	{
		return invoker::invoke<void, 0x7EF7ABCDDEEEB7C0, 0xCD6ADC>();
	}

	FORCEINLINE auto NETWORK_SKIP_RADIO_WARNING()
	{
		return invoker::invoke<BOOL, 0xEFF4479E2B0D2080, 0xCD6AE4>();
	}

	FORCEINLINE auto NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC()
	{
		return invoker::invoke<void, 0xBF561BB44F8AFA5C, 0xCD3778>();
	}

	FORCEINLINE auto NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(BOOL toggle)
	{
		return invoker::invoke<void, 0xD8D822FF4C3DCD7D, 0xCD32F4>(toggle);
	}

	FORCEINLINE auto NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(Entity entity, BOOL toggle)
	{
		return invoker::invoke<void, 0x8D2010DF3E481626, 0xCD2870>(entity, toggle);
	}

	FORCEINLINE auto NETWORK_SHOW_CHAT_RESTRICTION_MSC(Player player)
	{
		return invoker::invoke<void, 0x230CD2039E115591, 0x81A1C0>(player);
	}

	FORCEINLINE auto NETWORK_SHOW_PSN_UGC_RESTRICTION()
	{
		return invoker::invoke<void, 0xC7C2484FD7A1279A, 0x81A1C0>();
	}

	FORCEINLINE auto NETWORK_IS_TITLE_UPDATE_REQUIRED()
	{
		return invoker::invoke<BOOL, 0x6026EB0A2A2F509E, 0xCCE8A8>();
	}

	FORCEINLINE auto NETWORK_QUIT_MP_TO_DESKTOP()
	{
		return invoker::invoke<void, 0x1BA57F70810F53CD, 0xCD5B14>();
	}

	FORCEINLINE auto NETWORK_IS_CONNECTED_VIA_RELAY(Player player)
	{
		return invoker::invoke<BOOL, 0x6C15571532CF7F95, 0xCD4D7C>(player);
	}

	FORCEINLINE auto NETWORK_GET_AVERAGE_LATENCY(Player player)
	{
		return invoker::invoke<float, 0xD29CB5E83871293B, 0xCD38BC>(player);
	}

	FORCEINLINE auto NETWORK_GET_AVERAGE_PING(Player player)
	{
		return invoker::invoke<float, 0x20EDD3199D02CB60, 0xCD38BC>(player);
	}

	FORCEINLINE auto NETWORK_GET_AVERAGE_PACKET_LOSS(Player player)
	{
		return invoker::invoke<float, 0xA26711392EBF5371, 0xCD38E0>(player);
	}

	FORCEINLINE auto NETWORK_GET_NUM_UNACKED_RELIABLES(Player player)
	{
		return invoker::invoke<int, 0xC424F771EFDD2A58, 0xCD3EA4>(player);
	}

	FORCEINLINE auto NETWORK_GET_UNRELIABLE_RESEND_COUNT(Player player)
	{
		return invoker::invoke<int, 0x7D17572D1EE9D0A9, 0xCD453C>(player);
	}

	FORCEINLINE auto NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(Player player)
	{
		return invoker::invoke<int, 0x2031266910F9D195, 0xCD3B8C>(player);
	}

	FORCEINLINE auto NETWORK_REPORT_CODE_TAMPER()
	{
		return invoker::invoke<void, 0x5CE41A29691C7614, 0xCD5C78>();
	}

	FORCEINLINE auto NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(Entity entity)
	{
		return invoker::invoke<Vector3, 0x4D867CF71882EEA6, 0xCD3C7C>(entity);
	}

	FORCEINLINE auto NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(Player player)
	{
		return invoker::invoke<Vector3, 0x65D66F9646758265, 0xCD3CC4>(player);
	}

	FORCEINLINE auto NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(Entity entity)
	{
		return invoker::invoke<Vector3, 0x21D6FED3EFEC33E5, 0xCD3D0C>(entity);
	}

	FORCEINLINE auto NETWORK_GET_PREDICTED_VELOCITY(Entity entity, float maxSpeedToPredict)
	{
		return invoker::invoke<Vector3, 0xD23AF6BA9E38FE33, 0xCD4038>(entity, maxSpeedToPredict);
	}

	FORCEINLINE auto NETWORK_DUMP_NET_IF_CONFIG()
	{
		return invoker::invoke<void, 0x3A5F05A23D5B4F88, 0x81A1C0>();
	}

	FORCEINLINE auto NETWORK_GET_SIGNALLING_INFO(Any* p0)
	{
		return invoker::invoke<void, 0xDC05070D5646C09C, 0x81A1C0>(p0);
	}

	FORCEINLINE auto NETWORK_GET_NET_STATISTICS_INFO(Any* p0)
	{
		return invoker::invoke<void, 0xDF399EF490797927, 0x81A1C0>(p0);
	}

	FORCEINLINE auto NETWORK_GET_PLAYER_ACCOUNT_ID(Player player)
	{
		return invoker::invoke<int, 0x17E5F27FA417E82E, 0xCD3F24>(player);
	}

	FORCEINLINE auto NETWORK_UGC_NAV(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x3E1F527308A7BBC1, 0xCD6D4C>(p0, p1);
	}

}
namespace HUD
{
	FORCEINLINE auto BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(const char* string)
	{
		return invoker::invoke<void, 0xB661D6EC3F065818, 0xD17838>(string);
	}

	FORCEINLINE auto END_TEXT_COMMAND_BUSYSPINNER_ON(int busySpinnerType)
	{
		return invoker::invoke<void, 0x654AFEEF256E650F, 0xD18294>(busySpinnerType);
	}

	FORCEINLINE auto BUSYSPINNER_OFF()
	{
		return invoker::invoke<void, 0x65662724C6BC4810, 0xD17928>();
	}

	FORCEINLINE auto PRELOAD_BUSYSPINNER()
	{
		return invoker::invoke<void, 0x8CBD7E751A3A6A85, 0xD1D6B8>();
	}

	FORCEINLINE auto BUSYSPINNER_IS_ON()
	{
		return invoker::invoke<BOOL, 0x73F9AE5F32ABCCA9, 0xD1790C>();
	}

	FORCEINLINE auto BUSYSPINNER_IS_DISPLAYING()
	{
		return invoker::invoke<BOOL, 0x92E1F6B57257471D, 0xD178F0>();
	}

	FORCEINLINE auto DISABLE_PAUSEMENU_SPINNER(BOOL p0)
	{
		return invoker::invoke<void, 0x5E174DAD9D215609, 0xD17F4C>(p0);
	}

	FORCEINLINE auto SET_MOUSE_CURSOR_THIS_FRAME()
	{
		return invoker::invoke<void, 0xA6DB7FC56DBDFB82, 0xD1E780>();
	}

	FORCEINLINE auto SET_MOUSE_CURSOR_STYLE(int spriteId)
	{
		return invoker::invoke<void, 0x30EBBB1D4EDC8FE4, 0xD1E774>(spriteId);
	}

	FORCEINLINE auto SET_MOUSE_CURSOR_VISIBLE(BOOL toggle)
	{
		return invoker::invoke<void, 0x26BBBC01C3E132A7, 0xD1E788>(toggle);
	}

	FORCEINLINE auto IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS()
	{
		return invoker::invoke<BOOL, 0x2135EF5011FECD68, 0xD1A370>();
	}

	FORCEINLINE auto GET_MOUSE_EVENT(int scaleformHandle, Any* p1, Any* p2, Any* p3)
	{
		return invoker::invoke<BOOL, 0xEE00DCC111704F16, 0xD19514>(scaleformHandle, p1, p2, p3);
	}

	FORCEINLINE auto THEFEED_ONLY_SHOW_TOOLTIPS(BOOL toggle)
	{
		return invoker::invoke<void, 0xD3D5E152F6D9A5F6, 0xD1F57C>(toggle);
	}

	FORCEINLINE auto THEFEED_SET_SCRIPTED_MENU_HEIGHT(float pos)
	{
		return invoker::invoke<void, 0x43244A32AD6E17D, 0xD1F67C>(pos);
	}

	FORCEINLINE auto THEFEED_HIDE()
	{
		return invoker::invoke<void, 0xC5F6E5CC785FEC20, 0xD1F52C>();
	}

	FORCEINLINE auto THEFEED_HIDE_THIS_FRAME()
	{
		return invoker::invoke<void, 0xC9B2F8C2BD128C2, 0xD1F544>();
	}

	FORCEINLINE auto THEFEED_SHOW()
	{
		return invoker::invoke<void, 0x8875527DD4E42C07, 0xD1F6D4>();
	}

	FORCEINLINE auto THEFEED_FLUSH_QUEUE()
	{
		return invoker::invoke<void, 0xC138265FD0CDEA4E, 0xD1F4A8>();
	}

	FORCEINLINE auto THEFEED_REMOVE_ITEM(int notificationId)
	{
		return invoker::invoke<void, 0xFE3A52C5B7AE3101, 0xD1F5A4>(notificationId);
	}

	FORCEINLINE auto THEFEED_FORCE_RENDER_ON()
	{
		return invoker::invoke<void, 0x787E27CA7632AC90, 0xD1F4D8>();
	}

	FORCEINLINE auto THEFEED_FORCE_RENDER_OFF()
	{
		return invoker::invoke<void, 0x6B4FEC23A5AD2DC0, 0xD1F4C0>();
	}

	FORCEINLINE auto THEFEED_PAUSE()
	{
		return invoker::invoke<void, 0x5C6622EF2CEA902F, 0xD1F58C>();
	}

	FORCEINLINE auto THEFEED_RESUME()
	{
		return invoker::invoke<void, 0xCCC82B30A1C53626, 0xD1F60C>();
	}

	FORCEINLINE auto THEFEED_IS_PAUSED()
	{
		return invoker::invoke<BOOL, 0xBB7AD75D26AF0143, 0xD1F55C>();
	}

	FORCEINLINE auto THEFEED_REPORT_LOGO_ON()
	{
		return invoker::invoke<void, 0x8020F127745ED3F5, 0xD1F5DC>();
	}

	FORCEINLINE auto THEFEED_REPORT_LOGO_OFF()
	{
		return invoker::invoke<void, 0xB11A8AFB3C6DEFEE, 0xD1F5C4>();
	}

	FORCEINLINE auto THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID()
	{
		return invoker::invoke<int, 0x8DB6B5124B5217E1, 0xD1F508>();
	}

	FORCEINLINE auto THEFEED_AUTO_POST_GAMETIPS_ON()
	{
		return invoker::invoke<void, 0x9EABCC9DA69DEDC2, 0xD1F478>();
	}

	FORCEINLINE auto THEFEED_AUTO_POST_GAMETIPS_OFF()
	{
		return invoker::invoke<void, 0x1E528DDB9C065FB7, 0xD1F460>();
	}

	FORCEINLINE auto THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(int hudColorIndex)
	{
		return invoker::invoke<void, 0xE37CD12400926DE5, 0xD1F624>(hudColorIndex);
	}

	FORCEINLINE auto THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0xDE4E5CC177B7051F, 0xD1F664>(red, green, blue, alpha);
	}

	FORCEINLINE auto THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(int count)
	{
		return invoker::invoke<void, 0xF96D051DEBF38D64, 0xD1F644>(count);
	}

	FORCEINLINE auto THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(BOOL toggle)
	{
		return invoker::invoke<void, 0x4ECB46EDAD7EA53D, 0xD1F6B0>(toggle);
	}

	FORCEINLINE auto THEFEED_RESET_ALL_PARAMETERS()
	{
		return invoker::invoke<void, 0x17E18CDB962AC915, 0xD1F5F4>();
	}

	FORCEINLINE auto THEFEED_FREEZE_NEXT_POST()
	{
		return invoker::invoke<void, 0x7C64D5DE5CA79A81, 0xD1F4F0>();
	}

	FORCEINLINE auto THEFEED_CLEAR_FROZEN_POST()
	{
		return invoker::invoke<void, 0x9C5AF6A77EBFAFDC, 0xD1F490>();
	}

	FORCEINLINE auto THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(BOOL p0)
	{
		return invoker::invoke<void, 0x2DDB2996437CC59C, 0xD1F68C>(p0);
	}

	FORCEINLINE auto THEFEED_UPDATE_ITEM_TEXTURE(const char* txdString1, const char* txnString1, const char* txdString2, const char* txnString2)
	{
		return invoker::invoke<void, 0x4CF6314488B07405, 0xD1F6EC>(txdString1, txnString1, txdString2, txnString2);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_THEFEED_POST(const char* text)
	{
		return invoker::invoke<void, 0xCCDB0041859B85A6, 0xD178BC>(text);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_STATS(const char* statTitle, int iconEnum, BOOL stepVal, int barValue, BOOL isImportant, const char* pictureTextureDict, const char* pictureTextureName)
	{
		return invoker::invoke<int, 0xAAAE599E05E67D2, 0xD185C0>(statTitle, iconEnum, stepVal, barValue, isImportant, pictureTextureDict, pictureTextureName);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(const char* txdName, const char* textureName, BOOL flash, int iconType, const char* sender, const char* subject)
	{
		return invoker::invoke<int, 0x5C7E2225D7451992, 0xD18430>(txdName, textureName, flash, iconType, sender, subject);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(const char* txdName, const char* textureName, BOOL flash, int iconType, const char* sender, const char* subject)
	{
		return invoker::invoke<int, 0xB8ACFA63585700CC, 0xD18474>(txdName, textureName, flash, iconType, sender, subject);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(const char* txdName, const char* textureName, BOOL flash, int iconType, const char* sender, const char* subject, float duration)
	{
		return invoker::invoke<int, 0x6015BF83F19DAE5C, 0xD184B8>(txdName, textureName, flash, iconType, sender, subject, duration);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(const char* txdName, const char* textureName, BOOL flash, int iconType, const char* sender, const char* subject, float duration, const char* clanTag)
	{
		return invoker::invoke<int, 0xE4DA8A1904D03AB9, 0xD18508>(txdName, textureName, flash, iconType, sender, subject, duration, clanTag);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(const char* txdName, const char* textureName, BOOL flash, int iconType1, const char* sender, const char* subject, float duration, const char* clanTag, int iconType2, int p9)
	{
		return invoker::invoke<int, 0xD54BCD3F7048BFA, 0xD18560>(txdName, textureName, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_TICKER(BOOL blink, BOOL p1)
	{
		return invoker::invoke<int, 0x25ABFB435E16C7D9, 0xD18604>(blink, p1);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(BOOL blink, BOOL p1)
	{
		return invoker::invoke<int, 0x320F2F5B5607E425, 0xD18634>(blink, p1);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(BOOL blink, BOOL p1)
	{
		return invoker::invoke<int, 0x1962888D78D95402, 0xD18660>(blink, p1);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_AWARD(const char* textureDict, const char* textureName, int rpBonus, int colorOverlay, const char* titleLabel)
	{
		return invoker::invoke<int, 0xD52B1CDE8B03CE86, 0xD1839C>(textureDict, textureName, rpBonus, colorOverlay, titleLabel);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_CREWTAG(BOOL p0, BOOL p1, int* p2, int p3, BOOL isLeader, BOOL unk0, int clanDesc, int R, int G, int B)
	{
		return invoker::invoke<int, 0xB262204BCFF28FCC, 0xD183D4>(p0, p1, p2, p3, isLeader, unk0, clanDesc, R, G, B);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(BOOL p0, BOOL p1, int* p2, int p3, BOOL isLeader, BOOL unk0, int clanDesc, const char* playerName, int R, int G, int B)
	{
		return invoker::invoke<int, 0x4252EAF1B00ED825, 0xD183E4>(p0, p1, p2, p3, isLeader, unk0, clanDesc, playerName, R, G, B);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_UNLOCK(const char* gxtLabel1, int p1, const char* gxtLabel2)
	{
		return invoker::invoke<int, 0x7A7782BC954C994B, 0xD18690>(gxtLabel1, p1, gxtLabel2);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(const char* gxtLabel1, int p1, const char* gxtLabel2, int p3)
	{
		return invoker::invoke<int, 0xC98870E86912B9E0, 0xD186C0>(gxtLabel1, p1, gxtLabel2, p3);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5)
	{
		return invoker::invoke<int, 0x54CF97A068ED5618, 0xD186F4>(p0, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_MPTICKER(BOOL blink, BOOL p1)
	{
		return invoker::invoke<int, 0x438D03085FECB959, 0xD18604>(blink, p1);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(const char* p0, const char* p1, const char* p2, BOOL p3, BOOL p4)
	{
		return invoker::invoke<int, 0xC36615DCBE463B8A, 0xD183F4>(p0, p1, p2, p3, p4);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(const char* txdName1, const char* textureName1, int count1, const char* txdName2, const char* textureName2, int count2, int hudColor1, int hudColor2)
	{
		return invoker::invoke<int, 0x4B4E142A1E3653A4, 0xD18734>(txdName1, textureName1, count1, txdName2, textureName2, count2, hudColor1, hudColor2);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_REPLAY(int type, int image, const char* text)
	{
		return invoker::invoke<int, 0xBB8346AD199D9F61, 0xD18570>(type, image, text);
	}

	FORCEINLINE auto END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(int type, const char* button, const char* text)
	{
		return invoker::invoke<int, 0xAB3EA738521899AA, 0xD18598>(type, button, text);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_PRINT(const char* GxtEntry)
	{
		return invoker::invoke<void, 0x17EA339F685C42D2, 0xD178A4>(GxtEntry);
	}

	FORCEINLINE auto END_TEXT_COMMAND_PRINT(int duration, BOOL drawImmediately)
	{
		return invoker::invoke<void, 0xA3136AD174470CC, 0xD1837C>(duration, drawImmediately);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(const char* text)
	{
		return invoker::invoke<void, 0x32A590914F10401C, 0xD17880>(text);
	}

	FORCEINLINE auto END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()
	{
		return invoker::invoke<BOOL, 0x96DEE7666C9409E5, 0xD18330>();
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_DISPLAY_TEXT(const char* text)
	{
		return invoker::invoke<void, 0xEAEB6E7D3FAEBD5B, 0xD1785C>(text);
	}

	FORCEINLINE auto END_TEXT_COMMAND_DISPLAY_TEXT(float x, float y, int p2)
	{
		return invoker::invoke<void, 0x25DD447A6EB3A86F, 0xD182C8>(x, y, p2);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(const char* text)
	{
		return invoker::invoke<void, 0x282D5DA1EE14950F, 0xD17874>(text);
	}

	FORCEINLINE auto END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(BOOL p0)
	{
		return invoker::invoke<float, 0x43026780D77E3DC0, 0xD18308>(p0);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(const char* entry)
	{
		return invoker::invoke<void, 0x12F78DEB1F1AF9C, 0xD17868>(entry);
	}

	FORCEINLINE auto END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(float x, float y)
	{
		return invoker::invoke<int, 0x83FBFC2ED3CA1611, 0xD182E0>(x, y);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_DISPLAY_HELP(const char* inputType)
	{
		return invoker::invoke<void, 0xAC98CA65AD9A3215, 0xD17850>(inputType);
	}

	FORCEINLINE auto END_TEXT_COMMAND_DISPLAY_HELP(int p0, BOOL loop, BOOL beep, int shape)
	{
		return invoker::invoke<void, 0x5E01B6B1F460FE3F, 0xD182A8>(p0, loop, beep, shape);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(const char* labelName)
	{
		return invoker::invoke<void, 0x39DCBE5519BD783A, 0xD1788C>(labelName);
	}

	FORCEINLINE auto END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(int p0)
	{
		return invoker::invoke<BOOL, 0x7EBCD400E7DE179C, 0xD1834C>(p0);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_SET_BLIP_NAME(const char* textLabel)
	{
		return invoker::invoke<void, 0xF3D182B81172EAB6, 0xD178B0>(textLabel);
	}

	FORCEINLINE auto END_TEXT_COMMAND_SET_BLIP_NAME(Blip blip)
	{
		return invoker::invoke<void, 0xFB605529038475D2, 0xD18390>(blip);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(const char* p0)
	{
		return invoker::invoke<void, 0x2E787BE7A586A8E0, 0xD1782C>(p0);
	}

	FORCEINLINE auto END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(BOOL p0)
	{
		return invoker::invoke<void, 0x77AFF2EAF772F223, 0xD18284>(p0);
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_CLEAR_PRINT(const char* text)
	{
		return invoker::invoke<void, 0x7C59282918D59E1B, 0xD17844>(text);
	}

	FORCEINLINE auto END_TEXT_COMMAND_CLEAR_PRINT()
	{
		return invoker::invoke<void, 0xD4C961FBE468D19D, 0xD182A0>();
	}

	FORCEINLINE auto BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(const char* gxtEntry)
	{
		return invoker::invoke<void, 0xF394C416AB393C2D, 0xD17898>(gxtEntry);
	}

	FORCEINLINE auto END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(int p0)
	{
		return invoker::invoke<void, 0xC5999CADF163C996, 0xD18370>(p0);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_INTEGER(int value)
	{
		return invoker::invoke<void, 0x511D14ED2DA887E1, 0xD17640>(value);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_FLOAT(float value, int decimalPlaces)
	{
		return invoker::invoke<void, 0x7DCF91CE9137DE0E, 0xD17620>(value, decimalPlaces);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(const char* labelName)
	{
		return invoker::invoke<void, 0xACF853FB3F6EA7D4, 0xD17668>(labelName);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(Hash gxtEntryHash)
	{
		return invoker::invoke<void, 0xD4006E065B0782FA, 0xD17674>(gxtEntryHash);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(Blip blip)
	{
		return invoker::invoke<void, 0x273F00982486DCC6, 0xD1764C>(blip);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(const char* text)
	{
		return invoker::invoke<void, 0x60D332F23943B34F, 0xD17690>(text);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_SUBSTRING_TIME(int timestamp, int flags)
	{
		return invoker::invoke<void, 0xBD34A69071611974, 0xD17680>(timestamp, flags);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_FORMATTED_INTEGER(int value, BOOL commaSeparated)
	{
		return invoker::invoke<void, 0xB5DF3215F3864B3F, 0xD17630>(value, commaSeparated);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(const char* p0, int p1)
	{
		return invoker::invoke<void, 0x6CA7A80BDD78C062, 0xD17658>(p0, p1);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(const char* website)
	{
		return invoker::invoke<void, 0x74E878E9E51685BE, 0xD17690>(website);
	}

	FORCEINLINE auto ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(const char* string)
	{
		return invoker::invoke<void, 0xB993F5B7A74B2A85, 0xD17690>(string);
	}

	FORCEINLINE auto SET_COLOUR_OF_NEXT_TEXT_COMPONENT(int hudColor)
	{
		return invoker::invoke<void, 0x4E5A3D96808F7F84, 0xD1E154>(hudColor);
	}

	FORCEINLINE auto GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(const char* text, int position, int length)
	{
		return invoker::invoke<const char*, 0xA4FC5B871651C9F9, 0xD18B30>(text, position, length);
	}

	FORCEINLINE auto GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(const char* text, int position, int length, int maxLength)
	{
		return invoker::invoke<const char*, 0x96793ADAC5A06FCB, 0xD18B90>(text, position, length, maxLength);
	}

	FORCEINLINE auto GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(const char* text, int startPosition, int endPosition)
	{
		return invoker::invoke<const char*, 0xE82BC2F91FAEEAE8, 0xD18B60>(text, startPosition, endPosition);
	}

	FORCEINLINE auto GET_FILENAME_FOR_AUDIO_CONVERSATION(const char* labelName)
	{
		return invoker::invoke<const char*, 0xFACCDE46E24AD056, 0xD18E70>(labelName);
	}

	FORCEINLINE auto CLEAR_PRINTS()
	{
		return invoker::invoke<void, 0x406CBCEA35499884, 0xD17BD8>();
	}

	FORCEINLINE auto CLEAR_BRIEF()
	{
		return invoker::invoke<void, 0x3FE29AE9C01FA3C2, 0xD17AF4>();
	}

	FORCEINLINE auto CLEAR_ALL_HELP_MESSAGES()
	{
		return invoker::invoke<void, 0xAD01710361B8BCF5, 0xD179DC>();
	}

	FORCEINLINE auto CLEAR_THIS_PRINT(const char* p0)
	{
		return invoker::invoke<void, 0x4E8E15513E171E54, 0xD17C1C>(p0);
	}

	FORCEINLINE auto CLEAR_SMALL_PRINTS()
	{
		return invoker::invoke<void, 0xFFD79EDD25B8EC72, 0xD17BD8>();
	}

	FORCEINLINE auto DOES_TEXT_BLOCK_EXIST(const char* gxt)
	{
		return invoker::invoke<BOOL, 0xF2D73E763510A4, 0xD18154>(gxt);
	}

	FORCEINLINE auto REQUEST_ADDITIONAL_TEXT(const char* gxt, int slot)
	{
		return invoker::invoke<void, 0xF2CB0224D3BE0B42, 0xD1D9DC>(gxt, slot);
	}

	FORCEINLINE auto REQUEST_ADDITIONAL_TEXT_FOR_DLC(const char* gxt, int slot)
	{
		return invoker::invoke<void, 0x4AB15E3851FF326B, 0xD1D9F8>(gxt, slot);
	}

	FORCEINLINE auto HAS_ADDITIONAL_TEXT_LOADED(int slot)
	{
		return invoker::invoke<BOOL, 0xDCB78A15E5F495DC, 0xD19BCC>(slot);
	}

	FORCEINLINE auto CLEAR_ADDITIONAL_TEXT(int p0, BOOL p1)
	{
		return invoker::invoke<void, 0xA790E8E6FD7393AC, 0xD179C0>(p0, p1);
	}

	FORCEINLINE auto IS_STREAMING_ADDITIONAL_TEXT(int p0)
	{
		return invoker::invoke<BOOL, 0x134994A89C4A6F71, 0xD1A6E8>(p0);
	}

	FORCEINLINE auto HAS_THIS_ADDITIONAL_TEXT_LOADED(const char* gxt, int slot)
	{
		return invoker::invoke<BOOL, 0xCC2EFE4B1D0EE422, 0xD19D60>(gxt, slot);
	}

	FORCEINLINE auto IS_MESSAGE_BEING_DISPLAYED()
	{
		return invoker::invoke<BOOL, 0xFBA523E6F8ACE541, 0xD1A308>();
	}

	FORCEINLINE auto DOES_TEXT_LABEL_EXIST(const char* gxt)
	{
		return invoker::invoke<BOOL, 0x6BA487C862DB8DDF, 0xD18184>(gxt);
	}

	FORCEINLINE auto GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(const char* string, int length)
	{
		return invoker::invoke<const char*, 0x570D616FD7B4715D, 0xD18EBC>(string, length);
	}

	FORCEINLINE auto GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(const char* gxt)
	{
		return invoker::invoke<int, 0x7BA6D9664C39BE6D, 0xD19320>(gxt);
	}

	FORCEINLINE auto GET_LENGTH_OF_LITERAL_STRING(const char* string)
	{
		return invoker::invoke<int, 0x9112CCF7824FE38, 0xD192D4>(string);
	}

	FORCEINLINE auto GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(const char* string)
	{
		return invoker::invoke<int, 0x31A0D8A679F7D5A7, 0xD192FC>(string);
	}

	FORCEINLINE auto GET_STREET_NAME_FROM_HASH_KEY(Hash hash)
	{
		return invoker::invoke<const char*, 0x816A63C007D39838, 0xD19A7C>(hash);
	}

	FORCEINLINE auto IS_HUD_PREFERENCE_SWITCHED_ON()
	{
		return invoker::invoke<BOOL, 0x5775F8AC61C2CAE1, 0xD1A174>();
	}

	FORCEINLINE auto IS_RADAR_PREFERENCE_SWITCHED_ON()
	{
		return invoker::invoke<BOOL, 0xC1FF684795F27005, 0xD1A644>();
	}

	FORCEINLINE auto IS_SUBTITLE_PREFERENCE_SWITCHED_ON()
	{
		return invoker::invoke<BOOL, 0x5994A2F6D4FFFE4D, 0xD1A79C>();
	}

	FORCEINLINE auto DISPLAY_HUD(BOOL toggle)
	{
		return invoker::invoke<void, 0x747786364137DC63, 0xD17FF0>(toggle);
	}

	FORCEINLINE auto DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()
	{
		return invoker::invoke<void, 0xDB1A0120CD3E3005, 0xD18000>();
	}

	FORCEINLINE auto DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME()
	{
		return invoker::invoke<void, 0x915CC2D1BD15DFDF, 0xD18014>();
	}

	FORCEINLINE auto DISPLAY_RADAR(BOOL toggle)
	{
		return invoker::invoke<void, 0x37B894853929BF1A, 0xD18090>(toggle);
	}

	FORCEINLINE auto SET_FAKE_SPECTATOR_MODE(BOOL toggle)
	{
		return invoker::invoke<void, 0x41CA829CEAEC6F29, 0xD1E3EC>(toggle);
	}

	FORCEINLINE auto GET_FAKE_SPECTATOR_MODE()
	{
		return invoker::invoke<BOOL, 0x88F53A922D4F476E, 0xD18E54>();
	}

	FORCEINLINE auto IS_HUD_HIDDEN()
	{
		return invoker::invoke<BOOL, 0xC5D15A335232A15D, 0xD1A160>();
	}

	FORCEINLINE auto IS_RADAR_HIDDEN()
	{
		return invoker::invoke<BOOL, 0xBE259DBA45F2996E, 0xD1A630>();
	}

	FORCEINLINE auto IS_MINIMAP_RENDERING()
	{
		return invoker::invoke<BOOL, 0x6DA5456258FF887A, 0xD1A33C>();
	}

	FORCEINLINE auto USE_VEHICLE_TARGETING_RETICULE(Any p0)
	{
		return invoker::invoke<void, 0xEC214A1AB38E0C2B, 0xD1F7F4>(p0);
	}

	FORCEINLINE auto _USE_VEHICLE_TARGETING_RETICULE_ON_VEHICLES(BOOL enable)
	{
		return invoker::invoke<void, 0x1BC0EA2912708625, 0xD1F7E4>(enable);
	}

	FORCEINLINE auto ADD_VALID_VEHICLE_HIT_HASH(Any p0)
	{
		return invoker::invoke<void, 0x45DEDB275874D85, 0xD176C4>(p0);
	}

	FORCEINLINE auto CLEAR_VALID_VEHICLE_HIT_HASHES()
	{
		return invoker::invoke<void, 0xEF8AE79C28640CD2, 0xD17C28>();
	}

	FORCEINLINE auto SET_BLIP_ROUTE(Blip blip, BOOL enabled)
	{
		return invoker::invoke<void, 0xBC64B805EE071A37, 0xD1DFFC>(blip, enabled);
	}

	FORCEINLINE auto CLEAR_ALL_BLIP_ROUTES()
	{
		return invoker::invoke<void, 0xCABB9B176D4BC0C6, 0xD179D4>();
	}

	FORCEINLINE auto SET_BLIP_ROUTE_COLOUR(Blip blip, int colour)
	{
		return invoker::invoke<void, 0x32F99DF3B301AFA, 0xD1E024>(blip, colour);
	}

	FORCEINLINE auto SET_FORCE_SHOW_GPS(BOOL toggle)
	{
		return invoker::invoke<void, 0x7F13032016798DAB, 0xD1E4B0>(toggle);
	}

	FORCEINLINE auto SET_USE_SET_DESTINATION_IN_PAUSE_MAP(BOOL toggle)
	{
		return invoker::invoke<void, 0x5E0F50AE21F74BC0, 0xD1EF20>(toggle);
	}

	FORCEINLINE auto SET_BLOCK_WANTED_FLASH(BOOL disabled)
	{
		return invoker::invoke<void, 0xAAD5B1BB340D06A2, 0xD1E124>(disabled);
	}

	FORCEINLINE auto ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(BOOL p0)
	{
		return invoker::invoke<void, 0x3EC26139639016E5, 0xD174B4>(p0);
	}

	FORCEINLINE auto FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(int p0)
	{
		return invoker::invoke<void, 0xC8B1536BA5FC0F03, 0xD18820>(p0);
	}

	FORCEINLINE auto SET_RADAR_ZOOM_PRECISE(float zoom)
	{
		return invoker::invoke<void, 0xC4C6378884E06FBD, 0xD1EB24>(zoom);
	}

	FORCEINLINE auto SET_RADAR_ZOOM(int zoomLevel)
	{
		return invoker::invoke<void, 0x4D2F1CB87CBF249D, 0xD1EB18>(zoomLevel);
	}

	FORCEINLINE auto SET_RADAR_ZOOM_TO_BLIP(Blip blip, float zoom)
	{
		return invoker::invoke<void, 0xF16C412C8DE5D52, 0xD1EB34>(blip, zoom);
	}

	FORCEINLINE auto SET_RADAR_ZOOM_TO_DISTANCE(float zoom)
	{
		return invoker::invoke<void, 0xD09188DB6289E413, 0xD1EB44>(zoom);
	}

	FORCEINLINE auto UPDATE_RADAR_ZOOM_TO_BLIP()
	{
		return invoker::invoke<void, 0x77C721059FFCEE39, 0x81A1C0>();
	}

	FORCEINLINE auto GET_HUD_COLOUR(int hudColorIndex, int* r, int* g, int* b, int* a)
	{
		return invoker::invoke<void, 0xA306E6FD2A6558E6, 0xD19034>(hudColorIndex, r, g, b, a);
	}

	FORCEINLINE auto SET_SCRIPT_VARIABLE_HUD_COLOUR(int r, int g, int b, int a)
	{
		return invoker::invoke<void, 0xDBEFC24929CE2C54, 0xD1ECA4>(r, g, b, a);
	}

	FORCEINLINE auto SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(int r, int g, int b, int a)
	{
		return invoker::invoke<void, 0x7E94C30FC8631308, 0xD1ECD0>(r, g, b, a);
	}

	FORCEINLINE auto REPLACE_HUD_COLOUR(int hudColorIndex, int hudColorIndex2)
	{
		return invoker::invoke<void, 0x1800980A1FBB4257, 0xD1D98C>(hudColorIndex, hudColorIndex2);
	}

	FORCEINLINE auto REPLACE_HUD_COLOUR_WITH_RGBA(int hudColorIndex, int r, int g, int b, int a)
	{
		return invoker::invoke<void, 0x2BC0725CAF2E0D6B, 0xD1D9B0>(hudColorIndex, r, g, b, a);
	}

	FORCEINLINE auto SET_ABILITY_BAR_VISIBILITY(BOOL visible)
	{
		return invoker::invoke<void, 0x5B23CA453BC57FC2, 0xD1DBD0>(visible);
	}

	FORCEINLINE auto SET_ALLOW_ABILITY_BAR(BOOL toggle)
	{
		return invoker::invoke<void, 0x46787A693F6EFA94, 0xD1DBE0>(toggle);
	}

	FORCEINLINE auto FLASH_ABILITY_BAR(int millisecondsToFlash)
	{
		return invoker::invoke<void, 0x8E8EDF5205B15D28, 0xD187AC>(millisecondsToFlash);
	}

	FORCEINLINE auto SET_ABILITY_BAR_VALUE(float p0, float p1)
	{
		return invoker::invoke<void, 0x8349F3048B5A74C7, 0xD1DBBC>(p0, p1);
	}

	FORCEINLINE auto FLASH_WANTED_DISPLAY(BOOL p0)
	{
		return invoker::invoke<void, 0x3C77232660BA1403, 0xD187D0>(p0);
	}

	FORCEINLINE auto FORCE_OFF_WANTED_STAR_FLASH(BOOL toggle)
	{
		return invoker::invoke<void, 0xA87B62BE7F8F4476, 0xD18838>(toggle);
	}

	FORCEINLINE auto SET_CUSTOM_MP_HUD_COLOR(int hudColorId)
	{
		return invoker::invoke<void, 0x34337F322B990169, 0xD1E22C>(hudColorId);
	}

	FORCEINLINE auto GET_RENDERED_CHARACTER_HEIGHT(float size, int font)
	{
		return invoker::invoke<float, 0x3D634C7F6A6D4CA4, 0xD19930>(size, font);
	}

	FORCEINLINE auto SET_TEXT_SCALE(float scale, float size)
	{
		return invoker::invoke<void, 0xBFE94E91C83D8794, 0xD1EE60>(scale, size);
	}

	FORCEINLINE auto SET_TEXT_COLOUR(int red, int green, int blue, int alpha)
	{
		return invoker::invoke<void, 0x5A18938160AE52D0, 0xD1ED94>(red, green, blue, alpha);
	}

	FORCEINLINE auto SET_TEXT_CENTRE(BOOL align)
	{
		return invoker::invoke<void, 0xEAF65721ACB2FDFB, 0xD1ED78>(align);
	}

	FORCEINLINE auto SET_TEXT_RIGHT_JUSTIFY(BOOL toggle)
	{
		return invoker::invoke<void, 0x16EC7160BEBE7A6F, 0xD1EE40>(toggle);
	}

	FORCEINLINE auto SET_TEXT_JUSTIFICATION(int justifyType)
	{
		return invoker::invoke<void, 0x2873B596E322DCDA, 0xD1EE0C>(justifyType);
	}

	FORCEINLINE auto SET_TEXT_LINE_HEIGHT_MULT(float lineHeightMult)
	{
		return invoker::invoke<void, 0x9F4624F76E6953D1, 0x81A1C0>(lineHeightMult);
	}

	FORCEINLINE auto SET_TEXT_WRAP(float start, float end)
	{
		return invoker::invoke<void, 0xE05EB1EAE7CCDC59, 0xD1EE80>(start, end);
	}

	FORCEINLINE auto SET_TEXT_LEADING(int p0)
	{
		return invoker::invoke<void, 0xFB193A91887FFAB1, 0xD1EE1C>(p0);
	}

	FORCEINLINE auto SET_TEXT_PROPORTIONAL(BOOL p0)
	{
		return invoker::invoke<void, 0xEA62FB8CA7210CF3, 0x81A1C0>(p0);
	}

	FORCEINLINE auto SET_TEXT_FONT(int fontType)
	{
		return invoker::invoke<void, 0x8413CD3BCEEAD8DC, 0xD1EDE4>(fontType);
	}

	FORCEINLINE auto SET_TEXT_DROP_SHADOW()
	{
		return invoker::invoke<void, 0x2B50C29142312934, 0xD1EDDC>();
	}

	FORCEINLINE auto SET_TEXT_DROPSHADOW(int distance, int r, int g, int b, int a)
	{
		return invoker::invoke<void, 0xB91BC43E3A58E2C8, 0xD1EDCC>(distance, r, g, b, a);
	}

	FORCEINLINE auto SET_TEXT_OUTLINE()
	{
		return invoker::invoke<void, 0xF18BC069A9C882EC, 0xD1EE2C>();
	}

	FORCEINLINE auto SET_TEXT_EDGE(int p0, int r, int g, int b, int a)
	{
		return invoker::invoke<void, 0xBE923A0FDD781C93, 0x81A1C0>(p0, r, g, b, a);
	}

	FORCEINLINE auto SET_TEXT_RENDER_ID(int renderId)
	{
		return invoker::invoke<void, 0x61055542D9D877AE, 0xD1EE34>(renderId);
	}

	FORCEINLINE auto GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID()
	{
		return invoker::invoke<int, 0xB803C9D209A7C3DC, 0xD1F814>();
	}

	FORCEINLINE auto REGISTER_NAMED_RENDERTARGET(const char* name, BOOL p1)
	{
		return invoker::invoke<BOOL, 0x106F99CDCDEED9A0, 0xD1D7BC>(name, p1);
	}

	FORCEINLINE auto IS_NAMED_RENDERTARGET_REGISTERED(const char* name)
	{
		return invoker::invoke<BOOL, 0xC13AFEAFC3F7AD96, 0xD1A430>(name);
	}

	FORCEINLINE auto RELEASE_NAMED_RENDERTARGET(const char* name)
	{
		return invoker::invoke<BOOL, 0xF8211BE23F0D0552, 0xD1D864>(name);
	}

	FORCEINLINE auto LINK_NAMED_RENDERTARGET(Hash modelHash)
	{
		return invoker::invoke<void, 0xF1C26EB47E689774, 0xD1A89C>(modelHash);
	}

	FORCEINLINE auto GET_NAMED_RENDERTARGET_RENDER_ID(const char* name)
	{
		return invoker::invoke<int, 0x8732C0099FA1813, 0xD19544>(name);
	}

	FORCEINLINE auto IS_NAMED_RENDERTARGET_LINKED(Hash modelHash)
	{
		return invoker::invoke<BOOL, 0x4D05B3FECBCB8D97, 0xD1A40C>(modelHash);
	}

	FORCEINLINE auto CLEAR_HELP(BOOL toggle)
	{
		return invoker::invoke<void, 0x428C32CC68809A35, 0xD17B8C>(toggle);
	}

	FORCEINLINE auto IS_HELP_MESSAGE_ON_SCREEN()
	{
		return invoker::invoke<BOOL, 0x3273F980CC5E02CD, 0xD1A104>();
	}

	FORCEINLINE auto HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME()
	{
		return invoker::invoke<BOOL, 0x89817276E6872917, 0xD19D40>();
	}

	FORCEINLINE auto IS_HELP_MESSAGE_BEING_DISPLAYED()
	{
		return invoker::invoke<BOOL, 0x4C705AAF75363287, 0xD1A0C4>();
	}

	FORCEINLINE auto IS_HELP_MESSAGE_FADING_OUT()
	{
		return invoker::invoke<BOOL, 0xA5DAECD045AA8024, 0xD1A0E4>();
	}

	FORCEINLINE auto SET_HELP_MESSAGE_STYLE(int style, int hudColor, int alpha, int p3, int p4)
	{
		return invoker::invoke<void, 0x55DAC9CDA320120B, 0xD1E560>(style, hudColor, alpha, p3, p4);
	}

	FORCEINLINE auto GET_STANDARD_BLIP_ENUM_ID()
	{
		return invoker::invoke<int, 0x8CC13B3BF7A9890A, 0xD1F814>();
	}

	FORCEINLINE auto GET_WAYPOINT_BLIP_ENUM_ID()
	{
		return invoker::invoke<int, 0x2A3612A4B836469E, 0xD19B5C>();
	}

	FORCEINLINE auto GET_NUMBER_OF_ACTIVE_BLIPS()
	{
		return invoker::invoke<int, 0xC802478C8862BDAD, 0xD195CC>();
	}

	FORCEINLINE auto GET_NEXT_BLIP_INFO_ID(int blipSprite)
	{
		return invoker::invoke<Blip, 0xA3F6143A8F610118, 0xD19580>(blipSprite);
	}

	FORCEINLINE auto GET_FIRST_BLIP_INFO_ID(int blipSprite)
	{
		return invoker::invoke<Blip, 0xD56419CB9E15983F, 0xD18E94>(blipSprite);
	}

	FORCEINLINE auto GET_CLOSEST_BLIP_INFO_ID(int blipSprite)
	{
		return invoker::invoke<Blip, 0xB981254932E1095E, 0xD18C70>(blipSprite);
	}

	FORCEINLINE auto GET_BLIP_INFO_ID_COORD(Blip blip)
	{
		return invoker::invoke<Vector3, 0x7DFE6973AE84B6ED, 0xD189E0>(blip);
	}

	FORCEINLINE auto GET_BLIP_INFO_ID_DISPLAY(Blip blip)
	{
		return invoker::invoke<int, 0xC4BDFF590B6DE7A5, 0xD18A90>(blip);
	}

	FORCEINLINE auto GET_BLIP_INFO_ID_TYPE(Blip blip)
	{
		return invoker::invoke<int, 0x6AEAF32EC173BB39, 0xD18AD0>(blip);
	}

	FORCEINLINE auto GET_BLIP_INFO_ID_ENTITY_INDEX(Blip blip)
	{
		return invoker::invoke<Entity, 0xA143F1936B350BD0, 0xD18AB0>(blip);
	}

	FORCEINLINE auto GET_BLIP_INFO_ID_PICKUP_INDEX(Blip blip)
	{
		return invoker::invoke<Pickup, 0xFBDAF3DB03D61421, 0xCCE8A8>(blip);
	}

	FORCEINLINE auto GET_BLIP_FROM_ENTITY(Entity entity)
	{
		return invoker::invoke<Blip, 0xCA048D064CB64920, 0xD18A50>(entity);
	}

	FORCEINLINE auto ADD_BLIP_FOR_RADIUS(float posX, float posY, float posZ, float radius)
	{
		return invoker::invoke<Blip, 0x339BF323C4261E69, 0xD1741C>(posX, posY, posZ, radius);
	}

	FORCEINLINE auto ADD_BLIP_FOR_AREA(float x, float y, float z, float width, float height)
	{
		return invoker::invoke<Blip, 0xAF737D3DF3BD2AD0, 0xD17394>(x, y, z, width, height);
	}

	FORCEINLINE auto ADD_BLIP_FOR_ENTITY(Entity entity)
	{
		return invoker::invoke<Blip, 0x18E23E031A9B798F, 0xD173DC>(entity);
	}

	FORCEINLINE auto ADD_BLIP_FOR_PICKUP(Pickup pickup)
	{
		return invoker::invoke<Blip, 0xA1521B7DF72BC9C8, 0xD173FC>(pickup);
	}

	FORCEINLINE auto ADD_BLIP_FOR_COORD(float x, float y, float z)
	{
		return invoker::invoke<Blip, 0x34864AB7DA700AA6, 0xD173BC>(x, y, z);
	}

	FORCEINLINE auto TRIGGER_SONAR_BLIP(float posX, float posY, float posZ, float radius, int p4)
	{
		return invoker::invoke<void, 0xEECAD62659A58BDE, 0xD1F72C>(posX, posY, posZ, radius, p4);
	}

	FORCEINLINE auto ALLOW_SONAR_BLIPS(BOOL toggle)
	{
		return invoker::invoke<void, 0xCB3A062F0CD9B0CD, 0xD176F8>(toggle);
	}

	FORCEINLINE auto SET_BLIP_COORDS(Blip blip, float posX, float posY, float posZ)
	{
		return invoker::invoke<void, 0xDABC73EF230B6665, 0xD1DDB8>(blip, posX, posY, posZ);
	}

	FORCEINLINE auto GET_BLIP_COORDS(Blip blip)
	{
		return invoker::invoke<Vector3, 0x3CF9D442F2C902BD, 0xD189E0>(blip);
	}

	FORCEINLINE auto SET_BLIP_SPRITE(Blip blip, int spriteId)
	{
		return invoker::invoke<void, 0x4C905FB262965D5D, 0xD1E0D8>(blip, spriteId);
	}

	FORCEINLINE auto GET_BLIP_SPRITE(Blip blip)
	{
		return invoker::invoke<int, 0x8FACE824AEC046E8, 0xD18B10>(blip);
	}

	FORCEINLINE auto SET_COP_BLIP_SPRITE(int p0, float p1)
	{
		return invoker::invoke<void, 0x6C7DF9AC1E90132A, 0xD1E1B8>(p0, p1);
	}

	FORCEINLINE auto SET_COP_BLIP_SPRITE_AS_STANDARD()
	{
		return invoker::invoke<void, 0xF0E6476CF8FDB1A3, 0xD1E1D4>();
	}

	FORCEINLINE auto SET_BLIP_NAME_FROM_TEXT_FILE(Blip blip, const char* gxtEntry)
	{
		return invoker::invoke<void, 0x594D5D0D7071B0DE, 0xD1DF6C>(blip, gxtEntry);
	}

	FORCEINLINE auto SET_BLIP_NAME_TO_PLAYER_NAME(Blip blip, Player player)
	{
		return invoker::invoke<void, 0x4C8213F2F1BE87F7, 0xD1DF7C>(blip, player);
	}

	FORCEINLINE auto SET_BLIP_ALPHA(Blip blip, int alpha)
	{
		return invoker::invoke<void, 0xF42EBD7CD0682A8B, 0xD1DCA0>(blip, alpha);
	}

	FORCEINLINE auto GET_BLIP_ALPHA(Blip blip)
	{
		return invoker::invoke<int, 0xF03FBAFA0284124E, 0xD189A0>(blip);
	}

	FORCEINLINE auto SET_BLIP_FADE(Blip blip, int opacity, int duration)
	{
		return invoker::invoke<void, 0xDA2127CA9B43A877, 0xD1DE14>(blip, opacity, duration);
	}

	FORCEINLINE auto GET_BLIP_FADE_DIRECTION(Blip blip)
	{
		return invoker::invoke<int, 0x857F7FF8AA07F67, 0xD18A28>(blip);
	}

	FORCEINLINE auto SET_BLIP_ROTATION(Blip blip, int rotation)
	{
		return invoker::invoke<void, 0xC4EDD88E2185B8F, 0xD1DFB0>(blip, rotation);
	}

	FORCEINLINE auto SET_BLIP_ROTATION_WITH_FLOAT(Blip blip, float heading)
	{
		return invoker::invoke<void, 0xA1BA8AD71EF8F11A, 0xD1DFD8>(blip, heading);
	}

	FORCEINLINE auto GET_BLIP_ROTATION(Blip blip)
	{
		return invoker::invoke<int, 0x350EDDA8A9A3C23D, 0xD18AF0>(blip);
	}

	FORCEINLINE auto SET_BLIP_FLASH_TIMER(Blip blip, int duration)
	{
		return invoker::invoke<void, 0x8D777E1B885E428C, 0xD1DEB8>(blip, duration);
	}

	FORCEINLINE auto SET_BLIP_FLASH_INTERVAL(Blip blip, Any p1)
	{
		return invoker::invoke<void, 0xB562F84CE9B07D89, 0xD1DE94>(blip, p1);
	}

	FORCEINLINE auto SET_BLIP_COLOUR(Blip blip, int color)
	{
		return invoker::invoke<void, 0x61183D6239A9D7B8, 0xD1DD94>(blip, color);
	}

	FORCEINLINE auto SET_BLIP_SECONDARY_COLOUR(Blip blip, int r, int g, int b)
	{
		return invoker::invoke<void, 0x40B5D81DD20A370B, 0xD1E080>(blip, r, g, b);
	}

	FORCEINLINE auto GET_BLIP_COLOUR(Blip blip)
	{
		return invoker::invoke<int, 0xA247F53580E53DCE, 0xD189C0>(blip);
	}

	FORCEINLINE auto GET_BLIP_HUD_COLOUR(Blip blip)
	{
		return invoker::invoke<int, 0x2B91B956D741B8CE, 0xD18A70>(blip);
	}

	FORCEINLINE auto IS_BLIP_SHORT_RANGE(Blip blip)
	{
		return invoker::invoke<BOOL, 0xFA7642FA8EE73EEE, 0xD19F94>(blip);
	}

	FORCEINLINE auto IS_BLIP_ON_MINIMAP(Blip blip)
	{
		return invoker::invoke<BOOL, 0xE38FA95DFF747E7C, 0xD19F70>(blip);
	}

	FORCEINLINE auto DOES_BLIP_HAVE_GPS_ROUTE(Blip blip)
	{
		return invoker::invoke<BOOL, 0x6308A5C1C94EABC0, 0xD180E8>(blip);
	}

	FORCEINLINE auto SET_BLIP_HIDDEN_ON_LEGEND(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0xA1DFF583C8070610, 0xD1DEF4>(blip, toggle);
	}

	FORCEINLINE auto SET_BLIP_HIGH_DETAIL(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0x3C6F00DDEA51A2DA, 0xD1DF1C>(blip, toggle);
	}

	FORCEINLINE auto SET_BLIP_AS_MISSION_CREATOR_BLIP(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0xEDFFFD65B4603707, 0xD1DCFC>(blip, toggle);
	}

	FORCEINLINE auto IS_MISSION_CREATOR_BLIP(Blip blip)
	{
		return invoker::invoke<BOOL, 0xBA5BA0D4E8539C9C, 0xD1A34C>(blip);
	}

	FORCEINLINE auto GET_NEW_SELECTED_MISSION_CREATOR_BLIP()
	{
		return invoker::invoke<Blip, 0x2C5E86CEA1BE784, 0xD19564>();
	}

	FORCEINLINE auto IS_HOVERING_OVER_MISSION_CREATOR_BLIP()
	{
		return invoker::invoke<BOOL, 0x4F9B9AA859613995, 0xD1A120>();
	}

	FORCEINLINE auto SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(BOOL toggle)
	{
		return invoker::invoke<void, 0xD441661EA68E9C70, 0xD1F2DC>(toggle);
	}

	FORCEINLINE auto SHOW_CONTACT_INSTRUCTIONAL_BUTTON(BOOL toggle)
	{
		return invoker::invoke<void, 0x4BA996FCD0F9D100, 0xD1F16C>(toggle);
	}

	FORCEINLINE auto RELOAD_MAP_MENU()
	{
		return invoker::invoke<void, 0x95A329CAEBBB3E76, 0xD1D888>();
	}

	FORCEINLINE auto SET_BLIP_MARKER_LONG_DISTANCE(Any p0, Any p1)
	{
		return invoker::invoke<void, 0xD54D26545A07FB31, 0xD1DF44>(p0, p1);
	}

	FORCEINLINE auto SET_BLIP_FLASHES(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0x861AC9C2D48CEA7F, 0xD1DE44>(blip, toggle);
	}

	FORCEINLINE auto SET_BLIP_FLASHES_ALTERNATE(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0xAB1FFF93A0BBFCDB, 0xD1DE6C>(blip, toggle);
	}

	FORCEINLINE auto IS_BLIP_FLASHING(Blip blip)
	{
		return invoker::invoke<BOOL, 0x4B889DE2DAC956DB, 0xD19F4C>(blip);
	}

	FORCEINLINE auto SET_BLIP_AS_SHORT_RANGE(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0x360B279488A775FC, 0xD1DD24>(blip, toggle);
	}

	FORCEINLINE auto SET_BLIP_SCALE(Blip blip, float scale)
	{
		return invoker::invoke<void, 0x5D3946F818C6B331, 0xD1E048>(blip, scale);
	}

	FORCEINLINE auto SET_BLIP_SCALE_2D(Blip blip, float xScale, float yScale)
	{
		return invoker::invoke<void, 0xF7323733F48D067F, 0xD1E068>(blip, xScale, yScale);
	}

	FORCEINLINE auto SET_BLIP_PRIORITY(Blip blip, int priority)
	{
		return invoker::invoke<void, 0x1456FD5C0C438B19, 0xD1DF8C>(blip, priority);
	}

	FORCEINLINE auto SET_BLIP_DISPLAY(Blip blip, int displayId)
	{
		return invoker::invoke<void, 0xF55F62DA99DB0C2F, 0xD1DDC8>(blip, displayId);
	}

	FORCEINLINE auto SET_BLIP_CATEGORY(Blip blip, int index)
	{
		return invoker::invoke<void, 0x84D9FE4DB5714CF, 0xD1DD70>(blip, index);
	}

	FORCEINLINE auto REMOVE_BLIP(Blip* blip)
	{
		return invoker::invoke<void, 0xFE54B8568B2ABD12, 0xD1D890>(blip);
	}

	FORCEINLINE auto SET_BLIP_AS_FRIENDLY(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0x6A52036D51C7E18E, 0xD1DCB0>(blip, toggle);
	}

	FORCEINLINE auto PULSE_BLIP(Blip blip)
	{
		return invoker::invoke<void, 0x26D449828A6673C7, 0xD1D6E4>(blip);
	}

	FORCEINLINE auto SHOW_NUMBER_ON_BLIP(Blip blip, int number)
	{
		return invoker::invoke<void, 0x5765DD63F0ECC572, 0xD1F278>(blip, number);
	}

	FORCEINLINE auto HIDE_NUMBER_ON_BLIP(Blip blip)
	{
		return invoker::invoke<void, 0x2E229E178F36A415, 0xD19E1C>(blip);
	}

	FORCEINLINE auto SHOW_HEIGHT_ON_BLIP(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0x89FE619BFBB2024B, 0xD1F244>(blip, toggle);
	}

	FORCEINLINE auto SHOW_TICK_ON_BLIP(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0x80595F890177CB50, 0xD1F2EC>(blip, toggle);
	}

	FORCEINLINE auto SHOW_GOLD_TICK_ON_BLIP(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0xDE551C7F0C84F5D5, 0xD1F1F4>(blip, toggle);
	}

	FORCEINLINE auto SHOW_FOR_SALE_ICON_ON_BLIP(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0x82FBF1124B27D02, 0xD1F1A4>(blip, toggle);
	}

	FORCEINLINE auto SHOW_HEADING_INDICATOR_ON_BLIP(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0xC56573D93709254, 0xD1F21C>(blip, toggle);
	}

	FORCEINLINE auto SHOW_OUTLINE_INDICATOR_ON_BLIP(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0xAA090F5FC303F771, 0xD1F2A4>(blip, toggle);
	}

	FORCEINLINE auto SHOW_FRIEND_INDICATOR_ON_BLIP(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0x6058DF029F581C6, 0xD1F1CC>(blip, toggle);
	}

	FORCEINLINE auto SHOW_CREW_INDICATOR_ON_BLIP(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0x65195BC76F41B298, 0xD1F17C>(blip, toggle);
	}

	FORCEINLINE auto SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0xC4F090C2EC0D0FBF, 0xD1DDEC>(blip, toggle);
	}

	FORCEINLINE auto SET_BLIP_SHORT_HEIGHT_THRESHOLD(Any p0, Any p1)
	{
		return invoker::invoke<void, 0x3E0E9367127283D7, 0xD1E098>(p0, p1);
	}

	FORCEINLINE auto SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(Blip blip, Any p1)
	{
		return invoker::invoke<void, 0xFAE0C242A432A1F2, 0xD1E0FC>(blip, p1);
	}

	FORCEINLINE auto SET_BLIP_AS_MINIMAL_ON_EDGE(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0xA446583E4503CCD9, 0xD1DCD4>(blip, toggle);
	}

	FORCEINLINE auto SET_RADIUS_BLIP_EDGE(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0x641FCCDF2824DCFD, 0xD1EB54>(blip, toggle);
	}

	FORCEINLINE auto DOES_BLIP_EXIST(Blip blip)
	{
		return invoker::invoke<BOOL, 0xC450B06E5AAA0985, 0xD180C0>(blip);
	}

	FORCEINLINE auto SET_WAYPOINT_OFF()
	{
		return invoker::invoke<void, 0xA4C1E1845880C098, 0xD1F044>();
	}

	FORCEINLINE auto DELETE_WAYPOINTS_FROM_THIS_PLAYER()
	{
		return invoker::invoke<void, 0x51A6E4D010C4EA83, 0xD17EC0>();
	}

	FORCEINLINE auto REFRESH_WAYPOINT()
	{
		return invoker::invoke<void, 0xB43DFE4F244E0F8E, 0xD1D784>();
	}

	FORCEINLINE auto IS_WAYPOINT_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x2213DC34A224533, 0xD1A860>();
	}

	FORCEINLINE auto SET_NEW_WAYPOINT(float x, float y)
	{
		return invoker::invoke<void, 0xF8D9A55D2F2892CC, 0xD1E990>(x, y);
	}

	FORCEINLINE auto SET_BLIP_BRIGHT(Blip blip, BOOL toggle)
	{
		return invoker::invoke<void, 0xEE0DD5760A017C08, 0xD1DD4C>(blip, toggle);
	}

	FORCEINLINE auto SET_BLIP_SHOW_CONE(Blip blip, BOOL toggle, int hudColorIndex)
	{
		return invoker::invoke<void, 0xD5888E94B9AE2B51, 0xD1E0C0>(blip, toggle, hudColorIndex);
	}

	FORCEINLINE auto REMOVE_COP_BLIP_FROM_PED(Ped ped)
	{
		return invoker::invoke<void, 0xC0FC6E3E1A8FBF31, 0xD1D89C>(ped);
	}

	FORCEINLINE auto SETUP_FAKE_CONE_DATA(Blip blip, float p1, float p2, float p3, float p4, float p5, float p6, Any p7, int p8)
	{
		return invoker::invoke<void, 0xFF89A4A6580A0AB1, 0xD1DB5C>(blip, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto REMOVE_FAKE_CONE_DATA(Blip blip)
	{
		return invoker::invoke<void, 0xA187381CF52D87A8, 0xD1D8E4>(blip);
	}

	FORCEINLINE auto CLEAR_FAKE_CONE_ARRAY()
	{
		return invoker::invoke<void, 0x118A68C39B251785, 0xD17B24>();
	}

	FORCEINLINE auto _SET_BLIP_GPS_ROUTE_DISPLAY_DISTANCE(Blip blip, int blipChangeParam46, BOOL blipChangeParam47)
	{
		return invoker::invoke<void, 0x25D984CFB64ED6DE, 0xD1DEDC>(blip, blipChangeParam46, blipChangeParam47);
	}

	FORCEINLINE auto SET_MINIMAP_COMPONENT(int componentId, BOOL toggle, int overrideColor)
	{
		return invoker::invoke<BOOL, 0xA3EA82ACD0C97C3F, 0xD1E694>(componentId, toggle, overrideColor);
	}

	FORCEINLINE auto SET_MINIMAP_SONAR_SWEEP(BOOL toggle)
	{
		return invoker::invoke<void, 0x3D0BD9B4E36B9BAD, 0xD1E72C>(toggle);
	}

	FORCEINLINE auto SHOW_ACCOUNT_PICKER()
	{
		return invoker::invoke<void, 0x30E65C89EF1E38C, 0xD1F164>();
	}

	FORCEINLINE auto GET_MAIN_PLAYER_BLIP_ID()
	{
		return invoker::invoke<Blip, 0x413A91F497E3428F, 0xD19378>();
	}

	FORCEINLINE auto SET_PM_WARNINGSCREEN_ACTIVE(BOOL p0)
	{
		return invoker::invoke<void, 0x69E8B9365B1026DD, 0xD1EAC4>(p0);
	}

	FORCEINLINE auto HIDE_LOADING_ON_FADE_THIS_FRAME()
	{
		return invoker::invoke<void, 0x6B91FA4E397DAB8D, 0xD19E04>();
	}

	FORCEINLINE auto SET_RADAR_AS_INTERIOR_THIS_FRAME(Hash interior, float x, float y, int z, int zoom)
	{
		return invoker::invoke<void, 0xF42A811582CF3AE1, 0xD1EAEC>(interior, x, y, z, zoom);
	}

	FORCEINLINE auto SET_INSIDE_VERY_SMALL_INTERIOR(BOOL toggle)
	{
		return invoker::invoke<void, 0xB9485211BF50817B, 0xD1E5F4>(toggle);
	}

	FORCEINLINE auto SET_INSIDE_VERY_LARGE_INTERIOR(BOOL toggle)
	{
		return invoker::invoke<void, 0x60BB8BC8FFE8213, 0xD1E5E4>(toggle);
	}

	FORCEINLINE auto SET_RADAR_AS_EXTERIOR_THIS_FRAME()
	{
		return invoker::invoke<void, 0xBB6D152B544953A3, 0xD1EAE4>();
	}

	FORCEINLINE auto SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(float x, float y)
	{
		return invoker::invoke<void, 0x83F9B9189E65251B, 0xD1E3C4>(x, y);
	}

	FORCEINLINE auto SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(float x, float y, Any p2)
	{
		return invoker::invoke<void, 0x2474C1A1D3FE2888, 0xD1E358>(x, y, p2);
	}

	FORCEINLINE auto IS_PAUSEMAP_IN_INTERIOR_MODE()
	{
		return invoker::invoke<BOOL, 0xD4C023FF0817F386, 0xD1A488>();
	}

	FORCEINLINE auto HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME()
	{
		return invoker::invoke<void, 0x2102B34A7006F6C9, 0xD19E0C>();
	}

	FORCEINLINE auto HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME()
	{
		return invoker::invoke<void, 0xE1945100CB123CBF, 0xD19E14>();
	}

	FORCEINLINE auto SET_USE_ISLAND_MAP(BOOL toggle)
	{
		return invoker::invoke<void, 0x5E996648244715D, 0xD1EF10>(toggle);
	}

	FORCEINLINE auto _SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR()
	{
		return invoker::invoke<void, 0x35CCE12EAECB4A51, 0xD1E9C8>();
	}

	FORCEINLINE auto DONT_TILT_MINIMAP_THIS_FRAME()
	{
		return invoker::invoke<void, 0x35380F6C70B9B01F, 0xD181B4>();
	}

	FORCEINLINE auto DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME()
	{
		return invoker::invoke<void, 0x19619CF6A5F4EE0A, 0xD181BC>();
	}

	FORCEINLINE auto DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME()
	{
		return invoker::invoke<void, 0x6A666C5DD5D6F94E, 0xD181C4>();
	}

	FORCEINLINE auto SET_WIDESCREEN_FORMAT(Any p0)
	{
		return invoker::invoke<void, 0xD46356460DA60CB1, 0xD1F084>(p0);
	}

	FORCEINLINE auto DISPLAY_AREA_NAME(BOOL toggle)
	{
		return invoker::invoke<void, 0x82BC6786EE477292, 0xD17FAC>(toggle);
	}

	FORCEINLINE auto DISPLAY_CASH(BOOL toggle)
	{
		return invoker::invoke<void, 0xC940FB68F75D37B9, 0xD17FC4>(toggle);
	}

	FORCEINLINE auto USE_FAKE_MP_CASH(BOOL toggle)
	{
		return invoker::invoke<void, 0x97F5AFA09D818568, 0xD1F7D4>(toggle);
	}

	FORCEINLINE auto CHANGE_FAKE_MP_CASH(int cash, int bank)
	{
		return invoker::invoke<void, 0x29F4FA4B0206645D, 0xD1799C>(cash, bank);
	}

	FORCEINLINE auto DISPLAY_AMMO_THIS_FRAME(BOOL display)
	{
		return invoker::invoke<void, 0xFC14A38C4235E772, 0xD17F94>(display);
	}

	FORCEINLINE auto DISPLAY_SNIPER_SCOPE_THIS_FRAME()
	{
		return invoker::invoke<void, 0x62E5C1180798DAB7, 0xD180B4>();
	}

	FORCEINLINE auto HIDE_HUD_AND_RADAR_THIS_FRAME()
	{
		return invoker::invoke<void, 0x43AE50D2A33F6E2A, 0xD19DE0>();
	}

	FORCEINLINE auto ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(BOOL allow)
	{
		return invoker::invoke<void, 0xDD2294269928A9E, 0xD176D0>(allow);
	}

	FORCEINLINE auto SET_MULTIPLAYER_WALLET_CASH()
	{
		return invoker::invoke<void, 0x6DB41C6D84391C64, 0xD1E980>();
	}

	FORCEINLINE auto REMOVE_MULTIPLAYER_WALLET_CASH()
	{
		return invoker::invoke<void, 0xB54862B1B49F2EA, 0xD1D960>();
	}

	FORCEINLINE auto SET_MULTIPLAYER_BANK_CASH()
	{
		return invoker::invoke<void, 0x6C86CAF67357C8B, 0xD1E970>();
	}

	FORCEINLINE auto REMOVE_MULTIPLAYER_BANK_CASH()
	{
		return invoker::invoke<void, 0x674C05E89511D49B, 0xD1D930>();
	}

	FORCEINLINE auto SET_MULTIPLAYER_HUD_CASH(int p0, BOOL p1)
	{
		return invoker::invoke<void, 0xAD9A5C40381FE51A, 0x81A1C0>(p0, p1);
	}

	FORCEINLINE auto REMOVE_MULTIPLAYER_HUD_CASH()
	{
		return invoker::invoke<void, 0x3BE4C55385E815B4, 0xD1D940>();
	}

	FORCEINLINE auto HIDE_HELP_TEXT_THIS_FRAME()
	{
		return invoker::invoke<void, 0x7009D885379C8CDF, 0xD19DB0>();
	}

	FORCEINLINE auto IS_IME_IN_PROGRESS()
	{
		return invoker::invoke<BOOL, 0xFC57ADE8D9DD22DC, 0xD1A188>();
	}

	FORCEINLINE auto DISPLAY_HELP_TEXT_THIS_FRAME(const char* message, BOOL p1)
	{
		return invoker::invoke<void, 0x2B742757DC68DB01, 0xD17FDC>(message, p1);
	}

	FORCEINLINE auto HUD_FORCE_WEAPON_WHEEL(BOOL show)
	{
		return invoker::invoke<void, 0x92D8C10950A06B6D, 0xD19E60>(show);
	}

	FORCEINLINE auto HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL()
	{
		return invoker::invoke<void, 0x5809BD29D4D1392D, 0xD19E54>();
	}

	FORCEINLINE auto HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME()
	{
		return invoker::invoke<void, 0xF25C7C5177203507, 0xD19ED8>();
	}

	FORCEINLINE auto HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED()
	{
		return invoker::invoke<Hash, 0xAE146ED24909CAF4, 0xD19E78>();
	}

	FORCEINLINE auto HUD_SET_WEAPON_WHEEL_TOP_SLOT(Hash weaponHash)
	{
		return invoker::invoke<void, 0xB0D3DD0BB37136FD, 0xD19EA4>(weaponHash);
	}

	FORCEINLINE auto HUD_GET_WEAPON_WHEEL_TOP_SLOT(int weaponTypeIndex)
	{
		return invoker::invoke<Hash, 0xFCFCA9D377ED6568, 0xD19E84>(weaponTypeIndex);
	}

	FORCEINLINE auto HUD_SHOWING_CHARACTER_SWITCH_SELECTION(BOOL toggle)
	{
		return invoker::invoke<void, 0xED8161DA7D783683, 0xD19EC8>(toggle);
	}

	FORCEINLINE auto SET_GPS_FLAGS(int p0, float p1)
	{
		return invoker::invoke<void, 0xF3603E8FF037B294, 0xD1E4F8>(p0, p1);
	}

	FORCEINLINE auto CLEAR_GPS_FLAGS()
	{
		return invoker::invoke<void, 0xB8A4D35AE2F0B024, 0xD17B50>();
	}

	FORCEINLINE auto SET_RACE_TRACK_RENDER(BOOL toggle)
	{
		return invoker::invoke<void, 0xF91F060344D298A3, 0xD1EAD4>(toggle);
	}

	FORCEINLINE auto CLEAR_GPS_RACE_TRACK()
	{
		return invoker::invoke<void, 0x3792000AF2959DA0, 0xD17B84>();
	}

	FORCEINLINE auto START_GPS_CUSTOM_ROUTE(int hudColor, BOOL displayOnFoot, BOOL followPlayer)
	{
		return invoker::invoke<void, 0xCCF5B38438599377, 0xD1F33C>(hudColor, displayOnFoot, followPlayer);
	}

	FORCEINLINE auto ADD_POINT_TO_GPS_CUSTOM_ROUTE(float x, float y, float z)
	{
		return invoker::invoke<void, 0x1F3227D731DA86BA, 0xD174D4>(x, y, z);
	}

	FORCEINLINE auto SET_GPS_CUSTOM_ROUTE_RENDER(BOOL toggle, int radarThickness, int mapThickness)
	{
		return invoker::invoke<void, 0x6850C7B3D44B92DA, 0xD1E4E0>(toggle, radarThickness, mapThickness);
	}

	FORCEINLINE auto CLEAR_GPS_CUSTOM_ROUTE()
	{
		return invoker::invoke<void, 0x3C42C704473E4986, 0xD17B40>();
	}

	FORCEINLINE auto START_GPS_MULTI_ROUTE(int hudColor, BOOL routeFromPlayer, BOOL displayOnFoot)
	{
		return invoker::invoke<void, 0x71D40AB8CFA59157, 0xD1F358>(hudColor, routeFromPlayer, displayOnFoot);
	}

	FORCEINLINE auto ADD_POINT_TO_GPS_MULTI_ROUTE(float x, float y, float z)
	{
		return invoker::invoke<void, 0xAD5E8940E3832571, 0xD174D4>(x, y, z);
	}

	FORCEINLINE auto SET_GPS_MULTI_ROUTE_RENDER(BOOL toggle)
	{
		return invoker::invoke<void, 0xF20DD0DCEB2959F, 0xD1E518>(toggle);
	}

	FORCEINLINE auto CLEAR_GPS_MULTI_ROUTE()
	{
		return invoker::invoke<void, 0xC3C7C9791CD79114, 0xD17B68>();
	}

	FORCEINLINE auto CLEAR_GPS_PLAYER_WAYPOINT()
	{
		return invoker::invoke<void, 0x5026A520BB4620A7, 0xD17B70>();
	}

	FORCEINLINE auto SET_GPS_FLASHES(BOOL toggle)
	{
		return invoker::invoke<void, 0xF138B49165C78B6E, 0xD1E508>(toggle);
	}

	FORCEINLINE auto SET_PLAYER_ICON_COLOUR(int color)
	{
		return invoker::invoke<void, 0x4D66E2ACA1273DC7, 0xD1EA84>(color);
	}

	FORCEINLINE auto FLASH_MINIMAP_DISPLAY()
	{
		return invoker::invoke<void, 0x2716F9D3A99349AB, 0xD187B8>();
	}

	FORCEINLINE auto FLASH_MINIMAP_DISPLAY_WITH_COLOR(int hudColorIndex)
	{
		return invoker::invoke<void, 0x7F8D9D14BCF34424, 0xD187C4>(hudColorIndex);
	}

	FORCEINLINE auto TOGGLE_STEALTH_RADAR(BOOL toggle)
	{
		return invoker::invoke<void, 0x541F544DCB68FDF2, 0xD1F71C>(toggle);
	}

	FORCEINLINE auto SET_MINIMAP_IN_SPECTATOR_MODE(BOOL toggle, Ped ped)
	{
		return invoker::invoke<void, 0x4BDB60141FD6E156, 0xD1E718>(toggle, ped);
	}

	FORCEINLINE auto SET_MISSION_NAME(BOOL p0, const char* name)
	{
		return invoker::invoke<void, 0xB51A8DA1DD0D2E4E, 0xD1E74C>(p0, name);
	}

	FORCEINLINE auto SET_MISSION_NAME_FOR_UGC_MISSION(BOOL p0, const char* name)
	{
		return invoker::invoke<void, 0x9A2CEA4E7EBB6D0C, 0xD1E760>(p0, name);
	}

	FORCEINLINE auto SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(BOOL p0, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8)
	{
		return invoker::invoke<void, 0xB8D32DDBA1727607, 0xD1E240>(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	}

	FORCEINLINE auto SET_MINIMAP_BLOCK_WAYPOINT(BOOL toggle)
	{
		return invoker::invoke<void, 0x6887B244C43D52, 0xD1E684>(toggle);
	}

	FORCEINLINE auto SET_MINIMAP_IN_PROLOGUE(BOOL toggle)
	{
		return invoker::invoke<void, 0x57C73569CFE559CC, 0xD1E708>(toggle);
	}

	FORCEINLINE auto SET_MINIMAP_BACKGROUND_HIDDEN(BOOL toggle)
	{
		return invoker::invoke<void, 0xB09D42557C45EBA1, 0x81A1C0>(toggle);
	}

	FORCEINLINE auto SET_MINIMAP_HIDE_FOW(BOOL toggle)
	{
		return invoker::invoke<void, 0x84DE06FB962FF36D, 0xD1E6F8>(toggle);
	}

	FORCEINLINE auto GET_MINIMAP_FOW_DISCOVERY_RATIO()
	{
		return invoker::invoke<float, 0x6FF69BB93DBFAF25, 0xD19480>();
	}

	FORCEINLINE auto GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(float x, float y, float z)
	{
		return invoker::invoke<BOOL, 0x9A761B33F5EF75C5, 0xD19460>(x, y, z);
	}

	FORCEINLINE auto SET_MINIMAP_FOW_DO_NOT_UPDATE(BOOL p0)
	{
		return invoker::invoke<void, 0x7FCEE9F97020FFFD, 0xD1E6C8>(p0);
	}

	FORCEINLINE auto SET_MINIMAP_FOW_REVEAL_COORDINATE(float x, float y, float z)
	{
		return invoker::invoke<void, 0x6515FC329EEDD53D, 0xD1E6D8>(x, y, z);
	}

	FORCEINLINE auto SET_MINIMAP_GOLF_COURSE(int hole)
	{
		return invoker::invoke<void, 0x6E467B341F61426A, 0xD1E6E4>(hole);
	}

	FORCEINLINE auto SET_MINIMAP_GOLF_COURSE_OFF()
	{
		return invoker::invoke<void, 0x5C2232D1A391966B, 0xD1E6F0>();
	}

	FORCEINLINE auto LOCK_MINIMAP_ANGLE(int angle)
	{
		return invoker::invoke<void, 0xCD1B743BDEC39145, 0xD1A98C>(angle);
	}

	FORCEINLINE auto UNLOCK_MINIMAP_ANGLE()
	{
		return invoker::invoke<void, 0xF3E3EA936C653F22, 0xD1F77C>();
	}

	FORCEINLINE auto LOCK_MINIMAP_POSITION(float x, float y)
	{
		return invoker::invoke<void, 0x43F4B7E163A31644, 0xD1A9A4>(x, y);
	}

	FORCEINLINE auto UNLOCK_MINIMAP_POSITION()
	{
		return invoker::invoke<void, 0x33311EBA9464741D, 0xD1F784>();
	}

	FORCEINLINE auto SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(float altitude, BOOL p1, Any p2)
	{
		return invoker::invoke<void, 0x4A12B9AB7A7BA5C0, 0xD1E39C>(altitude, p1, p2);
	}

	FORCEINLINE auto SET_HEALTH_HUD_DISPLAY_VALUES(int health, int capacity, BOOL wasAdded)
	{
		return invoker::invoke<void, 0x8128CB4AD398D07B, 0xD1E544>(health, capacity, wasAdded);
	}

	FORCEINLINE auto SET_MAX_HEALTH_HUD_DISPLAY(int maximumValue)
	{
		return invoker::invoke<void, 0x69EA52C44C3F78D9, 0xD1E664>(maximumValue);
	}

	FORCEINLINE auto SET_MAX_ARMOUR_HUD_DISPLAY(int maximumValue)
	{
		return invoker::invoke<void, 0xEA2F24FFC9F29EDD, 0xD1E654>(maximumValue);
	}

	FORCEINLINE auto SET_BIGMAP_ACTIVE(BOOL toggleBigMap, BOOL showFullMap)
	{
		return invoker::invoke<void, 0xC2F71CC2AB70CFB1, 0xD1DC54>(toggleBigMap, showFullMap);
	}

	FORCEINLINE auto IS_HUD_COMPONENT_ACTIVE(int id)
	{
		return invoker::invoke<BOOL, 0x7B035E8A1D320F1B, 0xD1A13C>(id);
	}

	FORCEINLINE auto IS_SCRIPTED_HUD_COMPONENT_ACTIVE(int id)
	{
		return invoker::invoke<BOOL, 0xFF455647AC47F397, 0xA72A20>(id);
	}

	FORCEINLINE auto HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(int id)
	{
		return invoker::invoke<void, 0xD10838CEA97E4725, 0xD19E3C>(id);
	}

	FORCEINLINE auto SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(int id)
	{
		return invoker::invoke<void, 0x6DF266B26D6C535, 0xD1F2CC>(id);
	}

	FORCEINLINE auto IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(int id)
	{
		return invoker::invoke<BOOL, 0xDBDF2670A7C650DF, 0xD1A66C>(id);
	}

	FORCEINLINE auto HIDE_HUD_COMPONENT_THIS_FRAME(int id)
	{
		return invoker::invoke<void, 0x4EB223432F8FA0A0, 0xD19DE8>(id);
	}

	FORCEINLINE auto SHOW_HUD_COMPONENT_THIS_FRAME(int id)
	{
		return invoker::invoke<void, 0xEE2019295C31BBA, 0xD1F26C>(id);
	}

	FORCEINLINE auto HIDE_STREET_AND_CAR_NAMES_THIS_FRAME()
	{
		return invoker::invoke<void, 0xE9AAB792753A7A5, 0xD19E4C>();
	}

	FORCEINLINE auto RESET_RETICULE_VALUES()
	{
		return invoker::invoke<void, 0x8EBF255F4F3F68B5, 0xD1DA98>();
	}

	FORCEINLINE auto RESET_HUD_COMPONENT_VALUES(int id)
	{
		return invoker::invoke<void, 0xDCFF86AAD108A201, 0xD1DA8C>(id);
	}

	FORCEINLINE auto SET_HUD_COMPONENT_POSITION(int id, float x, float y)
	{
		return invoker::invoke<void, 0x36A472841BBC9D4A, 0xD1E590>(id, x, y);
	}

	FORCEINLINE auto GET_HUD_COMPONENT_POSITION(int id)
	{
		return invoker::invoke<Vector3, 0x93FAFC10F21C7ACA, 0xD19060>(id);
	}

	FORCEINLINE auto CLEAR_REMINDER_MESSAGE()
	{
		return invoker::invoke<void, 0xF64D9910FB38427C, 0x81A1C0>();
	}

	FORCEINLINE auto GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(float worldX, float worldY, float worldZ, float* screenX, float* screenY)
	{
		return invoker::invoke<int, 0xA495FBDECD4BE208, 0xD190A0>(worldX, worldY, worldZ, screenX, screenY);
	}

	FORCEINLINE auto OPEN_REPORTUGC_MENU()
	{
		return invoker::invoke<void, 0x3D88441D252699DF, 0xD1D3B0>();
	}

	FORCEINLINE auto FORCE_CLOSE_REPORTUGC_MENU()
	{
		return invoker::invoke<void, 0x335E0BA469D39899, 0xD187F4>();
	}

	FORCEINLINE auto IS_REPORTUGC_MENU_OPEN()
	{
		return invoker::invoke<BOOL, 0xF69CA4DDEF6E2A55, 0xD1A658>();
	}

	FORCEINLINE auto IS_FLOATING_HELP_TEXT_ON_SCREEN(int hudIndex)
	{
		return invoker::invoke<BOOL, 0xA2121FCB70A45B, 0xD1A084>(hudIndex);
	}

	FORCEINLINE auto SET_FLOATING_HELP_TEXT_SCREEN_POSITION(int hudIndex, float x, float y)
	{
		return invoker::invoke<void, 0xA0FE5620B9E43942, 0xD1E414>(hudIndex, x, y);
	}

	FORCEINLINE auto SET_FLOATING_HELP_TEXT_WORLD_POSITION(int hudIndex, float x, float y, float z)
	{
		return invoker::invoke<void, 0xF2095B7705BD9724, 0xD1E494>(hudIndex, x, y, z);
	}

	FORCEINLINE auto SET_FLOATING_HELP_TEXT_TO_ENTITY(int hudIndex, Entity entity, float offsetX, float offsetY)
	{
		return invoker::invoke<void, 0xC8E9EF71F45A1675, 0xD1E47C>(hudIndex, entity, offsetX, offsetY);
	}

	FORCEINLINE auto SET_FLOATING_HELP_TEXT_STYLE(int hudIndex, int p1, int p2, int p3, int p4, int p5)
	{
		return invoker::invoke<void, 0x2E651988A21FA54, 0xD1E448>(hudIndex, p1, p2, p3, p4, p5);
	}

	FORCEINLINE auto CLEAR_FLOATING_HELP(int hudIndex, BOOL p1)
	{
		return invoker::invoke<void, 0x665A7E873A6664BC, 0xD17B2C>(hudIndex, p1);
	}

	FORCEINLINE auto CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(Player player, const char* username, BOOL pointedClanTag, BOOL isRockstarClan, const char* clanTag, int clanFlag, int r, int g, int b)
	{
		return invoker::invoke<void, 0xBC529C919C370B10, 0xD17DCC>(player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag, r, g, b);
	}

	FORCEINLINE auto IS_MP_GAMER_TAG_MOVIE_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xED8AE340A9B5CF5, 0xD1A3C8>();
	}

	FORCEINLINE auto CREATE_FAKE_MP_GAMER_TAG(Ped ped, const char* username, BOOL pointedClanTag, BOOL isRockstarClan, const char* clanTag, int clanFlag)
	{
		return invoker::invoke<int, 0x2E4ECC451E3A3AD9, 0xD17CCC>(ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
	}

	FORCEINLINE auto REMOVE_MP_GAMER_TAG(int gamerTagId)
	{
		return invoker::invoke<void, 0xA18D0B8D61E559A0, 0xD1D90C>(gamerTagId);
	}

	FORCEINLINE auto IS_MP_GAMER_TAG_ACTIVE(int gamerTagId)
	{
		return invoker::invoke<BOOL, 0x2B627A77B9FC284E, 0xD1A380>(gamerTagId);
	}

	FORCEINLINE auto IS_MP_GAMER_TAG_FREE(int gamerTagId)
	{
		return invoker::invoke<BOOL, 0x7EF5C276218594E5, 0xD1A3A4>(gamerTagId);
	}

	FORCEINLINE auto SET_MP_GAMER_TAG_VISIBILITY(int gamerTagId, int component, BOOL toggle, Any p3)
	{
		return invoker::invoke<void, 0x7BD00A82CE7156C1, 0xD1E908>(gamerTagId, component, toggle, p3);
	}

	FORCEINLINE auto SET_ALL_MP_GAMER_TAGS_VISIBILITY(int gamerTagId, BOOL toggle)
	{
		return invoker::invoke<void, 0xB38A588ED5C50BBD, 0xD1DC20>(gamerTagId, toggle);
	}

	FORCEINLINE auto SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(int gamerTagId, BOOL toggle)
	{
		return invoker::invoke<void, 0x4E71BD4E0B8022F5, 0xD1E7E8>(gamerTagId, toggle);
	}

	FORCEINLINE auto SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(int gamerTagId, BOOL toggle)
	{
		return invoker::invoke<void, 0x9AADBEC7664AF43A, 0xD1E7C0>(gamerTagId, toggle);
	}

	FORCEINLINE auto SET_MP_GAMER_TAGS_POINT_HEALTH(int gamerTagId, int value, int maximumValue)
	{
		return invoker::invoke<void, 0x3BB39BA279D65666, 0xD1E798>(gamerTagId, value, maximumValue);
	}

	FORCEINLINE auto SET_MP_GAMER_TAG_COLOUR(int gamerTagId, int component, int hudColorIndex)
	{
		return invoker::invoke<void, 0xFEF57A04955B7213, 0xD1E860>(gamerTagId, component, hudColorIndex);
	}

	FORCEINLINE auto SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(int gamerTagId, int hudColorIndex)
	{
		return invoker::invoke<void, 0x46B70532CC643751, 0xD1E888>(gamerTagId, hudColorIndex);
	}

	FORCEINLINE auto SET_MP_GAMER_TAG_ALPHA(int gamerTagId, int component, int alpha)
	{
		return invoker::invoke<void, 0x4B82F311A9427C3F, 0xD1E810>(gamerTagId, component, alpha);
	}

	FORCEINLINE auto SET_MP_GAMER_TAG_WANTED_LEVEL(int gamerTagId, int wantedlvl)
	{
		return invoker::invoke<void, 0x9544C7327A08C661, 0xD1E940>(gamerTagId, wantedlvl);
	}

	FORCEINLINE auto SET_MP_GAMER_TAG_NUM_PACKAGES(int gamerTagId, int p1)
	{
		return invoker::invoke<void, 0x54BD99D8318FB02A, 0xD1E8D8>(gamerTagId, p1);
	}

	FORCEINLINE auto SET_MP_GAMER_TAG_NAME(int gamerTagId, const char* string)
	{
		return invoker::invoke<void, 0xABDAD35D3277104D, 0xD1E8B0>(gamerTagId, string);
	}

	FORCEINLINE auto IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(int gamerTagId)
	{
		return invoker::invoke<BOOL, 0xFF7D32FE4F34D7DD, 0xD1A7F0>(gamerTagId);
	}

	FORCEINLINE auto SET_MP_GAMER_TAG_BIG_TEXT(int gamerTagId, const char* string)
	{
		return invoker::invoke<void, 0xB418E0AF8C61B56D, 0xD1E838>(gamerTagId, string);
	}

	FORCEINLINE auto GET_CURRENT_WEBPAGE_ID()
	{
		return invoker::invoke<int, 0x216940DBDC6A74, 0xD18DC0>();
	}

	FORCEINLINE auto GET_CURRENT_WEBSITE_ID()
	{
		return invoker::invoke<int, 0x118B88D02A49C812, 0xD18DCC>();
	}

	FORCEINLINE auto GET_GLOBAL_ACTIONSCRIPT_FLAG(int flagIndex)
	{
		return invoker::invoke<int, 0x9E7C5ECC7DC530D0, 0xD18F08>(flagIndex);
	}

	FORCEINLINE auto RESET_GLOBAL_ACTIONSCRIPT_FLAG(int flagIndex)
	{
		return invoker::invoke<void, 0x2DD8C72847DFACDF, 0xD1DA74>(flagIndex);
	}

	FORCEINLINE auto IS_WARNING_MESSAGE_READY_FOR_CONTROL()
	{
		return invoker::invoke<BOOL, 0xFE2A21CD2B0A3547, 0xD1A844>();
	}

	FORCEINLINE auto SET_WARNING_MESSAGE(const char* titleMsg, int flags, const char* promptMsg, BOOL p3, int p4, const char* p5, const char* p6, BOOL showBackground, int errorCode)
	{
		return invoker::invoke<void, 0x7B1776B3B53F8D74, 0xD1EF40>(titleMsg, flags, promptMsg, p3, p4, p5, p6, showBackground, errorCode);
	}

	FORCEINLINE auto SET_WARNING_MESSAGE_WITH_HEADER(const char* entryHeader, const char* entryLine1, int instructionalKey, const char* entryLine2, BOOL p4, Any p5, Any* showBackground, Any* p7, BOOL p8, Any p9)
	{
		return invoker::invoke<void, 0xDC38CC1E35B6A5D7, 0xD1F004>(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, showBackground, p7, p8, p9);
	}

	FORCEINLINE auto SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(const char* entryHeader, const char* entryLine1, int instructionalKey, const char* entryLine2, BOOL p4, Any p5, Any additionalIntInfo, const char* additionalTextInfoLine1, const char* additionalTextInfoLine2, BOOL showBackground, int errorCode)
	{
		return invoker::invoke<void, 0x701919482C74B5AB, 0xD1F014>(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, additionalIntInfo, additionalTextInfoLine1, additionalTextInfoLine2, showBackground, errorCode);
	}

	FORCEINLINE auto SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(const char* entryHeader, const char* entryLine1, int flags, const char* entryLine2, BOOL p4, Any p5, Any* p6, Any* p7, BOOL showBg, Any p9, Any p10)
	{
		return invoker::invoke<void, 0x38B55259C2E078ED, 0xD1F034>(entryHeader, entryLine1, flags, entryLine2, p4, p5, p6, p7, showBg, p9, p10);
	}

	FORCEINLINE auto SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(const char* labelTitle, const char* labelMessage, int p2, int p3, const char* labelMessage2, BOOL p5, int p6, int p7, const char* p8, const char* p9, BOOL background, int errorCode)
	{
		return invoker::invoke<void, 0x15803FEC3B9A872B, 0xD1F024>(labelTitle, labelMessage, p2, p3, labelMessage2, p5, p6, p7, p8, p9, background, errorCode);
	}

	FORCEINLINE auto GET_WARNING_SCREEN_MESSAGE_HASH()
	{
		return invoker::invoke<Hash, 0xDA185E42FEAAF76B, 0xD19B40>();
	}

	FORCEINLINE auto SET_WARNING_MESSAGE_OPTION_ITEMS(int index, const char* name, int cash, int rp, int lvl, int colour)
	{
		return invoker::invoke<BOOL, 0xC5A80A9E096D529, 0xD1EFC4>(index, name, cash, rp, lvl, colour);
	}

	FORCEINLINE auto SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(Any p0)
	{
		return invoker::invoke<BOOL, 0x3E13E4D6100E6A83, 0xD1EFA0>(p0);
	}

	FORCEINLINE auto REMOVE_WARNING_MESSAGE_OPTION_ITEMS()
	{
		return invoker::invoke<void, 0x9716F9F525C4A03C, 0xD1D984>();
	}

	FORCEINLINE auto IS_WARNING_MESSAGE_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xB11671B812399BA2, 0xD1A828>();
	}

	FORCEINLINE auto CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE()
	{
		return invoker::invoke<void, 0x8606422BE9CB6EFC, 0xD17B1C>();
	}

	FORCEINLINE auto CUSTOM_MINIMAP_SET_ACTIVE(BOOL toggle)
	{
		return invoker::invoke<void, 0xACFD9F78275919B3, 0xD17E58>(toggle);
	}

	FORCEINLINE auto CUSTOM_MINIMAP_SET_BLIP_OBJECT(int spriteId)
	{
		return invoker::invoke<void, 0xBC6E3BF0E1E57442, 0xD17E70>(spriteId);
	}

	FORCEINLINE auto CUSTOM_MINIMAP_CREATE_BLIP(float x, float y, float z)
	{
		return invoker::invoke<int, 0xCD644A03314C3DF9, 0xD17E38>(x, y, z);
	}

	FORCEINLINE auto CUSTOM_MINIMAP_CLEAR_BLIPS()
	{
		return invoker::invoke<void, 0x4F44B8341D970185, 0xD17E2C>();
	}

	FORCEINLINE auto FORCE_SONAR_BLIPS_THIS_FRAME()
	{
		return invoker::invoke<BOOL, 0xF45E267C70ACE01A, 0xD1886C>();
	}

	FORCEINLINE auto GET_NORTH_BLID_INDEX()
	{
		return invoker::invoke<Blip, 0x8999FC36EFA332BC, 0xD195C0>();
	}

	FORCEINLINE auto DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(BOOL toggle)
	{
		return invoker::invoke<void, 0xC0BAEDD9DE7567B, 0xD18080>(toggle);
	}

	FORCEINLINE auto DRAW_FRONTEND_BACKGROUND_THIS_FRAME()
	{
		return invoker::invoke<void, 0xD3F7CB7571AD8BEB, 0x81A1C0>();
	}

	FORCEINLINE auto DRAW_HUD_OVER_FADE_THIS_FRAME()
	{
		return invoker::invoke<void, 0x91A048F886524873, 0xD181D4>();
	}

	FORCEINLINE auto ACTIVATE_FRONTEND_MENU(Hash menuhash, BOOL togglePause, int component)
	{
		return invoker::invoke<void, 0xBDBC487A0347C2C1, 0xD17364>(menuhash, togglePause, component);
	}

	FORCEINLINE auto RESTART_FRONTEND_MENU(Hash menuHash, int p1)
	{
		return invoker::invoke<void, 0x1E80216570AFBFC3, 0xD1DABC>(menuHash, p1);
	}

	FORCEINLINE auto GET_CURRENT_FRONTEND_MENU_VERSION()
	{
		return invoker::invoke<Hash, 0x470CC97DB37CB63B, 0xD18D7C>();
	}

	FORCEINLINE auto SET_PAUSE_MENU_ACTIVE(BOOL toggle)
	{
		return invoker::invoke<void, 0x915FA95E87D33FF5, 0xD1E9D0>(toggle);
	}

	FORCEINLINE auto DISABLE_FRONTEND_THIS_FRAME()
	{
		return invoker::invoke<void, 0x6C978B200DAA54DE, 0xD17F0C>();
	}

	FORCEINLINE auto SUPPRESS_FRONTEND_RENDERING_THIS_FRAME()
	{
		return invoker::invoke<void, 0xE58D20B611F7836C, 0xD1F3FC>();
	}

	FORCEINLINE auto ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME()
	{
		return invoker::invoke<void, 0x2AF77E50375C922F, 0xD176F0>();
	}

	FORCEINLINE auto SET_FRONTEND_ACTIVE(BOOL active)
	{
		return invoker::invoke<void, 0x7946F7681E9E1D79, 0xD1E4C0>(active);
	}

	FORCEINLINE auto IS_PAUSE_MENU_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x4D9174D8796EA622, 0xD1A498>();
	}

	FORCEINLINE auto IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN()
	{
		return invoker::invoke<BOOL, 0x4CEC1EF3DCEEDD1C, 0xD1A6D8>();
	}

	FORCEINLINE auto GET_PAUSE_MENU_STATE()
	{
		return invoker::invoke<int, 0x5AA183DA1344935, 0xD19710>();
	}

	FORCEINLINE auto GET_PAUSE_MENU_POSITION()
	{
		return invoker::invoke<Vector3, 0xE7DCCB6BBE933741, 0xD196CC>();
	}

	FORCEINLINE auto IS_PAUSE_MENU_RESTARTING()
	{
		return invoker::invoke<BOOL, 0xD3F2DA22950AB7F6, 0xD1A4BC>();
	}

	FORCEINLINE auto FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(const char* p0)
	{
		return invoker::invoke<void, 0xB1A3B2B046340845, 0x81A1C0>(p0);
	}

	FORCEINLINE auto PAUSE_MENUCEPTION_GO_DEEPER(int page)
	{
		return invoker::invoke<void, 0xB749E51D216834D8, 0xD1D444>(page);
	}

	FORCEINLINE auto PAUSE_MENUCEPTION_THE_KICK()
	{
		return invoker::invoke<void, 0x4CB2BC42A53598BA, 0xD1D450>();
	}

	FORCEINLINE auto PAUSE_TOGGLE_FULLSCREEN_MAP(Any p0)
	{
		return invoker::invoke<void, 0x437E61CD71AF1EBA, 0xD1D5C8>(p0);
	}

	FORCEINLINE auto PAUSE_MENU_ACTIVATE_CONTEXT(Hash contextHash)
	{
		return invoker::invoke<void, 0x9BC444D671469DCD, 0xD1D458>(contextHash);
	}

	FORCEINLINE auto PAUSE_MENU_DEACTIVATE_CONTEXT(Hash contextHash)
	{
		return invoker::invoke<void, 0xB4CD52D6B8305BD4, 0xD1D478>(contextHash);
	}

	FORCEINLINE auto PAUSE_MENU_IS_CONTEXT_ACTIVE(Hash contextHash)
	{
		return invoker::invoke<BOOL, 0xBFF989187F281795, 0xD1D518>(contextHash);
	}

	FORCEINLINE auto PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xDD222CF39CF79FE4, 0xD1D544>();
	}

	FORCEINLINE auto PAUSE_MENU_GET_HAIR_COLOUR_INDEX()
	{
		return invoker::invoke<int, 0xE5E00092E71FB6A1, 0xD1D498>();
	}

	FORCEINLINE auto PAUSE_MENU_GET_MOUSE_HOVER_INDEX()
	{
		return invoker::invoke<int, 0xF937D4DCF9CC1CF7, 0xD1D4E0>();
	}

	FORCEINLINE auto PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID()
	{
		return invoker::invoke<int, 0x4E537871D44AC56E, 0xD1D4FC>();
	}

	FORCEINLINE auto PAUSE_MENU_GET_MOUSE_CLICK_EVENT(Any* p0, Any* p1, Any* p2)
	{
		return invoker::invoke<BOOL, 0x7BB49823B96323C4, 0xD1D4B4>(p0, p1, p2);
	}

	FORCEINLINE auto PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(int p0)
	{
		return invoker::invoke<void, 0x3F85C0CA5FE1527D, 0xD1D560>(p0);
	}

	FORCEINLINE auto PAUSE_MENU_SET_BUSY_SPINNER(BOOL p0, int position, int spinnerIndex)
	{
		return invoker::invoke<void, 0x8307BFA58BB45ED9, 0xD1D56C>(p0, position, spinnerIndex);
	}

	FORCEINLINE auto PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(BOOL p0)
	{
		return invoker::invoke<void, 0x2FDCBFEEE3E1CA38, 0xD1D5A4>(p0);
	}

	FORCEINLINE auto IS_FRONTEND_READY_FOR_CONTROL()
	{
		return invoker::invoke<BOOL, 0x1CF551BF1611A6F6, 0xD1A0A8>();
	}

	FORCEINLINE auto TAKE_CONTROL_OF_FRONTEND()
	{
		return invoker::invoke<void, 0x26CE50366B7C2760, 0xD1F420>();
	}

	FORCEINLINE auto RELEASE_CONTROL_OF_FRONTEND()
	{
		return invoker::invoke<void, 0x9A6119E875538DA1, 0xD1D85C>();
	}

	FORCEINLINE auto CODE_WANTS_SCRIPT_TO_TAKE_CONTROL()
	{
		return invoker::invoke<BOOL, 0xB91865281BB9451B, 0xD17C6C>();
	}

	FORCEINLINE auto GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL()
	{
		return invoker::invoke<int, 0x2EE7F7571D5CF4C1, 0xD19A04>();
	}

	FORCEINLINE auto IS_NAVIGATING_MENU_CONTENT()
	{
		return invoker::invoke<BOOL, 0xBFF5E63E718E2059, 0xD1A454>();
	}

	FORCEINLINE auto HAS_MENU_TRIGGER_EVENT_OCCURRED()
	{
		return invoker::invoke<BOOL, 0x6462E92135CA5CC1, 0xD19CE8>();
	}

	FORCEINLINE auto HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED()
	{
		return invoker::invoke<BOOL, 0xA5BC2689B1DF62B, 0xD19CD8>();
	}

	FORCEINLINE auto SET_SAVEGAME_LIST_UNIQUE_ID(Any p0)
	{
		return invoker::invoke<void, 0xD86E372FF627C3B2, 0xD1EC48>(p0);
	}

	FORCEINLINE auto GET_MENU_TRIGGER_EVENT_DETAILS(int* lastItemMenuId, int* selectedItemUniqueId)
	{
		return invoker::invoke<void, 0xB6249BA74349F6AB, 0xD19450>(lastItemMenuId, selectedItemUniqueId);
	}

	FORCEINLINE auto GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(int* lastItemMenuId, int* selectedItemMenuId, int* selectedItemUniqueId)
	{
		return invoker::invoke<void, 0xE869B507D3624306, 0xD19394>(lastItemMenuId, selectedItemMenuId, selectedItemUniqueId);
	}

	FORCEINLINE auto GET_PM_PLAYER_CREW_COLOR(int* r, int* g, int* b)
	{
		return invoker::invoke<BOOL, 0x5412721BB04590F1, 0xD1972C>(r, g, b);
	}

	FORCEINLINE auto GET_MENU_PED_INT_STAT(Any p0, Any* p1)
	{
		return invoker::invoke<BOOL, 0x74484B0C0972EF8, 0xD193F8>(p0, p1);
	}

	FORCEINLINE auto GET_CHARACTER_MENU_PED_INT_STAT(Any p0, Any* p1, Any p2)
	{
		return invoker::invoke<BOOL, 0x97A3FD175F8D720C, 0xD18BF0>(p0, p1, p2);
	}

	FORCEINLINE auto GET_MENU_PED_MASKED_INT_STAT(Hash statHash, int* outValue, int mask, BOOL p3)
	{
		return invoker::invoke<BOOL, 0x77B8D5FD0CF3258F, 0xD19420>(statHash, outValue, mask, p3);
	}

	FORCEINLINE auto GET_CHARACTER_MENU_PED_MASKED_INT_STAT(Hash statHash, Any* outValue, int p2, int mask, BOOL p4)
	{
		return invoker::invoke<BOOL, 0x2D43CD41AC3330E1, 0xD18C1C>(statHash, outValue, p2, mask, p4);
	}

	FORCEINLINE auto GET_MENU_PED_FLOAT_STAT(Hash statHash, float* outValue)
	{
		return invoker::invoke<BOOL, 0xE1A5C172B921BBD6, 0xD193D0>(statHash, outValue);
	}

	FORCEINLINE auto GET_CHARACTER_MENU_PED_FLOAT_STAT(float statHash, float* outValue, BOOL p2)
	{
		return invoker::invoke<BOOL, 0xA3DF89A2303DA964, 0xD18BC4>(statHash, outValue, p2);
	}

	FORCEINLINE auto GET_MENU_PED_BOOL_STAT(Hash statHash, BOOL* outValue)
	{
		return invoker::invoke<BOOL, 0xE72DC686E764EE0F, 0xD193A8>(statHash, outValue);
	}

	FORCEINLINE auto CLEAR_PED_IN_PAUSE_MENU()
	{
		return invoker::invoke<void, 0x86CB46F43269108A, 0xD17BD0>();
	}

	FORCEINLINE auto GIVE_PED_TO_PAUSE_MENU(Ped ped, int p1)
	{
		return invoker::invoke<void, 0x1D16BFDD94C0AE8F, 0xD19BBC>(ped, p1);
	}

	FORCEINLINE auto SET_PAUSE_MENU_PED_LIGHTING(BOOL state)
	{
		return invoker::invoke<void, 0xA6B472383DA6AE23, 0xD1E9E0>(state);
	}

	FORCEINLINE auto SET_PAUSE_MENU_PED_SLEEP_STATE(BOOL state)
	{
		return invoker::invoke<void, 0xE98A31D3C1927ED6, 0xD1E9F0>(state);
	}

	FORCEINLINE auto OPEN_ONLINE_POLICIES_MENU()
	{
		return invoker::invoke<void, 0xCC1642C4C1CE902A, 0xD1D390>();
	}

	FORCEINLINE auto ARE_ONLINE_POLICIES_UP_TO_DATE()
	{
		return invoker::invoke<BOOL, 0xDD3EE6E5E154DB78, 0xD17718>();
	}

	FORCEINLINE auto IS_ONLINE_POLICIES_MENU_ACTIVE()
	{
		return invoker::invoke<BOOL, 0xEBBFE40DB22B29D2, 0xD1A6B8>();
	}

	FORCEINLINE auto OPEN_SOCIAL_CLUB_MENU(Hash menu)
	{
		return invoker::invoke<void, 0x20D7E34C22DC60AC, 0xD1D3B8>(menu);
	}

	FORCEINLINE auto CLOSE_SOCIAL_CLUB_MENU()
	{
		return invoker::invoke<void, 0x694DFE6467A01AAB, 0xD17C54>();
	}

	FORCEINLINE auto SET_SOCIAL_CLUB_TOUR(const char* name)
	{
		return invoker::invoke<void, 0xDA24B54CF6C0E8B8, 0xD1ED10>(name);
	}

	FORCEINLINE auto IS_SOCIAL_CLUB_ACTIVE()
	{
		return invoker::invoke<BOOL, 0x39E7796CCE4DC681, 0xD1A6B8>();
	}

	FORCEINLINE auto SET_TEXT_INPUT_BOX_ENABLED(BOOL p0)
	{
		return invoker::invoke<void, 0x19F42FEE708FB281, 0xD1EDF4>(p0);
	}

	FORCEINLINE auto FORCE_CLOSE_TEXT_INPUT_BOX()
	{
		return invoker::invoke<void, 0x11FFB143F448979C, 0xD18808>();
	}

	FORCEINLINE auto SET_ALLOW_COMMA_ON_TEXT_INPUT(Any p0)
	{
		return invoker::invoke<void, 0x283E9A39F4EE4D14, 0xD1DC08>(p0);
	}

	FORCEINLINE auto OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(Hash gxtEntryHash)
	{
		return invoker::invoke<void, 0xA9CB5BD48046EF42, 0xD1D410>(gxtEntryHash);
	}

	FORCEINLINE auto IS_MP_TEXT_CHAT_TYPING()
	{
		return invoker::invoke<BOOL, 0xF8EFC60132F8109F, 0xD1A3E4>();
	}

	FORCEINLINE auto CLOSE_MP_TEXT_CHAT()
	{
		return invoker::invoke<void, 0xBD166E025AF0A14, 0xD17C4C>();
	}

	FORCEINLINE auto MP_TEXT_CHAT_IS_TEAM_JOB(Any p0)
	{
		return invoker::invoke<void, 0x5C381D09C558ACD0, 0xD1A9E8>(p0);
	}

	FORCEINLINE auto OVERRIDE_MP_TEXT_CHAT_COLOR(int p0, int hudColor)
	{
		return invoker::invoke<void, 0x7F29E8664304CDA7, 0xD1D3E8>(p0, hudColor);
	}

	FORCEINLINE auto MP_TEXT_CHAT_DISABLE(BOOL toggle)
	{
		return invoker::invoke<void, 0xF111804437599169, 0xD1A9CC>(toggle);
	}

	FORCEINLINE auto FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(BOOL toggle)
	{
		return invoker::invoke<void, 0x622323CECEB8593D, 0xD1879C>(toggle);
	}

	FORCEINLINE auto SET_PED_HAS_AI_BLIP(Ped ped, BOOL hasCone)
	{
		return invoker::invoke<void, 0x2BF2F8E20C19583C, 0xD1EA58>(ped, hasCone);
	}

	FORCEINLINE auto SET_PED_HAS_AI_BLIP_WITH_COLOUR(Ped ped, BOOL hasCone, int color)
	{
		return invoker::invoke<void, 0xF42995E2FC0559E0, 0xD1EA6C>(ped, hasCone, color);
	}

	FORCEINLINE auto DOES_PED_HAVE_AI_BLIP(Ped ped)
	{
		return invoker::invoke<BOOL, 0xA23AABF378361F85, 0xD1810C>(ped);
	}

	FORCEINLINE auto SET_PED_AI_BLIP_GANG_ID(Ped ped, int gangId)
	{
		return invoker::invoke<void, 0x8B185FD7C0308117, 0xD1EA14>(ped, gangId);
	}

	FORCEINLINE auto SET_PED_AI_BLIP_HAS_CONE(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0x2A253D5DC7CA1CEC, 0xD1EA24>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_AI_BLIP_FORCED_ON(Ped ped, BOOL toggle)
	{
		return invoker::invoke<void, 0xB070F32F5FE88A2A, 0xD1EA00>(ped, toggle);
	}

	FORCEINLINE auto SET_PED_AI_BLIP_NOTICE_RANGE(Ped ped, float range)
	{
		return invoker::invoke<void, 0x9FFBD1A17AAE3E0D, 0xD1EA38>(ped, range);
	}

	FORCEINLINE auto SET_PED_AI_BLIP_SPRITE(Ped ped, int spriteId)
	{
		return invoker::invoke<void, 0x12022943BDF6F088, 0xD1EA48>(ped, spriteId);
	}

	FORCEINLINE auto GET_AI_PED_PED_BLIP_INDEX(Ped ped)
	{
		return invoker::invoke<Blip, 0xA95E5FB2D27EECF2, 0xD18874>(ped);
	}

	FORCEINLINE auto GET_AI_PED_VEHICLE_BLIP_INDEX(Ped ped)
	{
		return invoker::invoke<Blip, 0x294B0261C20A78E0, 0xD18894>(ped);
	}

	FORCEINLINE auto HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE()
	{
		return invoker::invoke<BOOL, 0x97246390EF16DFC3, 0xD19CB8>();
	}

	FORCEINLINE auto SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT()
	{
		return invoker::invoke<void, 0x1DC460B8E8F5A142, 0xD1E2B0>();
	}

	FORCEINLINE auto SET_PLAYER_IS_IN_DIRECTOR_MODE(BOOL toggle)
	{
		return invoker::invoke<void, 0x8BF557F9256B2A6E, 0xD1EAA4>(toggle);
	}

	FORCEINLINE auto SET_DIRECTOR_MODE_AVAILABLE(BOOL toggle)
	{
		return invoker::invoke<void, 0x38236280C567C045, 0xD1E2A0>(toggle);
	}

	FORCEINLINE auto HIDE_HUDMARKERS_THIS_FRAME()
	{
		return invoker::invoke<void, 0x7D2CDF366EDD8ADD, 0xD19DCC>();
	}

}
